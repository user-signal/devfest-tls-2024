<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:WatchService [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:WatchService"/><ul class="blockList"><li class="blockList"><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../../java/io/Closeable.html" title="interface in java.io">Closeable</a>  </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">WatchService</span>
extends <a href="../../../java/io/Closeable.html" title="interface in java.io">Closeable</a></pre><div class="block">A watch service that <em>watches</em> registered objects for changes and events. For example a file manager may use a watch service to monitor a directory for changes so that it can update its display of the list of files when files are created or deleted.<p> A <a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file"><code>Watchable</code></a> object is registered with a watch service by invoking its <a href="../../../java/nio/file/Watchable.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-"><code>register</code></a> method, returning a <a href="../../../java/nio/file/WatchKey.html" title="interface in java.nio.file"><code>WatchKey</code></a> to represent the registration. When an event for an object is detected the key is <em>signalled</em>, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the <a href="../../../java/nio/file/WatchService.html#poll--"><code>poll</code></a> or <a href="../../../java/nio/file/WatchService.html#take--"><code>take</code></a> methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's <a href="../../../java/nio/file/WatchKey.html#reset--"><code>reset</code></a> method to reset the key which allows the key to be signalled and re-queued with further events.                                                                                               </p><p> Registration with a watch service is cancelled by invoking the key's <a href="../../../java/nio/file/WatchKey.html#cancel--"><code>cancel</code></a> method. A key that is queued at the time that it is cancelled remains in the queue until it is retrieved. Depending on the object, a key may be cancelled automatically. For example, suppose a directory is watched and the watch service detects that it has been deleted or its file system is no longer accessible. When a key is cancelled in this manner it is signalled and queued, if not currently signalled. To ensure that the consumer is notified the return value from the <code>reset</code> method indicates if the key is valid.                                                                                                         </p><p> A watch service is safe for use by multiple concurrent consumers. To ensure that only one consumer processes the events for a particular object at any time then care should be taken to ensure that the key's <code>reset</code> method is only invoked after its events have been processed. The <a href="../../../java/nio/file/WatchService.html#close--"><code>close</code></a> method may be invoked at any time to close the service causing any threads waiting to retrieve keys, to throw <code>ClosedWatchServiceException</code>.                                                                       </p><p> File systems may report events faster than they can be retrieved or processed and an implementation may impose an unspecified limit on the number of events that it may accumulate. Where an implementation <em>knowingly</em> discards events then it arranges for the key's <a href="../../../java/nio/file/WatchKey.html#pollEvents--"><code>pollEvents</code></a> method to return an element with an event type of <a href="../../../java/nio/file/StandardWatchEventKinds.html#OVERFLOW"><code>OVERFLOW</code></a>. This event can be used by the consumer as a trigger to re-examine the state of the object.                                                                        </p><p> When an event is reported to indicate that a file in a watched directory has been modified then there is no guarantee that the program (or programs) that have modified the file have completed. Care should be taken to coordinate access with other programs that may be updating the file. The <a href="../../../java/nio/channels/FileChannel.html" title="class in java.nio.channels"><code>FileChannel</code></a> class defines methods to lock regions of a file against access by other programs.                                                                  </p><h2>Platform dependencies </h2><p> The implementation that observes events from the file system is intended to map directly on to the native file event notification facility where available, or to use a primitive mechanism, such as polling, when a native facility is not available. Consequently, many of the details on how events are detected, their timeliness, and whether their ordering is preserved are highly implementation specific. For example, when a file in a watched directory is modified then it may result in a single <a href="../../../java/nio/file/StandardWatchEventKinds.html#ENTRY_MODIFY"><code>ENTRY_MODIFY</code></a> event in some implementations but several events in other implementations. Short-lived files (meaning files that are deleted very quickly after they are created) may not be detected by primitive implementations that periodically poll the file system to detect changes.                                                                                                                        </p><p> If a watched file is not located on a local storage device then it is implementation specific if changes to the file can be detected. In particular, it is not required that changes to files carried out on remote systems be detected.                                          </p>                                            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/FileSystem.html#newWatchService--"><code>FileSystem.newWatchService()</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:WatchService"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>void close()
    throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this watch service.<p> If a thread is currently blocked in the <a href="../../../java/nio/file/WatchService.html#take--"><code>take</code></a> or <a href="../../../java/nio/file/WatchService.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a> methods waiting for a key to be queued then it immediately receives a <a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file"><code>ClosedWatchServiceException</code></a>. Any valid keys associated with this watch service are <a href="../../../java/nio/file/WatchKey.html#isValid--"><code>invalidated</code></a>.                                   </p><p> After a watch service is closed, any further attempt to invoke operations upon it will throw <a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file"><code>ClosedWatchServiceException</code></a>. If this watch service is already closed then invoking this method has no effect.                               </p>   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll--"/><a name="poll--"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre><a href="../../../java/nio/file/WatchKey.html" title="interface in java.nio.file">WatchKey</a> poll()</pre><div class="block">Retrieves and removes the next watch key, or <code>null</code> if none are present.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next watch key, or <code>null</code>     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file">ClosedWatchServiceException</a></code> - if this watch service is closed        </dd>  </dl></li></ul> <a end_ctx_id="method:poll--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/><a name="poll-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre><a href="../../../java/nio/file/WatchKey.html" title="interface in java.nio.file">WatchKey</a> poll(long timeout,
              <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - how to wait before giving up, in units of unit            </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the timeout parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next watch key, or <code>null</code>     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file">ClosedWatchServiceException</a></code> - if this watch service is closed, or it is closed while waiting for the next key                  </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:take-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:take--"/><a name="take--"/><ul class="blockListLast"><li class="blockList"><h4>take</h4><pre><a href="../../../java/nio/file/WatchKey.html" title="interface in java.nio.file">WatchKey</a> take()
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Retrieves and removes next watch key, waiting if none are yet present.           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next watch key   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file">ClosedWatchServiceException</a></code> - if this watch service is closed, or it is closed while waiting for the next key                  </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>  </dl></li></ul> <a end_ctx_id="method:take--"/>  </td></tr></table></td></tr></table></diff></diffreport>