<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Paths [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Paths"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public final class <span class="typeNameLabel">Paths</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class consists exclusively of static methods that return a <a href="../../../java/nio/file/Path.html" title="interface in java.nio.file"><code>Path</code></a> by converting a path string or <a href="../../../java/net/URI.html" title="class in java.net"><code>URI</code></a>.                 </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Paths"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-java.lang.String...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-java.lang.String...-"/><a name="get-java.lang.String-java.lang.String...-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public static <a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> get(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> first,
                       <a href="../../../java/lang/String.html" title="class in java.lang">String</a>... more)</pre><div class="block">Converts a path string, or a sequence of strings that when joined form a path string, to a <code>Path</code>. If <code>more</code> does not specify any elements then the value of the <code>first</code> parameter is the path string to convert. If <code>more</code> specifies one or more elements then each non-empty string, including <code>first</code>, is considered to be a sequence of name elements (see <a href="../../../java/nio/file/Path.html" title="interface in java.nio.file"><code>Path</code></a>) and is joined to form a path string. The details as to how the Strings are joined is provider specific but typically they will be joined using the <a href="../../../java/nio/file/FileSystem.html#getSeparator--"><code>name-separator</code></a> as the separator. For example, if the name separator is "<code>/</code>" and <code>getPath("/foo","bar","gus")</code> is invoked, then the path string <code>"/foo/bar/gus"</code> is converted to a <code>Path</code>. A <code>Path</code> representing an empty path is returned if <code>first</code> is the empty string and <code>more</code> does not contain any non-empty strings.<p> The <code>Path</code> is obtained by invoking the <a href="../../../java/nio/file/FileSystem.html#getPath-java.lang.String-java.lang.String...-"><code>getPath</code></a> method of the <a href="../../../java/nio/file/FileSystems.html#getDefault--"><code>default</code></a><a href="../../../java/nio/file/FileSystem.html" title="class in java.nio.file"><code>FileSystem</code></a>.            </p><p> Note that while this method is very convenient, using it will imply an assumed reference to the default <code>FileSystem</code> and limit the utility of the calling code. Hence it should not be used in library code intended for flexible reuse. A more flexible alternative is to use an existing <code>Path</code> instance as an anchor, such as:<pre>
     Path dir = ...
     Path path = dir.resolve("file");
 </pre>                                                        </p>                                                                                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>first</code> - the path string or initial part of the path string            </dd><dd> <code>more</code> - additional strings to be joined to form the path string            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting <code>Path</code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/InvalidPathException.html" title="class in java.nio.file">InvalidPathException</a></code> - if the path string cannot be converted to a <code>Path</code>            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/FileSystem.html#getPath-java.lang.String-java.lang.String...-"><code>FileSystem.getPath(java.lang.String, java.lang.String...) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-java.lang.String...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.net.URI- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.net.URI-"/><a name="get-java.net.URI-"/><ul class="blockListLast"><li class="blockList"><h4>get</h4><pre>public static <a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> get(<a href="../../../java/net/URI.html" title="class in java.net">URI</a> uri)</pre><div class="block">Converts the given URI to a <a href="../../../java/nio/file/Path.html" title="interface in java.nio.file"><code>Path</code></a> object.<p> This method iterates over the <a href="../../../java/nio/file/spi/FileSystemProvider.html#installedProviders--"><code>installed</code></a> providers to locate the provider that is identified by the URI <a href="../../../java/net/URI.html#getScheme--"><code>scheme</code></a> of the given URI. URI schemes are compared without regard to case. If the provider is found then its <a href="../../../java/nio/file/spi/FileSystemProvider.html#getPath-java.net.URI-"><code>getPath</code></a> method is invoked to convert the URI.                                             </p><p> In the case of the default provider, identified by the URI scheme "file", the given URI has a non-empty path component, and undefined query and fragment components. Whether the authority component may be present is platform specific. The returned <code>Path</code> is associated with the <a href="../../../java/nio/file/FileSystems.html#getDefault--"><code>default</code></a> file system.                                               </p><p> The default provider provides a similar <em>round-trip</em> guarantee to the <a href="../../../java/io/File.html" title="class in java.io"><code>File</code></a> class. For a given <code>Path</code><i>p</i> it is guaranteed that                    </p><blockquote> <tt> Paths.get( </tt><i>p</i><tt>.<a href="../../../java/nio/file/Path.html#toUri--"><code>toUri</code></a>()).equals(</tt><i>p</i><tt>.<a href="../../../java/nio/file/Path.html#toAbsolutePath--"><code>toAbsolutePath</code></a>())</tt> </blockquote> so long as the original <code>Path</code>, the <code>URI</code>, and the new <code>Path</code> are all created in (possibly different invocations of) the same Java virtual machine. Whether other providers make any guarantees is provider specific and therefore unspecified.                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>uri</code> - the URI to convert      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting <code>Path</code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if preconditions on the <code>uri</code> parameter do not hold. The format of the URI is provider specific.                   </dd><dd> <code><a href="../../../java/nio/file/FileSystemNotFoundException.html" title="class in java.nio.file">FileSystemNotFoundException</a></code> - The file system, identified by the URI, does not exist and cannot be created automatically, or the provider identified by the URI's scheme component is not installed                             </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager is installed and it denies an unspecified permission to access the file system                   </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.net.URI-"/>  </td></tr></table></td></tr></table></diff></diffreport>