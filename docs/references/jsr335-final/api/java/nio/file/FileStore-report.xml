<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:FileStore [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:FileStore"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">FileStore</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">Storage for files. A <code>FileStore</code> represents a storage pool, device, partition, volume, concrete file system or other implementation specific means of file storage. The <code>FileStore</code> for where a file is stored is obtained by invoking the <a href="../../../java/nio/file/Files.html#getFileStore-java.nio.file.Path-"><code>getFileStore</code></a> method, or all file stores can be enumerated by invoking the <a href="../../../java/nio/file/FileSystem.html#getFileStores--"><code>getFileStores</code></a> method.<p> In addition to the methods defined by this class, a file store may support one or more <a href="../../../java/nio/file/attribute/FileStoreAttributeView.html" title="interface in java.nio.file.attribute"><code>FileStoreAttributeView</code></a> classes that provide a read-only or updatable view of a set of file store attributes.                                 </p>                                                 </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:FileStore"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FileStore-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FileStore--"/><a name="FileStore--"/><ul class="blockListLast"><li class="blockList"><h4>FileStore</h4><pre>protected FileStore()</pre><div class="block">Initializes a new instance of this class.      </div></li></ul> <a end_ctx_id="constructor:FileStore--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:name-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:name--"/><a name="name--"/><ul class="blockList"><li class="blockList"><h4>name</h4><pre>public abstract <a href="../../../java/lang/String.html" title="class in java.lang">String</a> name()</pre><div class="block">Returns the name of this file store. The format of the name is highly implementation specific. It will typically be the name of the storage pool or volume.<p> The string returned by this method may differ from the string returned by the <a href="../../../java/lang/Object.html#toString--"><code>toString</code></a> method.                </p>                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the name of this file store     </dd> </dl></li></ul> <a end_ctx_id="method:name--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:type-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:type--"/><a name="type--"/><ul class="blockList"><li class="blockList"><h4>type</h4><pre>public abstract <a href="../../../java/lang/String.html" title="class in java.lang">String</a> type()</pre><div class="block">Returns the <em>type</em> of this file store. The format of the string returned by this method is highly implementation specific. It may indicate, for example, the format used or if the file store is local or remote.                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representing the type of this file store        </dd> </dl></li></ul> <a end_ctx_id="method:type--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isReadOnly-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isReadOnly--"/><a name="isReadOnly--"/><ul class="blockList"><li class="blockList"><h4>isReadOnly</h4><pre>public abstract boolean isReadOnly()</pre><div class="block">Tells whether this file store is read-only. A file store is read-only if it does not support write operations or other changes to files. Any attempt to create a file, open an existing file for writing etc. causes an <code>IOException</code> to be thrown.                                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if, and only if, this file store is read-only          </dd> </dl></li></ul> <a end_ctx_id="method:isReadOnly--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getTotalSpace-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getTotalSpace--"/><a name="getTotalSpace--"/><ul class="blockList"><li class="blockList"><h4>getTotalSpace</h4><pre>public abstract long getTotalSpace()
                            throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the size, in bytes, of the file store.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the size of the file store, in bytes       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>  </dl></li></ul> <a end_ctx_id="method:getTotalSpace--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getUsableSpace-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getUsableSpace--"/><a name="getUsableSpace--"/><ul class="blockList"><li class="blockList"><h4>getUsableSpace</h4><pre>public abstract long getUsableSpace()
                             throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the number of bytes available to this Java virtual machine on the file store.<p> The returned number of available bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of usable bytes is most likely to be accurate immediately after the space attributes are obtained. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this Java virtual machine.                                                                   </p>              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of bytes available    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>  </dl></li></ul> <a end_ctx_id="method:getUsableSpace--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getUnallocatedSpace-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getUnallocatedSpace--"/><a name="getUnallocatedSpace--"/><ul class="blockList"><li class="blockList"><h4>getUnallocatedSpace</h4><pre>public abstract long getUnallocatedSpace()
                                  throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the number of unallocated bytes in the file store.<p> The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after the space attributes are obtained. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine.                                                                  </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of unallocated bytes    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>  </dl></li></ul> <a end_ctx_id="method:getUnallocatedSpace--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:supportsFileAttributeView-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:supportsFileAttributeView-java.lang.Class-"/><a name="supportsFileAttributeView-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>supportsFileAttributeView</h4><pre>public abstract boolean supportsFileAttributeView(<a href="../../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;? extends <a href="../../../java/nio/file/attribute/FileAttributeView.html" title="interface in java.nio.file.attribute">FileAttributeView</a>&gt; type)</pre><div class="block">Tells whether or not this file store supports the file attributes identified by the given file attribute view.<p> Invoking this method to test if the file store supports <a href="../../../java/nio/file/attribute/BasicFileAttributeView.html" title="interface in java.nio.file.attribute"><code>BasicFileAttributeView</code></a> will always return <code>true</code>. In the case of the default provider, this method cannot guarantee to give the correct result when the file store is not a local storage device. The reasons for this are implementation specific and therefore unspecified.                                                   </p>                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>type</code> - the file attribute view type       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if, and only if, the file attribute view is supported           </dd>  </dl></li></ul> <a end_ctx_id="method:supportsFileAttributeView-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:supportsFileAttributeView-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:supportsFileAttributeView-java.lang.String-"/><a name="supportsFileAttributeView-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>supportsFileAttributeView</h4><pre>public abstract boolean supportsFileAttributeView(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Tells whether or not this file store supports the file attributes identified by the given file attribute view.<p> Invoking this method to test if the file store supports <a href="../../../java/nio/file/attribute/BasicFileAttributeView.html" title="interface in java.nio.file.attribute"><code>BasicFileAttributeView</code></a>, identified by the name "<code>basic</code>" will always return <code>true</code>. In the case of the default provider, this method cannot guarantee to give the correct result when the file store is not a local storage device. The reasons for this are implementation specific and therefore unspecified.                                                        </p>                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the <a href="../../../java/nio/file/attribute/AttributeView.html#name--"><code>name</code></a> of file attribute view        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if, and only if, the file attribute view is supported           </dd>  </dl></li></ul> <a end_ctx_id="method:supportsFileAttributeView-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFileStoreAttributeView-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFileStoreAttributeView-java.lang.Class-"/><a name="getFileStoreAttributeView-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>getFileStoreAttributeView</h4><pre>public abstract &lt;V extends <a href="../../../java/nio/file/attribute/FileStoreAttributeView.html" title="interface in java.nio.file.attribute">FileStoreAttributeView</a>&gt; V getFileStoreAttributeView(<a href="../../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;V&gt; type)</pre><div class="block">Returns a <code>FileStoreAttributeView</code> of the given type.<p> This method is intended to be used where the file store attribute view defines type-safe methods to read or update the file store attributes. The <code>type</code> parameter is the type of the attribute view required and the method returns an instance of that type if supported.                                              </p>      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>V</code> - The <code>FileStoreAttributeView</code> type     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>type</code> - the <code>Class</code> object corresponding to the attribute view          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a file store attribute view of the specified type or <code>null</code> if the attribute view is not available                 </dd>   </dl></li></ul> <a end_ctx_id="method:getFileStoreAttributeView-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getAttribute-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getAttribute-java.lang.String-"/><a name="getAttribute-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>getAttribute</h4><pre>public abstract <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> getAttribute(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> attribute)
                             throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads the value of a file store attribute.<p> The <code>attribute</code> parameter identifies the attribute to be read and takes the form:             </p><blockquote> <i>view-name</i><b>:</b><i>attribute-name</i> </blockquote> where the character <code>':'</code> stands for itself.<p> <i>view-name</i> is the <a href="../../../java/nio/file/attribute/AttributeView.html#name--"><code>name</code></a> of a <a href="../../../java/nio/file/FileStore.html" title="class in java.nio.file"><code>AttributeView</code></a> that identifies a set of file attributes. <i>attribute-name</i> is the name of the attribute.                     </p><p> <b>Usage Example: </b> Suppose we want to know if ZFS compression is enabled (assuming the "zfs" view is supported):<pre>
    boolean compression = (Boolean)fs.getAttribute("zfs:compression");
 </pre>                 </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>attribute</code> - the attribute to read      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the attribute value; <code>null</code> may be a valid valid for some attributes           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the attribute view is not available or it does not support reading the attribute                 </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:getAttribute-java.lang.String-"/>  </td></tr></table></td></tr></table></diff></diffreport>