<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:FileVisitor [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:FileVisitor"/><ul class="blockList"><li class="blockList"><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../../java/nio/file/SimpleFileVisitor.html" title="class in java.nio.file">SimpleFileVisitor</a> </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">FileVisitor&lt;T&gt;</span></pre><div class="block">A visitor of files. An implementation of this interface is provided to the <a href="../../../java/nio/file/Files.html#walkFileTree-java.nio.file.Path-java.util.Set-int-java.nio.file.FileVisitor-"><code>Files.walkFileTree</code></a> methods to visit each file in a file tree.<p> <b>Usage Examples: </b> Suppose we want to delete a file tree. In that case, each directory should be deleted after the entries in the directory are deleted.<pre>
     Path start = ...
     Files.walkFileTree(start, new SimpleFileVisitor&lt;Path&gt;() {
         @Override
         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
             throws IOException
         {
             Files.delete(file);
             return FileVisitResult.CONTINUE;
         }
         @Override
         public FileVisitResult postVisitDirectory(Path dir, IOException e)
             throws IOException
         {
             if (e == null) {
                 Files.delete(dir);
                 return FileVisitResult.CONTINUE;
             } else {
                 // directory iteration failed
                 throw e;
             }
         }
     });
 </pre>                         </p><p> Furthermore, suppose we want to copy a file tree to a target location. In that case, symbolic links should be followed and the target directory should be created before the entries in the directory are copied.<pre>
     final Path source = ...
     final Path target = ...

     Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,
         new SimpleFileVisitor&lt;Path&gt;() {
             @Override
             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                 throws IOException
             {
                 Path targetdir = target.resolve(source.relativize(dir));
                 try {
                     Files.copy(dir, targetdir);
                 } catch (FileAlreadyExistsException e) {
                      if (!Files.isDirectory(targetdir))
                          throw e;
                 }
                 return CONTINUE;
             }
             @Override
             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                 throws IOException
             {
                 Files.copy(file, target.resolve(source.relativize(file)));
                 return CONTINUE;
             }
         });
 </pre>                                    </p>                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:FileVisitor"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:preVisitDirectory-T-java.nio.file.attribute.BasicFileAttributes- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:preVisitDirectory-T-java.nio.file.attribute.BasicFileAttributes-"/><a name="preVisitDirectory-T-java.nio.file.attribute.BasicFileAttributes-"/><ul class="blockList"><li class="blockList"><h4>preVisitDirectory</h4><pre><a href="../../../java/nio/file/FileVisitResult.html" title="enum in java.nio.file">FileVisitResult</a> preVisitDirectory(<a href="../../../java/nio/file/FileVisitor.html" title="type parameter in FileVisitor">T</a> dir,
                                  <a href="../../../java/nio/file/attribute/BasicFileAttributes.html" title="interface in java.nio.file.attribute">BasicFileAttributes</a> attrs)
                           throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Invoked for a directory before entries in the directory are visited.<p> If this method returns <a href="../../../java/nio/file/FileVisitResult.html#CONTINUE"><code>CONTINUE</code></a>, then entries in the directory are visited. If this method returns <a href="../../../java/nio/file/FileVisitResult.html#SKIP_SUBTREE"><code>SKIP_SUBTREE</code></a> or <a href="../../../java/nio/file/FileVisitResult.html#SKIP_SIBLINGS"><code>SKIP_SIBLINGS</code></a> then entries in the directory (and any descendants) will not be visited.                               </p>          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>dir</code> - a reference to the directory       </dd><dd> <code>attrs</code> - the directory's basic attributes      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the visit result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>   </dl></li></ul> <a name="visitFile-java.lang.Object-java.nio.file.attribute.BasicFileAttributes-"/><a end_ctx_id="method:preVisitDirectory-T-java.nio.file.attribute.BasicFileAttributes-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:visitFile-T-java.nio.file.attribute.BasicFileAttributes- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:visitFile-T-java.nio.file.attribute.BasicFileAttributes-"/><a name="visitFile-T-java.nio.file.attribute.BasicFileAttributes-"/><ul class="blockList"><li class="blockList"><h4>visitFile</h4><pre><a href="../../../java/nio/file/FileVisitResult.html" title="enum in java.nio.file">FileVisitResult</a> visitFile(<a href="../../../java/nio/file/FileVisitor.html" title="type parameter in FileVisitor">T</a> file,
                          <a href="../../../java/nio/file/attribute/BasicFileAttributes.html" title="interface in java.nio.file.attribute">BasicFileAttributes</a> attrs)
                   throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Invoked for a file in a directory.      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - a reference to the file       </dd><dd> <code>attrs</code> - the file's basic attributes      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the visit result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>   </dl></li></ul> <a name="visitFileFailed-java.lang.Object-java.io.IOException-"/><a end_ctx_id="method:visitFile-T-java.nio.file.attribute.BasicFileAttributes-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:visitFileFailed-T-java.io.IOException- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:visitFileFailed-T-java.io.IOException-"/><a name="visitFileFailed-T-java.io.IOException-"/><ul class="blockList"><li class="blockList"><h4>visitFileFailed</h4><pre><a href="../../../java/nio/file/FileVisitResult.html" title="enum in java.nio.file">FileVisitResult</a> visitFileFailed(<a href="../../../java/nio/file/FileVisitor.html" title="type parameter in FileVisitor">T</a> file,
                                <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a> exc)
                         throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Invoked for a file that could not be visited. This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - a reference to the file       </dd><dd> <code>exc</code> - the I/O exception that prevented the file from being visited            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the visit result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>   </dl></li></ul> <a name="postVisitDirectory-java.lang.Object-java.io.IOException-"/><a end_ctx_id="method:visitFileFailed-T-java.io.IOException-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:postVisitDirectory-T-java.io.IOException- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:postVisitDirectory-T-java.io.IOException-"/><a name="postVisitDirectory-T-java.io.IOException-"/><ul class="blockListLast"><li class="blockList"><h4>postVisitDirectory</h4><pre><a href="../../../java/nio/file/FileVisitResult.html" title="enum in java.nio.file">FileVisitResult</a> postVisitDirectory(<a href="../../../java/nio/file/FileVisitor.html" title="type parameter in FileVisitor">T</a> dir,
                                   <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a> exc)
                            throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Invoked for a directory after entries in the directory, and all of their descendants, have been visited. This method is also invoked when iteration of the directory completes prematurely (by a <a href="../../../java/nio/file/FileVisitor.html#visitFile-T-java.nio.file.attribute.BasicFileAttributes-"><code>visitFile</code></a> method returning <a href="../../../java/nio/file/FileVisitResult.html#SKIP_SIBLINGS"><code>SKIP_SIBLINGS</code></a>, or an I/O error when iterating over the directory).                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>dir</code> - a reference to the directory       </dd><dd> <code>exc</code> - <code>null</code> if the iteration of the directory completes without an error; otherwise the I/O exception that caused the iteration of the directory to complete prematurely                           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the visit result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:postVisitDirectory-T-java.io.IOException-"/>  </td></tr></table></td></tr></table></diff></diffreport>