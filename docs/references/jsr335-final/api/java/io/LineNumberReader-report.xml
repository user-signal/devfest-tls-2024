<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:LineNumberReader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:LineNumberReader"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a>   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">LineNumberReader</span>
extends <a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></pre><div class="block">A buffered character-input stream that keeps track of line numbers. This class defines methods <a href="../../java/io/LineNumberReader.html#setLineNumber-int-"><code>setLineNumber(int)</code></a> and <a href="../../java/io/LineNumberReader.html#getLineNumber--"><code>getLineNumber()</code></a> for setting and getting the current line number respectively.<p> By default, line numbering begins at 0. This number increments at every <a href="#lt">line terminator </a> as the data is read, and can be changed with a call to <tt>setLineNumber(int)</tt>. Note however, that <tt>setLineNumber(int)</tt> does not actually change the current position in the stream; it only changes the value that will be returned by <tt>getLineNumber()</tt>.                                                    </p><p> A line is considered to be <a name="lt">terminated</a> by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a linefeed.                            </p>                         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:LineNumberReader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LineNumberReader-java.io.Reader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LineNumberReader-java.io.Reader-"/><a name="LineNumberReader-java.io.Reader-"/><ul class="blockList"><li class="blockList"><h4>LineNumberReader</h4><pre>public LineNumberReader(<a href="../../java/io/Reader.html" title="class in java.io">Reader</a> in)</pre><div class="block">Create a new line-numbering reader, using the default input-buffer size.         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - A Reader object to provide the underlying stream          </dd> </dl></li></ul> <a end_ctx_id="constructor:LineNumberReader-java.io.Reader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LineNumberReader-java.io.Reader-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LineNumberReader-java.io.Reader-int-"/><a name="LineNumberReader-java.io.Reader-int-"/><ul class="blockListLast"><li class="blockList"><h4>LineNumberReader</h4><pre>public LineNumberReader(<a href="../../java/io/Reader.html" title="class in java.io">Reader</a> in,
                        int sz)</pre><div class="block">Create a new line-numbering reader, reading characters into a buffer of the given size.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - A Reader object to provide the underlying stream          </dd><dd> <code>sz</code> - An int specifying the size of the buffer          </dd> </dl></li></ul> <a end_ctx_id="constructor:LineNumberReader-java.io.Reader-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setLineNumber-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setLineNumber-int-"/><a name="setLineNumber-int-"/><ul class="blockList"><li class="blockList"><h4>setLineNumber</h4><pre>public void setLineNumber(int lineNumber)</pre><div class="block">Set the current line number.    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>lineNumber</code> - An int specifying the line number        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/LineNumberReader.html#getLineNumber--"><code>getLineNumber()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:setLineNumber-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLineNumber-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLineNumber--"/><a name="getLineNumber--"/><ul class="blockList"><li class="blockList"><h4>getLineNumber</h4><pre>public int getLineNumber()</pre><div class="block">Get the current line number.    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The current line number   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/LineNumberReader.html#setLineNumber-int-"><code>setLineNumber(int)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getLineNumber--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Read a single character. <a href="#lt">Line terminators </a> are compressed into single newline ('\n') characters. Whenever a line terminator is read the current line number is incremented.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/BufferedReader.html#read--">read</a></code> in class <code><a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The character read, or -1 if the end of the stream has been reached             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-char:A-int-int-"/><a name="read-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(char[] cbuf,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Read characters into a portion of an array. Whenever a <a href="#lt">line terminator </a> is read the current line number is incremented.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/BufferedReader.html#read-char:A-int-int-">read</a></code> in class <code><a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Destination buffer    </dd><dd> <code>off</code> - Offset at which to start storing characters         </dd><dd> <code>len</code> - Maximum number of characters to read        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of bytes read, or -1 if the end of the stream has already been reached                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:read-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLine-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLine--"/><a name="readLine--"/><ul class="blockList"><li class="blockList"><h4>readLine</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> readLine()
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Read a line of text. Whenever a <a href="#lt">line terminator </a> is read the current line number is incremented.               </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/BufferedReader.html#readLine--">readLine</a></code> in class <code><a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A String containing the contents of the line, not including any <a href="#lt">line termination characters  </a>, or <tt>null</tt> if the end of the stream has been reached                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/nio/file/Files.html#readAllLines-java.nio.file.Path-java.nio.charset.Charset-"><code>Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:readLine--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-long-"/><a name="skip-long-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public long skip(long n)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Skip characters. </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/BufferedReader.html#skip-long-">skip</a></code> in class <code><a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - The number of characters to skip        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters actually skipped     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If <tt>n</tt> is negative      </dd>    </dl></li></ul> <a end_ctx_id="method:skip-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:mark-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:mark-int-"/><a name="mark-int-"/><ul class="blockList"><li class="blockList"><h4>mark</h4><pre>public void mark(int readAheadLimit)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/BufferedReader.html#mark-int-">mark</a></code> in class <code><a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>readAheadLimit</code> - Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail.                             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:mark-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockListLast"><li class="blockList"><h4>reset</h4><pre>public void reset()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reset the stream to the most recent mark.       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/BufferedReader.html#reset--">reset</a></code> in class <code><a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the stream has not been marked, or if the mark has been invalidated                </dd>  </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table></diff></diffreport>