<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ObjectInputStream.GetField [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ObjectInputStream.GetField"/><ul class="blockList"><li class="blockList"><dl> <dt>Enclosing class: </dt><dd> <a href="../../java/io/ObjectInputStream.html" title="class in java.io">ObjectInputStream</a> </dd> </dl> <hr/> <br/><pre>public abstract static class <span class="typeNameLabel">ObjectInputStream.GetField</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">Provide access to the persistent fields read from the input stream.          </div>  </li></ul> </div> <a end_ctx_id="class:ObjectInputStream.GetField"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:GetField-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:GetField--"/><a name="GetField--"/><ul class="blockListLast"><li class="blockList"><h4>GetField</h4><pre>public GetField()</pre></li></ul> <a end_ctx_id="constructor:GetField--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getObjectStreamClass-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getObjectStreamClass--"/><a name="getObjectStreamClass--"/><ul class="blockList"><li class="blockList"><h4>getObjectStreamClass</h4><pre>public abstract <a href="../../java/io/ObjectStreamClass.html" title="class in java.io">ObjectStreamClass</a> getObjectStreamClass()</pre><div class="block">Get the ObjectStreamClass that describes the fields in the stream.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the descriptor class that describes the serializable fields       </dd> </dl></li></ul> <a end_ctx_id="method:getObjectStreamClass--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defaulted-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defaulted-java.lang.String-"/><a name="defaulted-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>defaulted</h4><pre>public abstract boolean defaulted(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Return true if the named field is defaulted and has no value in this stream.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true, if and only if the named field is defaulted         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>name</code> does not correspond to a serializable field           </dd>   </dl></li></ul> <a end_ctx_id="method:defaulted-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-boolean-"/><a name="get-java.lang.String-boolean-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract boolean get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                            boolean val)
                     throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named boolean field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>boolean</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-byte-"/><a name="get-java.lang.String-byte-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract byte get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                         byte val)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named byte field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>byte</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-char- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-char-"/><a name="get-java.lang.String-char-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract char get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                         char val)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named char field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>char</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-char-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-short- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-short-"/><a name="get-java.lang.String-short-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract short get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                          short val)
                   throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named short field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>short</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-short-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-int-"/><a name="get-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract int get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                        int val)
                 throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named int field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>int</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-long-"/><a name="get-java.lang.String-long-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract long get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                         long val)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named long field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>long</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-float-"/><a name="get-java.lang.String-float-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract float get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                          float val)
                   throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named float field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>float</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-double-"/><a name="get-java.lang.String-double-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract double get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                           double val)
                    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named double field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>double</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.String-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.String-java.lang.Object-"/><a name="get-java.lang.String-java.lang.Object-"/><ul class="blockListLast"><li class="blockList"><h4>get</h4><pre>public abstract <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> get(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                           <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> val)
                    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Get the value of the named Object field from the persistent field.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the field       </dd><dd> <code>val</code> - the default value to use if <code>name</code> does not have a value              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the named <code>Object</code> field      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if type of <code>name</code> is not serializable or if the field type is incorrect                </dd>   </dl></li></ul> <a end_ctx_id="method:get-java.lang.String-java.lang.Object-"/>  </td></tr></table></td></tr></table></diff></diffreport>