<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ObjectOutputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ObjectOutputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a>, <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a>, <a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a>, <a href="../../java/io/ObjectStreamConstants.html" title="interface in java.io">ObjectStreamConstants</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>      </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">ObjectOutputStream</span>
extends <a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a>
implements <a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a>, <a href="../../java/io/ObjectStreamConstants.html" title="interface in java.io">ObjectStreamConstants</a></pre><div class="block">An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream. The objects can be read (reconstituted) using an ObjectInputStream. Persistent storage of objects can be accomplished by using a file for the stream. If the stream is a network socket stream, the objects can be reconstituted on another host or in another process.<p>Only objects that support the java.io.Serializable interface can be written to streams. The class of each serializable object is encoded including the class name and signature of the class, the values of the object's fields and arrays, and the closure of any other objects referenced from the initial objects.                                                </p><p>The method writeObject is used to write an object to the stream. Any object, including Strings and arrays, is written with writeObject. Multiple objects or primitives can be written to the stream. The objects must be read back from the corresponding ObjectInputstream with the same types and in the same order as they were written.                                                      </p><p>Primitive data types can also be written to the stream using the appropriate methods from DataOutput. Strings can also be written using the writeUTF method.                        </p><p>The default serialization mechanism for an object writes the class of the object, the class signature, and the values of all non-transient and non-static fields. References to other objects (except in transient or static fields) cause those objects to be written also. Multiple references to a single object are encoded using a reference sharing mechanism so that graphs of objects can be restored to the same shape as when the original was written.                                                                        </p><p>For example to write an object that can be read by the example in ObjectInputStream: <br/><pre>
      FileOutputStream fos = new FileOutputStream("t.tmp");
      ObjectOutputStream oos = new ObjectOutputStream(fos);

      oos.writeInt(12345);
      oos.writeObject("Today");
      oos.writeObject(new Date());

      oos.close();
 </pre>               </p><p>Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures: <br/><pre>
 private void readObject(java.io.ObjectInputStream stream)
     throws IOException, ClassNotFoundException;
 private void writeObject(java.io.ObjectOutputStream stream)
     throws IOException
 private void readObjectNoData()
     throws ObjectStreamException;
 </pre>                   </p><p>The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject method can restore it. The method does not need to concern itself with the state belonging to the object's superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput.                                                                     </p><p>Serialization does not write out the fields of any object that does not implement the java.io.Serializable interface. Subclasses of Objects that are not serializable can be serializable. In this case the non-serializable class must have a no-arg constructor to allow its fields to be initialized. In this case it is the responsibility of the subclass to save and restore the state of the non-serializable class. It is frequently the case that the fields of that class are accessible (public, package, or protected) or that there are get and set methods that can be used to restore the state.                                                                                                 </p><p>Serialization of an object can be prevented by implementing writeObject and readObject methods that throw the NotSerializableException. The exception will be caught by the ObjectOutputStream and abort the serialization process.                             </p><p>Implementing the Externalizable interface allows the object to assume complete control over the contents and format of the object's serialized form. The methods of the Externalizable interface, writeExternal and readExternal, are called to save and restore the objects state. When implemented by a class they can write and read their own state using all of the methods of ObjectOutput and ObjectInput. It is the responsibility of the objects to handle any versioning that occurs.                                                                         </p><p>Enum constants are serialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not transmitted. To serialize an enum constant, ObjectOutputStream writes the string returned by the constant's name method. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are serialized cannot be customized; any class-specific writeObject and writeReplace methods defined by enum types are ignored during serialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L.                                                                                                              </p><p>Primitive data, excluding serializable fields and externalizable data, is written to the ObjectOutputStream in block-data records. A block data record is composed of a header and data. The block data header consists of a marker and the number of bytes to follow the header. Consecutive primitive data writes are merged into one block-data record. The blocking factor used for a block-data record will be 1024 bytes. Each block-data record will be filled up to 1024 bytes, or be written whenever there is a termination of block-data mode. Calls to the ObjectOutputStream methods writeObject, defaultWriteObject and writeFields initially terminate any existing block-data record.                                                                                                     </p>                                                        </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/DataOutput.html" title="interface in java.io"><code>DataOutput</code></a>, <a href="../../java/io/ObjectInputStream.html" title="class in java.io"><code>ObjectInputStream</code></a>, <a href="../../java/io/Serializable.html" title="interface in java.io"><code>Serializable</code></a>, <a href="../../java/io/Externalizable.html" title="interface in java.io"><code>Externalizable</code></a>, <a href="../../../platform/serialization/spec/output.html">Object Serialization Specification, Section 2, Object Output Classes       </a>     </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:ObjectOutputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ObjectOutputStream-java.io.OutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ObjectOutputStream-java.io.OutputStream-"/><a name="ObjectOutputStream-java.io.OutputStream-"/><ul class="blockList"><li class="blockList"><h4>ObjectOutputStream</h4><pre>public ObjectOutputStream(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out)
                   throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates an ObjectOutputStream that writes to the specified OutputStream. This constructor writes the serialization stream header to the underlying stream; callers may wish to flush the stream immediately to ensure that constructors for receiving ObjectInputStreams will not block when reading the header.<p>If a security manager is installed, this constructor will check for the "enableSubclassImplementation" SerializablePermission when invoked directly or indirectly by the constructor of a subclass which overrides the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared methods.                               </p>                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - output stream to write to       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs while writing stream header           </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if untrusted subclass illegally overrides security-sensitive methods         </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>out</code> is <code>null</code>      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectOutputStream.html#ObjectOutputStream--"><code>ObjectOutputStream()</code></a>, <a href="../../java/io/ObjectOutputStream.html#putFields--"><code>putFields()</code></a>, <a href="../../java/io/ObjectInputStream.html#ObjectInputStream-java.io.InputStream-"><code>ObjectInputStream.ObjectInputStream(InputStream)</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="constructor:ObjectOutputStream-java.io.OutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ObjectOutputStream-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ObjectOutputStream--"/><a name="ObjectOutputStream--"/><ul class="blockListLast"><li class="blockList"><h4>ObjectOutputStream</h4><pre>protected ObjectOutputStream()
                      throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                             <a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream.<p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with a <code>SerializablePermission("enableSubclassImplementation")</code> permission to ensure it's ok to enable subclassing.                          </p>                       </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkPermission</code> method denies enabling subclassing.              </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs while creating this stream           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>SecurityManager.checkPermission(java.security.Permission)</code></a>, <a href="../../java/io/SerializablePermission.html" title="class in java.io"><code>SerializablePermission</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="constructor:ObjectOutputStream--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:useProtocolVersion-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:useProtocolVersion-int-"/><a name="useProtocolVersion-int-"/><ul class="blockList"><li class="blockList"><h4>useProtocolVersion</h4><pre>public void useProtocolVersion(int version)
                        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Specify stream protocol version to use when writing the stream.<p>This routine provides a hook to enable the current version of Serialization to write in a format that is backwards compatible to a previous version of the stream format.                            </p><p>Every effort will be made to avoid introducing additional backwards incompatibilities; however, sometimes there is no other alternative.                 </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>version</code> - use ProtocolVersion from java.io.ObjectStreamConstants.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if called after any objects have been serialized.          </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if invalid version is passed in.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectStreamConstants.html#PROTOCOL_VERSION_1"><code>ObjectStreamConstants.PROTOCOL_VERSION_1</code></a>, <a href="../../java/io/ObjectStreamConstants.html#PROTOCOL_VERSION_2"><code>ObjectStreamConstants.PROTOCOL_VERSION_2</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:useProtocolVersion-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeObject-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeObject-java.lang.Object-"/><a name="writeObject-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>writeObject</h4><pre>public final void writeObject(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)
                       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Write the specified object to the ObjectOutputStream. The class of the object, the signature of the class, and the values of the non-transient and non-static fields of the class and all of its supertypes are written. Default serialization for a class can be overridden using the writeObject and the readObject methods. Objects referenced by this object are written transitively so that a complete equivalent graph of objects can be reconstructed by an ObjectInputStream.<p>Exceptions are thrown for problems with the OutputStream and for classes that should not be serialized. All exceptions are fatal to the OutputStream, which is left in an indeterminate state, and it is up to the caller to ignore or recover the stream state.                                           </p>                                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectOutput.html#writeObject-java.lang.Object-">writeObject</a></code> in interface <code><a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to be written       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/InvalidClassException.html" title="class in java.io">InvalidClassException</a></code> - Something is wrong with a class used by serialization.           </dd><dd> <code><a href="../../java/io/NotSerializableException.html" title="class in java.io">NotSerializableException</a></code> - Some object to be serialized does not implement the java.io.Serializable interface.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Any exception thrown by the underlying OutputStream.         </dd>   </dl></li></ul> <a end_ctx_id="method:writeObject-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeObjectOverride-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeObjectOverride-java.lang.Object-"/><a name="writeObjectOverride-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>writeObjectOverride</h4><pre>protected void writeObjectOverride(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)
                            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Method used by subclasses to override the default writeObject method. This method is called by trusted subclasses of ObjectInputStream that constructed ObjectInputStream using the protected no-arg constructor. The subclass is expected to provide an override method with the modifier "final".                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - object to be written to the underlying stream          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while writing to the underlying stream             </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectOutputStream.html#ObjectOutputStream--"><code>ObjectOutputStream()</code></a>, <a href="../../java/io/ObjectOutputStream.html#writeObject-java.lang.Object-"><code>writeObject(Object)</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:writeObjectOverride-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeUnshared-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeUnshared-java.lang.Object-"/><a name="writeUnshared-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>writeUnshared</h4><pre>public void writeUnshared(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)
                   throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes an "unshared" object to the ObjectOutputStream. This method is identical to writeObject, except that it always writes the given object as a new, unique object in the stream (as opposed to a back-reference pointing to a previously serialized instance). Specifically:<ul><li>An object written via writeUnshared is always serialized in the same manner as a newly appearing object (an object that has not been written to the stream yet), regardless of whether or not the object has been written previously.                                      </li><li>If writeObject is used to write an object that has been previously written with writeUnshared, the previous writeUnshared operation is treated as if it were a write of a separate object. In other words, ObjectOutputStream will never generate back-references to object data written by calls to writeUnshared.                                              </li></ul> While writing an object via writeUnshared does not in itself guarantee a unique reference to the object when it is deserialized, it allows a single object to be defined multiple times in a stream, so that multiple calls to readUnshared by the receiver will not conflict. Note that the rules described above only apply to the base-level object written with writeUnshared, and not to any transitively referenced sub-objects in the object graph to be serialized.<p>ObjectOutputStream subclasses which override this method can only be constructed in security contexts possessing the "enableSubclassImplementation" SerializablePermission; any attempt to instantiate such a subclass without this permission will cause a SecurityException to be thrown.                                 </p>                                                                                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - object to write to stream       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/NotSerializableException.html" title="class in java.io">NotSerializableException</a></code> - if an object in the graph to be serialized does not implement the Serializable interface                 </dd><dd> <code><a href="../../java/io/InvalidClassException.html" title="class in java.io">InvalidClassException</a></code> - if a problem exists with the class of an object to be serialized               </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs during serialization         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:writeUnshared-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defaultWriteObject-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defaultWriteObject--"/><a name="defaultWriteObject--"/><ul class="blockList"><li class="blockList"><h4>defaultWriteObject</h4><pre>public void defaultWriteObject()
                        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Write the non-static and non-transient fields of the current class to this stream. This may only be called from the writeObject method of the class being serialized. It will throw the NotActiveException if it is called otherwise.                                    </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying <code>OutputStream</code>            </dd> </dl></li></ul> <a end_ctx_id="method:defaultWriteObject--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:putFields-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:putFields--"/><a name="putFields--"/><ul class="blockList"><li class="blockList"><h4>putFields</h4><pre>public <a href="../../java/io/ObjectOutputStream.PutField.html" title="class in java.io">ObjectOutputStream.PutField</a> putFields()
                                      throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Retrieve the object used to buffer persistent fields to be written to the stream. The fields will be written to the stream when writeFields method is called.                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an instance of the class Putfield that holds the serializable fields          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:putFields--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeFields-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeFields--"/><a name="writeFields--"/><ul class="blockList"><li class="blockList"><h4>writeFields</h4><pre>public void writeFields()
                 throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Write the buffered fields to the stream.      </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd><dd> <code><a href="../../java/io/NotActiveException.html" title="class in java.io">NotActiveException</a></code> - Called when a classes writeObject method was not called to write the state of the object.                  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>  </dl></li></ul> <a end_ctx_id="method:writeFields--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>public void reset()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reset will disregard the state of any objects already written to the stream. The state is reset to be the same as a new ObjectOutputStream. The current point in the stream is marked as reset so the corresponding ObjectInputStream will be reset at the same point. Objects previously written to the stream will not be referred to as already being in the stream. They will be written to the stream again.                                                                      </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if reset() is invoked while serializing an object.          </dd> </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:annotateClass-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:annotateClass-java.lang.Class-"/><a name="annotateClass-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>annotateClass</h4><pre>protected void annotateClass(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; cl)
                      throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Subclasses may implement this method to allow class data to be stored in the stream. By default this method does nothing. The corresponding method in ObjectInputStream is resolveClass. This method is called exactly once for each unique class in the stream. The class name and signature will have already been written to the stream. This method may make free use of the ObjectOutputStream to save any representation of the class it deems suitable (for example, the bytes of the class file). The resolveClass method in the corresponding subclass of ObjectInputStream must read and use any data or objects written by annotateClass.                                                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cl</code> - the class to annotate custom data for         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Any exception thrown by the underlying OutputStream.         </dd>  </dl></li></ul> <a end_ctx_id="method:annotateClass-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:annotateProxyClass-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:annotateProxyClass-java.lang.Class-"/><a name="annotateProxyClass-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>annotateProxyClass</h4><pre>protected void annotateProxyClass(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; cl)
                           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes.<p>This method is called exactly once for each unique proxy class descriptor in the stream. The default implementation of this method in <code>ObjectOutputStream</code> does nothing.                        </p><p>The corresponding method in <code>ObjectInputStream</code> is <code>resolveProxyClass</code>. For a given subclass of <code>ObjectOutputStream</code> that overrides this method, the <code>resolveProxyClass</code> method in the corresponding subclass of <code>ObjectInputStream</code> must read any data or objects written by <code>annotateProxyClass</code>.                                  </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cl</code> - the proxy class to annotate custom data for          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - any exception thrown by the underlying <code>OutputStream</code>         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectInputStream.html#resolveProxyClass-java.lang.String:A-"><code>ObjectInputStream.resolveProxyClass(String[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:annotateProxyClass-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:replaceObject-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:replaceObject-java.lang.Object-"/><a name="replaceObject-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>replaceObject</h4><pre>protected <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> replaceObject(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)
                        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization. Replacing objects is disabled until enableReplaceObject is called. The enableReplaceObject method checks that the stream requesting to do replacement can be trusted. The first occurrence of each object written into the serialization stream is passed to replaceObject. Subsequent references to the object are replaced by the object returned by the original call to replaceObject. To ensure that the private state of objects is not unintentionally exposed, only trusted streams may use replaceObject.<p>The ObjectOutputStream.writeObject method takes a parameter of type Object (as opposed to type Serializable) to allow for cases where non-serializable objects are replaced by serializable ones.                         </p><p>When a subclass is replacing objects it must insure that either a complementary substitution must be made during deserialization or that the substituted object is compatible with every field where the reference will be stored. Objects whose type is not a subclass of the type of the field or array element abort the serialization by raising an exception and the object is not be stored.                                                                </p><p>This method is called only once when each object is first encountered. All subsequent references to the object will be redirected to the new object. This method should return the object to be substituted or the original object.                                     </p><p>Null can be returned as the object to be substituted, but may cause NullReferenceException in classes that contain references to the original object since they may be expecting an object instead of null.                                </p>                                                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to be replaced       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the alternate object that replaced the specified one       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Any exception thrown by the underlying OutputStream.         </dd>   </dl></li></ul> <a end_ctx_id="method:replaceObject-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:enableReplaceObject-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:enableReplaceObject-boolean-"/><a name="enableReplaceObject-boolean-"/><ul class="blockList"><li class="blockList"><h4>enableReplaceObject</h4><pre>protected boolean enableReplaceObject(boolean enable)
                               throws <a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Enable the stream to do replacement of objects in the stream. When enabled, the replaceObject method is called for every object being serialized.<p>If <code>enable</code> is true, and there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with a <code>SerializablePermission("enableSubstitution")</code> permission to ensure it's ok to enable the stream to do replacement of objects in the stream.                                       </p>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>enable</code> - boolean parameter to enable replacement of objects         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous setting before this method was invoked       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkPermission</code> method denies enabling the stream to do replacement of objects in the stream.                       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>SecurityManager.checkPermission(java.security.Permission)</code></a>, <a href="../../java/io/SerializablePermission.html" title="class in java.io"><code>SerializablePermission</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:enableReplaceObject-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeStreamHeader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeStreamHeader--"/><a name="writeStreamHeader--"/><ul class="blockList"><li class="blockList"><h4>writeStreamHeader</h4><pre>protected void writeStreamHeader()
                          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream. It writes the magic number and version to the stream.                          </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd> </dl></li></ul> <a end_ctx_id="method:writeStreamHeader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeClassDescriptor-java.io.ObjectStreamClass- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeClassDescriptor-java.io.ObjectStreamClass-"/><a name="writeClassDescriptor-java.io.ObjectStreamClass-"/><ul class="blockList"><li class="blockList"><h4>writeClassDescriptor</h4><pre>protected void writeClassDescriptor(<a href="../../java/io/ObjectStreamClass.html" title="class in java.io">ObjectStreamClass</a> desc)
                             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Write the specified class descriptor to the ObjectOutputStream. Class descriptors are used to identify the classes of objects written to the stream. Subclasses of ObjectOutputStream may override this method to customize the way in which class descriptors are written to the serialization stream. The corresponding method in ObjectInputStream, <code>readClassDescriptor</code>, should then be overridden to reconstitute the class descriptor from its custom stream representation. By default, this method writes class descriptors according to the format defined in the Object Serialization specification.<p>Note that this method will only be called if the ObjectOutputStream is not using the old serialization stream format (set by calling ObjectOutputStream's <code>useProtocolVersion</code> method). If this serialization stream is using the old format (<code>PROTOCOL_VERSION_1</code>), the class descriptor will be written internally in a manner that cannot be overridden or customized.                                                  </p>                                                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>desc</code> - class descriptor to write to the stream         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectInputStream.html#readClassDescriptor--"><code>ObjectInputStream.readClassDescriptor()</code></a>, <a href="../../java/io/ObjectOutputStream.html#useProtocolVersion-int-"><code>useProtocolVersion(int)</code></a>, <a href="../../java/io/ObjectStreamConstants.html#PROTOCOL_VERSION_1"><code>ObjectStreamConstants.PROTOCOL_VERSION_1</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:writeClassDescriptor-java.io.ObjectStreamClass-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-int-"/><a name="write-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(int val)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a byte. This method will block until the byte is actually written.            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#write-int-">write</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectOutput.html#write-int-">write</a></code> in interface <code><a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#write-int-">write</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the byte to be written to the stream          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>     </dl></li></ul> <a end_ctx_id="method:write-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-byte:A-"/><a name="write-byte:A-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(byte[] buf)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes an array of bytes. This method will block until the bytes are actually written.              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#write-byte:A-">write</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectOutput.html#write-byte:A-">write</a></code> in interface <code><a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#write-byte:A-">write</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - the data to be written       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/OutputStream.html#write-byte:A-int-int-"><code>OutputStream.write(byte[], int, int)  </code></a> </dd>      </dl></li></ul> <a end_ctx_id="method:write-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-byte:A-int-int-"/><a name="write-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(byte[] buf,
                  int off,
                  int len)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a sub array of bytes.     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#write-byte:A-int-int-">write</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectOutput.html#write-byte:A-int-int-">write</a></code> in interface <code><a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#write-byte:A-int-int-">write</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - the data to be written       </dd><dd> <code>off</code> - the start offset in the data        </dd><dd> <code>len</code> - the number of bytes that are written         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>     </dl></li></ul> <a end_ctx_id="method:write-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Flushes the stream. This will write any buffered output bytes and flush through to the underlying stream.                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Flushable.html#flush--">flush</a></code> in interface <code><a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectOutput.html#flush--">flush</a></code> in interface <code><a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#flush--">flush</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>    </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:drain-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:drain--"/><a name="drain--"/><ul class="blockList"><li class="blockList"><h4>drain</h4><pre>protected void drain()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Drain any buffered data in ObjectOutputStream. Similar to flush but does not propagate the flush to the underlying stream.                  </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd> </dl></li></ul> <a end_ctx_id="method:drain--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes the stream. This method must be called to release any resources associated with the stream.               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectOutput.html#close--">close</a></code> in interface <code><a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#close--">close</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>     </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeBoolean-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeBoolean-boolean-"/><a name="writeBoolean-boolean-"/><ul class="blockList"><li class="blockList"><h4>writeBoolean</h4><pre>public void writeBoolean(boolean val)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a boolean.  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeBoolean-boolean-">writeBoolean</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the boolean to be written       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeBoolean-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeByte-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeByte-int-"/><a name="writeByte-int-"/><ul class="blockList"><li class="blockList"><h4>writeByte</h4><pre>public void writeByte(int val)
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes an 8 bit byte.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeByte-int-">writeByte</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the byte value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeByte-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeShort-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeShort-int-"/><a name="writeShort-int-"/><ul class="blockList"><li class="blockList"><h4>writeShort</h4><pre>public void writeShort(int val)
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a 16 bit short.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeShort-int-">writeShort</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the short value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeShort-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeChar-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeChar-int-"/><a name="writeChar-int-"/><ul class="blockList"><li class="blockList"><h4>writeChar</h4><pre>public void writeChar(int val)
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a 16 bit char.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeChar-int-">writeChar</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the char value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeChar-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeInt-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeInt-int-"/><a name="writeInt-int-"/><ul class="blockList"><li class="blockList"><h4>writeInt</h4><pre>public void writeInt(int val)
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a 32 bit int.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeInt-int-">writeInt</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the integer value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeInt-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeLong-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeLong-long-"/><a name="writeLong-long-"/><ul class="blockList"><li class="blockList"><h4>writeLong</h4><pre>public void writeLong(long val)
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a 64 bit long.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeLong-long-">writeLong</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the long value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeLong-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeFloat-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeFloat-float-"/><a name="writeFloat-float-"/><ul class="blockList"><li class="blockList"><h4>writeFloat</h4><pre>public void writeFloat(float val)
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a 32 bit float.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeFloat-float-">writeFloat</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the float value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeFloat-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeDouble-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeDouble-double-"/><a name="writeDouble-double-"/><ul class="blockList"><li class="blockList"><h4>writeDouble</h4><pre>public void writeDouble(double val)
                 throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a 64 bit double.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeDouble-double-">writeDouble</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>val</code> - the double value to be written        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeDouble-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeBytes-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeBytes-java.lang.String-"/><a name="writeBytes-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>writeBytes</h4><pre>public void writeBytes(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str)
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a String as a sequence of bytes.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeBytes-java.lang.String-">writeBytes</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - the String of bytes to be written         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeBytes-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeChars-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeChars-java.lang.String-"/><a name="writeChars-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>writeChars</h4><pre>public void writeChars(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str)
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a String as a sequence of chars.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeChars-java.lang.String-">writeChars</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - the String of chars to be written         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeChars-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeUTF-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeUTF-java.lang.String-"/><a name="writeUTF-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>writeUTF</h4><pre>public void writeUTF(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str)
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Primitive data write of this String in <a href="DataInput.html#modified-utf-8">modified UTF-8 </a> format. Note that there is a significant difference between writing a String into the stream as primitive data or as an Object. A String instance written by writeObject is written into the stream as a String initially. Future writeObject() calls write references to the string into the stream.                                                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataOutput.html#writeUTF-java.lang.String-">writeUTF</a></code> in interface <code><a href="../../java/io/DataOutput.html" title="interface in java.io">DataOutput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - the String to be written       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occur while writing to the underlying stream            </dd>   </dl></li></ul> <a end_ctx_id="method:writeUTF-java.lang.String-"/>  </td></tr></table></td></tr></table></diff></diffreport>