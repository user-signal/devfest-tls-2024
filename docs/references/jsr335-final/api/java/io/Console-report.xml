<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Console [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Console"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a> </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Console</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></pre><div class="block">Methods to access the character-based console device, if any, associated with the current Java virtual machine.<p> Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input and output streams then its console will exist and will typically be connected to the keyboard and display from which the virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then it will typically not have a console.                                                                                        </p><p> If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by invoking the <a href="../../java/lang/System.html#console--"><code>System.console()</code></a> method. If no console device is available then an invocation of that method will return <tt>null</tt>.                                          </p><p> Read and write operations are synchronized to guarantee the atomic completion of critical operations; therefore invoking methods <a href="../../java/io/Console.html#readLine--"><code>readLine()</code></a>, <a href="../../java/io/Console.html#readPassword--"><code>readPassword()</code></a>, <a href="../../java/io/Console.html#format-java.lang.String-java.lang.Object...-"><code>format()</code></a>, <a href="../../java/io/Console.html#printf-java.lang.String-java.lang.Object...-"><code>printf()</code></a> as well as the read, format and write operations on the objects returned by <a href="../../java/io/Console.html#reader--"><code>reader()</code></a> and <a href="../../java/io/Console.html#writer--"><code>writer()</code></a> may block in multithreaded scenarios.                                           </p><p> Invoking <tt>close()</tt> on the objects returned by the <a href="../../java/io/Console.html#reader--"><code>reader()</code></a> and the <a href="../../java/io/Console.html#writer--"><code>writer()</code></a> will not close the underlying stream of those objects.                     </p><p> The console-read methods return <tt>null</tt> when the end of the console input stream is reached, for example by typing control-D on Unix or control-Z on Windows. Subsequent read operations will succeed if additional characters are later entered on the console's input device.                                          </p><p> Unless otherwise specified, passing a <tt>null</tt> argument to any method in this class will cause a <a href="../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> to be thrown.                    </p><p> <b>Security note: </b> If an application needs to read a password or other secure data, it should use <a href="../../java/io/Console.html#readPassword--"><code>readPassword()</code></a> or <a href="../../java/io/Console.html#readPassword-java.lang.String-java.lang.Object...-"><code>readPassword(String, Object...) </code></a> and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory.                                     </p><blockquote><pre><code>
 Console cons;
 char[] passwd;
 if ((cons = System.console()) != null &amp;&amp;
     (passwd = cons.readPassword("[%s]", "Password:")) != null) {
     ...
     java.util.Arrays.fill(passwd, ' ');
 }
 </code></pre></blockquote>               </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Console"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writer-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writer--"/><a name="writer--"/><ul class="blockList"><li class="blockList"><h4>writer</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> writer()</pre><div class="block">Retrieves the unique <a href="../../java/io/PrintWriter.html" title="class in java.io"><code>PrintWriter</code></a> object associated with this console.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The printwriter associated with this console     </dd> </dl></li></ul> <a end_ctx_id="method:writer--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reader--"/><a name="reader--"/><ul class="blockList"><li class="blockList"><h4>reader</h4><pre>public <a href="../../java/io/Reader.html" title="class in java.io">Reader</a> reader()</pre><div class="block">Retrieves the unique <a href="../../java/io/Reader.html" title="class in java.io"><code>Reader</code></a> object associated with this console.<p> This method is intended to be used by sophisticated applications, for example, a <a href="../../java/util/Scanner.html" title="class in java.util"><code>Scanner</code></a> object which utilizes the rich parsing/scanning functionality provided by the <tt>Scanner</tt>:                         </p><blockquote><pre>
 Console con = System.console();
 if (con != null) {
     Scanner sc = new Scanner(con.reader());
     ...
 }
 </pre></blockquote><p> For simple applications requiring only line-oriented reading, use <tt><a href="../../java/io/Console.html#readLine-java.lang.String-java.lang.Object...-"><code>readLine(java.lang.String, java.lang.Object...) </code></a></tt>.         </p><p> The bulk read operations <a href="../../java/io/Reader.html#read-char:A-"><code>read(char[])  </code></a>, <a href="../../java/io/Reader.html#read-char:A-int-int-"><code>read(char[], int, int)    </code></a> and <a href="../../java/io/Reader.html#read-java.nio.CharBuffer-"><code>read(java.nio.CharBuffer)</code></a> on the returned object will not read in characters beyond the line bound for each invocation, even if the destination buffer has space for more characters. The <code>Reader</code>'s <code>read</code> methods may block if a line bound has not been entered or reached on the console's input device. A line bound is considered to be any one of a line feed (<tt>'\n'</tt>), a carriage return (<tt>'\r'</tt>), a carriage return followed immediately by a linefeed, or an end of stream.                                                                                      </p>        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The reader associated with this console     </dd> </dl></li></ul> <a end_ctx_id="method:reader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:format-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:format-java.lang.String-java.lang.Object...-"/><a name="format-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>format</h4><pre>public <a href="../../java/io/Console.html" title="class in java.io">Console</a> format(<a href="../../java/lang/String.html" title="class in java.lang">String</a> fmt,
                      <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">Writes a formatted string to this console's output stream using the specified format string and arguments.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fmt</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>. The behaviour on a <tt>null</tt> argument depends on the <a href="../util/Formatter.html#syntax">conversion</a>.                                                                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This console </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd>   </dl></li></ul> <a end_ctx_id="method:format-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:printf-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:printf-java.lang.String-java.lang.Object...-"/><a name="printf-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>printf</h4><pre>public <a href="../../java/io/Console.html" title="class in java.io">Console</a> printf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                      <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">A convenience method to write a formatted string to this console's output stream using the specified format string and arguments.<p> An invocation of this method of the form <tt>con.printf(format, args) </tt> behaves in exactly the same way as the invocation of<pre>con.format(format, args)</pre>.                   </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>format</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>.         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>. The behaviour on a <tt>null</tt> argument depends on the <a href="../util/Formatter.html#syntax">conversion</a>.                                                                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This console </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd>   </dl></li></ul> <a end_ctx_id="method:printf-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLine-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLine-java.lang.String-java.lang.Object...-"/><a name="readLine-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>readLine</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> readLine(<a href="../../java/lang/String.html" title="class in java.lang">String</a> fmt,
                       <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">Provides a formatted prompt, then reads a single line of text from the console.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fmt</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>.         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>.                                            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A string containing the line read from the console, not including any line-termination characters, or <tt>null</tt> if an end of stream has been reached.                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd><dd> <code><a href="../../java/io/IOError.html" title="class in java.io">IOError</a></code> - If an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:readLine-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLine-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLine--"/><a name="readLine--"/><ul class="blockList"><li class="blockList"><h4>readLine</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> readLine()</pre><div class="block">Reads a single line of text from the console.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A string containing the line read from the console, not including any line-termination characters, or <tt>null</tt> if an end of stream has been reached.                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOError.html" title="class in java.io">IOError</a></code> - If an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readLine--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readPassword-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readPassword-java.lang.String-java.lang.Object...-"/><a name="readPassword-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>readPassword</h4><pre>public char[] readPassword(<a href="../../java/lang/String.html" title="class in java.lang">String</a> fmt,
                           <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fmt</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a> for the prompt text.             </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>.                                            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A character array containing the password or passphrase read from the console, not including any line-termination characters, or <tt>null</tt> if an end of stream has been reached.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd><dd> <code><a href="../../java/io/IOError.html" title="class in java.io">IOError</a></code> - If an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:readPassword-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readPassword-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readPassword--"/><a name="readPassword--"/><ul class="blockList"><li class="blockList"><h4>readPassword</h4><pre>public char[] readPassword()</pre><div class="block">Reads a password or passphrase from the console with echoing disabled          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A character array containing the password or passphrase read from the console, not including any line-termination characters, or <tt>null</tt> if an end of stream has been reached.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOError.html" title="class in java.io">IOError</a></code> - If an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readPassword--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockListLast"><li class="blockList"><h4>flush</h4><pre>public void flush()</pre><div class="block">Flushes the console and forces any buffered output to be written immediately .            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Flushable.html#flush--">flush</a></code> in interface <code><a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></code>  </dd> </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table></diff></diffreport>