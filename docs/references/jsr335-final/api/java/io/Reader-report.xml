<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Reader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Reader"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a>   </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/io/BufferedReader.html" title="class in java.io">BufferedReader</a>, <a href="../../java/io/CharArrayReader.html" title="class in java.io">CharArrayReader</a>, <a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a>, <a href="../../java/io/InputStreamReader.html" title="class in java.io">InputStreamReader</a>, <a href="../../java/io/PipedReader.html" title="class in java.io">PipedReader</a>, <a href="../../java/io/StringReader.html" title="class in java.io">StringReader</a>      </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">Reader</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a>, <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></pre><div class="block">Abstract class for reading character streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both.                                        </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedReader.html" title="class in java.io"><code>BufferedReader</code></a>, <a href="../../java/io/LineNumberReader.html" title="class in java.io"><code>LineNumberReader</code></a>, <a href="../../java/io/CharArrayReader.html" title="class in java.io"><code>CharArrayReader</code></a>, <a href="../../java/io/InputStreamReader.html" title="class in java.io"><code>InputStreamReader</code></a>, <a href="../../java/io/FileReader.html" title="class in java.io"><code>FileReader</code></a>, <a href="../../java/io/FilterReader.html" title="class in java.io"><code>FilterReader</code></a>, <a href="../../java/io/PushbackReader.html" title="class in java.io"><code>PushbackReader</code></a>, <a href="../../java/io/PipedReader.html" title="class in java.io"><code>PipedReader</code></a>, <a href="../../java/io/StringReader.html" title="class in java.io"><code>StringReader</code></a>, <a href="../../java/io/Writer.html" title="class in java.io"><code>Writer</code></a>          </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Reader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:lock [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:lock"/><a name="lock"/><ul class="blockListLast"><li class="blockList"><h4>lock</h4><pre>protected <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> lock</pre><div class="block">The object used to synchronize operations on this stream. For efficiency, a character-stream object may use an object other than itself to protect critical sections. A subclass should therefore use the object in this field rather than <tt>this</tt> or a synchronized method.                                         </div></li></ul> <a end_ctx_id="field:lock"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Reader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Reader--"/><a name="Reader--"/><ul class="blockList"><li class="blockList"><h4>Reader</h4><pre>protected Reader()</pre><div class="block">Creates a new character-stream reader whose critical sections will synchronize on the reader itself.             </div></li></ul> <a end_ctx_id="constructor:Reader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Reader-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Reader-java.lang.Object-"/><a name="Reader-java.lang.Object-"/><ul class="blockListLast"><li class="blockList"><h4>Reader</h4><pre>protected Reader(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> lock)</pre><div class="block">Creates a new character-stream reader whose critical sections will synchronize on the given object.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>lock</code> - The Object to synchronize on.       </dd> </dl></li></ul> <a end_ctx_id="constructor:Reader-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-java.nio.CharBuffer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-java.nio.CharBuffer-"/><a name="read-java.nio.CharBuffer-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(<a href="../../java/nio/CharBuffer.html" title="class in java.nio">CharBuffer</a> target)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. No flipping or rewinding of the buffer is performed.                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Readable.html#read-java.nio.CharBuffer-">read</a></code> in interface <code><a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>target</code> - the buffer to read characters into        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters added to the buffer, or -1 if this source of characters is at its end                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if target is null      </dd><dd> <code><a href="../../java/nio/ReadOnlyBufferException.html" title="class in java.nio">ReadOnlyBufferException</a></code> - if target is a read only buffer         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>     </dl></li></ul> <a end_ctx_id="method:read-java.nio.CharBuffer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a single character. This method will block until a character is available, an I/O error occurs, or the end of the stream is reached.<p> Subclasses that intend to support efficient single-character input should override this method.            </p>                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The character read, as an integer in the range 0 to 65535 (<tt>0x00-0xffff</tt>), or -1 if the end of the stream has been reached                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>  </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-char:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-char:A-"/><a name="read-char:A-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(char[] cbuf)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads characters into an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Destination buffer    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters read, or -1 if the end of the stream has been reached               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:read-char:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-char:A-int-int-"/><a name="read-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public abstract int read(char[] cbuf,
                         int off,
                         int len)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads characters into a portion of an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Destination buffer    </dd><dd> <code>off</code> - Offset at which to start storing characters         </dd><dd> <code>len</code> - Maximum number of characters to read        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters read, or -1 if the end of the stream has been reached               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:read-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-long-"/><a name="skip-long-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public long skip(long n)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Skips characters. This method will block until some characters are available, an I/O error occurs, or the end of the stream is reached.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - The number of characters to skip        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters actually skipped     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If <code>n</code> is negative.      </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:skip-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ready-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ready--"/><a name="ready--"/><ul class="blockList"><li class="blockList"><h4>ready</h4><pre>public boolean ready()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Tells whether this stream is ready to be read.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>  </dl></li></ul> <a end_ctx_id="method:ready--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:markSupported-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:markSupported--"/><a name="markSupported--"/><ul class="blockList"><li class="blockList"><h4>markSupported</h4><pre>public boolean markSupported()</pre><div class="block">Tells whether this stream supports the mark() operation. The default implementation always returns false. Subclasses should override this method.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this stream supports the mark operation.          </dd> </dl></li></ul> <a end_ctx_id="method:markSupported--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:mark-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:mark-int-"/><a name="mark-int-"/><ul class="blockList"><li class="blockList"><h4>mark</h4><pre>public void mark(int readAheadLimit)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Marks the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point. Not all character-input streams support the mark() operation.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>readAheadLimit</code> - Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail.                             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the stream does not support mark(), or if some other I/O error occurs                </dd>  </dl></li></ul> <a end_ctx_id="method:mark-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>public void reset()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Resets the stream. If the stream has been marked, then attempt to reposition it at the mark. If the stream has not been marked, then attempt to reset it in some way appropriate to the particular stream, for example by repositioning it to its starting point. Not all character-input streams support the reset() operation, and some support reset() without supporting mark().                                                            </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the stream has not been marked, or if the mark has been invalidated, or if the stream does not support reset(), or if some other I/O error occurs                               </dd> </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public abstract void close()
                    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>