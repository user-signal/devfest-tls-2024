<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:InputStreamReader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:InputStreamReader"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a>   </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/io/FileReader.html" title="class in java.io">FileReader</a> </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">InputStreamReader</span>
extends <a href="../../java/io/Reader.html" title="class in java.io">Reader</a></pre><div class="block">An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>charset</code></a>. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted.<p> Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream. To enable the efficient conversion of bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation.                                                   </p><p> For top efficiency, consider wrapping an InputStreamReader within a BufferedReader. For example:<pre>
 BufferedReader in
   = new BufferedReader(new InputStreamReader(System.in));
 </pre>            </p>                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedReader.html" title="class in java.io"><code>BufferedReader</code></a>, <a href="../../java/io/InputStream.html" title="class in java.io"><code>InputStream</code></a>, <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>Charset</code></a>   </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:InputStreamReader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:InputStreamReader-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:InputStreamReader-java.io.InputStream-"/><a name="InputStreamReader-java.io.InputStream-"/><ul class="blockList"><li class="blockList"><h4>InputStreamReader</h4><pre>public InputStreamReader(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in)</pre><div class="block">Creates an InputStreamReader that uses the default charset.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - An InputStream    </dd> </dl></li></ul> <a end_ctx_id="constructor:InputStreamReader-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:InputStreamReader-java.io.InputStream-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:InputStreamReader-java.io.InputStream-java.lang.String-"/><a name="InputStreamReader-java.io.InputStream-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>InputStreamReader</h4><pre>public InputStreamReader(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in,
                         <a href="../../java/lang/String.html" title="class in java.lang">String</a> charsetName)
                  throws <a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></pre><div class="block">Creates an InputStreamReader that uses the named charset.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - An InputStream    </dd><dd> <code>charsetName</code> - The name of a supported <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>charset</code></a>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></code> - If the named charset is not supported         </dd>  </dl></li></ul> <a end_ctx_id="constructor:InputStreamReader-java.io.InputStream-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:InputStreamReader-java.io.InputStream-java.nio.charset.Charset- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:InputStreamReader-java.io.InputStream-java.nio.charset.Charset-"/><a name="InputStreamReader-java.io.InputStream-java.nio.charset.Charset-"/><ul class="blockList"><li class="blockList"><h4>InputStreamReader</h4><pre>public InputStreamReader(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in,
                         <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset">Charset</a> cs)</pre><div class="block">Creates an InputStreamReader that uses the given charset.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - An InputStream    </dd><dd> <code>cs</code> - A charset    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="constructor:InputStreamReader-java.io.InputStream-java.nio.charset.Charset-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:InputStreamReader-java.io.InputStream-java.nio.charset.CharsetDecoder- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:InputStreamReader-java.io.InputStream-java.nio.charset.CharsetDecoder-"/><a name="InputStreamReader-java.io.InputStream-java.nio.charset.CharsetDecoder-"/><ul class="blockListLast"><li class="blockList"><h4>InputStreamReader</h4><pre>public InputStreamReader(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in,
                         <a href="../../java/nio/charset/CharsetDecoder.html" title="class in java.nio.charset">CharsetDecoder</a> dec)</pre><div class="block">Creates an InputStreamReader that uses the given charset decoder.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - An InputStream    </dd><dd> <code>dec</code> - A charset decoder     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="constructor:InputStreamReader-java.io.InputStream-java.nio.charset.CharsetDecoder-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getEncoding-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getEncoding--"/><a name="getEncoding--"/><ul class="blockList"><li class="blockList"><h4>getEncoding</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> getEncoding()</pre><div class="block">Returns the name of the character encoding being used by this stream.<p> If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned.                   </p><p> If this instance was created with the <a href="../../java/io/InputStreamReader.html#InputStreamReader-java.io.InputStream-java.lang.String-"><code>InputStreamReader(InputStream, String) </code></a> constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method will return <code>null</code> if the stream has been closed.                                      </p>           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The historical name of this encoding, or <code>null</code> if the stream has been closed             </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>Charset</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getEncoding--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a single character.   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Reader.html#read--">read</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The character read, or -1 if the end of the stream has been reached             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-char:A-int-int-"/><a name="read-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(char[] cbuf,
                int offset,
                int length)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads characters into a portion of an array.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Reader.html#read-char:A-int-int-">read</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Destination buffer    </dd><dd> <code>offset</code> - Offset at which to start storing characters         </dd><dd> <code>length</code> - Maximum number of characters to read        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters read, or -1 if the end of the stream has been reached               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:read-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ready-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ready--"/><a name="ready--"/><ul class="blockList"><li class="blockList"><h4>ready</h4><pre>public boolean ready()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Tells whether this stream is ready to be read. An InputStreamReader is ready if its input buffer is not empty, or if bytes are available to be read from the underlying byte stream.                                </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Reader.html#ready--">ready</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:ready--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from class: <code><a href="../../java/io/Reader.html#close--">Reader</a></code>   </span> </div><div class="block">Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Reader.html#close--">close</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>