<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:OutputStreamWriter [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:OutputStreamWriter"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a>, <a href="../../java/lang/Appendable.html" title="interface in java.lang">Appendable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>    </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/io/FileWriter.html" title="class in java.io">FileWriter</a> </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">OutputStreamWriter</span>
extends <a href="../../java/io/Writer.html" title="class in java.io">Writer</a></pre><div class="block">An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>charset</code></a>. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted.<p> Each invocation of a write() method causes the encoding converter to be invoked on the given character(s). The resulting bytes are accumulated in a buffer before being written to the underlying output stream. The size of this buffer may be specified, but by default it is large enough for most purposes. Note that the characters passed to the write() methods are not buffered.                                                               </p><p> For top efficiency, consider wrapping an OutputStreamWriter within a BufferedWriter so as to avoid frequent converter invocations. For example:<pre>
 Writer out
   = new BufferedWriter(new OutputStreamWriter(System.out));
 </pre>                   </p><p> A <i>surrogate pair </i> is a character represented by a sequence of two <tt>char</tt> values: A <i>high</i> surrogate in the range '\uD800' to '\uDBFF' followed by a <i>low</i> surrogate in the range '\uDC00' to '\uDFFF'.                                 </p><p> A <i>malformed surrogate element  </i> is a high surrogate that is not followed by a low surrogate or a low surrogate that is not preceded by a high surrogate.                          </p><p> This class always replaces malformed surrogate elements and unmappable character sequences with the charset's default <i>substitution sequence </i>. The <a href="../../java/nio/charset/CharsetEncoder.html" title="class in java.nio.charset">CharsetEncoder</a> class should be used when more control over the encoding process is required.                               </p>                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedWriter.html" title="class in java.io"><code>BufferedWriter</code></a>, <a href="../../java/io/OutputStream.html" title="class in java.io"><code>OutputStream</code></a>, <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>Charset</code></a>   </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:OutputStreamWriter"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:OutputStreamWriter-java.io.OutputStream-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-java.lang.String-"/><a name="OutputStreamWriter-java.io.OutputStream-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>OutputStreamWriter</h4><pre>public OutputStreamWriter(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                          <a href="../../java/lang/String.html" title="class in java.lang">String</a> charsetName)
                   throws <a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></pre><div class="block">Creates an OutputStreamWriter that uses the named charset.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - An OutputStream    </dd><dd> <code>charsetName</code> - The name of a supported <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>charset</code></a>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></code> - If the named encoding is not supported         </dd>  </dl></li></ul> <a end_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:OutputStreamWriter-java.io.OutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-"/><a name="OutputStreamWriter-java.io.OutputStream-"/><ul class="blockList"><li class="blockList"><h4>OutputStreamWriter</h4><pre>public OutputStreamWriter(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out)</pre><div class="block">Creates an OutputStreamWriter that uses the default character encoding.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - An OutputStream    </dd> </dl></li></ul> <a end_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:OutputStreamWriter-java.io.OutputStream-java.nio.charset.Charset- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-java.nio.charset.Charset-"/><a name="OutputStreamWriter-java.io.OutputStream-java.nio.charset.Charset-"/><ul class="blockList"><li class="blockList"><h4>OutputStreamWriter</h4><pre>public OutputStreamWriter(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                          <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset">Charset</a> cs)</pre><div class="block">Creates an OutputStreamWriter that uses the given charset.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - An OutputStream    </dd><dd> <code>cs</code> - A charset    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-java.nio.charset.Charset-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:OutputStreamWriter-java.io.OutputStream-java.nio.charset.CharsetEncoder- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-java.nio.charset.CharsetEncoder-"/><a name="OutputStreamWriter-java.io.OutputStream-java.nio.charset.CharsetEncoder-"/><ul class="blockListLast"><li class="blockList"><h4>OutputStreamWriter</h4><pre>public OutputStreamWriter(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                          <a href="../../java/nio/charset/CharsetEncoder.html" title="class in java.nio.charset">CharsetEncoder</a> enc)</pre><div class="block">Creates an OutputStreamWriter that uses the given charset encoder.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - An OutputStream    </dd><dd> <code>enc</code> - A charset encoder     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="constructor:OutputStreamWriter-java.io.OutputStream-java.nio.charset.CharsetEncoder-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getEncoding-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getEncoding--"/><a name="getEncoding--"/><ul class="blockList"><li class="blockList"><h4>getEncoding</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> getEncoding()</pre><div class="block">Returns the name of the character encoding being used by this stream.<p> If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned.                   </p><p> If this instance was created with the <a href="../../java/io/OutputStreamWriter.html#OutputStreamWriter-java.io.OutputStream-java.lang.String-"><code>OutputStreamWriter(OutputStream, String) </code></a> constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method may return <tt>null</tt> if the stream has been closed.                                      </p>           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The historical name of this encoding, or possibly <code>null</code> if the stream has been closed              </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset"><code>Charset</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getEncoding--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-int-"/><a name="write-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(int c)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a single character.   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - int specifying a character to be written         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:write-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-char:A-int-int-"/><a name="write-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(char[] cbuf,
                  int off,
                  int len)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a portion of an array of characters.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-char:A-int-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Buffer of characters     </dd><dd> <code>off</code> - Offset from which to start writing characters         </dd><dd> <code>len</code> - Number of characters to write       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:write-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-java.lang.String-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-java.lang.String-int-int-"/><a name="write-java.lang.String-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str,
                  int off,
                  int len)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a portion of a string.     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-java.lang.String-int-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - A String    </dd><dd> <code>off</code> - Offset from which to start writing characters         </dd><dd> <code>len</code> - Number of characters to write       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:write-java.lang.String-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Flushes the stream.  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Flushable.html#flush--">flush</a></code> in interface <code><a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#flush--">flush</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from class: <code><a href="../../java/io/Writer.html#close--">Writer</a></code>   </span> </div><div class="block">Closes the stream, flushing it first. Once the stream has been closed, further write() or flush() invocations will cause an IOException to be thrown. Closing a previously closed stream has no effect.                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#close--">close</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>