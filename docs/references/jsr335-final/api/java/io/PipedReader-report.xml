<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PipedReader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PipedReader"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a>   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">PipedReader</span>
extends <a href="../../java/io/Reader.html" title="class in java.io">Reader</a></pre><div class="block">Piped character-input streams.  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:PipedReader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedReader-java.io.PipedWriter- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedReader-java.io.PipedWriter-"/><a name="PipedReader-java.io.PipedWriter-"/><ul class="blockList"><li class="blockList"><h4>PipedReader</h4><pre>public PipedReader(<a href="../../java/io/PipedWriter.html" title="class in java.io">PipedWriter</a> src)
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a <code>PipedReader</code> so that it is connected to the piped writer <code>src</code>. Data written to <code>src</code> will then be available as input from this stream.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the stream to connect to.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="constructor:PipedReader-java.io.PipedWriter-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedReader-java.io.PipedWriter-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedReader-java.io.PipedWriter-int-"/><a name="PipedReader-java.io.PipedWriter-int-"/><ul class="blockList"><li class="blockList"><h4>PipedReader</h4><pre>public PipedReader(<a href="../../java/io/PipedWriter.html" title="class in java.io">PipedWriter</a> src,
                   int pipeSize)
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a <code>PipedReader</code> so that it is connected to the piped writer <code>src</code> and uses the specified pipe size for the pipe's buffer. Data written to <code>src</code> will then be available as input from this stream.                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the stream to connect to.       </dd><dd> <code>pipeSize</code> - the size of the pipe's buffer.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>pipeSize &lt;= 0  </code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="constructor:PipedReader-java.io.PipedWriter-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedReader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedReader--"/><a name="PipedReader--"/><ul class="blockList"><li class="blockList"><h4>PipedReader</h4><pre>public PipedReader()</pre><div class="block">Creates a <code>PipedReader</code> so that it is not yet <a href="../../java/io/PipedReader.html#connect-java.io.PipedWriter-">connected</a>. It must be <a href="../../java/io/PipedWriter.html#connect-java.io.PipedReader-">connected</a> to a <code>PipedWriter</code> before being used.                   </div></li></ul> <a end_ctx_id="constructor:PipedReader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedReader-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedReader-int-"/><a name="PipedReader-int-"/><ul class="blockListLast"><li class="blockList"><h4>PipedReader</h4><pre>public PipedReader(int pipeSize)</pre><div class="block">Creates a <code>PipedReader</code> so that it is not yet <a href="../../java/io/PipedReader.html#connect-java.io.PipedWriter-"><code>connected</code></a> and uses the specified pipe size for the pipe's buffer. It must be <a href="../../java/io/PipedWriter.html#connect-java.io.PipedReader-">connected</a> to a <code>PipedWriter</code> before being used.                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pipeSize</code> - the size of the pipe's buffer.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>pipeSize &lt;= 0  </code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="constructor:PipedReader-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:connect-java.io.PipedWriter- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:connect-java.io.PipedWriter-"/><a name="connect-java.io.PipedWriter-"/><ul class="blockList"><li class="blockList"><h4>connect</h4><pre>public void connect(<a href="../../java/io/PipedWriter.html" title="class in java.io">PipedWriter</a> src)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Causes this piped reader to be connected to the piped writer <code>src</code>. If this object is already connected to some other piped writer, an <code>IOException</code> is thrown.<p> If <code>src</code> is an unconnected piped writer and <code>snk</code> is an unconnected piped reader, they may be connected by either the call:<pre><code>snk.connect(src)</code> 
</pre>                      </p><p> or the call:<pre><code>src.connect(snk)</code> 
</pre>   </p><p> The two calls have the same effect.       </p>                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - The piped writer to connect to.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:connect-java.io.PipedWriter-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads the next character of data from this piped stream. If no character is available because the end of the stream has been reached, the value <code>-1</code> is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.                                                </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Reader.html#read--">read</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next character of data, or <code>-1</code> if the end of the stream is reached.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="PipedInputStream.html#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedReader.html#connect-java.io.PipedWriter-"><code>unconnected</code></a>, closed, or an I/O error occurs.              </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-char:A-int-int-"/><a name="read-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(char[] cbuf,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads up to <code>len</code> characters of data from this piped stream into an array of characters. Less than <code>len</code> characters will be read if the end of the data stream is reached or if <code>len</code> exceeds the pipe's buffer size. This method blocks until at least one character of input is available.                                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Reader.html#read-char:A-int-int-">read</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - the buffer into which the data is read.          </dd><dd> <code>off</code> - the start offset of the data.        </dd><dd> <code>len</code> - the maximum number of characters read.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of characters read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="PipedInputStream.html#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedReader.html#connect-java.io.PipedWriter-"><code>unconnected</code></a>, closed, or an I/O error occurs.              </dd>    </dl></li></ul> <a end_ctx_id="method:read-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ready-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ready--"/><a name="ready--"/><ul class="blockList"><li class="blockList"><h4>ready</h4><pre>public boolean ready()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Tell whether this stream is ready to be read. A piped character stream is ready if the circular buffer is not empty.                     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Reader.html#ready--">ready</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="PipedInputStream.html#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedReader.html#connect-java.io.PipedWriter-"><code>unconnected</code></a>, or closed.          </dd>   </dl></li></ul> <a end_ctx_id="method:ready--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this piped stream and releases any system resources associated with the stream.            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Reader.html#close--">close</a></code> in class <code><a href="../../java/io/Reader.html" title="class in java.io">Reader</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>