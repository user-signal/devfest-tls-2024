<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PrintWriter [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PrintWriter"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a>, <a href="../../java/lang/Appendable.html" title="interface in java.lang">Appendable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>    </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">PrintWriter</span>
extends <a href="../../java/io/Writer.html" title="class in java.io">Writer</a></pre><div class="block">Prints formatted representations of objects to a text-output stream. This class implements all of the <tt>print</tt> methods found in <a href="../../java/io/PrintStream.html" title="class in java.io"><code>PrintStream</code></a>. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams.<p> Unlike the <a href="../../java/io/PrintStream.html" title="class in java.io"><code>PrintStream</code></a> class, if automatic flushing is enabled it will be done only when one of the <tt>println</tt>, <tt>printf</tt>, or <tt>format</tt> methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character.                                                  </p><p> Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking <a href="../../java/io/PrintWriter.html#checkError--"><code>checkError()</code></a>.                            </p>                                     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:PrintWriter"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:out [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:out"/><a name="out"/><ul class="blockListLast"><li class="blockList"><h4>out</h4><pre>protected <a href="../../java/io/Writer.html" title="class in java.io">Writer</a> out</pre><div class="block">The underlying character-output stream of this <code>PrintWriter</code>.      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> </dl></li></ul> <a end_ctx_id="field:out"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.io.Writer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.io.Writer-"/><a name="PrintWriter-java.io.Writer-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/io/Writer.html" title="class in java.io">Writer</a> out)</pre><div class="block">Creates a new PrintWriter, without automatic line flushing.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - A character-output stream     </dd> </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.io.Writer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.io.Writer-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.io.Writer-boolean-"/><a name="PrintWriter-java.io.Writer-boolean-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/io/Writer.html" title="class in java.io">Writer</a> out,
                   boolean autoFlush)</pre><div class="block">Creates a new PrintWriter.   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - A character-output stream     </dd><dd> <code>autoFlush</code> - A boolean; if true, the <tt>println</tt>, <tt>printf</tt>, or <tt>format</tt> methods will flush the output buffer                 </dd> </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.io.Writer-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.io.OutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.io.OutputStream-"/><a name="PrintWriter-java.io.OutputStream-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out)</pre><div class="block">Creates a new PrintWriter, without automatic line flushing, from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - An output stream     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/OutputStreamWriter.html#OutputStreamWriter-java.io.OutputStream-"><code>OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.io.OutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.io.OutputStream-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.io.OutputStream-boolean-"/><a name="PrintWriter-java.io.OutputStream-boolean-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                   boolean autoFlush)</pre><div class="block">Creates a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - An output stream     </dd><dd> <code>autoFlush</code> - A boolean; if true, the <tt>println</tt>, <tt>printf</tt>, or <tt>format</tt> methods will flush the output buffer                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/OutputStreamWriter.html#OutputStreamWriter-java.io.OutputStream-"><code>OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.io.OutputStream-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.lang.String-"/><a name="PrintWriter-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/lang/String.html" title="class in java.lang">String</a> fileName)
            throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></pre><div class="block">Creates a new PrintWriter, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate <a href="../../java/io/OutputStreamWriter.html" title="class in java.io"><code>OutputStreamWriter</code></a>, which will encode characters using the <a href="../../java/nio/charset/Charset.html#defaultCharset--">default charset </a> for this instance of the Java virtual machine.                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fileName</code> - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.                                             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file                                     </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and <a href="../../java/lang/SecurityManager.html#checkWrite-java.io.FileDescriptor-"><code>checkWrite(fileName)</code></a> denies write access to the file                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.lang.String-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.lang.String-java.lang.String-"/><a name="PrintWriter-java.lang.String-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/lang/String.html" title="class in java.lang">String</a> fileName,
                   <a href="../../java/lang/String.html" title="class in java.lang">String</a> csn)
            throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a>,
                   <a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></pre><div class="block">Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate <a href="../../java/io/OutputStreamWriter.html" title="class in java.io"><code>OutputStreamWriter</code></a>, which will encode characters using the provided charset.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fileName</code> - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.                                             </dd><dd> <code>csn</code> - The name of a supported <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset">charset</a>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file                                     </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and <a href="../../java/lang/SecurityManager.html#checkWrite-java.io.FileDescriptor-"><code>checkWrite(fileName)</code></a> denies write access to the file                </dd><dd> <code><a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></code> - If the named charset is not supported         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.lang.String-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.io.File- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.io.File-"/><a name="PrintWriter-java.io.File-"/><ul class="blockList"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/io/File.html" title="class in java.io">File</a> file)
            throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></pre><div class="block">Creates a new PrintWriter, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate <a href="../../java/io/OutputStreamWriter.html" title="class in java.io"><code>OutputStreamWriter</code></a>, which will encode characters using the <a href="../../java/nio/charset/Charset.html#defaultCharset--">default charset </a> for this instance of the Java virtual machine.                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.                                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file                                      </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and <a href="../../java/lang/SecurityManager.html#checkWrite-java.io.FileDescriptor-"><code>checkWrite(file.getPath())</code></a> denies write access to the file                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.io.File-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PrintWriter-java.io.File-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PrintWriter-java.io.File-java.lang.String-"/><a name="PrintWriter-java.io.File-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>PrintWriter</h4><pre>public PrintWriter(<a href="../../java/io/File.html" title="class in java.io">File</a> file,
                   <a href="../../java/lang/String.html" title="class in java.lang">String</a> csn)
            throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a>,
                   <a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></pre><div class="block">Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate <a href="../../java/io/OutputStreamWriter.html" title="class in java.io"><code>OutputStreamWriter</code></a>, which will encode characters using the provided charset.                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.                                          </dd><dd> <code>csn</code> - The name of a supported <a href="../../java/nio/charset/Charset.html" title="class in java.nio.charset">charset</a>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file                                      </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and <a href="../../java/lang/SecurityManager.html#checkWrite-java.io.FileDescriptor-"><code>checkWrite(file.getPath())</code></a> denies write access to the file                </dd><dd> <code><a href="../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></code> - If the named charset is not supported         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:PrintWriter-java.io.File-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()</pre><div class="block">Flushes the stream.  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Flushable.html#flush--">flush</a></code> in interface <code><a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#flush--">flush</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/PrintWriter.html#checkError--"><code>checkError()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()</pre><div class="block">Closes the stream and releases any system resources associated with it. Closing a previously closed stream has no effect.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#close--">close</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/PrintWriter.html#checkError--"><code>checkError()</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkError-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkError--"/><a name="checkError--"/><ul class="blockList"><li class="blockList"><h4>checkError</h4><pre>public boolean checkError()</pre><div class="block">Flushes the stream if it's not closed and checks its error state.           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the print stream has encountered an error, either on the underlying output stream or during a format conversion.                    </dd> </dl></li></ul> <a end_ctx_id="method:checkError--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setError-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setError--"/><a name="setError--"/><ul class="blockList"><li class="blockList"><h4>setError</h4><pre>protected void setError()</pre><div class="block">Indicates that an error has occurred.<p> This method will cause subsequent invocations of <a href="../../java/io/PrintWriter.html#checkError--"><code>checkError()</code></a> to return <tt>true</tt> until <a href="../../java/io/PrintWriter.html#clearError--"><code>clearError()</code></a> is invoked.               </p>     </div></li></ul> <a end_ctx_id="method:setError--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clearError-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clearError--"/><a name="clearError--"/><ul class="blockList"><li class="blockList"><h4>clearError</h4><pre>protected void clearError()</pre><div class="block">Clears the error state of this stream.<p> This method will cause subsequent invocations of <a href="../../java/io/PrintWriter.html#checkError--"><code>checkError()</code></a> to return <tt>false</tt> until another write operation fails and invokes <a href="../../java/io/PrintWriter.html#setError--"><code>setError()</code></a>.                   </p>      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> </dl></li></ul> <a end_ctx_id="method:clearError--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-int-"/><a name="write-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(int c)</pre><div class="block">Writes a single character.   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - int specifying a character to be written.         </dd>  </dl></li></ul> <a end_ctx_id="method:write-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-char:A-int-int-"/><a name="write-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(char[] buf,
                  int off,
                  int len)</pre><div class="block">Writes A Portion of an array of characters.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-char:A-int-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - Array of characters     </dd><dd> <code>off</code> - Offset from which to start writing characters         </dd><dd> <code>len</code> - Number of characters to write       </dd>  </dl></li></ul> <a end_ctx_id="method:write-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-char:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-char:A-"/><a name="write-char:A-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(char[] buf)</pre><div class="block">Writes an array of characters. This method cannot be inherited from the Writer class because it must suppress I/O exceptions.                   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-char:A-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - Array of characters to be written        </dd>  </dl></li></ul> <a end_ctx_id="method:write-char:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-java.lang.String-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-java.lang.String-int-int-"/><a name="write-java.lang.String-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s,
                  int off,
                  int len)</pre><div class="block">Writes a portion of a string.     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-java.lang.String-int-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - A String    </dd><dd> <code>off</code> - Offset from which to start writing characters         </dd><dd> <code>len</code> - Number of characters to write       </dd>  </dl></li></ul> <a end_ctx_id="method:write-java.lang.String-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-java.lang.String-"/><a name="write-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)</pre><div class="block">Writes a string. This method cannot be inherited from the Writer class because it must suppress I/O exceptions.                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-java.lang.String-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - String to be written      </dd>  </dl></li></ul> <a end_ctx_id="method:write-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-boolean-"/><a name="print-boolean-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(boolean b)</pre><div class="block">Prints a boolean value. The string produced by <code><a href="../../java/lang/String.html#valueOf-boolean-"><code>String.valueOf(boolean)</code></a></code> is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - The <code>boolean</code> to be printed       </dd> </dl></li></ul> <a end_ctx_id="method:print-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-char- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-char-"/><a name="print-char-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(char c)</pre><div class="block">Prints a character. The character is translated into one or more bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - The <code>char</code> to be printed       </dd> </dl></li></ul> <a end_ctx_id="method:print-char-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-int-"/><a name="print-int-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(int i)</pre><div class="block">Prints an integer. The string produced by <code><a href="../../java/lang/String.html#valueOf-int-"><code>String.valueOf(int)</code></a></code> is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - The <code>int</code> to be printed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#toString-int-"><code>Integer.toString(int)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:print-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-long-"/><a name="print-long-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(long l)</pre><div class="block">Prints a long integer. The string produced by <code><a href="../../java/lang/String.html#valueOf-long-"><code>String.valueOf(long)</code></a></code> is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>l</code> - The <code>long</code> to be printed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Long.html#toString-long-"><code>Long.toString(long)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:print-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-float-"/><a name="print-float-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(float f)</pre><div class="block">Prints a floating-point number. The string produced by <code><a href="../../java/lang/String.html#valueOf-float-"><code>String.valueOf(float)</code></a></code> is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - The <code>float</code> to be printed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Float.html#toString-float-"><code>Float.toString(float)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:print-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-double-"/><a name="print-double-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(double d)</pre><div class="block">Prints a double-precision floating-point number. The string produced by <code><a href="../../java/lang/String.html#valueOf-double-"><code>String.valueOf(double)</code></a></code> is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - The <code>double</code> to be printed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Double.html#toString-double-"><code>Double.toString(double)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:print-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-char:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-char:A-"/><a name="print-char:A-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(char[] s)</pre><div class="block">Prints an array of characters. The characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - The array of chars to be printed         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>s</code> is <code>null</code>      </dd>  </dl></li></ul> <a end_ctx_id="method:print-char:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-java.lang.String-"/><a name="print-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)</pre><div class="block">Prints a string. If the argument is <code>null</code> then the string <code>"null"</code> is printed. Otherwise, the string's characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - The <code>String</code> to be printed       </dd> </dl></li></ul> <a end_ctx_id="method:print-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:print-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:print-java.lang.Object-"/><a name="print-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>print</h4><pre>public void print(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Prints an object. The string produced by the <code><a href="../../java/lang/String.html#valueOf-java.lang.Object-"><code>String.valueOf(Object)</code></a></code> method is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the <code><a href="../../java/io/PrintWriter.html#write-int-"><code>write(int)</code></a></code> method.                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - The <code>Object</code> to be printed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#toString--"><code>Object.toString()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:print-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println--"/><a name="println--"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println()</pre><div class="block">Terminates the current line by writing the line separator string. The line separator string is defined by the system property <code>line.separator</code>, and is not necessarily a single newline character (<code>'\n'</code>).                             </div></li></ul> <a end_ctx_id="method:println--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-boolean-"/><a name="println-boolean-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(boolean x)</pre><div class="block">Prints a boolean value and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-boolean-"><code>print(boolean)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>boolean</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-char- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-char-"/><a name="println-char-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(char x)</pre><div class="block">Prints a character and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-char-"><code>print(char)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>char</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-char-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-int-"/><a name="println-int-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(int x)</pre><div class="block">Prints an integer and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-int-"><code>print(int)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>int</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-long-"/><a name="println-long-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(long x)</pre><div class="block">Prints a long integer and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-long-"><code>print(long)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>long</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-float-"/><a name="println-float-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(float x)</pre><div class="block">Prints a floating-point number and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-float-"><code>print(float)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>float</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-double-"/><a name="println-double-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(double x)</pre><div class="block">Prints a double-precision floating-point number and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-double-"><code>print(double)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>double</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-char:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-char:A-"/><a name="println-char:A-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(char[] x)</pre><div class="block">Prints an array of characters and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-char:A-"><code>print(char[])</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the array of <code>char</code> values to be printed          </dd> </dl></li></ul> <a end_ctx_id="method:println-char:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-java.lang.String-"/><a name="println-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(<a href="../../java/lang/String.html" title="class in java.lang">String</a> x)</pre><div class="block">Prints a String and then terminates the line. This method behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-java.lang.String-"><code>print(String)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the <code>String</code> value to be printed        </dd> </dl></li></ul> <a end_ctx_id="method:println-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:println-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:println-java.lang.Object-"/><a name="println-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>println</h4><pre>public void println(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> x)</pre><div class="block">Prints an Object and then terminates the line. This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes <code><a href="../../java/io/PrintWriter.html#print-java.lang.String-"><code>print(String)</code></a></code> and then <code><a href="../../java/io/PrintWriter.html#println--"><code>println()</code></a></code>.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - The <code>Object</code> to be printed.       </dd> </dl></li></ul> <a end_ctx_id="method:println-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:printf-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:printf-java.lang.String-java.lang.Object...-"/><a name="printf-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>printf</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> printf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                          <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer.<p> An invocation of this method of the form <tt>out.printf(format, args) </tt> behaves in exactly the same way as the invocation<pre>
     out.format(format, args) </pre>                  </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>format</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>.         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>. The behaviour on a <tt>null</tt> argument depends on the <a href="../util/Formatter.html#syntax">conversion</a>.                                                                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If the <tt>format</tt> is <tt>null</tt>       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:printf-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:printf-java.util.Locale-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:printf-java.util.Locale-java.lang.String-java.lang.Object...-"/><a name="printf-java.util.Locale-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>printf</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> printf(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a> l,
                          <a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                          <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer.<p> An invocation of this method of the form <tt>out.printf(l, format, args)  </tt> behaves in exactly the same way as the invocation<pre>
     out.format(l, format, args) </pre>                  </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>l</code> - The <a href="../../java/util/Locale.html" title="class in java.util">locale</a> to apply during formatting. If <tt>l</tt> is <tt>null</tt> then no localization is applied.                 </dd><dd> <code>format</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>.         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>. The behaviour on a <tt>null</tt> argument depends on the <a href="../util/Formatter.html#syntax">conversion</a>.                                                                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If the <tt>format</tt> is <tt>null</tt>       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:printf-java.util.Locale-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:format-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:format-java.lang.String-java.lang.Object...-"/><a name="format-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>format</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> format(<a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                          <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer.<p> The locale always used is the one returned by <a href="../../java/util/Locale.html#getDefault--"><code>Locale.getDefault()</code></a>, regardless of any previous invocations of other formatting methods on this object.                      </p>                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>format</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>.         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>. The behaviour on a <tt>null</tt> argument depends on the <a href="../util/Formatter.html#syntax">conversion</a>.                                                                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the Formatter class specification.                                              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If the <tt>format</tt> is <tt>null</tt>       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:format-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:format-java.util.Locale-java.lang.String-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:format-java.util.Locale-java.lang.String-java.lang.Object...-"/><a name="format-java.util.Locale-java.lang.String-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>format</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> format(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a> l,
                          <a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                          <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... args)</pre><div class="block">Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>l</code> - The <a href="../../java/util/Locale.html" title="class in java.util">locale</a> to apply during formatting. If <tt>l</tt> is <tt>null</tt> then no localization is applied.                 </dd><dd> <code>format</code> - A format string as described in <a href="../util/Formatter.html#syntax">Format string syntax  </a>.         </dd><dd> <code>args</code> - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by <cite>The Java™ Virtual Machine Specification    </cite>. The behaviour on a <tt>null</tt> argument depends on the <a href="../util/Formatter.html#syntax">conversion</a>.                                                                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                                              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If the <tt>format</tt> is <tt>null</tt>       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:format-java.util.Locale-java.lang.String-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:append-java.lang.CharSequence- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:append-java.lang.CharSequence-"/><a name="append-java.lang.CharSequence-"/><ul class="blockList"><li class="blockList"><h4>append</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> append(<a href="../../java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a> csq)</pre><div class="block">Appends the specified character sequence to this writer.<p> An invocation of this method of the form <tt>out.append(csq)</tt> behaves in exactly the same way as the invocation<pre>
     out.write(csq.toString()) </pre>                  </p><p> Depending on the specification of <tt>toString</tt> for the character sequence <tt>csq</tt>, the entire sequence may not be appended. For instance, invoking the <tt>toString</tt> method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit.                                         </p>       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Appendable.html#append-java.lang.CharSequence-">append</a></code> in interface <code><a href="../../java/lang/Appendable.html" title="interface in java.lang">Appendable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#append-java.lang.CharSequence-">append</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>csq</code> - The character sequence to append. If <tt>csq</tt> is <tt>null</tt>, then the four characters <tt>"null"</tt> are appended to this writer.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>     </dl></li></ul> <a end_ctx_id="method:append-java.lang.CharSequence-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:append-java.lang.CharSequence-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:append-java.lang.CharSequence-int-int-"/><a name="append-java.lang.CharSequence-int-int-"/><ul class="blockList"><li class="blockList"><h4>append</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> append(<a href="../../java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a> csq,
                          int start,
                          int end)</pre><div class="block">Appends a subsequence of the specified character sequence to this writer.<p> An invocation of this method of the form <tt>out.append(csq, start, end)  </tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in exactly the same way as the invocation<pre>
     out.write(csq.subSequence(start, end).toString()) </pre>                       </p>          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Appendable.html#append-java.lang.CharSequence-int-int-">append</a></code> in interface <code><a href="../../java/lang/Appendable.html" title="interface in java.lang">Appendable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#append-java.lang.CharSequence-int-int-">append</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>csq</code> - The character sequence from which a subsequence will be appended. If <tt>csq</tt> is <tt>null</tt>, then characters will be appended as if <tt>csq</tt> contained the four characters <tt>"null"</tt>.                             </dd><dd> <code>start</code> - The index of the first character in the subsequence           </dd><dd> <code>end</code> - The index of the character following the last character in the subsequence              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt> is greater than <tt>end</tt>, or <tt>end</tt> is greater than <tt>csq.length()</tt>                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>      </dl></li></ul> <a end_ctx_id="method:append-java.lang.CharSequence-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:append-char- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:append-char-"/><a name="append-char-"/><ul class="blockListLast"><li class="blockList"><h4>append</h4><pre>public <a href="../../java/io/PrintWriter.html" title="class in java.io">PrintWriter</a> append(char c)</pre><div class="block">Appends the specified character to this writer.<p> An invocation of this method of the form <tt>out.append(c)</tt> behaves in exactly the same way as the invocation<pre>
     out.write(c) </pre>                  </p>      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Appendable.html#append-char-">append</a></code> in interface <code><a href="../../java/lang/Appendable.html" title="interface in java.lang">Appendable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#append-char-">append</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - The 16-bit character to append       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>This writer </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>     </dl></li></ul> <a end_ctx_id="method:append-char-"/>  </td></tr></table></td></tr></table></diff></diffreport>