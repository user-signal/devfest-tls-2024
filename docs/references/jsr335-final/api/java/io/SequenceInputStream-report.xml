<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:SequenceInputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:SequenceInputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>  </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">SequenceInputStream</span>
extends <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></pre><div class="block">A <code>SequenceInputStream</code> represents the logical concatenation of other input streams. It starts out with an ordered collection of input streams and reads from the first one until end of file is reached, whereupon it reads from the second one, and so on, until end of file is reached on the last of the contained input streams.                                                       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:SequenceInputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:SequenceInputStream-java.util.Enumeration- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:SequenceInputStream-java.util.Enumeration-"/><a name="SequenceInputStream-java.util.Enumeration-"/><ul class="blockList"><li class="blockList"><h4>SequenceInputStream</h4><pre>public SequenceInputStream(<a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;? extends <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a>&gt; e)</pre><div class="block">Initializes a newly created <code>SequenceInputStream</code> by remembering the argument, which must be an <code>Enumeration</code> that produces objects whose run-time type is <code>InputStream</code>. The input streams that are produced by the enumeration will be read, in order, to provide the bytes to be read from this <code>SequenceInputStream</code>. After each input stream from the enumeration is exhausted, it is closed by calling its <code>close</code> method.                                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - an enumeration of input streams.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a> </dd>  </dl></li></ul> <a end_ctx_id="constructor:SequenceInputStream-java.util.Enumeration-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:SequenceInputStream-java.io.InputStream-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:SequenceInputStream-java.io.InputStream-java.io.InputStream-"/><a name="SequenceInputStream-java.io.InputStream-java.io.InputStream-"/><ul class="blockListLast"><li class="blockList"><h4>SequenceInputStream</h4><pre>public SequenceInputStream(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> s1,
                           <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> s2)</pre><div class="block">Initializes a newly created <code>SequenceInputStream</code> by remembering the two arguments, which will be read in order, first <code>s1</code> and then <code>s2</code>, to provide the bytes to be read from this <code>SequenceInputStream</code>.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s1</code> - the first input stream to read.        </dd><dd> <code>s2</code> - the second input stream to read.        </dd> </dl></li></ul> <a end_ctx_id="constructor:SequenceInputStream-java.io.InputStream-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:available-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:available--"/><a name="available--"/><ul class="blockList"><li class="blockList"><h4>available</h4><pre>public int available()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.<p> This method simply calls <code>available</code> of the current underlying input stream and returns the result.               </p>                                                                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#available--">available</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking or <code>0</code> if this input stream has been closed by invoking its <a href="../../java/io/SequenceInputStream.html#close--"><code>close()</code></a> method                                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd>    </dl></li></ul> <a end_ctx_id="method:available--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads the next byte of data from this input stream. The byte is returned as an <code>int</code> in the range <code>0</code> to <code>255</code>. If no byte is available because the end of the stream has been reached, the value <code>-1</code> is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.<p> This method tries to read one character from the current substream. If it reaches the end of the stream, it calls the <code>close</code> method of the current substream and begins reading from the next substream.                                   </p>                                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read--">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next byte of data, or <code>-1</code> if the end of the stream is reached.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-int-int-"/><a name="read-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads up to <code>len</code> bytes of data from this input stream into an array of bytes. If <code>len</code> is not zero, the method blocks until at least 1 byte of input is available; otherwise, no bytes are read and <code>0</code> is returned.<p> The <code>read</code> method of <code>SequenceInputStream</code> tries to read the data from the current substream. If it fails to read any characters because the substream has reached the end of the stream, it calls the <code>close</code> method of the current substream and begins reading from the next substream.                                               </p>                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read-byte:A-int-int-">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd><dd> <code>off</code> - the start offset in array <code>b</code> at which the data is written.              </dd><dd> <code>len</code> - the maximum number of bytes read.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>int the number of bytes read.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>b</code> is <code>null</code>.      </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off  </code>               </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#read--"><code>InputStream.read()</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:read-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this input stream and releases any system resources associated with the stream. A closed <code>SequenceInputStream</code> cannot perform input operations and cannot be reopened.<p> If this stream was created from an enumeration, all remaining elements are requested from the enumeration and closed before the <code>close</code> method returns.                       </p>                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#close--">close</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>