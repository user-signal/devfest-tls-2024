<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:FilePermission [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:FilePermission"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/security/Guard.html" title="interface in java.security">Guard</a>  </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">FilePermission</span>
extends <a href="../../java/security/Permission.html" title="class in java.security">Permission</a>
implements <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">This class represents access to a file or directory. A FilePermission consists of a pathname and a set of actions valid for that pathname.<p> Pathname is the pathname of the file or directory granted the specified actions. A pathname that ends in "/*" (where "/" is the file separator character, <code>File.separatorChar</code>) indicates all the files and directories contained in that directory. A pathname that ends with "/-" indicates (recursively) all files and subdirectories contained in that directory. A pathname consisting of the special token "&lt;&lt;ALL FILES&gt;&gt;" matches <b>any</b> file.                                                                 </p><p> Note: A pathname consisting of a single "*" indicates all the files in the current directory, while a pathname consisting of a single "-" indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory.                                           </p><p> The actions to be granted are passed to the constructor in a string containing a list of one or more comma-separated keywords. The possible keywords are "read", "write", "execute", "delete", and "readlink". Their meaning is defined as follows:<dl> <dt> read   </dt><dd> read permission  </dd> <dt> write   </dt><dd> write permission  </dd> <dt> execute   </dt><dd> execute permission. Allows <code>Runtime.exec</code> to be called. Corresponds to <code>SecurityManager.checkExec</code>.          </dd> <dt> delete   </dt><dd> delete permission. Allows <code>File.delete</code> to be called. Corresponds to <code>SecurityManager.checkDelete</code>.          </dd> <dt> readlink   </dt><dd> read link permission. Allows the target of a <a href="../nio/file/package-summary.html#links">symbolic link </a> to be read by invoking the <a href="../../java/nio/file/Files.html#readSymbolicLink-java.nio.file.Path-"><code>readSymbolicLink  </code></a> method.                 </dd>     </dl>                                      </p><p> The actions string is converted to lowercase before processing.         </p><p> Be careful when granting FilePermissions. Think about the implications of granting read and especially write access to various files and directories. The "&lt;&lt;ALL FILES&gt;&gt;" permission with write action is especially dangerous. This grants permission to write to the entire file system. One thing this effectively allows is replacement of the system binary, including the JVM runtime environment.                                                         </p><p>Please note: Code can always read a file from the same directory it's in (or a subdirectory of that directory); it does not need explicit permission to do so.                            </p>                       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/security/Permission.html" title="class in java.security"><code>Permission</code></a>, <a href="../../java/security/Permissions.html" title="class in java.security"><code>Permissions</code></a>, <a href="../../java/security/PermissionCollection.html" title="class in java.security"><code>PermissionCollection</code></a>   </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:FilePermission"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FilePermission-java.lang.String-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FilePermission-java.lang.String-java.lang.String-"/><a name="FilePermission-java.lang.String-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>FilePermission</h4><pre>public FilePermission(<a href="../../java/lang/String.html" title="class in java.lang">String</a> path,
                      <a href="../../java/lang/String.html" title="class in java.lang">String</a> actions)</pre><div class="block">Creates a new FilePermission object with the specified actions. <i>path</i> is the pathname of a file or directory, and <i>actions</i> contains a comma-separated list of the desired actions granted on the file or directory. Possible actions are "read", "write", "execute", "delete", and "readlink".<p>A pathname that ends in "/*" (where "/" is the file separator character, <code>File.separatorChar</code>) indicates all the files and directories contained in that directory. A pathname that ends with "/-" indicates (recursively) all files and subdirectories contained in that directory. The special pathname "&lt;&lt;ALL FILES&gt;&gt;" matches any file.                                               </p><p>A pathname consisting of a single "*" indicates all the files in the current directory, while a pathname consisting of a single "-" indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory.                                         </p><p>A pathname containing an empty string represents an empty path.         </p>                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>path</code> - the pathname of the file/directory.       </dd><dd> <code>actions</code> - the action string.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If actions is <code>null</code>, empty or contains an action other than the specified possible actions.                 </dd>  </dl></li></ul> <a end_ctx_id="constructor:FilePermission-java.lang.String-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:implies-java.security.Permission- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:implies-java.security.Permission-"/><a name="implies-java.security.Permission-"/><ul class="blockList"><li class="blockList"><h4>implies</h4><pre>public boolean implies(<a href="../../java/security/Permission.html" title="class in java.security">Permission</a> p)</pre><div class="block">Checks if this FilePermission object "implies" the specified permission.<p> More specifically, this method returns true if:<ul><li> <i>p</i> is an instanceof FilePermission,     </li><li> <i>p</i>'s actions are a proper subset of this object's actions, and           </li><li> <i>p</i>'s pathname is implied by this object's pathname. For example, "/tmp/*" implies "/tmp/foo", since "/tmp/*" encompasses all files in the "/tmp" directory, including the one named "foo".                           </li></ul>       </p>        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/security/Permission.html#implies-java.security.Permission-">implies</a></code> in class <code><a href="../../java/security/Permission.html" title="class in java.security">Permission</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>p</code> - the permission to check against.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the specified permission is not <code>null</code> and is implied by this object, <code>false</code> otherwise.                </dd>   </dl></li></ul> <a end_ctx_id="method:implies-java.security.Permission-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Checks two FilePermission objects for equality. Checks that <i>obj</i> is a FilePermission, and has the same pathname and actions as this object.                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/security/Permission.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/security/Permission.html" title="class in java.security">Permission</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object we are testing for equality with this object.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if obj is a FilePermission, and has the same pathname and actions as this FilePermission object, <code>false</code> otherwise.                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value for this object.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/security/Permission.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/security/Permission.html" title="class in java.security">Permission</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for this object.      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getActions-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getActions--"/><a name="getActions--"/><ul class="blockList"><li class="blockList"><h4>getActions</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> getActions()</pre><div class="block">Returns the "canonical string representation" of the actions. That is, this method always returns present actions in the following order: read, write, execute, delete, readlink. For example, if this FilePermission object allows both write and read actions, a call to <code>getActions</code> will return the string "read,write".                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/security/Permission.html#getActions--">getActions</a></code> in class <code><a href="../../java/security/Permission.html" title="class in java.security">Permission</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the canonical string representation of the actions.      </dd>  </dl></li></ul> <a end_ctx_id="method:getActions--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newPermissionCollection-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newPermissionCollection--"/><a name="newPermissionCollection--"/><ul class="blockListLast"><li class="blockList"><h4>newPermissionCollection</h4><pre>public <a href="../../java/security/PermissionCollection.html" title="class in java.security">PermissionCollection</a> newPermissionCollection()</pre><div class="block">Returns a new PermissionCollection object for storing FilePermission objects.<p> FilePermission objects must be stored in a manner that allows them to be inserted into the collection in any order, but that also enables the PermissionCollection <code>implies</code> method to be implemented in an efficient (and consistent) manner.                                     </p><p>For example, if you have two FilePermissions:<ol><li> <code>"/tmp/-", "read" </code> </li><li> <code>"/tmp/scratch/foo", "write" </code> </li></ol>      </p><p>and you are calling the <code>implies</code> method with the FilePermission:<pre>
   "/tmp/scratch/foo", "read,write",
 </pre> then the <code>implies</code> function must take into account both the "/tmp/-" and "/tmp/scratch/foo" permissions, so the effective permission is "read,write", and <code>implies</code> returns true. The "implies" semantics for FilePermissions are handled properly by the PermissionCollection object returned by this <code>newPermissionCollection</code> method.                                                  </p>        </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/security/Permission.html#newPermissionCollection--">newPermissionCollection</a></code> in class <code><a href="../../java/security/Permission.html" title="class in java.security">Permission</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a new PermissionCollection object suitable for storing FilePermissions.       </dd>  </dl></li></ul> <a end_ctx_id="method:newPermissionCollection--"/>  </td></tr></table></td></tr></table></diff></diffreport>