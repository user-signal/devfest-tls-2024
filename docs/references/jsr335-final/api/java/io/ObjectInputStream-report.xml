<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ObjectInputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ObjectInputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a>, <a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a>, <a href="../../java/io/ObjectStreamConstants.html" title="interface in java.io">ObjectStreamConstants</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>     </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">ObjectInputStream</span>
extends <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a>
implements <a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a>, <a href="../../java/io/ObjectStreamConstants.html" title="interface in java.io">ObjectStreamConstants</a></pre><div class="block">An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.<p>ObjectOutputStream and ObjectInputStream can provide an application with persistent storage for graphs of objects when used with a FileOutputStream and FileInputStream respectively. ObjectInputStream is used to recover those objects previously serialized. Other uses include passing objects between hosts using a socket stream or for marshaling and unmarshaling arguments and parameters in a remote communication system.                                                      </p><p>ObjectInputStream ensures that the types of all objects in the graph created from the stream match the classes present in the Java Virtual Machine. Classes are loaded as required using the standard mechanisms.                                </p><p>Only objects that support the java.io.Serializable or java.io.Externalizable interface can be read from streams.             </p><p>The method <code>readObject</code> is used to read an object from the stream. Java's safe casting should be used to get the desired type. In Java, strings and arrays are objects and are treated as objects during serialization. When read they need to be cast to the expected type.                                               </p><p>Primitive data types can be read from the stream using the appropriate method on DataInput.              </p><p>The default deserialization mechanism for objects restores the contents of each field to the value and type it had when it was written. Fields declared as transient or static are ignored by the deserialization process. References to other objects cause those objects to be read from the stream as necessary. Graphs of objects are restored correctly using a reference sharing mechanism. New objects are always allocated when deserializing, which prevents existing objects from being overwritten.                                                                          </p><p>Reading an object is analogous to running the constructors of a new object. Memory is allocated for the object and initialized to zero (NULL). No-arg constructors are invoked for the non-serializable classes and then the fields of the serializable classes are restored from the stream starting with the serializable class closest to java.lang.object and finishing with the object's most specific class.                                                            </p><p>For example to read from a stream as written by the example in ObjectOutputStream: <br/><pre>
      FileInputStream fis = new FileInputStream("t.tmp");
      ObjectInputStream ois = new ObjectInputStream(fis);

      int i = ois.readInt();
      String today = (String) ois.readObject();
      Date date = (Date) ois.readObject();

      ois.close();
 </pre>              </p><p>Classes control how they are serialized by implementing either the java.io.Serializable or java.io.Externalizable interfaces.             </p><p>Implementing the Serializable interface allows object serialization to save and restore the entire state of the object and it allows classes to evolve between the time the stream is written and the time it is read. It automatically traverses references between objects, saving and restoring entire graphs.                                              </p><p>Serializable classes that require special handling during the serialization and deserialization process should implement the following methods:<pre>
 private void writeObject(java.io.ObjectOutputStream stream)
     throws IOException;
 private void readObject(java.io.ObjectInputStream stream)
     throws IOException, ClassNotFoundException;
 private void readObjectNoData()
     throws ObjectStreamException;
 </pre>                </p><p>The readObject method is responsible for reading and restoring the state of the object for its particular class using data written to the stream by the corresponding writeObject method. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is restored by reading data from the ObjectInputStream for the individual fields and making assignments to the appropriate fields of the object. Reading primitive data types is supported by DataInput.                                                                            </p><p>Any attempt to read object data which exceeds the boundaries of the custom data written by the corresponding writeObject method will cause an OptionalDataException to be thrown with an eof field value of true. Non-object reads which exceed the end of the allotted data will reflect the end of data in the same way that they would indicate the end of the stream: bytewise reads will return -1 as the byte read or number of bytes read, and primitive reads will throw EOFExceptions. If there is no corresponding writeObject method, then the end of default serialized data marks the end of the allotted data.                                                                                                       </p><p>Primitive and object read calls issued from within a readExternal method behave in the same manner--if the stream is already positioned at the end of data written by the corresponding writeExternal method, object reads will throw OptionalDataExceptions with eof set to true, bytewise reads will return -1, and primitive reads will throw EOFExceptions. Note that this behavior does not hold for streams written with the old <code>ObjectStreamConstants.PROTOCOL_VERSION_1</code> protocol, in which the end of data written by writeExternal methods is not demarcated, and hence cannot be detected.                                                                                     </p><p>The readObjectNoData method is responsible for initializing the state of the object for its particular class in the event that the serialization stream does not list the given class as a superclass of the object being deserialized. This may occur in cases where the receiving party uses a different version of the deserialized instance's class than the sending party, and the receiver's version extends classes that are not extended by the sender's version. This may also occur if the serialization stream has been tampered; hence, readObjectNoData is useful for initializing deserialized objects properly despite a "hostile" or incomplete source stream.                                                                                                   </p><p>Serialization does not read or assign values to the fields of any object that does not implement the java.io.Serializable interface. Subclasses of Objects that are not serializable can be serializable. In this case the non-serializable class must have a no-arg constructor to allow its fields to be initialized. In this case it is the responsibility of the subclass to save and restore the state of the non-serializable class. It is frequently the case that the fields of that class are accessible (public, package, or protected) or that there are get and set methods that can be used to restore the state.                                                                                                    </p><p>Any exception that occurs while deserializing an object will be caught by the ObjectInputStream and abort the reading process.                  </p><p>Implementing the Externalizable interface allows the object to assume complete control over the contents and format of the object's serialized form. The methods of the Externalizable interface, writeExternal and readExternal, are called to save and restore the objects state. When implemented by a class they can write and read their own state using all of the methods of ObjectOutput and ObjectInput. It is the responsibility of the objects to handle any versioning that occurs.                                                                         </p><p>Enum constants are deserialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not transmitted. To deserialize an enum constant, ObjectInputStream reads the constant name from the stream; the deserialized constant is then obtained by calling the static method <code>Enum.valueOf(Class, String) </code> with the enum constant's base type and the received constant name as arguments. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are deserialized cannot be customized: any class-specific readObject, readObjectNoData, and readResolve methods defined by enum types are ignored during deserialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L.                                                                                                                                      </p>           </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/DataInput.html" title="interface in java.io"><code>DataInput</code></a>, <a href="../../java/io/ObjectOutputStream.html" title="class in java.io"><code>ObjectOutputStream</code></a>, <a href="../../java/io/Serializable.html" title="interface in java.io"><code>Serializable</code></a>, <a href="../../../platform/serialization/spec/input.html"> Object Serialization Specification, Section 3, Object Input Classes        </a>    </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:ObjectInputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ObjectInputStream-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ObjectInputStream-java.io.InputStream-"/><a name="ObjectInputStream-java.io.InputStream-"/><ul class="blockList"><li class="blockList"><h4>ObjectInputStream</h4><pre>public ObjectInputStream(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates an ObjectInputStream that reads from the specified InputStream. A serialization stream header is read from the stream and verified. This constructor will block until the corresponding ObjectOutputStream has written and flushed the header.<p>If a security manager is installed, this constructor will check for the "enableSubclassImplementation" SerializablePermission when invoked directly or indirectly by the constructor of a subclass which overrides the ObjectInputStream.readFields or ObjectInputStream.readUnshared methods.                               </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - input stream to read from       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/StreamCorruptedException.html" title="class in java.io">StreamCorruptedException</a></code> - if the stream header is incorrect        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs while reading stream header           </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if untrusted subclass illegally overrides security-sensitive methods         </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>in</code> is <code>null</code>      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectInputStream.html#ObjectInputStream--"><code>ObjectInputStream()</code></a>, <a href="../../java/io/ObjectInputStream.html#readFields--"><code>readFields()</code></a>, <a href="../../java/io/ObjectOutputStream.html#ObjectOutputStream-java.io.OutputStream-"><code>ObjectOutputStream.ObjectOutputStream(OutputStream)</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="constructor:ObjectInputStream-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ObjectInputStream-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ObjectInputStream--"/><a name="ObjectInputStream--"/><ul class="blockListLast"><li class="blockList"><h4>ObjectInputStream</h4><pre>protected ObjectInputStream()
                     throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                            <a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Provide a way for subclasses that are completely reimplementing ObjectInputStream to not have to allocate private data just used by this implementation of ObjectInputStream.<p>If there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>SerializablePermission("enableSubclassImplementation")</code> permission to ensure it's ok to enable subclassing.                          </p>                       </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkPermission</code> method denies enabling subclassing.              </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs while creating this stream           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>SecurityManager.checkPermission(java.security.Permission)</code></a>, <a href="../../java/io/SerializablePermission.html" title="class in java.io"><code>SerializablePermission</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="constructor:ObjectInputStream--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readObject-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readObject--"/><a name="readObject--"/><ul class="blockList"><li class="blockList"><h4>readObject</h4><pre>public final <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> readObject()
                        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                               <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Read an object from the ObjectInputStream. The class of the object, the signature of the class, and the values of the non-transient and non-static fields of the class and all of its supertypes are read. Default deserializing for a class can be overriden using the writeObject and readObject methods. Objects referenced by this object are read transitively so that a complete equivalent graph of objects is reconstructed by readObject.<p>The root object is completely restored when all of its fields and the objects it references are completely restored. At this point the object validation callbacks are executed in order based on their registered priorities. The callbacks are registered by objects (in the readObject special methods) as they are individually restored.                                                  </p><p>Exceptions are thrown for problems with the InputStream and for classes that should not be deserialized. All exceptions are fatal to the InputStream and leave it in an indeterminate state; it is up to the caller to ignore or recover the stream state.                                          </p>                                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectInput.html#readObject--">readObject</a></code> in interface <code><a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the object read from the stream     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - Class of a serialized object cannot be found.          </dd><dd> <code><a href="../../java/io/InvalidClassException.html" title="class in java.io">InvalidClassException</a></code> - Something is wrong with a class used by serialization.           </dd><dd> <code><a href="../../java/io/StreamCorruptedException.html" title="class in java.io">StreamCorruptedException</a></code> - Control information in the stream is inconsistent.         </dd><dd> <code><a href="../../java/io/OptionalDataException.html" title="class in java.io">OptionalDataException</a></code> - Primitive data was found in the stream instead of objects.            </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Any of the usual Input/Output related exceptions.         </dd>   </dl></li></ul> <a end_ctx_id="method:readObject--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readObjectOverride-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readObjectOverride--"/><a name="readObjectOverride--"/><ul class="blockList"><li class="blockList"><h4>readObjectOverride</h4><pre>protected <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> readObjectOverride()
                             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                                    <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor. The subclass is expected to provide an override method with the modifier "final".                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Object read from the stream.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - Class definition of a serialized object cannot be found.           </dd><dd> <code><a href="../../java/io/OptionalDataException.html" title="class in java.io">OptionalDataException</a></code> - Primitive data was found in the stream instead of objects.            </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if I/O errors occurred while reading from the underlying stream            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectInputStream.html#ObjectInputStream--"><code>ObjectInputStream()</code></a>, <a href="../../java/io/ObjectInputStream.html#readObject--"><code>readObject()</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:readObjectOverride--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUnshared-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUnshared--"/><a name="readUnshared--"/><ul class="blockList"><li class="blockList"><h4>readUnshared</h4><pre>public <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> readUnshared()
                    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                           <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Reads an "unshared" object from the ObjectInputStream. This method is identical to readObject, except that it prevents subsequent calls to readObject and readUnshared from returning additional references to the deserialized instance obtained via this call. Specifically:<ul><li>If readUnshared is called to deserialize a back-reference (the stream representation of an object which has been written previously to the stream), an ObjectStreamException will be thrown.                          </li><li>If readUnshared returns successfully, then any subsequent attempts to deserialize back-references to the stream handle deserialized by readUnshared will cause an ObjectStreamException to be thrown.                        </li></ul> Deserializing an object via readUnshared invalidates the stream handle associated with the returned object. Note that this in itself does not always guarantee that the reference returned by readUnshared is unique; the deserialized object may define a readResolve method which returns an object visible to other parties, or readUnshared may return a Class object or enum constant obtainable elsewhere in the stream or through external means. If the deserialized object defines a readResolve method and the invocation of that method returns an array, then readUnshared returns a shallow clone of that array; this guarantees that the returned array object is unique and cannot be obtained a second time from an invocation of readObject or readUnshared on the ObjectInputStream, even if the underlying data stream has been manipulated.<p>ObjectInputStream subclasses which override this method can only be constructed in security contexts possessing the "enableSubclassImplementation" SerializablePermission; any attempt to instantiate such a subclass without this permission will cause a SecurityException to be thrown.                                 </p>                                                                                                                                                                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>reference to deserialized object   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - if class of an object to deserialize cannot be found            </dd><dd> <code><a href="../../java/io/StreamCorruptedException.html" title="class in java.io">StreamCorruptedException</a></code> - if control information in the stream is inconsistent          </dd><dd> <code><a href="../../java/io/ObjectStreamException.html" title="class in java.io">ObjectStreamException</a></code> - if object to deserialize has already appeared in stream           </dd><dd> <code><a href="../../java/io/OptionalDataException.html" title="class in java.io">OptionalDataException</a></code> - if primitive data is next in stream         </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs during deserialization         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:readUnshared--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defaultReadObject-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defaultReadObject--"/><a name="defaultReadObject--"/><ul class="blockList"><li class="blockList"><h4>defaultReadObject</h4><pre>public void defaultReadObject()
                       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                              <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Read the non-static and non-transient fields of the current class from this stream. This may only be called from the readObject method of the class being deserialized. It will throw the NotActiveException if it is called otherwise.                                    </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - if the class of a serialized object could not be found.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd><dd> <code><a href="../../java/io/NotActiveException.html" title="class in java.io">NotActiveException</a></code> - if the stream is not currently reading objects.          </dd> </dl></li></ul> <a end_ctx_id="method:defaultReadObject--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFields-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFields--"/><a name="readFields--"/><ul class="blockList"><li class="blockList"><h4>readFields</h4><pre>public <a href="../../java/io/ObjectInputStream.GetField.html" title="class in java.io">ObjectInputStream.GetField</a> readFields()
                                      throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                                             <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Reads the persistent fields from the stream and makes them available by name.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>GetField</code> object representing the persistent fields of the object being deserialized           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - if the class of a serialized object could not be found.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd><dd> <code><a href="../../java/io/NotActiveException.html" title="class in java.io">NotActiveException</a></code> - if the stream is not currently reading objects.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:readFields--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:registerValidation-java.io.ObjectInputValidation-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:registerValidation-java.io.ObjectInputValidation-int-"/><a name="registerValidation-java.io.ObjectInputValidation-int-"/><ul class="blockList"><li class="blockList"><h4>registerValidation</h4><pre>public void registerValidation(<a href="../../java/io/ObjectInputValidation.html" title="interface in java.io">ObjectInputValidation</a> obj,
                               int prio)
                        throws <a href="../../java/io/NotActiveException.html" title="class in java.io">NotActiveException</a>,
                               <a href="../../java/io/InvalidObjectException.html" title="class in java.io">InvalidObjectException</a></pre><div class="block">Register an object to be validated before the graph is returned. While similar to resolveObject these validations are called after the entire graph has been reconstituted. Typically, a readObject method will register the object with the stream so that when all of the objects are restored a final set of validations can be performed.                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to receive the validation callback.         </dd><dd> <code>prio</code> - controls the order of callbacks;zero is a good default. Use higher numbers to be called back earlier, lower numbers for later callbacks. Within a priority, callbacks are processed in no particular order.                                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/NotActiveException.html" title="class in java.io">NotActiveException</a></code> - The stream is not currently reading objects so it is invalid to register a callback.                 </dd><dd> <code><a href="../../java/io/InvalidObjectException.html" title="class in java.io">InvalidObjectException</a></code> - The validation object is null.       </dd>  </dl></li></ul> <a end_ctx_id="method:registerValidation-java.io.ObjectInputValidation-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolveClass-java.io.ObjectStreamClass- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolveClass-java.io.ObjectStreamClass-"/><a name="resolveClass-java.io.ObjectStreamClass-"/><ul class="blockList"><li class="blockList"><h4>resolveClass</h4><pre>protected <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; resolveClass(<a href="../../java/io/ObjectStreamClass.html" title="class in java.io">ObjectStreamClass</a> desc)
                         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                                <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Load the local class equivalent of the specified stream class description. Subclasses may implement this method to allow classes to be fetched from an alternate source.<p>The corresponding method in <code>ObjectOutputStream</code> is <code>annotateClass</code>. This method will be invoked only once for each unique class in the stream. This method can be implemented by subclasses to use an alternate loading mechanism but must return a <code>Class</code> object. Once returned, if the class is not an array class, its serialVersionUID is compared to the serialVersionUID of the serialized class, and if there is a mismatch, the deserialization fails and an <a href="../../java/io/InvalidClassException.html" title="class in java.io"><code>InvalidClassException</code></a> is thrown.                                                                          </p><p>The default implementation of this method in <code>ObjectInputStream</code> returns the result of calling<pre>
     Class.forName(desc.getName(), false, loader)
 </pre> where <code>loader</code> is determined as follows: if there is a method on the current thread's stack whose declaring class was defined by a user-defined class loader (and was not a generated to implement reflective invocations), then <code>loader</code> is class loader corresponding to the closest such method to the currently executing frame; otherwise, <code>loader</code> is <code>null</code>. If this call results in a <code>ClassNotFoundException</code> and the name of the passed <code>ObjectStreamClass</code> instance is the Java language keyword for a primitive type or void, then the <code>Class</code> object representing that primitive type or void will be returned (e.g., an <code>ObjectStreamClass</code> with the name <code>"int"</code> will be resolved to <code>Integer.TYPE</code>). Otherwise, the <code>ClassNotFoundException</code> will be thrown to the caller of this method.                                                                                                                                  </p>                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>desc</code> - an instance of class <code>ObjectStreamClass</code>       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Class</code> object corresponding to <code>desc</code>     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - any of the usual Input/Output exceptions.        </dd><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - if class of a serialized object cannot be found.           </dd>   </dl></li></ul> <a end_ctx_id="method:resolveClass-java.io.ObjectStreamClass-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolveProxyClass-java.lang.String:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolveProxyClass-java.lang.String:A-"/><a name="resolveProxyClass-java.lang.String:A-"/><ul class="blockList"><li class="blockList"><h4>resolveProxyClass</h4><pre>protected <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; resolveProxyClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a>[] interfaces)
                              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                                     <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class.<p>This method is called exactly once for each unique proxy class descriptor in the stream.              </p><p>The corresponding method in <code>ObjectOutputStream</code> is <code>annotateProxyClass</code>. For a given subclass of <code>ObjectInputStream</code> that overrides this method, the <code>annotateProxyClass</code> method in the corresponding subclass of <code>ObjectOutputStream</code> must write any data or objects read by this method.                                   </p><p>The default implementation of this method in <code>ObjectInputStream</code> returns the result of calling <code>Proxy.getProxyClass</code> with the list of <code>Class</code> objects for the interfaces that are named in the <code>interfaces</code> parameter. The <code>Class</code> object for each interface name <code>i</code> is the value returned by calling<pre>
     Class.forName(i, false, loader)
 </pre> where <code>loader</code> is that of the first non-<code>null</code> class loader up the execution stack, or <code>null</code> if no non-<code>null</code> class loaders are on the stack (the same class loader choice used by the <code>resolveClass</code> method). Unless any of the resolved interfaces are non-public, this same value of <code>loader</code> is also the class loader passed to <code>Proxy.getProxyClass</code>; if non-public interfaces are present, their class loader is passed instead (if more than one non-public interface class loader is encountered, an <code>IllegalAccessError</code> is thrown). If <code>Proxy.getProxyClass</code> throws an <code>IllegalArgumentException</code>, <code>resolveProxyClass</code> will throw a <code>ClassNotFoundException</code> containing the <code>IllegalArgumentException</code>.                                                                                                                                         </p>                                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>interfaces</code> - the list of interface names that were deserialized in the proxy class descriptor               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a proxy class for the specified interfaces      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - any exception thrown by the underlying <code>InputStream</code>         </dd><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - if the proxy class or any of the named interfaces could not be found                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectOutputStream.html#annotateProxyClass-java.lang.Class-"><code>ObjectOutputStream.annotateProxyClass(Class)</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:resolveProxyClass-java.lang.String:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolveObject-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolveObject-java.lang.Object-"/><a name="resolveObject-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>resolveObject</h4><pre>protected <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> resolveObject(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)
                        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization. Replacing objects is disabled until enableResolveObject is called. The enableResolveObject method checks that the stream requesting to resolve object can be trusted. Every reference to serializable objects is passed to resolveObject. To insure that the private state of objects is not unintentionally exposed only trusted streams may use resolveObject.<p>This method is called after an object has been read but before it is returned from readObject. The default resolveObject method just returns the same object.                         </p><p>When a subclass is replacing objects it must insure that the substituted object is compatible with every field where the reference will be stored. Objects whose type is not a subclass of the type of the field or array element abort the serialization by raising an exception and the object is not be stored.                                                     </p><p>This method is called only once when each object is first encountered. All subsequent references to the object will be redirected to the new object.                        </p>                                                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - object to be substituted      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the substituted object  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Any of the usual Input/Output exceptions.        </dd>   </dl></li></ul> <a end_ctx_id="method:resolveObject-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:enableResolveObject-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:enableResolveObject-boolean-"/><a name="enableResolveObject-boolean-"/><ul class="blockList"><li class="blockList"><h4>enableResolveObject</h4><pre>protected boolean enableResolveObject(boolean enable)
                               throws <a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Enable the stream to allow objects read from the stream to be replaced. When enabled, the resolveObject method is called for every object being deserialized.<p>If <i>enable</i> is true, and there is a security manager installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>SerializablePermission("enableSubstitution")</code> permission to ensure it's ok to enable the stream to allow objects read from the stream to be replaced.                                         </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>enable</code> - true for enabling use of <code>resolveObject</code> for every object being deserialized             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous setting before this method was invoked       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkPermission</code> method denies enabling the stream to allow objects read from the stream to be replaced.                         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>SecurityManager.checkPermission(java.security.Permission)</code></a>, <a href="../../java/io/SerializablePermission.html" title="class in java.io"><code>SerializablePermission</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:enableResolveObject-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readStreamHeader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readStreamHeader--"/><a name="readStreamHeader--"/><ul class="blockList"><li class="blockList"><h4>readStreamHeader</h4><pre>protected void readStreamHeader()
                         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                                <a href="../../java/io/StreamCorruptedException.html" title="class in java.io">StreamCorruptedException</a></pre><div class="block">The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers. It reads and verifies the magic number and version number.                         </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/io/StreamCorruptedException.html" title="class in java.io">StreamCorruptedException</a></code> - if control information in the stream is inconsistent          </dd> </dl></li></ul> <a end_ctx_id="method:readStreamHeader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readClassDescriptor-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readClassDescriptor--"/><a name="readClassDescriptor--"/><ul class="blockList"><li class="blockList"><h4>readClassDescriptor</h4><pre>protected <a href="../../java/io/ObjectStreamClass.html" title="class in java.io">ObjectStreamClass</a> readClassDescriptor()
                                         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a>,
                                                <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Read a class descriptor from the serialization stream. This method is called when the ObjectInputStream expects a class descriptor as the next item in the serialization stream. Subclasses of ObjectInputStream may override this method to read in class descriptors that have been written in non-standard formats (by subclasses of ObjectOutputStream which have overridden the <code>writeClassDescriptor</code> method). By default, this method reads class descriptors according to the format defined in the Object Serialization specification.                                                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the class descriptor read   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - If the Class of a serialized object used in the class descriptor representation cannot be found                  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/ObjectOutputStream.html#writeClassDescriptor-java.io.ObjectStreamClass-"><code>ObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass)</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:readClassDescriptor--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a byte of data. This method will block if no input is available.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectInput.html#read--">read</a></code> in interface <code><a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read--">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the byte read, or -1 if the end of the stream is reached.            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>    </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-int-int-"/><a name="read-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] buf,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads into an array of bytes. This method will block until some input is available. Consider using java.io.DataInputStream.readFully to read exactly 'length' bytes.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectInput.html#read-byte:A-int-int-">read</a></code> in interface <code><a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read-byte:A-int-int-">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - the buffer into which the data is read          </dd><dd> <code>off</code> - the start offset of the data        </dd><dd> <code>len</code> - the maximum number of bytes read        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of bytes read, -1 is returned when the end of the stream is reached.                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/DataInputStream.html#readFully-byte:A-int-int-"><code>DataInputStream.readFully(byte[],int,int)</code></a> </dd>      </dl></li></ul> <a end_ctx_id="method:read-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:available-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:available--"/><a name="available--"/><ul class="blockList"><li class="blockList"><h4>available</h4><pre>public int available()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the number of bytes that can be read without blocking.          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectInput.html#available--">available</a></code> in interface <code><a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#available--">available</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of available bytes.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd>    </dl></li></ul> <a end_ctx_id="method:available--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes the input stream. Must be called to release any resources associated with the stream.              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/ObjectInput.html#close--">close</a></code> in interface <code><a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#close--">close</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>     </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readBoolean-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readBoolean--"/><a name="readBoolean--"/><ul class="blockList"><li class="blockList"><h4>readBoolean</h4><pre>public boolean readBoolean()
                    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads in a boolean.   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readBoolean--">readBoolean</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the boolean read.  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readBoolean--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readByte-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readByte--"/><a name="readByte--"/><ul class="blockList"><li class="blockList"><h4>readByte</h4><pre>public byte readByte()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads an 8 bit byte.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readByte--">readByte</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 8 bit byte read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readByte--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUnsignedByte-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUnsignedByte--"/><a name="readUnsignedByte--"/><ul class="blockList"><li class="blockList"><h4>readUnsignedByte</h4><pre>public int readUnsignedByte()
                     throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads an unsigned 8 bit byte.     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readUnsignedByte--">readUnsignedByte</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 8 bit byte read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readUnsignedByte--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readChar-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readChar--"/><a name="readChar--"/><ul class="blockList"><li class="blockList"><h4>readChar</h4><pre>public char readChar()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a 16 bit char.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readChar--">readChar</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 16 bit char read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readChar--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readShort-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readShort--"/><a name="readShort--"/><ul class="blockList"><li class="blockList"><h4>readShort</h4><pre>public short readShort()
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a 16 bit short.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readShort--">readShort</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 16 bit short read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readShort--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUnsignedShort-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUnsignedShort--"/><a name="readUnsignedShort--"/><ul class="blockList"><li class="blockList"><h4>readUnsignedShort</h4><pre>public int readUnsignedShort()
                      throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads an unsigned 16 bit short.     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readUnsignedShort--">readUnsignedShort</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 16 bit short read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readUnsignedShort--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readInt-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readInt--"/><a name="readInt--"/><ul class="blockList"><li class="blockList"><h4>readInt</h4><pre>public int readInt()
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a 32 bit int.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readInt--">readInt</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 32 bit integer read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readInt--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLong-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLong--"/><a name="readLong--"/><ul class="blockList"><li class="blockList"><h4>readLong</h4><pre>public long readLong()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a 64 bit long.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readLong--">readLong</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the read 64 bit long.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readLong--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFloat-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFloat--"/><a name="readFloat--"/><ul class="blockList"><li class="blockList"><h4>readFloat</h4><pre>public float readFloat()
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a 32 bit float.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readFloat--">readFloat</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 32 bit float read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readFloat--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readDouble-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readDouble--"/><a name="readDouble--"/><ul class="blockList"><li class="blockList"><h4>readDouble</h4><pre>public double readDouble()
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a 64 bit double.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readDouble--">readDouble</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 64 bit double read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readDouble--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFully-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFully-byte:A-"/><a name="readFully-byte:A-"/><ul class="blockList"><li class="blockList"><h4>readFully</h4><pre>public void readFully(byte[] buf)
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads bytes, blocking until all bytes are read.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readFully-byte:A-">readFully</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - the buffer into which the data is read          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readFully-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFully-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFully-byte:A-int-int-"/><a name="readFully-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>readFully</h4><pre>public void readFully(byte[] buf,
                      int off,
                      int len)
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads bytes, blocking until all bytes are read.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readFully-byte:A-int-int-">readFully</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - the buffer into which the data is read          </dd><dd> <code>off</code> - the start offset of the data        </dd><dd> <code>len</code> - the maximum number of bytes to read         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - If end of file is reached.        </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If other I/O error has occurred.        </dd>   </dl></li></ul> <a end_ctx_id="method:readFully-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skipBytes-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skipBytes-int-"/><a name="skipBytes-int-"/><ul class="blockList"><li class="blockList"><h4>skipBytes</h4><pre>public int skipBytes(int len)
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Skips bytes. </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#skipBytes-int-">skipBytes</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>len</code> - the number of bytes to be skipped         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of bytes skipped.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>    </dl></li></ul> <a end_ctx_id="method:skipBytes-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLine-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLine--"/><a name="readLine--"/><ul class="blockList"><li class="blockList"><h4>readLine</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public <a href="../../java/lang/String.html" title="class in java.lang">String</a> readLine()
                            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This method does not properly convert bytes to characters. see DataInputStream for the details and alternatives.               </span> </div><div class="block">Reads in a line that has been terminated by a \n, \r, \r\n or EOF.              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readLine--">readLine</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a String copy of the line.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd>   </dl></li></ul> <a end_ctx_id="method:readLine--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUTF-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUTF--"/><a name="readUTF--"/><ul class="blockListLast"><li class="blockList"><h4>readUTF</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> readUTF()
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a String in <a href="DataInput.html#modified-utf-8">modified UTF-8 </a> format.     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/DataInput.html#readUTF--">readUTF</a></code> in interface <code><a href="../../java/io/DataInput.html" title="interface in java.io">DataInput</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the String. </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if there are I/O errors while reading from the underlying <code>InputStream</code>             </dd><dd> <code><a href="../../java/io/UTFDataFormatException.html" title="class in java.io">UTFDataFormatException</a></code> - if read bytes do not represent a valid modified UTF-8 encoding of a string                </dd>   </dl></li></ul> <a end_ctx_id="method:readUTF--"/>  </td></tr></table></td></tr></table></diff></diffreport>