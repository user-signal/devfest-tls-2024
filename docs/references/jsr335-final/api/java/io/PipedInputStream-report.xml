<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PipedInputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PipedInputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>  </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">PipedInputStream</span>
extends <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></pre><div class="block">A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream. Typically, data is read from a <code>PipedInputStream</code> object by one thread and data is written to the corresponding <code>PipedOutputStream</code> by some other thread. Attempting to use both objects from a single thread is not recommended, as it may deadlock the thread. The piped input stream contains a buffer, decoupling read operations from write operations, within limits. A pipe is said to be <a name="BROKEN"><i>broken</i></a> if a thread that was providing data bytes to the connected piped output stream is no longer alive.                                                                                                            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/PipedOutputStream.html" title="class in java.io"><code>PipedOutputStream</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:PipedInputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:PIPE_SIZE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:PIPE_SIZE"/><a name="PIPE_SIZE"/><ul class="blockList"><li class="blockList"><h4>PIPE_SIZE</h4><pre>protected static final int PIPE_SIZE</pre><div class="block">The default size of the pipe's circular input buffer.        </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.io.PipedInputStream.PIPE_SIZE">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:PIPE_SIZE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:buffer [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:buffer"/><a name="buffer"/><ul class="blockList"><li class="blockList"><h4>buffer</h4><pre>protected byte[] buffer</pre><div class="block">The circular buffer into which incoming data is placed.        </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl></li></ul> <a end_ctx_id="field:buffer"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:in [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:in"/><a name="in"/><ul class="blockList"><li class="blockList"><h4>in</h4><pre>protected int in</pre><div class="block">The index of the position in the circular buffer at which the next byte of data will be stored when received from the connected piped output stream. <code>in&lt;0</code> implies the buffer is empty, <code>in==out</code> implies the buffer is full                                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl></li></ul> <a end_ctx_id="field:in"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:out [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:out"/><a name="out"/><ul class="blockListLast"><li class="blockList"><h4>out</h4><pre>protected int out</pre><div class="block">The index of the position in the circular buffer at which the next byte of data will be read by this piped input stream.                       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl></li></ul> <a end_ctx_id="field:out"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedInputStream-java.io.PipedOutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedInputStream-java.io.PipedOutputStream-"/><a name="PipedInputStream-java.io.PipedOutputStream-"/><ul class="blockList"><li class="blockList"><h4>PipedInputStream</h4><pre>public PipedInputStream(<a href="../../java/io/PipedOutputStream.html" title="class in java.io">PipedOutputStream</a> src)
                 throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a <code>PipedInputStream</code> so that it is connected to the piped output stream <code>src</code>. Data bytes written to <code>src</code> will then be available as input from this stream.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the stream to connect to.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="constructor:PipedInputStream-java.io.PipedOutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedInputStream-java.io.PipedOutputStream-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedInputStream-java.io.PipedOutputStream-int-"/><a name="PipedInputStream-java.io.PipedOutputStream-int-"/><ul class="blockList"><li class="blockList"><h4>PipedInputStream</h4><pre>public PipedInputStream(<a href="../../java/io/PipedOutputStream.html" title="class in java.io">PipedOutputStream</a> src,
                        int pipeSize)
                 throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a <code>PipedInputStream</code> so that it is connected to the piped output stream <code>src</code> and uses the specified pipe size for the pipe's buffer. Data bytes written to <code>src</code> will then be available as input from this stream.                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the stream to connect to.       </dd><dd> <code>pipeSize</code> - the size of the pipe's buffer.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>pipeSize &lt;= 0  </code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="constructor:PipedInputStream-java.io.PipedOutputStream-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedInputStream-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedInputStream--"/><a name="PipedInputStream--"/><ul class="blockList"><li class="blockList"><h4>PipedInputStream</h4><pre>public PipedInputStream()</pre><div class="block">Creates a <code>PipedInputStream</code> so that it is not yet <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-">connected</a>. It must be <a href="../../java/io/PipedOutputStream.html#connect-java.io.PipedInputStream-">connected</a> to a <code>PipedOutputStream</code> before being used.                   </div></li></ul> <a end_ctx_id="constructor:PipedInputStream--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedInputStream-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedInputStream-int-"/><a name="PipedInputStream-int-"/><ul class="blockListLast"><li class="blockList"><h4>PipedInputStream</h4><pre>public PipedInputStream(int pipeSize)</pre><div class="block">Creates a <code>PipedInputStream</code> so that it is not yet <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-">connected</a> and uses the specified pipe size for the pipe's buffer. It must be <a href="../../java/io/PipedOutputStream.html#connect-java.io.PipedInputStream-">connected</a> to a <code>PipedOutputStream</code> before being used.                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pipeSize</code> - the size of the pipe's buffer.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>pipeSize &lt;= 0  </code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="constructor:PipedInputStream-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:connect-java.io.PipedOutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:connect-java.io.PipedOutputStream-"/><a name="connect-java.io.PipedOutputStream-"/><ul class="blockList"><li class="blockList"><h4>connect</h4><pre>public void connect(<a href="../../java/io/PipedOutputStream.html" title="class in java.io">PipedOutputStream</a> src)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Causes this piped input stream to be connected to the piped output stream <code>src</code>. If this object is already connected to some other piped output stream, an <code>IOException</code> is thrown.<p> If <code>src</code> is an unconnected piped output stream and <code>snk</code> is an unconnected piped input stream, they may be connected by either the call:<pre><code>snk.connect(src)</code> 
</pre>                        </p><p> or the call:<pre><code>src.connect(snk)</code> 
</pre>   </p><p> The two calls have the same effect.       </p>                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - The piped output stream to connect to.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:connect-java.io.PipedOutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:receive-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:receive-int-"/><a name="receive-int-"/><ul class="blockList"><li class="blockList"><h4>receive</h4><pre>protected void receive(int b)
                throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Receives a byte of data. This method will block if no input is available.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the byte being received      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the pipe is <a href="#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-"><code>unconnected</code></a>, closed, or if an I/O error occurs.               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd>   </dl></li></ul> <a end_ctx_id="method:receive-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads the next byte of data from this piped input stream. The value byte is returned as an <code>int</code> in the range <code>0</code> to <code>255</code>. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read--">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next byte of data, or <code>-1</code> if the end of the stream is reached.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-"><code>unconnected</code></a>, <a href="#BROKEN"><code>broken</code></a>, closed, or if an I/O error occurs.               </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-int-int-"/><a name="read-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads up to <code>len</code> bytes of data from this piped input stream into an array of bytes. Less than <code>len</code> bytes will be read if the end of the data stream is reached or if <code>len</code> exceeds the pipe's buffer size. If <code>len  </code> is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.                                                                              </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read-byte:A-int-int-">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd><dd> <code>off</code> - the start offset in the destination array <code>b</code>          </dd><dd> <code>len</code> - the maximum number of bytes read.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>b</code> is <code>null</code>.      </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off  </code>               </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-"><code>unconnected</code></a>, closed, or if an I/O error occurs.               </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#read--"><code>InputStream.read()</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:read-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:available-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:available--"/><a name="available--"/><ul class="blockList"><li class="blockList"><h4>available</h4><pre>public int available()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the number of bytes that can be read from this input stream without blocking.              </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#available--">available</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of bytes that can be read from this input stream without blocking, or <code>0</code> if this input stream has been closed by invoking its <a href="../../java/io/PipedInputStream.html#close--"><code>close()</code></a> method, or if the pipe is <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-"><code>unconnected</code></a>, or <a href="#BROKEN"><code>broken</code></a>.                                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0.2</dd>    </dl></li></ul> <a end_ctx_id="method:available--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this piped input stream and releases any system resources associated with the stream.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#close--">close</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>