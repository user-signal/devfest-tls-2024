<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:StreamTokenizer [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:StreamTokenizer"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">StreamTokenizer</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">The <code>StreamTokenizer</code> class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles.<p> Each byte read from the input stream is regarded as a character in the range <code>'\u0000'</code> through <code>'\u00FF'</code>. The character value is used to look up five possible attributes of the character: <i>white space </i>, <i>alphabetic</i>, <i>numeric</i>, <i>string quote </i>, and <i>comment character </i>. Each character can have zero or more of these attributes.                                                </p><p> In addition, an instance has four flags. These flags indicate:<ul><li>Whether line terminators are to be returned as tokens or treated as white space that merely separates tokens.                 </li><li>Whether C-style comments are to be recognized and skipped.        </li><li>Whether C++-style comments are to be recognized and skipped.        </li><li>Whether the characters of identifiers are converted to lowercase.        </li></ul>          </p><p> A typical application first constructs an instance of this class, sets up the syntax tables, and then repeatedly loops calling the <code>nextToken</code> method in each iteration of the loop until it returns the value <code>TT_EOF</code>.                                   </p>                                                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nextToken--"><code>nextToken()</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_EOF"><code>TT_EOF</code></a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:StreamTokenizer"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:ttype [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:ttype"/><a name="ttype"/><ul class="blockList"><li class="blockList"><h4>ttype</h4><pre>public int ttype</pre><div class="block">After a call to the <code>nextToken</code> method, this field contains the type of the token just read. For a single character token, its value is the single character, converted to an integer. For a quoted string token, its value is the quote character. Otherwise, its value is one of the following:<ul><li> <code>TT_WORD</code> indicates that the token is a word.        </li><li> <code>TT_NUMBER</code> indicates that the token is a number.        </li><li> <code>TT_EOL</code> indicates that the end of line has been read. The field can only have this value if the <code>eolIsSignificant</code> method has been called with the argument <code>true</code>.                            </li><li> <code>TT_EOF</code> indicates that the end of the input stream has been reached.            </li></ul><p> The initial value of this field is -4.        </p>                                                  </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#eolIsSignificant-boolean-"><code>eolIsSignificant(boolean)</code></a>, <a href="../../java/io/StreamTokenizer.html#nextToken--"><code>nextToken()</code></a>, <a href="../../java/io/StreamTokenizer.html#quoteChar-int-"><code>quoteChar(int)</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_EOF"><code>TT_EOF</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_EOL"><code>TT_EOL</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_NUMBER"><code>TT_NUMBER</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_WORD"><code>TT_WORD</code></a>       </dd> </dl></li></ul> <a end_ctx_id="field:ttype"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TT_EOF [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TT_EOF"/><a name="TT_EOF"/><ul class="blockList"><li class="blockList"><h4>TT_EOF</h4><pre>public static final int TT_EOF</pre><div class="block">A constant indicating that the end of the stream has been read.           </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.io.StreamTokenizer.TT_EOF">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:TT_EOF"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TT_EOL [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TT_EOL"/><a name="TT_EOL"/><ul class="blockList"><li class="blockList"><h4>TT_EOL</h4><pre>public static final int TT_EOL</pre><div class="block">A constant indicating that the end of the line has been read.           </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.io.StreamTokenizer.TT_EOL">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:TT_EOL"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TT_NUMBER [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TT_NUMBER"/><a name="TT_NUMBER"/><ul class="blockList"><li class="blockList"><h4>TT_NUMBER</h4><pre>public static final int TT_NUMBER</pre><div class="block">A constant indicating that a number token has been read.         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.io.StreamTokenizer.TT_NUMBER">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:TT_NUMBER"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TT_WORD [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TT_WORD"/><a name="TT_WORD"/><ul class="blockList"><li class="blockList"><h4>TT_WORD</h4><pre>public static final int TT_WORD</pre><div class="block">A constant indicating that a word token has been read.         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.io.StreamTokenizer.TT_WORD">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:TT_WORD"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:sval [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:sval"/><a name="sval"/><ul class="blockList"><li class="blockList"><h4>sval</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> sval</pre><div class="block">If the current token is a word token, this field contains a string giving the characters of the word token. When the current token is a quoted string token, this field contains the body of the string.<p> The current token is a word when the value of the <code>ttype</code> field is <code>TT_WORD</code>. The current token is a quoted string token when the value of the <code>ttype</code> field is a quote character.                                  </p><p> The initial value of this field is null.        </p>                                    </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#quoteChar-int-"><code>quoteChar(int)</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_WORD"><code>TT_WORD</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>   </dd> </dl></li></ul> <a end_ctx_id="field:sval"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:nval [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:nval"/><a name="nval"/><ul class="blockListLast"><li class="blockList"><h4>nval</h4><pre>public double nval</pre><div class="block">If the current token is a number, this field contains the value of that number. The current token is a number when the value of the <code>ttype</code> field is <code>TT_NUMBER</code>.<p> The initial value of this field is 0.0.        </p>                             </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#TT_NUMBER"><code>TT_NUMBER</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>  </dd> </dl></li></ul> <a end_ctx_id="field:nval"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StreamTokenizer-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StreamTokenizer-java.io.InputStream-"/><a name="StreamTokenizer-java.io.InputStream-"/><ul class="blockList"><li class="blockList"><h4>StreamTokenizer</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public StreamTokenizer(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> is)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example:<blockquote><pre>
   Reader r = new BufferedReader(new InputStreamReader(is));
   StreamTokenizer st = new StreamTokenizer(r);
 </pre></blockquote>                        </span> </div><div class="block">Creates a stream tokenizer that parses the specified input stream. The stream tokenizer is initialized to the following default state:<ul><li>All byte values <code>'A'</code> through <code>'Z'</code>, <code>'a'</code> through <code>'z'</code>, and <code>'\u00A0'</code> through <code>'\u00FF'</code> are considered to be alphabetic.                 </li><li>All byte values <code>'\u0000'</code> through <code>'\u0020'</code> are considered to be white space.           </li><li> <code>'/'</code> is a comment character.     </li><li>Single quote <code>'\''</code> and double quote <code>'"'</code> are string quote characters.          </li><li>Numbers are parsed.  </li><li>Ends of lines are treated as white space, not as separate tokens.           </li><li>C-style and C++-style comments are not recognized.      </li></ul>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>is</code> - an input stream.     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedReader.html" title="class in java.io"><code>BufferedReader</code></a>, <a href="../../java/io/InputStreamReader.html" title="class in java.io"><code>InputStreamReader</code></a>, <a href="../../java/io/StreamTokenizer.html#StreamTokenizer-java.io.Reader-"><code>StreamTokenizer(java.io.Reader)</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="constructor:StreamTokenizer-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StreamTokenizer-java.io.Reader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StreamTokenizer-java.io.Reader-"/><a name="StreamTokenizer-java.io.Reader-"/><ul class="blockListLast"><li class="blockList"><h4>StreamTokenizer</h4><pre>public StreamTokenizer(<a href="../../java/io/Reader.html" title="class in java.io">Reader</a> r)</pre><div class="block">Create a tokenizer that parses the given character stream.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>r</code> - a Reader object providing the input stream.         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd>  </dl></li></ul> <a end_ctx_id="constructor:StreamTokenizer-java.io.Reader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resetSyntax-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resetSyntax--"/><a name="resetSyntax--"/><ul class="blockList"><li class="blockList"><h4>resetSyntax</h4><pre>public void resetSyntax()</pre><div class="block">Resets this tokenizer's syntax table so that all characters are "ordinary." See the <code>ordinaryChar</code> method for more information on a character being ordinary.                      </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#ordinaryChar-int-"><code>ordinaryChar(int)</code></a> </dd> </dl></li></ul> <a end_ctx_id="method:resetSyntax--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:wordChars-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:wordChars-int-int-"/><a name="wordChars-int-int-"/><ul class="blockList"><li class="blockList"><h4>wordChars</h4><pre>public void wordChars(int low,
                      int hi)</pre><div class="block">Specifies that all characters <i>c</i> in the range <code>low &lt;= <i>c</i> &lt;= high</code> are word constituents. A word token consists of a word constituent followed by zero or more word constituents or number constituents.                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>low</code> - the low end of the range.        </dd><dd> <code>hi</code> - the high end of the range.        </dd> </dl></li></ul> <a end_ctx_id="method:wordChars-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:whitespaceChars-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:whitespaceChars-int-int-"/><a name="whitespaceChars-int-int-"/><ul class="blockList"><li class="blockList"><h4>whitespaceChars</h4><pre>public void whitespaceChars(int low,
                            int hi)</pre><div class="block">Specifies that all characters <i>c</i> in the range <code>low &lt;= <i>c</i> &lt;= high</code> are white space characters. White space characters serve only to separate tokens in the input stream.<p>Any other attribute settings for the characters in the specified range are cleared.            </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>low</code> - the low end of the range.        </dd><dd> <code>hi</code> - the high end of the range.        </dd> </dl></li></ul> <a end_ctx_id="method:whitespaceChars-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ordinaryChars-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ordinaryChars-int-int-"/><a name="ordinaryChars-int-int-"/><ul class="blockList"><li class="blockList"><h4>ordinaryChars</h4><pre>public void ordinaryChars(int low,
                          int hi)</pre><div class="block">Specifies that all characters <i>c</i> in the range <code>low &lt;= <i>c</i> &lt;= high</code> are "ordinary" in this tokenizer. See the <code>ordinaryChar</code> method for more information on a character being ordinary.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>low</code> - the low end of the range.        </dd><dd> <code>hi</code> - the high end of the range.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#ordinaryChar-int-"><code>ordinaryChar(int)</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:ordinaryChars-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ordinaryChar-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ordinaryChar-int-"/><a name="ordinaryChar-int-"/><ul class="blockList"><li class="blockList"><h4>ordinaryChar</h4><pre>public void ordinaryChar(int ch)</pre><div class="block">Specifies that the character argument is "ordinary" in this tokenizer. It removes any special significance the character has as a comment character, word component, string delimiter, white space, or number character. When such a character is encountered by the parser, the parser treats it as a single-character token and sets <code>ttype</code> field to the character value.<p>Making a line terminator character "ordinary" may interfere with the ability of a <code>StreamTokenizer</code> to count lines. The <code>lineno</code> method may no longer reflect the presence of such terminator characters in its line count.                                 </p>                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>ch</code> - the character.    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:ordinaryChar-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:commentChar-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:commentChar-int-"/><a name="commentChar-int-"/><ul class="blockList"><li class="blockList"><h4>commentChar</h4><pre>public void commentChar(int ch)</pre><div class="block">Specified that the character argument starts a single-line comment. All characters from the comment character to the end of the line are ignored by this stream tokenizer.<p>Any other attribute settings for the specified character are cleared.         </p>                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>ch</code> - the character.    </dd> </dl></li></ul> <a end_ctx_id="method:commentChar-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:quoteChar-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:quoteChar-int-"/><a name="quoteChar-int-"/><ul class="blockList"><li class="blockList"><h4>quoteChar</h4><pre>public void quoteChar(int ch)</pre><div class="block">Specifies that matching pairs of this character delimit string constants in this tokenizer.<p> When the <code>nextToken</code> method encounters a string constant, the <code>ttype</code> field is set to the string delimiter and the <code>sval</code> field is set to the body of the string.                             </p><p> If a string quote character is encountered, then a string is recognized, consisting of all characters after (but not including) the string quote character, up to (but not including) the next occurrence of that same string quote character, or a line terminator, or end of file. The usual escape sequences such as <code>"\n"</code> and <code>"\t"</code> are recognized and converted to single characters as the string is parsed.                                                                   </p><p>Any other attribute settings for the specified character are cleared.         </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>ch</code> - the character.    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nextToken--"><code>nextToken()</code></a>, <a href="../../java/io/StreamTokenizer.html#sval"><code>sval</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="method:quoteChar-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseNumbers-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseNumbers--"/><a name="parseNumbers--"/><ul class="blockList"><li class="blockList"><h4>parseNumbers</h4><pre>public void parseNumbers()</pre><div class="block">Specifies that numbers should be parsed by this tokenizer. The syntax table of this tokenizer is modified so that each of the twelve characters:<blockquote><pre>
      0 1 2 3 4 5 6 7 8 9 . -
 </pre></blockquote><p> has the "numeric" attribute.    </p><p> When the parser encounters a word token that has the format of a double precision floating-point number, it treats the token as a number rather than a word, by setting the <code>ttype</code> field to the value <code>TT_NUMBER</code> and putting the numeric value of the token into the <code>nval</code> field.                                                 </p>                       </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nval"><code>nval</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_NUMBER"><code>TT_NUMBER</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>   </dd> </dl></li></ul> <a end_ctx_id="method:parseNumbers--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:eolIsSignificant-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:eolIsSignificant-boolean-"/><a name="eolIsSignificant-boolean-"/><ul class="blockList"><li class="blockList"><h4>eolIsSignificant</h4><pre>public void eolIsSignificant(boolean flag)</pre><div class="block">Determines whether or not ends of line are treated as tokens. If the flag argument is true, this tokenizer treats end of lines as tokens; the <code>nextToken</code> method returns <code>TT_EOL</code> and also sets the <code>ttype</code> field to this value when an end of line is read.<p> A line is a sequence of characters ending with either a carriage-return character (<code>'\r'</code>) or a newline character (<code>'\n'</code>). In addition, a carriage-return character followed immediately by a newline character is treated as a single end-of-line token.                                     </p><p> If the <code>flag</code> is false, end-of-line characters are treated as white space and serve only to separate tokens.                  </p>                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>flag</code> - <code>true</code> indicates that end-of-line characters are separate tokens; <code>false</code> indicates that end-of-line characters are white space.                  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nextToken--"><code>nextToken()</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_EOL"><code>TT_EOL</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="method:eolIsSignificant-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:slashStarComments-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:slashStarComments-boolean-"/><a name="slashStarComments-boolean-"/><ul class="blockList"><li class="blockList"><h4>slashStarComments</h4><pre>public void slashStarComments(boolean flag)</pre><div class="block">Determines whether or not the tokenizer recognizes C-style comments. If the flag argument is <code>true</code>, this stream tokenizer recognizes C-style comments. All text between successive occurrences of <code>/*</code> and <code>*/</code> are discarded.<p> If the flag argument is <code>false</code>, then C-style comments are not treated specially.             </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>flag</code> - <code>true</code> indicates to recognize and ignore C-style comments.          </dd> </dl></li></ul> <a end_ctx_id="method:slashStarComments-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:slashSlashComments-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:slashSlashComments-boolean-"/><a name="slashSlashComments-boolean-"/><ul class="blockList"><li class="blockList"><h4>slashSlashComments</h4><pre>public void slashSlashComments(boolean flag)</pre><div class="block">Determines whether or not the tokenizer recognizes C++-style comments. If the flag argument is <code>true</code>, this stream tokenizer recognizes C++-style comments. Any occurrence of two consecutive slash characters (<code>'/'</code>) is treated as the beginning of a comment that extends to the end of the line.<p> If the flag argument is <code>false</code>, then C++-style comments are not treated specially.             </p>                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>flag</code> - <code>true</code> indicates to recognize and ignore C++-style comments.          </dd> </dl></li></ul> <a end_ctx_id="method:slashSlashComments-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lowerCaseMode-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lowerCaseMode-boolean-"/><a name="lowerCaseMode-boolean-"/><ul class="blockList"><li class="blockList"><h4>lowerCaseMode</h4><pre>public void lowerCaseMode(boolean fl)</pre><div class="block">Determines whether or not word token are automatically lowercased. If the flag argument is <code>true</code>, then the value in the <code>sval</code> field is lowercased whenever a word token is returned (the <code>ttype</code> field has the value <code>TT_WORD</code> by the <code>nextToken</code> method of this tokenizer.<p> If the flag argument is <code>false</code>, then the <code>sval</code> field is not modified.             </p>                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fl</code> - <code>true</code> indicates that all word tokens should be lowercased.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nextToken--"><code>nextToken()</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>, <a href="../../java/io/StreamTokenizer.html#TT_WORD"><code>TT_WORD</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="method:lowerCaseMode-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextToken-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextToken--"/><a name="nextToken--"/><ul class="blockList"><li class="blockList"><h4>nextToken</h4><pre>public int nextToken()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Parses the next token from the input stream of this tokenizer. The type of the next token is returned in the <code>ttype</code> field. Additional information about the token may be in the <code>nval</code> field or the <code>sval</code> field of this tokenizer.<p> Typical clients of this class first set up the syntax tables and then sit in a loop calling nextToken to parse successive tokens until TT_EOF is returned.                           </p>                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the <code>ttype</code> field.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nval"><code>nval</code></a>, <a href="../../java/io/StreamTokenizer.html#sval"><code>sval</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:nextToken--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pushBack-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pushBack--"/><a name="pushBack--"/><ul class="blockList"><li class="blockList"><h4>pushBack</h4><pre>public void pushBack()</pre><div class="block">Causes the next call to the <code>nextToken</code> method of this tokenizer to return the current value in the <code>ttype</code> field, and not to modify the value in the <code>nval</code> or <code>sval</code> field.                               </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nextToken--"><code>nextToken()</code></a>, <a href="../../java/io/StreamTokenizer.html#nval"><code>nval</code></a>, <a href="../../java/io/StreamTokenizer.html#sval"><code>sval</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>    </dd> </dl></li></ul> <a end_ctx_id="method:pushBack--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lineno-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lineno--"/><a name="lineno--"/><ul class="blockList"><li class="blockList"><h4>lineno</h4><pre>public int lineno()</pre><div class="block">Return the current line number.    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current line number of this stream tokenizer.       </dd> </dl></li></ul> <a end_ctx_id="method:lineno--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns the string representation of the current stream token and the line number it occurs on.<p>The precise string returned is unspecified, although the following example can be considered typical:             </p><blockquote><pre>Token['a'], line 10</pre></blockquote>               </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the token     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html#nval"><code>nval</code></a>, <a href="../../java/io/StreamTokenizer.html#sval"><code>sval</code></a>, <a href="../../java/io/StreamTokenizer.html#ttype"><code>ttype</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>