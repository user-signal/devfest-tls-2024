<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:BufferedInputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:BufferedInputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>  </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">BufferedInputStream</span>
extends <a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></pre><div class="block">A <code>BufferedInputStream</code> adds functionality to another input stream-namely, the ability to buffer the input and to support the <code>mark</code> and <code>reset</code> methods. When the <code>BufferedInputStream</code> is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The <code>mark</code> operation remembers a point in the input stream and the <code>reset</code> operation causes all the bytes read since the most recent <code>mark</code> operation to be reread before new bytes are taken from the contained input stream.                                                                                                </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:BufferedInputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:buf [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:buf"/><a name="buf"/><ul class="blockList"><li class="blockList"><h4>buf</h4><pre>protected volatile byte[] buf</pre><div class="block">The internal buffer array where the data is stored. When necessary, it may be replaced by another array of a different size.                     </div></li></ul> <a end_ctx_id="field:buf"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:count [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:count"/><a name="count"/><ul class="blockList"><li class="blockList"><h4>count</h4><pre>protected int count</pre><div class="block">The index one greater than the index of the last valid byte in the buffer. This value is always in the range <code>0</code> through <code>buf.length</code>; elements <code>buf[0]</code> through <code>buf[count-1]  </code>contain buffered input data obtained from the underlying input stream.                                     </div></li></ul> <a end_ctx_id="field:count"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:pos [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:pos"/><a name="pos"/><ul class="blockList"><li class="blockList"><h4>pos</h4><pre>protected int pos</pre><div class="block">The current position in the buffer. This is the index of the next character to be read from the <code>buf</code> array.<p> This value is always in the range <code>0</code> through <code>count</code>. If it is less than <code>count</code>, then <code>buf[pos]</code> is the next byte to be supplied as input; if it is equal to <code>count</code>, then the next <code>read</code> or <code>skip</code> operation will require more bytes to be read from the contained input stream.                                                    </p>                    </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedInputStream.html#buf"><code>buf</code></a> </dd> </dl></li></ul> <a end_ctx_id="field:pos"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:markpos [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:markpos"/><a name="markpos"/><ul class="blockList"><li class="blockList"><h4>markpos</h4><pre>protected int markpos</pre><div class="block">The value of the <code>pos</code> field at the time the last <code>mark</code> method was called.<p> This value is always in the range <code>-1</code> through <code>pos</code>. If there is no marked position in the input stream, this field is <code>-1</code>. If there is a marked position in the input stream, then <code>buf[markpos]</code> is the first byte to be supplied as input after a <code>reset</code> operation. If <code>markpos</code> is not <code>-1</code>, then all bytes from positions <code>buf[markpos]</code> through <code>buf[pos-1]</code> must remain in the buffer array (though they may be moved to another place in the buffer array, with suitable adjustments to the values of <code>count</code>, <code>pos</code>, and <code>markpos</code>); they may not be discarded unless and until the difference between <code>pos</code> and <code>markpos</code> exceeds <code>marklimit</code>.                                                                                                           </p>              </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedInputStream.html#mark-int-"><code>mark(int)</code></a>, <a href="../../java/io/BufferedInputStream.html#pos"><code>pos</code></a>  </dd> </dl></li></ul> <a end_ctx_id="field:markpos"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:marklimit [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:marklimit"/><a name="marklimit"/><ul class="blockListLast"><li class="blockList"><h4>marklimit</h4><pre>protected int marklimit</pre><div class="block">The maximum read ahead allowed after a call to the <code>mark</code> method before subsequent calls to the <code>reset</code> method fail. Whenever the difference between <code>pos</code> and <code>markpos</code> exceeds <code>marklimit</code>, then the mark may be dropped by setting <code>markpos</code> to <code>-1</code>.                                       </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedInputStream.html#mark-int-"><code>mark(int)</code></a>, <a href="../../java/io/BufferedInputStream.html#reset--"><code>reset()</code></a>  </dd> </dl></li></ul> <a end_ctx_id="field:marklimit"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:BufferedInputStream-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:BufferedInputStream-java.io.InputStream-"/><a name="BufferedInputStream-java.io.InputStream-"/><ul class="blockList"><li class="blockList"><h4>BufferedInputStream</h4><pre>public BufferedInputStream(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in)</pre><div class="block">Creates a <code>BufferedInputStream</code> and saves its argument, the input stream <code>in</code>, for later use. An internal buffer array is created and stored in <code>buf</code>.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - the underlying input stream.      </dd> </dl></li></ul> <a end_ctx_id="constructor:BufferedInputStream-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:BufferedInputStream-java.io.InputStream-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:BufferedInputStream-java.io.InputStream-int-"/><a name="BufferedInputStream-java.io.InputStream-int-"/><ul class="blockListLast"><li class="blockList"><h4>BufferedInputStream</h4><pre>public BufferedInputStream(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in,
                           int size)</pre><div class="block">Creates a <code>BufferedInputStream</code> with the specified buffer size, and saves its argument, the input stream <code>in</code>, for later use. An internal buffer array of length <code>size</code> is created and stored in <code>buf</code>.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - the underlying input stream.      </dd><dd> <code>size</code> - the buffer size.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>size &lt;= 0  </code>.    </dd>  </dl></li></ul> <a end_ctx_id="constructor:BufferedInputStream-java.io.InputStream-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">See the general contract of the <code>read</code> method of <code>InputStream</code>.         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#read--">read</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next byte of data, or <code>-1</code> if the end of the stream is reached.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if this input stream has been closed by invoking its <a href="../../java/io/BufferedInputStream.html#close--"><code>close()</code></a> method, or an I/O error occurs.                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FilterInputStream.html#in"><code>FilterInputStream.in</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-int-int-"/><a name="read-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads bytes from this byte-input stream into the specified byte array, starting at the given offset.<p> This method implements the general contract of the corresponding <code><a href="../../java/io/InputStream.html#read-byte:A-int-int-"><code>read</code></a></code> method of the <code><a href="../../java/io/InputStream.html" title="class in java.io"><code>InputStream</code></a></code> class. As an additional convenience, it attempts to read as many bytes as possible by repeatedly invoking the <code>read</code> method of the underlying stream. This iterated <code>read</code> continues until one of the following conditions becomes true:<ul><li> The specified number of bytes have been read,        </li><li> The <code>read</code> method of the underlying stream returns <code>-1</code>, indicating end-of-file, or            </li><li> The <code>available</code> method of the underlying stream returns zero, indicating that further input requests would block.                </li></ul> If the first <code>read</code> on the underlying stream returns <code>-1</code> to indicate end-of-file then this method returns <code>-1</code>. Otherwise this method returns the number of bytes actually read.                                                                              </p><p> Subclasses of this class are encouraged, but not required, to attempt to read as many bytes as possible in the same fashion.                      </p>               </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#read-byte:A-int-int-">read</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - destination buffer.    </dd><dd> <code>off</code> - offset at which to start storing bytes.         </dd><dd> <code>len</code> - maximum number of bytes to read.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of bytes read, or <code>-1</code> if the end of the stream has been reached.               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if this input stream has been closed by invoking its <a href="../../java/io/BufferedInputStream.html#close--"><code>close()</code></a> method, or an I/O error occurs.                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FilterInputStream.html#in"><code>FilterInputStream.in</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:read-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-long-"/><a name="skip-long-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public long skip(long n)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">See the general contract of the <code>skip</code> method of <code>InputStream</code>.         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#skip-long-">skip</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - the number of bytes to be skipped.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of bytes skipped.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the stream does not support seek, or if this input stream has been closed by invoking its <a href="../../java/io/BufferedInputStream.html#close--"><code>close()</code></a> method, or an I/O error occurs.                           </dd>    </dl></li></ul> <a end_ctx_id="method:skip-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:available-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:available--"/><a name="available--"/><ul class="blockList"><li class="blockList"><h4>available</h4><pre>public int available()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.<p> This method returns the sum of the number of bytes remaining to be read in the buffer (<code>count - pos </code>) and the result of calling the <a href="../../java/io/FilterInputStream.html#in"><code>in</code></a>.available().                         </p>                                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#available--">available</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking.                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if this input stream has been closed by invoking its <a href="../../java/io/BufferedInputStream.html#close--"><code>close()</code></a> method, or an I/O error occurs.                   </dd>   </dl></li></ul> <a end_ctx_id="method:available--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:mark-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:mark-int-"/><a name="mark-int-"/><ul class="blockList"><li class="blockList"><h4>mark</h4><pre>public void mark(int readlimit)</pre><div class="block">See the general contract of the <code>mark</code> method of <code>InputStream</code>.         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#mark-int-">mark</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>readlimit</code> - the maximum limit of bytes that can be read before the mark position becomes invalid.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedInputStream.html#reset--"><code>reset()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:mark-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>public void reset()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">See the general contract of the <code>reset</code> method of <code>InputStream</code>.<p> If <code>markpos</code> is <code>-1</code> (no mark has been set or the mark has been invalidated), an <code>IOException</code> is thrown. Otherwise, <code>pos</code> is set equal to <code>markpos</code>.                          </p>         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#reset--">reset</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if this stream has not been marked or, if the mark has been invalidated, or the stream has been closed by invoking its <a href="../../java/io/BufferedInputStream.html#close--"><code>close()</code></a> method, or an I/O error occurs.                                </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedInputStream.html#mark-int-"><code>mark(int)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:markSupported-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:markSupported--"/><a name="markSupported--"/><ul class="blockList"><li class="blockList"><h4>markSupported</h4><pre>public boolean markSupported()</pre><div class="block">Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods. The <code>markSupported</code> method of <code>BufferedInputStream</code> returns <code>true</code>.                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#markSupported--">markSupported</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>boolean</code> indicating if this stream type supports the <code>mark</code> and <code>reset</code> methods.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#mark-int-"><code>InputStream.mark(int)</code></a>, <a href="../../java/io/InputStream.html#reset--"><code>InputStream.reset()</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:markSupported--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this input stream and releases any system resources associated with the stream. Once the stream has been closed, further read(), available(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterInputStream.html#close--">close</a></code> in class <code><a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FilterInputStream.html#in"><code>FilterInputStream.in</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>