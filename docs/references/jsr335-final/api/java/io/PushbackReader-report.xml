<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PushbackReader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PushbackReader"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a>   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">PushbackReader</span>
extends <a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></pre><div class="block">A character-stream reader that allows characters to be pushed back into the stream.            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:PushbackReader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PushbackReader-java.io.Reader-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PushbackReader-java.io.Reader-int-"/><a name="PushbackReader-java.io.Reader-int-"/><ul class="blockList"><li class="blockList"><h4>PushbackReader</h4><pre>public PushbackReader(<a href="../../java/io/Reader.html" title="class in java.io">Reader</a> in,
                      int size)</pre><div class="block">Creates a new pushback reader with a pushback buffer of the given size.            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - The reader from which characters will be read          </dd><dd> <code>size</code> - The size of the pushback buffer        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>size &lt;= 0  </code>    </dd>  </dl></li></ul> <a end_ctx_id="constructor:PushbackReader-java.io.Reader-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PushbackReader-java.io.Reader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PushbackReader-java.io.Reader-"/><a name="PushbackReader-java.io.Reader-"/><ul class="blockListLast"><li class="blockList"><h4>PushbackReader</h4><pre>public PushbackReader(<a href="../../java/io/Reader.html" title="class in java.io">Reader</a> in)</pre><div class="block">Creates a new pushback reader with a one-character pushback buffer.         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - The reader from which characters will be read          </dd> </dl></li></ul> <a end_ctx_id="constructor:PushbackReader-java.io.Reader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a single character.   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#read--">read</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The character read, or -1 if the end of the stream has been reached             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-char:A-int-int-"/><a name="read-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(char[] cbuf,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads characters into a portion of an array.       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#read-char:A-int-int-">read</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Destination buffer    </dd><dd> <code>off</code> - Offset at which to start writing characters         </dd><dd> <code>len</code> - Maximum number of characters to read        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters read, or -1 if the end of the stream has been reached               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:read-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unread-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unread-int-"/><a name="unread-int-"/><ul class="blockList"><li class="blockList"><h4>unread</h4><pre>public void unread(int c)
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Pushes back a single character by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value <code>(char)c</code>.                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - The int value representing a character to be pushed back            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the pushback buffer is full, or if some other I/O error occurs               </dd>  </dl></li></ul> <a end_ctx_id="method:unread-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unread-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unread-char:A-int-int-"/><a name="unread-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>unread</h4><pre>public void unread(char[] cbuf,
                   int off,
                   int len)
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Pushes back a portion of an array of characters by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value <code>cbuf[off]</code>, the character after that will have the value <code>cbuf[off+1]</code>, and so forth.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Character array    </dd><dd> <code>off</code> - Offset of first character to push back         </dd><dd> <code>len</code> - Number of characters to push back        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If there is insufficient room in the pushback buffer, or if some other I/O error occurs                  </dd>  </dl></li></ul> <a end_ctx_id="method:unread-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unread-char:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unread-char:A-"/><a name="unread-char:A-"/><ul class="blockList"><li class="blockList"><h4>unread</h4><pre>public void unread(char[] cbuf)
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Pushes back an array of characters by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value <code>cbuf[0]</code>, the character after that will have the value <code>cbuf[1]</code>, and so forth.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - Character array to push back       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If there is insufficient room in the pushback buffer, or if some other I/O error occurs                  </dd>  </dl></li></ul> <a end_ctx_id="method:unread-char:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ready-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ready--"/><a name="ready--"/><ul class="blockList"><li class="blockList"><h4>ready</h4><pre>public boolean ready()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Tells whether this stream is ready to be read.        </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#ready--">ready</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>   </dl></li></ul> <a end_ctx_id="method:ready--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:mark-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:mark-int-"/><a name="mark-int-"/><ul class="blockList"><li class="blockList"><h4>mark</h4><pre>public void mark(int readAheadLimit)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Marks the present position in the stream. The <code>mark</code> for class <code>PushbackReader</code> always throws an exception.               </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#mark-int-">mark</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>readAheadLimit</code> - Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail.                             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Always, since mark is not supported        </dd>   </dl></li></ul> <a end_ctx_id="method:mark-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>public void reset()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Resets the stream. The <code>reset</code> method of <code>PushbackReader</code> always throws an exception.           </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#reset--">reset</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - Always, since reset is not supported        </dd>  </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:markSupported-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:markSupported--"/><a name="markSupported--"/><ul class="blockList"><li class="blockList"><h4>markSupported</h4><pre>public boolean markSupported()</pre><div class="block">Tells whether this stream supports the mark() operation, which it does not.           </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#markSupported--">markSupported</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this stream supports the mark operation.          </dd>  </dl></li></ul> <a end_ctx_id="method:markSupported--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), unread(), ready(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#close--">close</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-long-"/><a name="skip-long-"/><ul class="blockListLast"><li class="blockList"><h4>skip</h4><pre>public long skip(long n)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Skips characters. This method will block until some characters are available, an I/O error occurs, or the end of the stream is reached.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/FilterReader.html#skip-long-">skip</a></code> in class <code><a href="../../java/io/FilterReader.html" title="class in java.io">FilterReader</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - The number of characters to skip        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of characters actually skipped     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If <code>n</code> is negative.      </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd>    </dl></li></ul> <a end_ctx_id="method:skip-long-"/>  </td></tr></table></td></tr></table></diff></diffreport>