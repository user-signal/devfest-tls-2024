<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:StackTraceElement [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:StackTraceElement"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a> </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">StackTraceElement</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">An element in a stack trace, as returned by <a href="../../java/lang/Throwable.html#getStackTrace--"><code>Throwable.getStackTrace()</code></a>. Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created.                                                                    </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../serialized-form.html#java.lang.StackTraceElement">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:StackTraceElement"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StackTraceElement-java.lang.String-java.lang.String-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StackTraceElement-java.lang.String-java.lang.String-java.lang.String-int-"/><a name="StackTraceElement-java.lang.String-java.lang.String-java.lang.String-int-"/><ul class="blockListLast"><li class="blockList"><h4>StackTraceElement</h4><pre>public StackTraceElement(<a href="../../java/lang/String.html" title="class in java.lang">String</a> declaringClass,
                         <a href="../../java/lang/String.html" title="class in java.lang">String</a> methodName,
                         <a href="../../java/lang/String.html" title="class in java.lang">String</a> fileName,
                         int lineNumber)</pre><div class="block">Creates a stack trace element representing the specified execution point.         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>declaringClass</code> - the fully qualified name of the class containing the execution point represented by the stack trace element                   </dd><dd> <code>methodName</code> - the name of the method containing the execution point represented by the stack trace element                 </dd><dd> <code>fileName</code> - the name of the file containing the execution point represented by the stack trace element, or <code>null</code> if this information is unavailable                        </dd><dd> <code>lineNumber</code> - the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable. A value of -2 indicates that the method containing the execution point is a native method                                            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>declaringClass</code> or <code>methodName</code> is null        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:StackTraceElement-java.lang.String-java.lang.String-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFileName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFileName--"/><a name="getFileName--"/><ul class="blockList"><li class="blockList"><h4>getFileName</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> getFileName()</pre><div class="block">Returns the name of the source file containing the execution point represented by this stack trace element. Generally, this corresponds to the <code>SourceFile</code> attribute of the relevant <code>class</code> file (as per <i>The Java Virtual Machine Specification    </i>, Section 4.7.7). In some systems, the name may refer to some source code unit other than a file, such as an entry in source repository.                                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the name of the file containing the execution point represented by this stack trace element, or <code>null</code> if this information is unavailable.                     </dd> </dl></li></ul> <a end_ctx_id="method:getFileName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLineNumber-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLineNumber--"/><a name="getLineNumber--"/><ul class="blockList"><li class="blockList"><h4>getLineNumber</h4><pre>public int getLineNumber()</pre><div class="block">Returns the line number of the source line containing the execution point represented by this stack trace element. Generally, this is derived from the <code>LineNumberTable</code> attribute of the relevant <code>class</code> file (as per <i>The Java Virtual Machine Specification    </i>, Section 4.7.8).                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable.                         </dd> </dl></li></ul> <a end_ctx_id="method:getLineNumber--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getClassName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getClassName--"/><a name="getClassName--"/><ul class="blockList"><li class="blockList"><h4>getClassName</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> getClassName()</pre><div class="block">Returns the fully qualified name of the class containing the execution point represented by this stack trace element.                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the fully qualified name of the <code>Class</code> containing the execution point represented by this stack trace element.                </dd> </dl></li></ul> <a end_ctx_id="method:getClassName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getMethodName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getMethodName--"/><a name="getMethodName--"/><ul class="blockList"><li class="blockList"><h4>getMethodName</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> getMethodName()</pre><div class="block">Returns the name of the method containing the execution point represented by this stack trace element. If the execution point is contained in an instance or class initializer, this method will return the appropriate <i>special method name  </i>, <code>&lt;init&gt;</code> or <code>&lt;clinit&gt;</code>, as per Section 3.9 of <i>The Java Virtual Machine Specification    </i>.                                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the name of the method containing the execution point represented by this stack trace element.              </dd> </dl></li></ul> <a end_ctx_id="method:getMethodName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isNativeMethod-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isNativeMethod--"/><a name="isNativeMethod--"/><ul class="blockList"><li class="blockList"><h4>isNativeMethod</h4><pre>public boolean isNativeMethod()</pre><div class="block">Returns true if the method containing the execution point represented by this stack trace element is a native method.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the method containing the execution point represented by this stack trace element is a native method.                  </dd> </dl></li></ul> <a end_ctx_id="method:isNativeMethod--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this stack trace element. The format of this string depends on the implementation, but the following examples may be regarded as typical:<ul><li> <code>"MyClass.mash(MyClass.java:9)"</code> - Here, <code>"MyClass"</code> is the <i>fully-qualified name </i> of the class containing the execution point represented by this stack trace element, <code>"mash"</code> is the name of the method containing the execution point, <code>"MyClass.java"</code> is the source file containing the execution point, and <code>"9"</code> is the line number of the source line containing the execution point.                                                      </li><li> <code>"MyClass.mash(MyClass.java)"</code> - As above, but the line number is unavailable.          </li><li> <code>"MyClass.mash(Unknown Source)" </code> - As above, but neither the file name nor the line number are available.               </li><li> <code>"MyClass.mash(Native Method)" </code> - As above, but neither the file name nor the line number are available, and the method containing the execution point is known to be a native method.                             </li></ul>                          </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the object.     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Throwable.html#printStackTrace--"><code>Throwable.printStackTrace()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Returns true if the specified object is another <code>StackTraceElement</code> instance representing the same execution point as this instance. Two stack trace elements <code>a</code> and <code>b</code> are equal if and only if:<pre><code>
     equals(a.getFileName(), b.getFileName()) &amp;&amp;
     a.getLineNumber() == b.getLineNumber()) &amp;&amp;
     equals(a.getClassName(), b.getClassName()) &amp;&amp;
     equals(a.getMethodName(), b.getMethodName())
 </code></pre> where <code>equals</code> has the semantics of <a href="../../java/util/Objects.html#equals-java.lang.Object-java.lang.Object-"><code>Objects.equals</code></a>.                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to be compared with this stack trace element.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if the specified object is another <code>StackTraceElement</code> instance representing the same execution point as this instance.                </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockListLast"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns a hash code value for this stack trace element.         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for this object.      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table></diff></diffreport>