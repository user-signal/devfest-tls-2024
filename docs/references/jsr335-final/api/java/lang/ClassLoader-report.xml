<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ClassLoader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ClassLoader"/><ul class="blockList"><li class="blockList"><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/security/SecureClassLoader.html" title="class in java.security">SecureClassLoader</a> </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">ClassLoader</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">A class loader is an object that is responsible for loading classes. The class <tt>ClassLoader</tt> is an abstract class. Given the <a href="#name">binary name </a> of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a "class file" of that name from a file system.<p> Every <a href="../../java/lang/Class.html" title="class in java.lang"><code><tt>Class</tt></code></a> object contains a <a href="../../java/lang/Class.html#getClassLoader--"><code>reference</code></a> to the <tt>ClassLoader</tt> that defined it.            </p><p> <tt>Class</tt> objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime. The class loader for an array class, as returned by <a href="../../java/lang/Class.html#getClassLoader--"><code>Class.getClassLoader()</code></a> is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader.                                                           </p><p> Applications implement subclasses of <tt>ClassLoader</tt> in order to extend the manner in which the Java virtual machine dynamically loads classes.                    </p><p> Class loaders may typically be used by security managers to indicate security domains.             </p><p> The <tt>ClassLoader</tt> class uses a delegation model to search for classes and resources. Each instance of <tt>ClassLoader</tt> has an associated parent class loader. When requested to find a class or resource, a <tt>ClassLoader</tt> instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the "bootstrap class loader", does not itself have a parent but may serve as the parent of a <tt>ClassLoader</tt> instance.                                                                                    </p><p> Class loaders that support concurrent loading of classes are known as <em>parallel capable </em> class loaders and are required to register themselves at their class initialization time by invoking the <a href="../../java/lang/ClassLoader.html#registerAsParallelCapable--"><code><tt>ClassLoader.registerAsParallelCapable</tt></code></a> method. Note that the <tt>ClassLoader</tt> class is registered as parallel capable by default. However, its subclasses still need to register themselves if they are parallel capable. <br/> In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-"><code><tt>loadClass</tt></code></a> methods).                                                                                                  </p><p> Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the virtual machine loads classes from the directory defined by the <tt>CLASSPATH</tt> environment variable.                                   </p><p> However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-"><code><tt>defineClass</tt></code></a> converts an array of bytes into an instance of class <tt>Class</tt>. Instances of this newly defined class can be created using <a href="../../java/lang/Class.html#newInstance--"><code><tt>Class.newInstance</tt></code></a>.                                                    </p><p> The methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java virtual machine invokes the <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-"><code><tt>loadClass</tt></code></a> method of the class loader that originally created the class.                                      </p><p> For example, an application could create a network class loader to download class files from a server. Sample code might look like:                      </p><blockquote><pre>
   ClassLoader loader = new NetworkClassLoader(host, port);
   Object main = loader.loadClass("Main", true).newInstance();
        . . .
 </pre></blockquote><p> The network class loader subclass must define the methods <a href="../../java/lang/ClassLoader.html#findClass-java.lang.String-"><code><tt>findClass</tt></code></a> and <tt>loadClassData</tt> to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method <a href="../../java/lang/ClassLoader.html#defineClass-byte:A-int-int-"><code><tt>defineClass</tt></code></a> to create a class instance. A sample implementation is:                                             </p><blockquote><pre>
     class NetworkClassLoader extends ClassLoader {
         String host;
         int port;

         public Class findClass(String name) {
             byte[] b = loadClassData(name);
             return defineClass(name, b, 0, b.length);
         }

         private byte[] loadClassData(String name) {
             // load the class data from the connection
              . . .
         }
     }
 </pre></blockquote><h3> <a name="name">Binary names </a> </h3><p> Any class name provided as a <a href="../../java/lang/String.html" title="class in java.lang"><code>String</code></a> parameter to methods in <tt>ClassLoader</tt> must be a binary name as defined by <cite>The Java™ Language Specification   </cite>.                     </p><p> Examples of valid class names include:      </p><blockquote><pre>
   "java.lang.String"
   "javax.swing.JSpinner$DefaultEditor"
   "java.security.KeyStore$Builder$FileBuilder$1"
   "java.net.URLClassLoader$3$1"
 </pre></blockquote>                                                                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#resolveClass-java.lang.Class-"><code>resolveClass(Class)</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:ClassLoader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ClassLoader-java.lang.ClassLoader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ClassLoader-java.lang.ClassLoader-"/><a name="ClassLoader-java.lang.ClassLoader-"/><ul class="blockList"><li class="blockList"><h4>ClassLoader</h4><pre>protected ClassLoader(<a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> parent)</pre><div class="block">Creates a new class loader using the specified parent class loader for delegation.<p> If there is a security manager, its <a href="../../java/lang/SecurityManager.html#checkCreateClassLoader--"><code><tt>checkCreateClassLoader</tt></code></a> method is invoked. This may result in a security exception.                  </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parent</code> - The parent class loader      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <tt>checkCreateClassLoader</tt> method doesn't allow creation of a new class loader.                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="constructor:ClassLoader-java.lang.ClassLoader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ClassLoader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ClassLoader--"/><a name="ClassLoader--"/><ul class="blockListLast"><li class="blockList"><h4>ClassLoader</h4><pre>protected ClassLoader()</pre><div class="block">Creates a new class loader using the <tt>ClassLoader</tt> returned by the method <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code><tt>getSystemClassLoader()</tt></code></a> as the parent class loader.<p> If there is a security manager, its <a href="../../java/lang/SecurityManager.html#checkCreateClassLoader--"><code><tt>checkCreateClassLoader</tt></code></a> method is invoked. This may result in a security exception.                  </p>                 </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <tt>checkCreateClassLoader</tt> method doesn't allow creation of a new class loader.                   </dd> </dl></li></ul> <a end_ctx_id="constructor:ClassLoader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:loadClass-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:loadClass-java.lang.String-"/><a name="loadClass-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>loadClass</h4><pre>public <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; loadClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                   throws <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Loads the class with the specified <a href="#name">binary name </a>. This method searches for classes in the same manner as the <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code>loadClass(String, boolean) </code></a> method. It is invoked by the Java virtual machine to resolve class references. Invoking this method is equivalent to invoking <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code><tt>loadClass(name, false) </tt></code></a>.                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The <a href="#name">binary name </a> of the class       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The resulting <tt>Class</tt> object   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - If the class was not found        </dd>   </dl></li></ul> <a end_ctx_id="method:loadClass-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:loadClass-java.lang.String-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:loadClass-java.lang.String-boolean-"/><a name="loadClass-java.lang.String-boolean-"/><ul class="blockList"><li class="blockList"><h4>loadClass</h4><pre>protected <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; loadClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                             boolean resolve)
                      throws <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Loads the class with the specified <a href="#name">binary name </a>. The default implementation of this method searches for classes in the following order:<ol><li><p> Invoke <a href="../../java/lang/ClassLoader.html#findLoadedClass-java.lang.String-"><code>findLoadedClass(String)</code></a> to check if the class has already been loaded.           </p></li><li><p> Invoke the <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-"><code><tt>loadClass</tt></code></a> method on the parent class loader. If the parent is <tt>null</tt> the class loader built-in to the virtual machine is used, instead.                         </p></li><li><p> Invoke the <a href="../../java/lang/ClassLoader.html#findClass-java.lang.String-"><code>findClass(String)</code></a> method to find the class.        </p></li></ol><p> If the class was found using the above steps, and the <tt>resolve</tt> flag is true, this method will then invoke the <a href="../../java/lang/ClassLoader.html#resolveClass-java.lang.Class-"><code>resolveClass(Class)</code></a> method on the resulting <tt>Class</tt> object.                            </p><p> Subclasses of <tt>ClassLoader</tt> are encouraged to override <a href="../../java/lang/ClassLoader.html#findClass-java.lang.String-"><code>findClass(String)</code></a>, rather than this method.            </p><p> Unless overridden, this method synchronizes on the result of <a href="../../java/lang/ClassLoader.html#getClassLoadingLock-java.lang.String-"><code><tt>getClassLoadingLock</tt></code></a> method during the entire class loading process.                 </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The <a href="#name">binary name </a> of the class       </dd><dd> <code>resolve</code> - If <tt>true</tt> then resolve the class        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The resulting <tt>Class</tt> object   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - If the class could not be found         </dd>   </dl></li></ul> <a end_ctx_id="method:loadClass-java.lang.String-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getClassLoadingLock-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getClassLoadingLock-java.lang.String-"/><a name="getClassLoadingLock-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getClassLoadingLock</h4><pre>protected <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> getClassLoadingLock(<a href="../../java/lang/String.html" title="class in java.lang">String</a> className)</pre><div class="block">Returns the lock object for class loading operations. For backward compatibility, the default implementation of this method behaves as follows. If this ClassLoader object is registered as parallel capable, the method returns a dedicated object associated with the specified class name. Otherwise, the method returns this ClassLoader object.                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>className</code> - The name of the to-be-loaded class        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the lock for class loading operations     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If registered as parallel capable and <tt>className</tt> is null           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code>loadClass(String, boolean) </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:getClassLoadingLock-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findClass-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findClass-java.lang.String-"/><a name="findClass-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findClass</h4><pre>protected <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; findClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                      throws <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Finds the class with the specified <a href="#name">binary name </a>. This method should be overridden by class loader implementations that follow the delegation model for loading classes, and will be invoked by the <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-"><code><tt>loadClass</tt></code></a> method after checking the parent class loader for the requested class. The default implementation throws a <tt>ClassNotFoundException</tt>.                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The <a href="#name">binary name </a> of the class       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The resulting <tt>Class</tt> object   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - If the class could not be found         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:findClass-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defineClass-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defineClass-byte:A-int-int-"/><a name="defineClass-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>defineClass</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; defineClass(byte[] b,
                                                 int off,
                                                 int len)
                                          throws <a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">Replaced by <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-"><code>defineClass(String, byte[], int, int)   </code></a>  </span> </div><div class="block">Converts an array of bytes into an instance of class <tt>Class</tt>. Before the <tt>Class</tt> can be used it must be resolved. This method is deprecated in favor of the version that takes a <a href="#name">binary name </a> as its first argument, and is more secure.                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - The bytes that make up the class data. The bytes in positions <tt>off</tt> through <tt>off+len-1</tt> should have the format of a valid class file as defined by <cite>The Java™ Virtual Machine Specification    </cite>.                              </dd><dd> <code>off</code> - The start offset in <tt>b</tt> of the class data           </dd><dd> <code>len</code> - The length of the class data        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Class</tt> object that was created from the specified class data          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></code> - If the data did not contain a valid class           </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If either <tt>off</tt> or <tt>len</tt> is negative, or if <tt>off+len</tt> is greater than <tt>b.length</tt>.                </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if an attempt is made to define a class in a package with a fully-qualified name that starts with "<code>java.</code>".                                                  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code>loadClass(String, boolean) </code></a>, <a href="../../java/lang/ClassLoader.html#resolveClass-java.lang.Class-"><code>resolveClass(Class)</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:defineClass-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defineClass-java.lang.String-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defineClass-java.lang.String-byte:A-int-int-"/><a name="defineClass-java.lang.String-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>defineClass</h4><pre>protected final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; defineClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                                     byte[] b,
                                     int off,
                                     int len)
                              throws <a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></pre><div class="block">Converts an array of bytes into an instance of class <tt>Class</tt>. Before the <tt>Class</tt> can be used it must be resolved.<p> This method assigns a default <a href="../../java/security/ProtectionDomain.html" title="class in java.security"><code><tt>ProtectionDomain</tt></code></a> to the newly defined class. The <tt>ProtectionDomain</tt> is effectively granted the same set of permissions returned when <a href="../../java/security/Policy.html#getPermissions-java.security.CodeSource-"><code><tt>Policy.getPolicy().getPermissions(new CodeSource(null, null))  </tt></code></a> is invoked. The default domain is created on the first invocation of <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-"><code><tt>defineClass</tt></code></a>, and re-used on subsequent invocations.                                          </p><p> To assign a specific <tt>ProtectionDomain</tt> to the class, use the <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"><code><tt>defineClass</tt></code></a> method that takes a <tt>ProtectionDomain</tt> as one of its arguments.                     </p>                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The expected <a href="#name">binary name </a> of the class, or <tt>null</tt> if not known             </dd><dd> <code>b</code> - The bytes that make up the class data. The bytes in positions <tt>off</tt> through <tt>off+len-1</tt> should have the format of a valid class file as defined by <cite>The Java™ Virtual Machine Specification    </cite>.                              </dd><dd> <code>off</code> - The start offset in <tt>b</tt> of the class data           </dd><dd> <code>len</code> - The length of the class data        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Class</tt> object that was created from the specified class data.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></code> - If the data did not contain a valid class           </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If either <tt>off</tt> or <tt>len</tt> is negative, or if <tt>off+len</tt> is greater than <tt>b.length</tt>.                </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class (which is unsigned), or if <tt>name</tt> begins with "<tt>java.</tt>".                                      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code>loadClass(String, boolean) </code></a>, <a href="../../java/lang/ClassLoader.html#resolveClass-java.lang.Class-"><code>resolveClass(Class)</code></a>, <a href="../../java/security/CodeSource.html" title="class in java.security"><code>CodeSource</code></a>, <a href="../../java/security/SecureClassLoader.html" title="class in java.security"><code>SecureClassLoader</code></a>    </dd>     </dl></li></ul> <a end_ctx_id="method:defineClass-java.lang.String-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"/><a name="defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"/><ul class="blockList"><li class="blockList"><h4>defineClass</h4><pre>protected final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; defineClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                                     byte[] b,
                                     int off,
                                     int len,
                                     <a href="../../java/security/ProtectionDomain.html" title="class in java.security">ProtectionDomain</a> protectionDomain)
                              throws <a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></pre><div class="block">Converts an array of bytes into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>. If the domain is <tt>null</tt>, then a default domain will be assigned to the class as specified in the documentation for <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-"><code>defineClass(String, byte[], int, int)   </code></a>. Before the class can be used it must be resolved.<p> The first class defined in a package determines the exact set of certificates that all subsequent classes defined in that package must contain. The set of certificates for a class is obtained from the <a href="../../java/security/CodeSource.html" title="class in java.security"><code><tt>CodeSource</tt></code></a> within the <tt>ProtectionDomain</tt> of the class. Any classes added to that package must contain the same set of certificates or a <tt>SecurityException</tt> will be thrown. Note that if <tt>name</tt> is <tt>null</tt>, this check is not performed. You should always pass in the <a href="#name">binary name </a> of the class you are defining as well as the bytes. This ensures that the class you are defining is indeed the class you think it is.                                                                                                         </p><p> The specified <tt>name</tt> cannot begin with "<tt>java.</tt>", since all classes in the "<tt>java.*</tt> packages can only be defined by the bootstrap class loader. If <tt>name</tt> is not <tt>null</tt>, it must be equal to the <a href="#name">binary name </a> of the class specified by the byte array "<tt>b</tt>", otherwise a <a href="../../java/lang/NoClassDefFoundError.html" title="class in java.lang"><code><tt>NoClassDefFoundError</tt></code></a> will be thrown.                                                  </p>                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The expected <a href="#name">binary name </a> of the class, or <tt>null</tt> if not known             </dd><dd> <code>b</code> - The bytes that make up the class data. The bytes in positions <tt>off</tt> through <tt>off+len-1</tt> should have the format of a valid class file as defined by <cite>The Java™ Virtual Machine Specification    </cite>.                              </dd><dd> <code>off</code> - The start offset in <tt>b</tt> of the class data           </dd><dd> <code>len</code> - The length of the class data        </dd><dd> <code>protectionDomain</code> - The ProtectionDomain of the class       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Class</tt> object created from the data, and optional <tt>ProtectionDomain</tt>.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></code> - If the data did not contain a valid class           </dd><dd> <code><a href="../../java/lang/NoClassDefFoundError.html" title="class in java.lang">NoClassDefFoundError</a></code> - If <tt>name</tt> is not equal to the <a href="#name">binary name </a> of the class specified by <tt>b</tt>                </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If either <tt>off</tt> or <tt>len</tt> is negative, or if <tt>off+len</tt> is greater than <tt>b.length</tt>.                </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if <tt>name</tt> begins with "<tt>java.</tt>".                                   </dd>   </dl></li></ul> <a end_ctx_id="method:defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defineClass-java.lang.String-java.nio.ByteBuffer-java.security.ProtectionDomain- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defineClass-java.lang.String-java.nio.ByteBuffer-java.security.ProtectionDomain-"/><a name="defineClass-java.lang.String-java.nio.ByteBuffer-java.security.ProtectionDomain-"/><ul class="blockList"><li class="blockList"><h4>defineClass</h4><pre>protected final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; defineClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                                     <a href="../../java/nio/ByteBuffer.html" title="class in java.nio">ByteBuffer</a> b,
                                     <a href="../../java/security/ProtectionDomain.html" title="class in java.security">ProtectionDomain</a> protectionDomain)
                              throws <a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></pre><div class="block">Converts a <a href="../../java/nio/ByteBuffer.html" title="class in java.nio"><code><tt>ByteBuffer</tt></code></a> into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>. If the domain is <tt>null</tt>, then a default domain will be assigned to the class as specified in the documentation for <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-"><code>defineClass(String, byte[], int, int)   </code></a>. Before the class can be used it must be resolved.<p>The rules about the first class defined in a package determining the set of certificates for the package, and the restrictions on class names are identical to those specified in the documentation for <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"><code>defineClass(String, byte[], int, int, ProtectionDomain)    </code></a>.                                 </p><p> An invocation of this method of the form <i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt><i>bBuffer</i><tt>,</tt><i>pd</i><tt>)</tt> yields exactly the same result as the statements                 </p><p> <tt> ...<br/> byte[] temp = new byte[bBuffer.<a href="../../java/nio/Buffer.html#remaining--"><code>remaining</code></a>()];<br/> bBuffer.<a href="../../java/nio/ByteBuffer.html#get-byte:A-"><code>get</code></a>(temp);<br/> return <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"><code>cl.defineClass</code></a>(name, temp, 0, temp.length, pd);<br/>               </tt> </p>                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The expected <a href="#name">binary name </a>. of the class, or <tt>null</tt> if not known             </dd><dd> <code>b</code> - The bytes that make up the class data. The bytes from positions <tt>b.position()</tt> through <tt>b.position() + b.limit() -1     </tt> should have the format of a valid class file as defined by <cite>The Java™ Virtual Machine Specification    </cite>.                              </dd><dd> <code>protectionDomain</code> - The ProtectionDomain of the class, or <tt>null</tt>.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Class</tt> object created from the data, and optional <tt>ProtectionDomain</tt>.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassFormatError.html" title="class in java.lang">ClassFormatError</a></code> - If the data did not contain a valid class.           </dd><dd> <code><a href="../../java/lang/NoClassDefFoundError.html" title="class in java.lang">NoClassDefFoundError</a></code> - If <tt>name</tt> is not equal to the <a href="#name">binary name </a> of the class specified by <tt>b</tt>                </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If an attempt is made to add this class to a package that contains classes that were signed by a different set of certificates than this class, or if <tt>name</tt> begins with "<tt>java.</tt>".                                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-java.security.ProtectionDomain-"><code>defineClass(String, byte[], int, int, ProtectionDomain)    </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:defineClass-java.lang.String-java.nio.ByteBuffer-java.security.ProtectionDomain-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolveClass-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolveClass-java.lang.Class-"/><a name="resolveClass-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>resolveClass</h4><pre>protected final void resolveClass(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; c)</pre><div class="block">Links the specified class. This (misleadingly named) method may be used by a class loader to link a class. If the class <tt>c</tt> has already been linked, then this method simply returns. Otherwise, the class is linked as described in the "Execution" chapter of <cite>The Java™ Language Specification   </cite>.                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - The class to link      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <tt>c</tt> is <tt>null</tt>.      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-"><code>defineClass(String, byte[], int, int)   </code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:resolveClass-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findSystemClass-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findSystemClass-java.lang.String-"/><a name="findSystemClass-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findSystemClass</h4><pre>protected final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; findSystemClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                                  throws <a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></pre><div class="block">Finds a class with the specified <a href="#name">binary name </a>, loading it if necessary.<p> This method loads the class through the system class loader (see <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>getSystemClassLoader()</code></a>). The <tt>Class</tt> object returned might have more than one <tt>ClassLoader</tt> associated with it. Subclasses of <tt>ClassLoader</tt> need not usually invoke this method, because most class loaders need to override just <a href="../../java/lang/ClassLoader.html#findClass-java.lang.String-"><code>findClass(String)</code></a>.                                           </p>          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The <a href="#name">binary name </a> of the class       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Class</tt> object for the specified <tt>name</tt>      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassNotFoundException.html" title="class in java.lang">ClassNotFoundException</a></code> - If the class could not be found         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#ClassLoader-java.lang.ClassLoader-"><code>ClassLoader(ClassLoader)</code></a>, <a href="../../java/lang/ClassLoader.html#getParent--"><code>getParent()</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:findSystemClass-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findLoadedClass-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findLoadedClass-java.lang.String-"/><a name="findLoadedClass-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findLoadedClass</h4><pre>protected final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; findLoadedClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Returns the class with the given <a href="#name">binary name </a> if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that <a href="#name">binary name </a>. Otherwise <tt>null</tt> is returned.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The <a href="#name">binary name </a> of the class       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Class</tt> object, or <tt>null</tt> if the class has not been loaded           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd>   </dl></li></ul> <a end_ctx_id="method:findLoadedClass-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setSigners-java.lang.Class-java.lang.Object:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setSigners-java.lang.Class-java.lang.Object:A-"/><a name="setSigners-java.lang.Class-java.lang.Object:A-"/><ul class="blockList"><li class="blockList"><h4>setSigners</h4><pre>protected final void setSigners(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; c,
                                <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] signers)</pre><div class="block">Sets the signers of a class. This should be invoked after defining a class.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - The <tt>Class</tt> object     </dd><dd> <code>signers</code> - The signers for the class       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd>  </dl></li></ul> <a end_ctx_id="method:setSigners-java.lang.Class-java.lang.Object:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getResource-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getResource-java.lang.String-"/><a name="getResource-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getResource</h4><pre>public <a href="../../java/net/URL.html" title="class in java.net">URL</a> getResource(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Finds the resource with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code.<p> The name of a resource is a '<tt>/</tt>'-separated path name that identifies the resource.              </p><p> This method will first search the parent class loader for the resource; if the parent is <tt>null</tt> the path of the class loader built-in to the virtual machine is searched. That failing, this method will invoke <a href="../../java/lang/ClassLoader.html#findResource-java.lang.String-"><code>findResource(String)</code></a> to find the resource.                                         </p>                                  </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>When overriding this method it is recommended that an implementation ensures that any delegation is consistent with the <a href="../../java/lang/ClassLoader.html#getResources-java.lang.String-"><code>getResources(String)</code></a> method.                   </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A <tt>URL</tt> object for reading the resource, or <tt>null</tt> if the resource could not be found or the invoker doesn't have adequate privileges to get the resource.                          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd>    </dl></li></ul> <a end_ctx_id="method:getResource-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getResources-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getResources-java.lang.String-"/><a name="getResources-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getResources</h4><pre>public <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/net/URL.html" title="class in java.net">URL</a>&gt; getResources(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Finds all the resources with the given name. A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is independent of the location of the code.<p>The name of a resource is a <tt>/</tt>-separated path name that identifies the resource.             </p><p> The search order is described in the documentation for <a href="../../java/lang/ClassLoader.html#getResource-java.lang.String-"><code>getResource(String)</code></a>.          </p>                                   </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>When overriding this method it is recommended that an implementation ensures that any delegation is consistent with the <a href="../../java/lang/ClassLoader.html#getResource-java.lang.String-"><code>getResource(String)</code></a> method. This should ensure that the first element returned by the Enumeration's <code>nextElement</code> method is the same resource that the <code>getResource(String)</code> method would return.                                          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An enumeration of <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> objects for the resource. If no resources could be found, the enumeration will be empty. Resources that the class loader doesn't have access to will not be in the enumeration.                                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If I/O errors occur      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#findResources-java.lang.String-"><code>findResources(String)</code></a> </dd>      </dl></li></ul> <a end_ctx_id="method:getResources-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findResource-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findResource-java.lang.String-"/><a name="findResource-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findResource</h4><pre>protected <a href="../../java/net/URL.html" title="class in java.net">URL</a> findResource(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A <tt>URL</tt> object for reading the resource, or <tt>null</tt> if the resource could not be found               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:findResource-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findResources-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findResources-java.lang.String-"/><a name="findResources-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findResources</h4><pre>protected <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/net/URL.html" title="class in java.net">URL</a>&gt; findResources(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns an enumeration of <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> objects representing all the resources with the given name. Class loader implementations should override this method to specify where to load resources from.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An enumeration of <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> objects for the resources       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If I/O errors occur      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:findResources-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:registerAsParallelCapable-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:registerAsParallelCapable--"/><a name="registerAsParallelCapable--"/><ul class="blockList"><li class="blockList"><h4>registerAsParallelCapable</h4><pre>protected static boolean registerAsParallelCapable()</pre><div class="block">Registers the caller as parallel capable. The registration succeeds if and only if all of the following conditions are met:<ol><li> no instance of the caller has been created        </li><li> all of the super classes (except class Object) of the caller are registered as parallel capable                </li></ol><p>Note that once a class loader is registered as parallel capable, there is no way to change it back.                  </p>                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if the caller is successfully registered as parallel capable and false if otherwise.             </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:registerAsParallelCapable--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSystemResource-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSystemResource-java.lang.String-"/><a name="getSystemResource-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getSystemResource</h4><pre>public static <a href="../../java/net/URL.html" title="class in java.net">URL</a> getSystemResource(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Find a resource of the specified name from the search path used to load classes. This method locates the resource through the system class loader (see <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>getSystemClassLoader()</code></a>).                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> object for reading the resource, or <tt>null</tt> if the resource could not be found               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd>   </dl></li></ul> <a end_ctx_id="method:getSystemResource-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSystemResources-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSystemResources-java.lang.String-"/><a name="getSystemResources-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getSystemResources</h4><pre>public static <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/net/URL.html" title="class in java.net">URL</a>&gt; getSystemResources(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                                           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Finds all resources of the specified name from the search path used to load classes. The resources thus found are returned as an <a href="../../java/util/Enumeration.html" title="interface in java.util"><code><tt>Enumeration</tt></code></a> of <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> objects.<p> The search order is described in the documentation for <a href="../../java/lang/ClassLoader.html#getSystemResource-java.lang.String-"><code>getSystemResource(String)</code></a>.          </p>                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An enumeration of resource <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> objects     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If I/O errors occur      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:getSystemResources-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getResourceAsStream-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getResourceAsStream-java.lang.String-"/><a name="getResourceAsStream-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getResourceAsStream</h4><pre>public <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> getResourceAsStream(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Returns an input stream for reading the specified resource.<p> The search order is described in the documentation for <a href="../../java/lang/ClassLoader.html#getResource-java.lang.String-"><code>getResource(String)</code></a>.          </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An input stream for reading the resource, or <tt>null</tt> if the resource could not be found               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd>   </dl></li></ul> <a end_ctx_id="method:getResourceAsStream-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSystemResourceAsStream-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSystemResourceAsStream-java.lang.String-"/><a name="getSystemResourceAsStream-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getSystemResourceAsStream</h4><pre>public static <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> getSystemResourceAsStream(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Open for reading, a resource of the specified name from the search path used to load classes. This method locates the resource through the system class loader (see <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>getSystemClassLoader()</code></a>).                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The resource name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An input stream for reading the resource, or <tt>null</tt> if the resource could not be found               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd>   </dl></li></ul> <a end_ctx_id="method:getSystemResourceAsStream-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getParent-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getParent--"/><a name="getParent--"/><ul class="blockList"><li class="blockList"><h4>getParent</h4><pre>public final <a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> getParent()</pre><div class="block">Returns the parent class loader for delegation. Some implementations may use <tt>null</tt> to represent the bootstrap class loader. This method will return <tt>null</tt> in such implementations if this class loader's parent is the bootstrap class loader.<p> If a security manager is present, and the invoker's class loader is not <tt>null</tt> and is not an ancestor of this class loader, then this method invokes the security manager's <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code><tt>checkPermission</tt></code></a> method with a <a href="../../java/lang/RuntimePermission.html#RuntimePermission-java.lang.String-"><code><tt>RuntimePermission("getClassLoader")</tt></code></a> permission to verify access to the parent class loader is permitted. If not, a <tt>SecurityException</tt> will be thrown.                                                     </p>                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The parent <tt>ClassLoader</tt>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <tt>checkPermission</tt> method doesn't allow access to this class loader's parent class loader.                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:getParent--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSystemClassLoader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSystemClassLoader--"/><a name="getSystemClassLoader--"/><ul class="blockList"><li class="blockList"><h4>getSystemClassLoader</h4><pre>public static <a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> getSystemClassLoader()</pre><div class="block">Returns the system class loader for delegation. This is the default delegation parent for new <tt>ClassLoader</tt> instances, and is typically the class loader used to start the application.<p> This method is first invoked early in the runtime's startup sequence, at which point it creates the system class loader and sets it as the context class loader of the invoking <tt>Thread</tt>.                                </p><p> The default system class loader is an implementation-dependent instance of this class.            </p><p> If the system property "<tt>java.system.class.loader</tt>" is defined when this method is first invoked then the value of that property is taken to be the name of a class that will be returned as the system class loader. The class is loaded using the default system class loader and must define a public constructor that takes a single parameter of type <tt>ClassLoader</tt> which is used as the delegation parent. An instance is then created using this constructor with the default system class loader as the parameter. The resulting class loader is defined to be the system class loader.                                                                                                 </p><p> If a security manager is present, and the invoker's class loader is not <tt>null</tt> and the invoker's class loader is not the same as or an ancestor of the system class loader, then this method invokes the security manager's <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code><tt>checkPermission</tt></code></a> method with a <a href="../../java/lang/RuntimePermission.html#RuntimePermission-java.lang.String-"><code><tt>RuntimePermission("getClassLoader")</tt></code></a> permission to verify access to the system class loader. If not, a <tt>SecurityException</tt> will be thrown.                                                            </p>                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The system <tt>ClassLoader</tt> for delegation, or <tt>null</tt> if none        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <tt>checkPermission</tt> method doesn't allow access to the system class loader.                   </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - If invoked recursively during the construction of the class loader specified by the "<tt>java.system.class.loader</tt>" property.                 </dd><dd> <code><a href="../../java/lang/Error.html" title="class in java.lang">Error</a></code> - If the system property "<tt>java.system.class.loader</tt>" is defined but the named class could not be loaded, the provider class does not define the required constructor, or an exception is thrown by that constructor when it is invoked. The underlying cause of the error can be retrieved via the <a href="../../java/lang/Throwable.html#getCause--"><code>Throwable.getCause()</code></a> method.                                                   </dd>  </dl></li></ul> <a end_ctx_id="method:getSystemClassLoader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:definePackage-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.net.URL- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:definePackage-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.net.URL-"/><a name="definePackage-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.net.URL-"/><ul class="blockList"><li class="blockList"><h4>definePackage</h4><pre>protected <a href="../../java/lang/Package.html" title="class in java.lang">Package</a> definePackage(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> specTitle,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> specVersion,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> specVendor,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> implTitle,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> implVersion,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> implVendor,
                                <a href="../../java/net/URL.html" title="class in java.net">URL</a> sealBase)
                         throws <a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></pre><div class="block">Defines a package by name in this <tt>ClassLoader</tt>. This allows class loaders to define the packages for their classes. Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The package name     </dd><dd> <code>specTitle</code> - The specification title     </dd><dd> <code>specVersion</code> - The specification version     </dd><dd> <code>specVendor</code> - The specification vendor     </dd><dd> <code>implTitle</code> - The implementation title     </dd><dd> <code>implVersion</code> - The implementation version     </dd><dd> <code>implVendor</code> - The implementation vendor     </dd><dd> <code>sealBase</code> - If not <tt>null</tt>, then this package is sealed with respect to the given code source <a href="../../java/net/URL.html" title="class in java.net"><code><tt>URL</tt></code></a> object. Otherwise, the package is not sealed.                         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The newly defined <tt>Package</tt> object    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If package name duplicates an existing package either in this class loader or one of its ancestors                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:definePackage-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.lang.String-java.net.URL-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getPackage-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getPackage-java.lang.String-"/><a name="getPackage-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getPackage</h4><pre>protected <a href="../../java/lang/Package.html" title="class in java.lang">Package</a> getPackage(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - The package name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The <tt>Package</tt> corresponding to the given name, or <tt>null</tt> if not found           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:getPackage-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getPackages-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getPackages--"/><a name="getPackages--"/><ul class="blockList"><li class="blockList"><h4>getPackages</h4><pre>protected <a href="../../java/lang/Package.html" title="class in java.lang">Package</a>[] getPackages()</pre><div class="block">Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The array of <tt>Package</tt> objects defined by this <tt>ClassLoader</tt>        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>  </dl></li></ul> <a end_ctx_id="method:getPackages--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findLibrary-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findLibrary-java.lang.String-"/><a name="findLibrary-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findLibrary</h4><pre>protected <a href="../../java/lang/String.html" title="class in java.lang">String</a> findLibrary(<a href="../../java/lang/String.html" title="class in java.lang">String</a> libname)</pre><div class="block">Returns the absolute path name of a native library. The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns <tt>null</tt>, the VM searches the library along the path specified as the "<tt>java.library.path</tt>" property.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>libname</code> - The library name     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The absolute path of the native library      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#loadLibrary-java.lang.String-"><code>System.loadLibrary(String)</code></a>, <a href="../../java/lang/System.html#mapLibraryName-java.lang.String-"><code>System.mapLibraryName(String)</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:findLibrary-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setDefaultAssertionStatus-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setDefaultAssertionStatus-boolean-"/><a name="setDefaultAssertionStatus-boolean-"/><ul class="blockList"><li class="blockList"><h4>setDefaultAssertionStatus</h4><pre>public void setDefaultAssertionStatus(boolean enabled)</pre><div class="block">Sets the default assertion status for this class loader. This setting determines whether classes loaded by this class loader and initialized in the future will have assertions enabled or disabled by default. This setting may be overridden on a per-package or per-class basis by invoking <a href="../../java/lang/ClassLoader.html#setPackageAssertionStatus-java.lang.String-boolean-"><code>setPackageAssertionStatus(String, boolean) </code></a> or <a href="../../java/lang/ClassLoader.html#setClassAssertionStatus-java.lang.String-boolean-"><code>setClassAssertionStatus(String, boolean) </code></a>.                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>enabled</code> - <tt>true</tt> if classes loaded by this class loader will henceforth have assertions enabled by default, <tt>false</tt> if they will have assertions disabled by default.                          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:setDefaultAssertionStatus-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setPackageAssertionStatus-java.lang.String-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setPackageAssertionStatus-java.lang.String-boolean-"/><a name="setPackageAssertionStatus-java.lang.String-boolean-"/><ul class="blockList"><li class="blockList"><h4>setPackageAssertionStatus</h4><pre>public void setPackageAssertionStatus(<a href="../../java/lang/String.html" title="class in java.lang">String</a> packageName,
                                      boolean enabled)</pre><div class="block">Sets the package default assertion status for the named package. The package default assertion status determines the assertion status for classes initialized in the future that belong to the named package or any of its "subpackages".<p> A subpackage of a package named p is any package whose name begins with "<tt>p.</tt>". For example, <tt>javax.swing.text</tt> is a subpackage of <tt>javax.swing</tt>, and both <tt>java.util</tt> and <tt>java.lang.reflect</tt> are subpackages of <tt>java</tt>.                                </p><p> In the event that multiple package defaults apply to a given class, the package default pertaining to the most specific package takes precedence over the others. For example, if <tt>javax.lang</tt> and <tt>javax.lang.reflect</tt> both have package defaults associated with them, the latter package default applies to classes in <tt>javax.lang.reflect</tt>.                                                </p><p> Package defaults take precedence over the class loader's default assertion status, and may be overridden on a per-class basis by invoking <a href="../../java/lang/ClassLoader.html#setClassAssertionStatus-java.lang.String-boolean-"><code>setClassAssertionStatus(String, boolean) </code></a>.                      </p>                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>packageName</code> - The name of the package whose package default assertion status is to be set. A <tt>null</tt> value indicates the unnamed package that is "current" (see section 7.4.2 of <cite>The Java™ Language Specification   </cite>.)                               </dd><dd> <code>enabled</code> - <tt>true</tt> if classes loaded by this classloader and belonging to the named package or any of its subpackages will have assertions enabled by default, <tt>false</tt> if they will have assertions disabled by default.                                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:setPackageAssertionStatus-java.lang.String-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setClassAssertionStatus-java.lang.String-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setClassAssertionStatus-java.lang.String-boolean-"/><a name="setClassAssertionStatus-java.lang.String-boolean-"/><ul class="blockList"><li class="blockList"><h4>setClassAssertionStatus</h4><pre>public void setClassAssertionStatus(<a href="../../java/lang/String.html" title="class in java.lang">String</a> className,
                                    boolean enabled)</pre><div class="block">Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein. This setting takes precedence over the class loader's default assertion status, and over any applicable per-package default. This method has no effect if the named class has already been initialized. (Once a class is initialized, its assertion status cannot change.)<p> If the named class is not a top-level class, this invocation will have no effect on the actual assertion status of any class.                       </p>                                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>className</code> - The fully qualified class name of the top-level class whose assertion status is to be set.                  </dd><dd> <code>enabled</code> - <tt>true</tt> if the named class is to have assertions enabled when (and if) it is initialized, <tt>false</tt> if the class is to have assertions disabled.                           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:setClassAssertionStatus-java.lang.String-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clearAssertionStatus-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clearAssertionStatus--"/><a name="clearAssertionStatus--"/><ul class="blockListLast"><li class="blockList"><h4>clearAssertionStatus</h4><pre>public void clearAssertionStatus()</pre><div class="block">Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader. This method is provided so that class loaders can be made to ignore any command line or persistent assertion status settings and "start with a clean slate."                                                    </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> </dl></li></ul> <a end_ctx_id="method:clearAssertionStatus--"/>  </td></tr></table></td></tr></table></diff></diffreport>