<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Integer [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Integer"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a>&gt;  </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Integer</span>
extends <a href="../../java/lang/Number.html" title="class in java.lang">Number</a>
implements <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a>&gt;</pre><div class="block">The <code>Integer</code> class wraps a value of the primitive type <code>int</code> in an object. An object of type <code>Integer</code> contains a single field whose type is <code>int</code>.<p>In addition, this class provides several methods for converting an <code>int</code> to a <code>String</code> and a <code>String</code> to an <code>int</code>, as well as other constants and methods useful when dealing with an <code>int</code>.                                </p><p>Implementation note: The implementations of the "bit twiddling" methods (such as <a href="../../java/lang/Integer.html#highestOneBit-int-"><code>highestOneBit</code></a> and <a href="../../java/lang/Integer.html#numberOfTrailingZeros-int-"><code>numberOfTrailingZeros</code></a>) are based on material from Henry S. Warren, Jr.'s <i>Hacker's Delight </i>, (Addison Wesley, 2002).                          </p>                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../serialized-form.html#java.lang.Integer">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Integer"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MIN_VALUE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MIN_VALUE"/><a name="MIN_VALUE"/><ul class="blockList"><li class="blockList"><h4>MIN_VALUE</h4><pre><a href="../../java/lang/annotation/Native.html" title="annotation in java.lang.annotation">@Native</a>
public static final int MIN_VALUE</pre><div class="block">A constant holding the minimum value an <code>int</code> can have, -2<sup>31</sup>.          </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Integer.MIN_VALUE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MIN_VALUE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MAX_VALUE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MAX_VALUE"/><a name="MAX_VALUE"/><ul class="blockList"><li class="blockList"><h4>MAX_VALUE</h4><pre><a href="../../java/lang/annotation/Native.html" title="annotation in java.lang.annotation">@Native</a>
public static final int MAX_VALUE</pre><div class="block">A constant holding the maximum value an <code>int</code> can have, 2<sup>31</sup>-1.          </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Integer.MAX_VALUE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MAX_VALUE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TYPE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TYPE"/><a name="TYPE"/><ul class="blockList"><li class="blockList"><h4>TYPE</h4><pre>public static final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;<a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a>&gt; TYPE</pre><div class="block">The <code>Class</code> instance representing the primitive type <code>int</code>.       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl></li></ul> <a end_ctx_id="field:TYPE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:SIZE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:SIZE"/><a name="SIZE"/><ul class="blockList"><li class="blockList"><h4>SIZE</h4><pre><a href="../../java/lang/annotation/Native.html" title="annotation in java.lang.annotation">@Native</a>
public static final int SIZE</pre><div class="block">The number of bits used to represent an <code>int</code> value in two's complement binary form.              </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Integer.SIZE">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:SIZE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:BYTES [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:BYTES"/><a name="BYTES"/><ul class="blockListLast"><li class="blockList"><h4>BYTES</h4><pre>public static final int BYTES</pre><div class="block">The number of bytes used to represent a <code>int</code> value in two's complement binary form.              </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Integer.BYTES">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:BYTES"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Integer-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Integer-int-"/><a name="Integer-int-"/><ul class="blockList"><li class="blockList"><h4>Integer</h4><pre>public Integer(int value)</pre><div class="block">Constructs a newly allocated <code>Integer</code> object that represents the specified <code>int</code> value.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to be represented by the <code>Integer</code> object.           </dd> </dl></li></ul> <a end_ctx_id="constructor:Integer-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Integer-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Integer-java.lang.String-"/><a name="Integer-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>Integer</h4><pre>public Integer(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
        throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Constructs a newly allocated <code>Integer</code> object that represents the <code>int</code> value indicated by the <code>String</code> parameter. The string is converted to an <code>int</code> value in exactly the manner used by the <code>parseInt</code> method for radix 10.                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the <code>String</code> to be converted to an <code>Integer</code>.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the <code>String</code> does not contain a parsable integer.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#parseInt-java.lang.String-int-"><code>parseInt(java.lang.String, int) </code></a> </dd>   </dl></li></ul> <a end_ctx_id="constructor:Integer-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString-int-int-"/><a name="toString-int-int-"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString(int i,
                              int radix)</pre><div class="block">Returns a string representation of the first argument in the radix specified by the second argument.<p>If the radix is smaller than <code>Character.MIN_RADIX</code> or larger than <code>Character.MAX_RADIX</code>, then the radix <code>10</code> is used instead.                 </p><p>If the first argument is negative, the first element of the result is the ASCII minus character <code>'-'</code> (<code>'\u002D'</code>). If the first argument is not negative, no sign character appears in the result.                                </p><p>The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits:                                                   </p><blockquote> <code>0123456789abcdefghijklmnopqrstuvwxyz</code> </blockquote> These are <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through <code>'\u007A'</code>. If <code>radix</code> is <var>N</var>, then the first <var>N</var> of these characters are used as radix-<var>N</var> digits in the order shown. Thus, the digits for hexadecimal (radix 16) are <code>0123456789abcdef</code>. If uppercase letters are desired, the <a href="../../java/lang/String.html#toUpperCase--"><code>String.toUpperCase()</code></a> method may be called on the result:<blockquote> <code>Integer.toString(n, 16).toUpperCase() </code> </blockquote>                                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted to a string.          </dd><dd> <code>radix</code> - the radix to use in the string representation.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the argument in the specified radix.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Character.html#MAX_RADIX"><code>Character.MAX_RADIX</code></a>, <a href="../../java/lang/Character.html#MIN_RADIX"><code>Character.MIN_RADIX</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:toString-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toUnsignedString-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toUnsignedString-int-int-"/><a name="toUnsignedString-int-int-"/><ul class="blockList"><li class="blockList"><h4>toUnsignedString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toUnsignedString(int i,
                                      int radix)</pre><div class="block">Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument.<p>If the radix is smaller than <code>Character.MIN_RADIX</code> or larger than <code>Character.MAX_RADIX</code>, then the radix <code>10</code> is used instead.                 </p><p>Note that since the first argument is treated as an unsigned value, no leading sign character is printed.                 </p><p>If the magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the magnitude will not be the zero character.                              </p><p>The behavior of radixes and the characters used as digits are the same as <a href="../../java/lang/Integer.html#toString-int-int-"><code>toString</code></a>.              </p>                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted to an unsigned string.           </dd><dd> <code>radix</code> - the radix to use in the string representation.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unsigned string representation of the argument in the specified radix.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#toString-int-int-"><code>toString(int, int) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:toUnsignedString-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toHexString-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toHexString-int-"/><a name="toHexString-int-"/><ul class="blockList"><li class="blockList"><h4>toHexString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toHexString(int i)</pre><div class="block">Returns a string representation of the integer argument as an unsigned integer in base 16.<p>The unsigned integer value is the argument plus 2<sup>32</sup> if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in hexadecimal (base 16) with no extra leading <code>0</code>s.                                      </p><p>The value of the argument can be recovered from the returned string <code>s</code> by calling <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>Integer.parseUnsignedInt(s, 16) </code></a>.               </p><p>If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits:                                        </p><blockquote> <code>0123456789abcdef</code> </blockquote> These are the characters <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through <code>'\u0066'</code>. If uppercase letters are desired, the <a href="../../java/lang/String.html#toUpperCase--"><code>String.toUpperCase()</code></a> method may be called on the result:<blockquote> <code>Integer.toHexString(n).toUpperCase()</code> </blockquote>                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted to a string.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of the unsigned integer value represented by the argument in hexadecimal (base 16).              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>parseUnsignedInt(String, int) </code></a>, <a href="../../java/lang/Integer.html#toUnsignedString-int-int-"><code>toUnsignedString(int, int) </code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:toHexString-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toOctalString-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toOctalString-int-"/><a name="toOctalString-int-"/><ul class="blockList"><li class="blockList"><h4>toOctalString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toOctalString(int i)</pre><div class="block">Returns a string representation of the integer argument as an unsigned integer in base 8.<p>The unsigned integer value is the argument plus 2<sup>32</sup> if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in octal (base 8) with no extra leading <code>0</code>s.                                      </p><p>The value of the argument can be recovered from the returned string <code>s</code> by calling <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>Integer.parseUnsignedInt(s, 8) </code></a>.               </p><p>If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits:                                        </p><blockquote> <code>01234567</code> </blockquote> These are the characters <code>'\u0030'</code> through <code>'\u0037'</code>.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted to a string.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of the unsigned integer value represented by the argument in octal (base 8).              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>parseUnsignedInt(String, int) </code></a>, <a href="../../java/lang/Integer.html#toUnsignedString-int-int-"><code>toUnsignedString(int, int) </code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:toOctalString-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toBinaryString-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toBinaryString-int-"/><a name="toBinaryString-int-"/><ul class="blockList"><li class="blockList"><h4>toBinaryString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toBinaryString(int i)</pre><div class="block">Returns a string representation of the integer argument as an unsigned integer in base 2.<p>The unsigned integer value is the argument plus 2<sup>32</sup> if the argument is negative; otherwise it is equal to the argument. This value is converted to a string of ASCII digits in binary (base 2) with no extra leading <code>0</code>s.                                      </p><p>The value of the argument can be recovered from the returned string <code>s</code> by calling <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>Integer.parseUnsignedInt(s, 2) </code></a>.               </p><p>If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters <code>'0'</code> (<code>'\u0030'</code>) and <code>'1'</code> (<code>'\u0031'</code>) are used as binary digits.                                            </p>             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted to a string.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of the unsigned integer value represented by the argument in binary (base 2).              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>parseUnsignedInt(String, int) </code></a>, <a href="../../java/lang/Integer.html#toUnsignedString-int-int-"><code>toUnsignedString(int, int) </code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:toBinaryString-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString-int-"/><a name="toString-int-"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString(int i)</pre><div class="block">Returns a <code>String</code> object representing the specified integer. The argument is converted to signed decimal representation and returned as a string, exactly as if the argument and radix 10 were given as arguments to the <a href="../../java/lang/Integer.html#toString-int-int-"><code>toString(int, int) </code></a> method.                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the argument in base 10.       </dd>  </dl></li></ul> <a end_ctx_id="method:toString-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toUnsignedString-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toUnsignedString-int-"/><a name="toUnsignedString-int-"/><ul class="blockList"><li class="blockList"><h4>toUnsignedString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toUnsignedString(int i)</pre><div class="block">Returns a string representation of the argument as an unsigned decimal value. The argument is converted to unsigned decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the <a href="../../java/lang/Integer.html#toUnsignedString-int-int-"><code>toUnsignedString(int, int) </code></a> method.                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an integer to be converted to an unsigned string.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unsigned string representation of the argument.      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#toUnsignedString-int-int-"><code>toUnsignedString(int, int) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:toUnsignedString-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseInt-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseInt-java.lang.String-int-"/><a name="parseInt-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>parseInt</h4><pre>public static int parseInt(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s,
                           int radix)
                    throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Parses the string argument as a signed integer in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit(char, int) </code></a> returns a nonnegative value), except that the first character may be an ASCII minus sign <code>'-'</code> (<code>'\u002D'</code>) to indicate a negative value or an ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>) to indicate a positive value. The resulting integer value is returned.<p>An exception of type <code>NumberFormatException</code> is thrown if any of the following situations occurs:<ul><li>The first argument is <code>null</code> or is a string of length zero.           </li><li>The radix is either smaller than <a href="../../java/lang/Character.html#MIN_RADIX"><code>Character.MIN_RADIX</code></a> or larger than <a href="../../java/lang/Character.html#MAX_RADIX"><code>Character.MAX_RADIX</code></a>.          </li><li>Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign <code>'-'</code> (<code>'\u002D'</code>) or plus sign <code>'+'</code> (<code>'\u002B'</code>) provided that the string is longer than length 1.                                      </li><li>The value represented by the string is not a value of type <code>int</code>.            </li></ul>             </p><p>Examples:</p><blockquote><pre>
 parseInt("0", 10) returns 0
 parseInt("473", 10) returns 473
 parseInt("+42", 10) returns 42
 parseInt("-0", 10) returns 0
 parseInt("-FF", 16) returns -255
 parseInt("1100110", 2) returns 102
 parseInt("2147483647", 10) returns 2147483647
 parseInt("-2147483648", 10) returns -2147483648
 parseInt("2147483648", 10) throws a NumberFormatException
 parseInt("99", 8) throws a NumberFormatException
 parseInt("Kona", 10) throws a NumberFormatException
 parseInt("Kona", 27) returns 411787
 </pre></blockquote>                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the <code>String</code> containing the integer representation to be parsed           </dd><dd> <code>radix</code> - the radix to be used while parsing <code>s</code>.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the integer represented by the string argument in the specified radix.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the <code>String</code> does not contain a parsable <code>int</code>.           </dd>   </dl></li></ul> <a end_ctx_id="method:parseInt-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseInt-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseInt-java.lang.String-"/><a name="parseInt-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>parseInt</h4><pre>public static int parseInt(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                    throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Parses the string argument as a signed decimal integer. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign <code>'-'</code> (<code>'\u002D'</code>) to indicate a negative value or an ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>) to indicate a positive value. The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the <a href="../../java/lang/Integer.html#parseInt-java.lang.String-int-"><code>parseInt(java.lang.String, int) </code></a> method.                                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - a <code>String</code> containing the <code>int</code> representation to be parsed           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the integer value represented by the argument in decimal.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string does not contain a parsable integer.           </dd>   </dl></li></ul> <a end_ctx_id="method:parseInt-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseUnsignedInt-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseUnsignedInt-java.lang.String-int-"/><a name="parseUnsignedInt-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>parseUnsignedInt</h4><pre>public static int parseUnsignedInt(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s,
                                   int radix)
                            throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Parses the string argument as an unsigned integer in the radix specified by the second argument. An unsigned integer maps the values usually associated with negative numbers to positive numbers larger than <code>MAX_VALUE</code>. The characters in the string must all be digits of the specified radix (as determined by whether <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit(char, int) </code></a> returns a nonnegative value), except that the first character may be an ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>). The resulting integer value is returned.<p>An exception of type <code>NumberFormatException</code> is thrown if any of the following situations occurs:<ul><li>The first argument is <code>null</code> or is a string of length zero.           </li><li>The radix is either smaller than <a href="../../java/lang/Character.html#MIN_RADIX"><code>Character.MIN_RADIX</code></a> or larger than <a href="../../java/lang/Character.html#MAX_RADIX"><code>Character.MAX_RADIX</code></a>.          </li><li>Any character of the string is not a digit of the specified radix, except that the first character may be a plus sign <code>'+'</code> (<code>'\u002B'</code>) provided that the string is longer than length 1.                                 </li><li>The value represented by the string is larger than the largest unsigned <code>int</code>, 2<sup>32</sup>-1.             </li></ul>             </p>                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the <code>String</code> containing the unsigned integer representation to be parsed            </dd><dd> <code>radix</code> - the radix to be used while parsing <code>s</code>.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the integer represented by the string argument in the specified radix.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the <code>String</code> does not contain a parsable <code>int</code>.           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:parseUnsignedInt-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseUnsignedInt-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseUnsignedInt-java.lang.String-"/><a name="parseUnsignedInt-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>parseUnsignedInt</h4><pre>public static int parseUnsignedInt(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                            throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Parses the string argument as an unsigned decimal integer. The characters in the string must all be decimal digits, except that the first character may be an an ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>). The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the <a href="../../java/lang/Integer.html#parseUnsignedInt-java.lang.String-int-"><code>parseUnsignedInt(java.lang.String, int) </code></a> method.                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - a <code>String</code> containing the unsigned <code>int</code> representation to be parsed            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unsigned integer value represented by the argument in decimal.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string does not contain a parsable unsigned integer.            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:parseUnsignedInt-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.lang.String-int-"/><a name="valueOf-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> valueOf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s,
                              int radix)
                       throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Returns an <code>Integer</code> object holding the value extracted from the specified <code>String</code> when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed integer in the radix specified by the second argument, exactly as if the arguments were given to the <a href="../../java/lang/Integer.html#parseInt-java.lang.String-int-"><code>parseInt(java.lang.String, int) </code></a> method. The result is an <code>Integer</code> object that represents the integer value specified by the string.<p>In other words, this method returns an <code>Integer</code> object equal to the value of:             </p><blockquote> <code>new Integer(Integer.parseInt(s, radix))  </code> </blockquote>                                                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string to be parsed.       </dd><dd> <code>radix</code> - the radix to be used in interpreting <code>s</code>          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Integer</code> object holding the value represented by the string argument in the specified radix.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the <code>String</code> does not contain a parsable <code>int</code>.           </dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.lang.String-"/><a name="valueOf-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> valueOf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                       throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Returns an <code>Integer</code> object holding the value of the specified <code>String</code>. The argument is interpreted as representing a signed decimal integer, exactly as if the argument were given to the <a href="../../java/lang/Integer.html#parseInt-java.lang.String-"><code>parseInt(java.lang.String)</code></a> method. The result is an <code>Integer</code> object that represents the integer value specified by the string.<p>In other words, this method returns an <code>Integer</code> object equal to the value of:             </p><blockquote> <code>new Integer(Integer.parseInt(s)) </code> </blockquote>                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string to be parsed.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Integer</code> object holding the value represented by the string argument.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string cannot be parsed as an integer.           </dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-int-"/><a name="valueOf-int-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> valueOf(int i)</pre><div class="block">Returns an <code>Integer</code> instance representing the specified <code>int</code> value. If a new <code>Integer</code> instance is not required, this method should generally be used in preference to the constructor <a href="../../java/lang/Integer.html#Integer-int-"><code>Integer(int)</code></a>, as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - an <code>int</code> value.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Integer</code> instance representing <code>i</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:byteValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:byteValue--"/><a name="byteValue--"/><ul class="blockList"><li class="blockList"><h4>byteValue</h4><pre>public byte byteValue()</pre><div class="block">Returns the value of this <code>Integer</code> as a <code>byte</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Number.html#byteValue--">byteValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>byte</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:byteValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shortValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shortValue--"/><a name="shortValue--"/><ul class="blockList"><li class="blockList"><h4>shortValue</h4><pre>public short shortValue()</pre><div class="block">Returns the value of this <code>Integer</code> as a <code>short</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Number.html#shortValue--">shortValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>short</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:shortValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:intValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:intValue--"/><a name="intValue--"/><ul class="blockList"><li class="blockList"><h4>intValue</h4><pre>public int intValue()</pre><div class="block">Returns the value of this <code>Integer</code> as an <code>int</code>.        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#intValue--">intValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>int</code>.           </dd>  </dl></li></ul> <a end_ctx_id="method:intValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:longValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:longValue--"/><a name="longValue--"/><ul class="blockList"><li class="blockList"><h4>longValue</h4><pre>public long longValue()</pre><div class="block">Returns the value of this <code>Integer</code> as a <code>long</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#longValue--">longValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>long</code>.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#toUnsignedLong-int-"><code>toUnsignedLong(int)</code></a> </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>    </dl></li></ul> <a end_ctx_id="method:longValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floatValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floatValue--"/><a name="floatValue--"/><ul class="blockList"><li class="blockList"><h4>floatValue</h4><pre>public float floatValue()</pre><div class="block">Returns the value of this <code>Integer</code> as a <code>float</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#floatValue--">floatValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>float</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:floatValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:doubleValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:doubleValue--"/><a name="doubleValue--"/><ul class="blockList"><li class="blockList"><h4>doubleValue</h4><pre>public double doubleValue()</pre><div class="block">Returns the value of this <code>Integer</code> as a <code>double</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#doubleValue--">doubleValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>double</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:doubleValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a <code>String</code> object representing this <code>Integer</code>'s value. The value is converted to signed decimal representation and returned as a string, exactly as if the integer value were given as an argument to the <a href="../../java/lang/Integer.html#toString-int-"><code>toString(int)</code></a> method.                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the value of this object in base 10.          </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns a hash code for this <code>Integer</code>.      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for this object, equal to the primitive <code>int</code> value represented by this <code>Integer</code> object.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode-int-"/><a name="hashCode-int-"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public static int hashCode(int value)</pre><div class="block">Returns a hash code for a <code>int</code> value; compatible with <code>Integer.hashCode()</code>.          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to hash      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for a <code>int</code> value.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:hashCode-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Compares this object to the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is an <code>Integer</code> object that contains the same <code>int</code> value as this object.                                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to compare with.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the objects are the same; <code>false</code> otherwise.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getInteger-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getInteger-java.lang.String-"/><a name="getInteger-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getInteger</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> getInteger(<a href="../../java/lang/String.html" title="class in java.lang">String</a> nm)</pre><div class="block">Determines the integer value of the system property with the specified name.<p>The first argument is treated as the name of a system property. System properties are accessible through the <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a> method. The string value of this property is then interpreted as an integer value using the grammar supported by <a href="../../java/lang/Integer.html#decode-java.lang.String-"><code>decode</code></a> and an <code>Integer</code> object representing this value is returned.                                               </p><p>If there is no property with the specified name, if the specified name is empty or <code>null</code>, or if the property does not have the correct numeric format, then <code>null</code> is returned.                               </p><p>In other words, this method returns an <code>Integer</code> object equal to the value of:             </p><blockquote> <code>getInteger(nm, null) </code> </blockquote>           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nm</code> - property name.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>Integer</code> value of the property.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - for the same reasons as <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty</code></a>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a>, <a href="../../java/lang/System.html#getProperty-java.lang.String-java.lang.String-"><code>System.getProperty(java.lang.String, java.lang.String) </code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:getInteger-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getInteger-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getInteger-java.lang.String-int-"/><a name="getInteger-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>getInteger</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> getInteger(<a href="../../java/lang/String.html" title="class in java.lang">String</a> nm,
                                 int val)</pre><div class="block">Determines the integer value of the system property with the specified name.<p>The first argument is treated as the name of a system property. System properties are accessible through the <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a> method. The string value of this property is then interpreted as an integer value using the grammar supported by <a href="../../java/lang/Integer.html#decode-java.lang.String-"><code>decode</code></a> and an <code>Integer</code> object representing this value is returned.                                               </p><p>The second argument is the default value. An <code>Integer</code> object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or <code>null</code>.                                               </p><p>In other words, this method returns an <code>Integer</code> object equal to the value of:             </p><blockquote> <code>getInteger(nm, new Integer(val))  </code> </blockquote> but in practice it may be implemented in a manner such as:<blockquote><pre>
 Integer result = getInteger(nm, null);
 return (result == null) ? new Integer(val) : result;
 </pre></blockquote> to avoid the unnecessary allocation of an <code>Integer</code> object when the default value is not needed.                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nm</code> - property name.    </dd><dd> <code>val</code> - default value.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>Integer</code> value of the property.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - for the same reasons as <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty</code></a>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a>, <a href="../../java/lang/System.html#getProperty-java.lang.String-java.lang.String-"><code>System.getProperty(java.lang.String, java.lang.String) </code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:getInteger-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getInteger-java.lang.String-java.lang.Integer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getInteger-java.lang.String-java.lang.Integer-"/><a name="getInteger-java.lang.String-java.lang.Integer-"/><ul class="blockList"><li class="blockList"><h4>getInteger</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> getInteger(<a href="../../java/lang/String.html" title="class in java.lang">String</a> nm,
                                 <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> val)</pre><div class="block">Returns the integer value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a> method. The string value of this property is then interpreted as an integer value, as per the <a href="../../java/lang/Integer.html#decode-java.lang.String-"><code>decode</code></a> method, and an <code>Integer</code> object representing this value is returned; in summary:<ul><li>If the property value begins with the two ASCII characters <code>0x</code> or the ASCII character <code>#</code>, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as by the method <a href="../../java/lang/Integer.html#valueOf-java.lang.String-int-"><code>valueOf(java.lang.String, int) </code></a> with radix 16.                                         </li><li>If the property value begins with the ASCII character <code>0</code> followed by another character, it is parsed as an octal integer exactly as by the method <a href="../../java/lang/Integer.html#valueOf-java.lang.String-int-"><code>valueOf(java.lang.String, int) </code></a> with radix 8.                             </li><li>Otherwise, the property value is parsed as a decimal integer exactly as by the method <a href="../../java/lang/Integer.html#valueOf-java.lang.String-int-"><code>valueOf(java.lang.String, int) </code></a> with radix 10.                  </li></ul><p>The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or <code>null</code>.                                       </p>                                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nm</code> - property name.    </dd><dd> <code>val</code> - default value.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>Integer</code> value of the property.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - for the same reasons as <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty</code></a>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a>, <a href="../../java/lang/System.html#getProperty-java.lang.String-java.lang.String-"><code>System.getProperty(java.lang.String, java.lang.String) </code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:getInteger-java.lang.String-java.lang.Integer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decode-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decode-java.lang.String-"/><a name="decode-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>decode</h4><pre>public static <a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> decode(<a href="../../java/lang/String.html" title="class in java.lang">String</a> nm)
                      throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Decodes a <code>String</code> into an <code>Integer</code>. Accepts decimal, hexadecimal, and octal numbers given by the following grammar:<blockquote><dl> <dt> <i>DecodableString:</i>   </dt><dd> <i>Sign<sub>opt</sub> DecimalNumeral </i> </dd><dd> <i>Sign<sub>opt</sub></i><code>0x</code><i>HexDigits</i> </dd><dd> <i>Sign<sub>opt</sub></i><code>0X</code><i>HexDigits</i> </dd><dd> <i>Sign<sub>opt</sub></i><code>#</code><i>HexDigits</i> </dd><dd> <i>Sign<sub>opt</sub></i><code>0</code><i>OctalDigits</i> </dd> <dt> <i>Sign:</i>   </dt><dd> <code>-</code> </dd><dd> <code>+</code> </dd>  </dl></blockquote> <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i> are as defined in section 3.10.1 of <cite>The Java™ Language Specification   </cite>, except that underscores are not accepted between digits.<p>The sequence of characters following an optional sign and/or radix specifier ("<code>0x</code>", "<code>0X</code>", "<code>#</code>", or leading zero) is parsed as by the <code>Integer.parseInt</code> method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a <a href="../../java/lang/NumberFormatException.html" title="class in java.lang"><code>NumberFormatException</code></a> will be thrown. The result is negated if first character of the specified <code>String</code> is the minus sign. No whitespace characters are permitted in the <code>String</code>.                                                                     </p>                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nm</code> - the <code>String</code> to decode.      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Integer</code> object holding the <code>int</code> value represented by <code>nm</code>         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the <code>String</code> does not contain a parsable integer.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#parseInt-java.lang.String-int-"><code>parseInt(java.lang.String, int) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:decode-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compareTo-java.lang.Integer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compareTo-java.lang.Integer-"/><a name="compareTo-java.lang.Integer-"/><ul class="blockList"><li class="blockList"><h4>compareTo</h4><pre>public int compareTo(<a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a> anotherInteger)</pre><div class="block">Compares two <code>Integer</code> objects numerically.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Comparable.html#compareTo-T-">compareTo</a></code> in interface <code><a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Integer.html" title="class in java.lang">Integer</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>anotherInteger</code> - the <code>Integer</code> to be compared.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if this <code>Integer</code> is equal to the argument <code>Integer</code>; a value less than <code>0</code> if this <code>Integer</code> is numerically less than the argument <code>Integer</code>; and a value greater than <code>0</code> if this <code>Integer</code> is numerically greater than the argument <code>Integer</code> (signed comparison).                                            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:compareTo-java.lang.Integer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compare-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compare-int-int-"/><a name="compare-int-int-"/><ul class="blockList"><li class="blockList"><h4>compare</h4><pre>public static int compare(int x,
                          int y)</pre><div class="block">Compares two <code>int</code> values numerically. The value returned is identical to what would be returned by:<pre>
    Integer.valueOf(x).compareTo(Integer.valueOf(y))
 </pre>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first <code>int</code> to compare       </dd><dd> <code>y</code> - the second <code>int</code> to compare       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if <code>x == y  </code>; a value less than <code>0</code> if <code>x &lt; y  </code>; and a value greater than <code>0</code> if <code>x &gt; y  </code>                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:compare-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compareUnsigned-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compareUnsigned-int-int-"/><a name="compareUnsigned-int-int-"/><ul class="blockList"><li class="blockList"><h4>compareUnsigned</h4><pre>public static int compareUnsigned(int x,
                                  int y)</pre><div class="block">Compares two <code>int</code> values numerically treating the values as unsigned.         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first <code>int</code> to compare       </dd><dd> <code>y</code> - the second <code>int</code> to compare       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if <code>x == y  </code>; a value less than <code>0</code> if <code>x &lt; y  </code> as unsigned values; and a value greater than <code>0</code> if <code>x &gt; y  </code> as unsigned values                         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:compareUnsigned-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toUnsignedLong-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toUnsignedLong-int-"/><a name="toUnsignedLong-int-"/><ul class="blockList"><li class="blockList"><h4>toUnsignedLong</h4><pre>public static long toUnsignedLong(int x)</pre><div class="block">Converts the argument to a <code>long</code> by an unsigned conversion. In an unsigned conversion to a <code>long</code>, the high-order 32 bits of the <code>long</code> are zero and the low-order 32 bits are equal to the bits of the integer argument. Consequently, zero and positive <code>int</code> values are mapped to a numerically equal <code>long</code> value and negative <code>int</code> values are mapped to a <code>long</code> value equal to the input plus 2<sup>32</sup>.                                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the value to convert to an unsigned <code>long</code>          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the argument converted to <code>long</code> by an unsigned conversion        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:toUnsignedLong-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:divideUnsigned-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:divideUnsigned-int-int-"/><a name="divideUnsigned-int-int-"/><ul class="blockList"><li class="blockList"><h4>divideUnsigned</h4><pre>public static int divideUnsigned(int dividend,
                                 int divisor)</pre><div class="block">Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.<p>Note that in two's complement arithmetic, the three other basic arithmetic operations of add, subtract, and multiply are bit-wise identical if the two operands are regarded as both being signed or both being unsigned. Therefore separate <code>addUnsigned</code>, etc. methods are not provided.                                         </p>                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>dividend</code> - the value to be divided       </dd><dd> <code>divisor</code> - the value doing the dividing       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unsigned quotient of the first argument divided by the second argument           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#remainderUnsigned-int-int-"><code>remainderUnsigned(int, int) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:divideUnsigned-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remainderUnsigned-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remainderUnsigned-int-int-"/><a name="remainderUnsigned-int-int-"/><ul class="blockList"><li class="blockList"><h4>remainderUnsigned</h4><pre>public static int remainderUnsigned(int dividend,
                                    int divisor)</pre><div class="block">Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>dividend</code> - the value to be divided       </dd><dd> <code>divisor</code> - the value doing the dividing       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unsigned remainder of the first argument divided by the second argument           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#divideUnsigned-int-int-"><code>divideUnsigned(int, int) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:remainderUnsigned-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:highestOneBit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:highestOneBit-int-"/><a name="highestOneBit-int-"/><ul class="blockList"><li class="blockList"><h4>highestOneBit</h4><pre>public static int highestOneBit(int i)</pre><div class="block">Returns an <code>int</code> value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified <code>int</code> value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose highest one bit is to be computed            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>int</code> value with a single one-bit, in the position of the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.                            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:highestOneBit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lowestOneBit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lowestOneBit-int-"/><a name="lowestOneBit-int-"/><ul class="blockList"><li class="blockList"><h4>lowestOneBit</h4><pre>public static int lowestOneBit(int i)</pre><div class="block">Returns an <code>int</code> value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified <code>int</code> value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose lowest one bit is to be computed            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>int</code> value with a single one-bit, in the position of the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero.                            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:lowestOneBit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:numberOfLeadingZeros-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:numberOfLeadingZeros-int-"/><a name="numberOfLeadingZeros-int-"/><ul class="blockList"><li class="blockList"><h4>numberOfLeadingZeros</h4><pre>public static int numberOfLeadingZeros(int i)</pre><div class="block">Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified <code>int</code> value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero.<p>Note that this method is closely related to the logarithm base 2. For all positive <code>int</code> values x:<ul><li>floor(log<sub>2</sub>(x)) = <code>31 - numberOfLeadingZeros(x)  </code>  </li><li>ceil(log<sub>2</sub>(x)) = <code>32 - numberOfLeadingZeros(x - 1)    </code>  </li></ul>                 </p>                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose number of leading zeros is to be computed             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified <code>int</code> value, or 32 if the value is equal to zero.                             </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:numberOfLeadingZeros-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:numberOfTrailingZeros-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:numberOfTrailingZeros-int-"/><a name="numberOfTrailingZeros-int-"/><ul class="blockList"><li class="blockList"><h4>numberOfTrailingZeros</h4><pre>public static int numberOfTrailingZeros(int i)</pre><div class="block">Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified <code>int</code> value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero.                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose number of trailing zeros is to be computed             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified <code>int</code> value, or 32 if the value is equal to zero.                             </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:numberOfTrailingZeros-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:bitCount-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:bitCount-int-"/><a name="bitCount-int-"/><ul class="blockList"><li class="blockList"><h4>bitCount</h4><pre>public static int bitCount(int i)</pre><div class="block">Returns the number of one-bits in the two's complement binary representation of the specified <code>int</code> value. This function is sometimes referred to as the <i>population count </i>.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose bits are to be counted          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of one-bits in the two's complement binary representation of the specified <code>int</code> value.              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:bitCount-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:rotateLeft-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:rotateLeft-int-int-"/><a name="rotateLeft-int-int-"/><ul class="blockList"><li class="blockList"><h4>rotateLeft</h4><pre>public static int rotateLeft(int i,
                             int distance)</pre><div class="block">Returns the value obtained by rotating the two's complement binary representation of the specified <code>int</code> value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.)<p>Note that left rotation with a negative distance is equivalent to right rotation: <code>rotateLeft(val, -distance) == rotateRight(val, distance)    </code>. Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: <code>rotateLeft(val, distance) == rotateLeft(val, distance &amp; 0x1F)      </code>.                                              </p>                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose bits are to be rotated left           </dd><dd> <code>distance</code> - the number of bit positions to rotate left          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value obtained by rotating the two's complement binary representation of the specified <code>int</code> value left by the specified number of bits.                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:rotateLeft-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:rotateRight-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:rotateRight-int-int-"/><a name="rotateRight-int-int-"/><ul class="blockList"><li class="blockList"><h4>rotateRight</h4><pre>public static int rotateRight(int i,
                              int distance)</pre><div class="block">Returns the value obtained by rotating the two's complement binary representation of the specified <code>int</code> value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.)<p>Note that right rotation with a negative distance is equivalent to left rotation: <code>rotateRight(val, -distance) == rotateLeft(val, distance)    </code>. Note also that rotation by any multiple of 32 is a no-op, so all but the last five bits of the rotation distance can be ignored, even if the distance is negative: <code>rotateRight(val, distance) == rotateRight(val, distance &amp; 0x1F)      </code>.                                              </p>                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose bits are to be rotated right           </dd><dd> <code>distance</code> - the number of bit positions to rotate right          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value obtained by rotating the two's complement binary representation of the specified <code>int</code> value right by the specified number of bits.                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:rotateRight-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reverse-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reverse-int-"/><a name="reverse-int-"/><ul class="blockList"><li class="blockList"><h4>reverse</h4><pre>public static int reverse(int i)</pre><div class="block">Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified <code>int</code> value.                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value to be reversed       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value obtained by reversing order of the bits in the specified <code>int</code> value.             </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:reverse-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:signum-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:signum-int-"/><a name="signum-int-"/><ul class="blockList"><li class="blockList"><h4>signum</h4><pre>public static int signum(int i)</pre><div class="block">Returns the signum function of the specified <code>int</code> value. (The return value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose signum is to be computed          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the signum function of the specified <code>int</code> value.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:signum-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reverseBytes-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reverseBytes-int-"/><a name="reverseBytes-int-"/><ul class="blockList"><li class="blockList"><h4>reverseBytes</h4><pre>public static int reverseBytes(int i)</pre><div class="block">Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified <code>int</code> value.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>i</code> - the value whose bytes are to be reversed          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value obtained by reversing the bytes in the specified <code>int</code> value.           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:reverseBytes-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sum-int-int- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sum-int-int-"><span class="diff-html-added"/></a><a name="sum-int-int-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">sum</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static int sum(int a,</span>
                      <span class="diff-html-added">int b)</span></pre><div class="block"><span class="diff-html-added">Adds</span> <span class="diff-html-added">two</span> <span class="diff-html-added">integers</span> <span class="diff-html-added">together</span> <span class="diff-html-added">as</span> <span class="diff-html-added">per</span> <span class="diff-html-added">the</span> <span class="diff-html-added">+</span> <span class="diff-html-added">operator.</span>        </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">first</span> <span class="diff-html-added">operand</span>     </dd><dd> <code><span class="diff-html-added">b</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">second</span> <span class="diff-html-added">operand</span>     </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">sum</span> <span class="diff-html-added">of</span> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">and</span> <code><span class="diff-html-added">b</span></code>     </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/util/function/BinaryOperator.html" title="interface in java.util.function"><code><span class="diff-html-added">BinaryOperator</span></code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:sum-int-int-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-int-int- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-int-int-"><span class="diff-html-added"/></a><a name="max-int-int-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">max</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static int max(int a,</span>
                      <span class="diff-html-added">int b)</span></pre><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">the</span> <span class="diff-html-added">greater</span> <span class="diff-html-added">of</span> <span class="diff-html-added">two</span> <code><span class="diff-html-added">int</span></code> <span class="diff-html-added">values</span> <span class="diff-html-added">as</span> <span class="diff-html-added">if</span> <span class="diff-html-added">by</span> <span class="diff-html-added">calling</span> <a href="../../java/lang/Math.html#max-int-int-"><code><span class="diff-html-added">Math.max</span></code></a><span class="diff-html-added">.</span>           </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">first</span> <span class="diff-html-added">operand</span>     </dd><dd> <code><span class="diff-html-added">b</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">second</span> <span class="diff-html-added">operand</span>     </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">greater</span> <span class="diff-html-added">of</span> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">and</span> <code><span class="diff-html-added">b</span></code>     </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/util/function/BinaryOperator.html" title="interface in java.util.function"><code><span class="diff-html-added">BinaryOperator</span></code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:max-int-int-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-int-int- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-int-int-"><span class="diff-html-added"/></a><a name="min-int-int-"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">min</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static int min(int a,</span>
                      <span class="diff-html-added">int b)</span></pre><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">the</span> <span class="diff-html-added">smaller</span> <span class="diff-html-added">of</span> <span class="diff-html-added">two</span> <code><span class="diff-html-added">int</span></code> <span class="diff-html-added">values</span> <span class="diff-html-added">as</span> <span class="diff-html-added">if</span> <span class="diff-html-added">by</span> <span class="diff-html-added">calling</span> <a href="../../java/lang/Math.html#min-int-int-"><code><span class="diff-html-added">Math.min</span></code></a><span class="diff-html-added">.</span>           </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">first</span> <span class="diff-html-added">operand</span>     </dd><dd> <code><span class="diff-html-added">b</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">second</span> <span class="diff-html-added">operand</span>     </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">smaller</span> <span class="diff-html-added">of</span> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">and</span> <code><span class="diff-html-added">b</span></code>     </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/util/function/BinaryOperator.html" title="interface in java.util.function"><code><span class="diff-html-added">BinaryOperator</span></code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:min-int-int-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>