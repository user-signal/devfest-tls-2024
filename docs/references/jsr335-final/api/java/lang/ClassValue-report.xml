<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ClassValue [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ClassValue"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">ClassValue&lt;T&gt;</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">Lazily associate a computed value with (potentially) every type. For example, if a dynamic language needs to construct a message dispatch table for each class encountered at a message send call site, it can use a <code>ClassValue</code> to cache information needed to perform the message send quickly, for each class encountered.                                                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:ClassValue"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ClassValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ClassValue--"/><a name="ClassValue--"/><ul class="blockListLast"><li class="blockList"><h4>ClassValue</h4><pre>protected ClassValue()</pre><div class="block">Sole constructor. (For invocation by subclass constructors, typically implicit.)        </div></li></ul> <a end_ctx_id="constructor:ClassValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:computeValue-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:computeValue-java.lang.Class-"/><a name="computeValue-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>computeValue</h4><pre>protected abstract <a href="../../java/lang/ClassValue.html" title="type parameter in ClassValue">T</a> computeValue(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; type)</pre><div class="block">Computes the given class's derived value for this <code>ClassValue</code>.<p> This method will be invoked within the first thread that accesses the value with the <a href="../../java/lang/ClassValue.html#get-java.lang.Class-"><code>get</code></a> method.                 </p><p> Normally, this method is invoked at most once per class, but it may be invoked again if there has been a call to <a href="../../java/lang/ClassValue.html#remove-java.lang.Class-"><code>remove</code></a>.                        </p><p> If this method throws an exception, the corresponding call to <code>get</code> will terminate abnormally with that exception, and no class value will be recorded.                        </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>type</code> - the type whose class value must be computed          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the newly computed value associated with this <code>ClassValue</code>, for the given class or interface             </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassValue.html#get-java.lang.Class-"><code>get(java.lang.Class&lt;?&gt;)</code></a>, <a href="../../java/lang/ClassValue.html#remove-java.lang.Class-"><code>remove(java.lang.Class&lt;?&gt;)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:computeValue-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.Class-"/><a name="get-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../java/lang/ClassValue.html" title="type parameter in ClassValue">T</a> get(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; type)</pre><div class="block">Returns the value for the given class. If no value has yet been computed, it is obtained by an invocation of the <a href="../../java/lang/ClassValue.html#computeValue-java.lang.Class-"><code>computeValue</code></a> method.<p> The actual installation of the value on the class is performed atomically. At that point, if several racing threads have computed values, one is chosen, and returned to all the racing threads.                                </p><p> The <code>type</code> parameter is typically a class, but it may be any type, such as an interface, a primitive type (like <code>int.class</code>), or <code>void.class</code>.                        </p><p> In the absence of <code>remove</code> calls, a class value has a simple state diagram: uninitialized and initialized. When <code>remove</code> calls are made, the rules for value observation are more complex. See the documentation for <a href="../../java/lang/ClassValue.html#remove-java.lang.Class-"><code>remove</code></a> for more information.                                      </p>                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>type</code> - the type whose class value must be computed or retrieved            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current value associated with this <code>ClassValue</code>, for the given class or interface            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the argument is null       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassValue.html#remove-java.lang.Class-"><code>remove(java.lang.Class&lt;?&gt;)</code></a>, <a href="../../java/lang/ClassValue.html#computeValue-java.lang.Class-"><code>computeValue(java.lang.Class&lt;?&gt;)</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:get-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Class-"/><a name="remove-java.lang.Class-"/><ul class="blockListLast"><li class="blockList"><h4>remove</h4><pre>public void remove(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; type)</pre><div class="block">Removes the associated value for the given class. If this value is subsequently <a href="../../java/lang/ClassValue.html#get-java.lang.Class-">read</a> for the same class, its value will be reinitialized by invoking its <a href="../../java/lang/ClassValue.html#computeValue-java.lang.Class-"><code>computeValue</code></a> method. This may result in an additional invocation of the <code>computeValue</code> method for the given class.<p> In order to explain the interaction between <code>get</code> and <code>remove</code> calls, we must model the state transitions of a class value to take into account the alternation between uninitialized and initialized states. To do this, number these states sequentially from zero, and note that uninitialized (or removed) states are numbered with even numbers, while initialized (or re-initialized) states have odd numbers.                                                             </p><p> When a thread <code>T</code> removes a class value in state <code>2N</code>, nothing happens, since the class value is already uninitialized. Otherwise, the state is advanced atomically to <code>2N+1</code>.                            </p><p> When a thread <code>T</code> queries a class value in state <code>2N</code>, the thread first attempts to initialize the class value to state <code>2N+1</code> by invoking <code>computeValue</code> and installing the resulting value.                               </p><p> When <code>T</code> attempts to install the newly computed value, if the state is still at <code>2N</code>, the class value will be initialized with the computed value, advancing it to state <code>2N+1</code>.                               </p><p> Otherwise, whether the new state is even or odd, <code>T</code> will discard the newly computed value and retry the <code>get</code> operation.                     </p><p> Discarding and retrying is an important proviso, since otherwise <code>T</code> could potentially install a disastrously stale value. For example:<ul><li> <code>T</code> calls <code>CV.get(C)</code> and sees state <code>2N</code>       </li><li> <code>T</code> quickly computes a time-dependent value <code>V0</code> and gets ready to install it             </li><li> <code>T</code> is hit by an unlucky paging or scheduling event, and goes to sleep for a long time                  </li><li>...meanwhile, <code>T2</code> also calls <code>CV.get(C)</code> and sees state <code>2N</code>        </li><li> <code>T2</code> quickly computes a similar time-dependent value <code>V1</code> and installs it on <code>CV.get(C)</code>             </li><li> <code>T2</code> (or a third thread) then calls <code>CV.remove(C)</code>, undoing <code>T2</code>'s work           </li><li> the previous actions of <code>T2</code> are repeated several times         </li><li> also, the relevant computed values change over time: <code>V1</code>, <code>V2</code>, ...           </li><li>...meanwhile, <code>T</code> wakes up and attempts to install <code>V0</code>; <em>this must fail  </em>         </li></ul> We can assume in the above scenario that <code>CV.computeValue</code> uses locks to properly observe the time-dependent states as it computes <code>V1</code>, etc. This does not remove the threat of a stale value, since there is a window of time between the return of <code>computeValue</code> in <code>T</code> and the installation of the the new value. No user synchronization is possible during this time.                                                                                 </p>                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>type</code> - the type whose class value must be removed          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the argument is null       </dd>  </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Class-"/>  </td></tr></table></td></tr></table></diff></diffreport>