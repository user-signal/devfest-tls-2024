<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Double [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Double"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Double.html" title="class in java.lang">Double</a>&gt;  </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Double</span>
extends <a href="../../java/lang/Number.html" title="class in java.lang">Number</a>
implements <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Double.html" title="class in java.lang">Double</a>&gt;</pre><div class="block">The <code>Double</code> class wraps a value of the primitive type <code>double</code> in an object. An object of type <code>Double</code> contains a single field whose type is <code>double</code>.<p>In addition, this class provides several methods for converting a <code>double</code> to a <code>String</code> and a <code>String</code> to a <code>double</code>, as well as other constants and methods useful when dealing with a <code>double</code>.                                </p>                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../serialized-form.html#java.lang.Double">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Double"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:POSITIVE_INFINITY [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:POSITIVE_INFINITY"/><a name="POSITIVE_INFINITY"/><ul class="blockList"><li class="blockList"><h4>POSITIVE_INFINITY</h4><pre>public static final double POSITIVE_INFINITY</pre><div class="block">A constant holding the positive infinity of type <code>double</code>. It is equal to the value returned by <code>Double.longBitsToDouble(0x7ff0000000000000L)</code>.                 </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.POSITIVE_INFINITY">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:POSITIVE_INFINITY"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:NEGATIVE_INFINITY [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:NEGATIVE_INFINITY"/><a name="NEGATIVE_INFINITY"/><ul class="blockList"><li class="blockList"><h4>NEGATIVE_INFINITY</h4><pre>public static final double NEGATIVE_INFINITY</pre><div class="block">A constant holding the negative infinity of type <code>double</code>. It is equal to the value returned by <code>Double.longBitsToDouble(0xfff0000000000000L)</code>.                 </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.NEGATIVE_INFINITY">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:NEGATIVE_INFINITY"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:NaN [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:NaN"/><a name="NaN"/><ul class="blockList"><li class="blockList"><h4>NaN</h4><pre>public static final double NaN</pre><div class="block">A constant holding a Not-a-Number (NaN) value of type <code>double</code>. It is equivalent to the value returned by <code>Double.longBitsToDouble(0x7ff8000000000000L)</code>.                  </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.NaN">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:NaN"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MAX_VALUE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MAX_VALUE"/><a name="MAX_VALUE"/><ul class="blockList"><li class="blockList"><h4>MAX_VALUE</h4><pre>public static final double MAX_VALUE</pre><div class="block">A constant holding the largest positive finite value of type <code>double</code>, (2-2<sup>-52</sup>)·2<sup>1023</sup>. It is equal to the hexadecimal floating-point literal <code>0x1.fffffffffffffP+1023</code> and also equal to <code>Double.longBitsToDouble(0x7fefffffffffffffL)</code>.                         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.MAX_VALUE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MAX_VALUE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MIN_NORMAL [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MIN_NORMAL"/><a name="MIN_NORMAL"/><ul class="blockList"><li class="blockList"><h4>MIN_NORMAL</h4><pre>public static final double MIN_NORMAL</pre><div class="block">A constant holding the smallest positive normal value of type <code>double</code>, 2<sup>-1022</sup>. It is equal to the hexadecimal floating-point literal <code>0x1.0p-1022</code> and also equal to <code>Double.longBitsToDouble(0x0010000000000000L)</code>.                         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.MIN_NORMAL">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:MIN_NORMAL"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MIN_VALUE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MIN_VALUE"/><a name="MIN_VALUE"/><ul class="blockList"><li class="blockList"><h4>MIN_VALUE</h4><pre>public static final double MIN_VALUE</pre><div class="block">A constant holding the smallest positive nonzero value of type <code>double</code>, 2<sup>-1074</sup>. It is equal to the hexadecimal floating-point literal <code>0x0.0000000000001P-1022</code> and also equal to <code>Double.longBitsToDouble(0x1L)</code>.                         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.MIN_VALUE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MIN_VALUE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MAX_EXPONENT [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MAX_EXPONENT"/><a name="MAX_EXPONENT"/><ul class="blockList"><li class="blockList"><h4>MAX_EXPONENT</h4><pre>public static final int MAX_EXPONENT</pre><div class="block">Maximum exponent a finite <code>double</code> variable may have. It is equal to the value returned by <code>Math.getExponent(Double.MAX_VALUE)</code>.                </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.MAX_EXPONENT">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:MAX_EXPONENT"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MIN_EXPONENT [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MIN_EXPONENT"/><a name="MIN_EXPONENT"/><ul class="blockList"><li class="blockList"><h4>MIN_EXPONENT</h4><pre>public static final int MIN_EXPONENT</pre><div class="block">Minimum exponent a normalized <code>double</code> variable may have. It is equal to the value returned by <code>Math.getExponent(Double.MIN_NORMAL)</code>.                </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.MIN_EXPONENT">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:MIN_EXPONENT"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:SIZE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:SIZE"/><a name="SIZE"/><ul class="blockList"><li class="blockList"><h4>SIZE</h4><pre>public static final int SIZE</pre><div class="block">The number of bits used to represent a <code>double</code> value.         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.SIZE">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:SIZE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:BYTES [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:BYTES"/><a name="BYTES"/><ul class="blockList"><li class="blockList"><h4>BYTES</h4><pre>public static final int BYTES</pre><div class="block">The number of bytes used to represent a <code>double</code> value.         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Double.BYTES">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:BYTES"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TYPE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TYPE"/><a name="TYPE"/><ul class="blockListLast"><li class="blockList"><h4>TYPE</h4><pre>public static final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;<a href="../../java/lang/Double.html" title="class in java.lang">Double</a>&gt; TYPE</pre><div class="block">The <code>Class</code> instance representing the primitive type <code>double</code>.       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl></li></ul> <a end_ctx_id="field:TYPE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Double-double-"/><a name="Double-double-"/><ul class="blockList"><li class="blockList"><h4>Double</h4><pre>public Double(double value)</pre><div class="block">Constructs a newly allocated <code>Double</code> object that represents the primitive <code>double</code> argument.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to be represented by the <code>Double</code>.          </dd> </dl></li></ul> <a end_ctx_id="constructor:Double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Double-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Double-java.lang.String-"/><a name="Double-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>Double</h4><pre>public Double(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
       throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Constructs a newly allocated <code>Double</code> object that represents the floating-point value of type <code>double</code> represented by the string. The string is converted to a <code>double</code> value as if by the <code>valueOf</code> method.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - a string to be converted to a <code>Double</code>.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string does not contain a parsable number.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Double.html#valueOf-java.lang.String-"><code>valueOf(java.lang.String)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="constructor:Double-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString-double-"/><a name="toString-double-"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString(double d)</pre><div class="block">Returns a string representation of the <code>double</code> argument. All characters mentioned below are ASCII characters.<ul><li>If the argument is NaN, the result is the string "<code>NaN</code>".          </li><li>Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is '<code>-</code>' (<code>'\u002D'</code>); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>:<ul><li>If <i>m</i> is infinity, it is represented by the characters <code>"Infinity"</code>; thus, positive infinity produces the result <code>"Infinity"</code> and negative infinity produces the result <code>"-Infinity"</code>.                        </li><li>If <i>m</i> is zero, it is represented by the characters <code>"0.0"</code>; thus, negative zero produces the result <code>"-0.0"</code> and positive zero produces the result <code>"0.0"</code>.                        </li><li>If <i>m</i> is greater than or equal to 10<sup>-3</sup> but less than 10<sup>7</sup>, then it is represented as the integer part of <i>m</i>, in decimal form with no leading zeroes, followed by '<code>.</code>' (<code>'\u002E'</code>), followed by one or more decimal digits representing the fractional part of <i>m</i>.                                              </li><li>If <i>m</i> is less than 10<sup>-3</sup> or greater than or equal to 10<sup>7</sup>, then it is represented in so-called "computerized scientific notation." Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup> ≤ <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so that 1 ≤ <i>a</i> &lt; 10. The magnitude is then represented as the integer part of <i>a</i>, as a single decimal digit, followed by '<code>.</code>' (<code>'\u002E'</code>), followed by decimal digits representing the fractional part of <i>a</i>, followed by the letter '<code>E</code>' (<code>'\u0045'</code>), followed by a representation of <i>n</i> as a decimal integer, as produced by the method <a href="../../java/lang/Integer.html#toString-int-"><code>Integer.toString(int)</code></a>.                                                                                                         </li></ul>                                               </li></ul> How many digits must be printed for the fractional part of <i>m</i> or <i>a</i>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type <code>double</code>. That is, suppose that <i>x</i> is the exact mathematical value represented by the decimal representation produced by this method for a finite nonzero argument <i>d</i>. Then <i>d</i> must be the <code>double</code> value nearest to <i>x</i>; or if two <code>double</code> values are equally close to <i>x</i>, then <i>d</i> must be one of them and the least significant bit of the significand of <i>d</i> must be <code>0</code>.<p>To create localized string representations of a floating-point value, use subclasses of <a href="../../java/text/NumberFormat.html" title="class in java.text"><code>NumberFormat</code></a>.            </p>                                                                                                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - the <code>double</code> to be converted.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:toString-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toHexString-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toHexString-double-"/><a name="toHexString-double-"/><ul class="blockList"><li class="blockList"><h4>toHexString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toHexString(double d)</pre><div class="block">Returns a hexadecimal string representation of the <code>double</code> argument. All characters mentioned below are ASCII characters.<ul><li>If the argument is NaN, the result is the string "<code>NaN</code>".          </li><li>Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '<code>-</code>' (<code>'\u002D'</code>); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>:<ul><li>If <i>m</i> is infinity, it is represented by the string <code>"Infinity"</code>; thus, positive infinity produces the result <code>"Infinity"</code> and negative infinity produces the result <code>"-Infinity"</code>.                        </li><li>If <i>m</i> is zero, it is represented by the string <code>"0x0.0p0"</code>; thus, negative zero produces the result <code>"-0x0.0p0"</code> and positive zero produces the result <code>"0x0.0p0"</code>.                        </li><li>If <i>m</i> is a <code>double</code> value with a normalized representation, substrings are used to represent the significand and exponent fields. The significand is represented by the characters <code>"0x1."</code> followed by a lowercase hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by <code>"p"</code> followed by a decimal string of the unbiased exponent as if produced by a call to <a href="../../java/lang/Integer.html#toString-int-"><code>Integer.toString</code></a> on the exponent value.                                                                                            </li><li>If <i>m</i> is a <code>double</code> value with a subnormal representation, the significand is represented by the characters <code>"0x0."</code> followed by a hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by <code>"p-1022"</code>. Note that there must be at least one nonzero digit in a subnormal significand.                                                            </li></ul>                                             </li></ul><table border=""> <caption>Examples</caption><tbody><tr><th>Floating-point Value </th><th>Hexadecimal String </th></tr><tr><td><code>1.0</code></td><td><code>0x1.0p0</code></td></tr><tr><td><code>-1.0</code></td><td><code>-0x1.0p0</code></td></tr><tr><td><code>2.0</code></td><td><code>0x1.0p1</code></td></tr><tr><td><code>3.0</code></td><td><code>0x1.8p1</code></td></tr><tr><td><code>0.5</code></td><td><code>0x1.0p-1</code></td></tr><tr><td><code>0.25</code></td><td><code>0x1.0p-2</code></td></tr><tr><td><code>Double.MAX_VALUE</code></td><td><code>0x1.fffffffffffffp1023</code></td></tr><tr><td><code>Minimum Normal Value  </code></td><td><code>0x1.0p-1022</code></td></tr><tr><td><code>Maximum Subnormal Value  </code></td><td><code>0x0.fffffffffffffp-1022</code></td></tr><tr><td><code>Double.MIN_VALUE</code></td><td><code>0x0.0000000000001p-1022</code></td></tr></tbody> </table>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - the <code>double</code> to be converted.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hex string representation of the argument.      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:toHexString-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.lang.String-"/><a name="valueOf-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Double.html" title="class in java.lang">Double</a> valueOf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                      throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Returns a <code>Double</code> object holding the <code>double</code> value represented by the argument string <code>s</code>.<p>If <code>s</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.        </p><p>Leading and trailing whitespace characters in <code>s</code> are ignored. Whitespace is removed as if by the <a href="../../java/lang/String.html#trim--"><code>String.trim()</code></a> method; that is, both ASCII space and control characters are removed. The rest of <code>s</code> should constitute a <i>FloatValue</i> as described by the lexical syntax rules:                                          </p><blockquote><dl> <dt> <i>FloatValue:</i>   </dt><dd> <i>Sign<sub>opt</sub></i><code>NaN</code> </dd><dd> <i>Sign<sub>opt</sub></i><code>Infinity</code> </dd><dd> <i>Sign<sub>opt</sub> FloatingPointLiteral </i> </dd><dd> <i>Sign<sub>opt</sub> HexFloatingPointLiteral </i> </dd><dd> <i>SignedInteger</i> </dd> </dl><dl> <dt> <i>HexFloatingPointLiteral</i>:   </dt><dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub>  </i> </dd> </dl><dl> <dt> <i>HexSignificand:</i>   </dt><dd> <i>HexNumeral</i> </dd><dd> <i>HexNumeral</i><code>.</code> </dd><dd> <code>0x</code><i>HexDigits<sub>opt</sub></i><code>.</code><i> HexDigits </i> </dd><dd> <code>0X</code><i> HexDigits<sub>opt</sub> </i><code>.</code><i>HexDigits</i> </dd> </dl><dl> <dt> <i>BinaryExponent:</i>   </dt><dd> <i>BinaryExponentIndicator SignedInteger </i> </dd> </dl><dl> <dt> <i>BinaryExponentIndicator:</i>   </dt><dd> <code>p</code> </dd><dd> <code>P</code> </dd> </dl></blockquote> where <i>Sign</i>, <i>FloatingPointLiteral</i>, <i>HexNumeral</i>, <i>HexDigits</i>, <i>SignedInteger</i> and <i>FloatTypeSuffix</i> are as defined in the lexical structure sections of <cite>The Java™ Language Specification   </cite>, except that underscores are not accepted between digits. If <code>s</code> does not have the form of a <i>FloatValue</i>, then a <code>NumberFormatException</code> is thrown. Otherwise, <code>s</code> is regarded as representing an exact decimal value in the usual "computerized scientific notation" or as an exact hexadecimal value; this exact numerical value is then conceptually converted to an "infinitely precise" binary value that is then rounded to type <code>double</code> by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, which includes preserving the sign of a zero value. Note that the round-to-nearest rule also implies overflow and underflow behaviour; if the exact value of <code>s</code> is large enough in magnitude (greater than or equal to (<a href="../../java/lang/Double.html#MAX_VALUE"><code>MAX_VALUE</code></a> + <a href="../../java/lang/Math.html#ulp-double-"><code>ulp(MAX_VALUE)</code></a>/2), rounding to <code>double</code> will result in an infinity and if the exact value of <code>s</code> is small enough in magnitude (less than or equal to <a href="../../java/lang/Double.html#MIN_VALUE"><code>MIN_VALUE</code></a>/2), rounding to float will result in a zero. Finally, after rounding a <code>Double</code> object representing this <code>double</code> value is returned.<p> To interpret localized string representations of a floating-point value, use subclasses of <a href="../../java/text/NumberFormat.html" title="class in java.text"><code>NumberFormat</code></a>.             </p><p>Note that trailing format specifiers, specifiers that determine the type of a floating-point literal (<code>1.0f</code> is a <code>float</code> value; <code>1.0d</code> is a <code>double</code> value), do <em>not</em> influence the results of this method. In other words, the numerical value of the input string is converted directly to the target floating-point type. The two-step sequence of conversions, string to <code>float</code> followed by <code>float</code> to <code>double</code>, is <em>not</em> equivalent to converting a string directly to <code>double</code>. For example, the <code>float</code> literal <code>0.1f</code> is equal to the <code>double</code> value <code>0.10000000149011612</code>; the <code>float</code> literal <code>0.1f</code> represents a different numerical value than the <code>double</code> literal <code>0.1</code>. (The numerical value 0.1 cannot be exactly represented in a binary floating-point number.)                                                                                                                </p><p>To avoid calling this method on an invalid string and having a <code>NumberFormatException</code> be thrown, the regular expression below can be used to screen the input string:<pre><code>
  final String Digits     = "(\\p{Digit}+)";
  final String HexDigits  = "(\\p{XDigit}+)";
  // an exponent is 'e' or 'E' followed by an optionally
  // signed decimal integer.
  final String Exp        = "[eE][+-]?"+Digits;
  final String fpRegex    =
      ("[\\x00-\\x20]*"+  // Optional leading "whitespace"
       "[+-]?(" + // Optional sign character
       "NaN|" +           // "NaN" string
       "Infinity|" +      // "Infinity" string

       // A decimal floating-point string representing a finite positive
       // number without a leading sign has at most five basic pieces:
       // Digits . Digits ExponentPart FloatTypeSuffix
       //
       // Since this method allows integer-only strings as input
       // in addition to strings of floating-point literals, the
       // two sub-patterns below are simplifications of the grammar
       // productions from section 3.10.2 of
       // The Java Language Specification.

       // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt
       "((("+Digits+"(\\.)?("+Digits+"?)("+Exp+")?)|"+

       // . Digits ExponentPart_opt FloatTypeSuffix_opt
       "(\\.("+Digits+")("+Exp+")?)|"+

       // Hexadecimal strings
       "((" +
        // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt
        "(0[xX]" + HexDigits + "(\\.)?)|" +

        // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt
        "(0[xX]" + HexDigits + "?(\\.)" + HexDigits + ")" +

        ")[pP][+-]?" + Digits + "))" +
       "[fFdD]?))" +
       "[\\x00-\\x20]*");// Optional trailing "whitespace"

  if (Pattern.matches(fpRegex, myString))
      Double.valueOf(myString); // Will not throw NumberFormatException
  else {
      // Perform suitable alternative action
  }
 </code></pre>                          </p>                                                                                                                                                                                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string to be parsed.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Double</code> object holding the value represented by the <code>String</code> argument.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string does not contain a parsable number.           </dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-double-"/><a name="valueOf-double-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Double.html" title="class in java.lang">Double</a> valueOf(double d)</pre><div class="block">Returns a <code>Double</code> instance representing the specified <code>double</code> value. If a new <code>Double</code> instance is not required, this method should generally be used in preference to the constructor <a href="../../java/lang/Double.html#Double-double-"><code>Double(double)</code></a>, as this method is likely to yield significantly better space and time performance by caching frequently requested values.                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - a double value.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Double</code> instance representing <code>d</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseDouble-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseDouble-java.lang.String-"/><a name="parseDouble-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>parseDouble</h4><pre>public static double parseDouble(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                          throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Returns a new <code>double</code> initialized to the value represented by the specified <code>String</code>, as performed by the <code>valueOf</code> method of class <code>Double</code>.                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string to be parsed.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by the string argument.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the string is null       </dd><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string does not contain a parsable <code>double</code>.           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Double.html#valueOf-java.lang.String-"><code>valueOf(String)</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:parseDouble-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isNaN-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isNaN-double-"/><a name="isNaN-double-"/><ul class="blockList"><li class="blockList"><h4>isNaN</h4><pre>public static boolean isNaN(double v)</pre><div class="block">Returns <code>true</code> if the specified number is a Not-a-Number (NaN) value, <code>false</code> otherwise.            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the value to be tested.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value of the argument is NaN; <code>false</code> otherwise.           </dd>  </dl></li></ul> <a end_ctx_id="method:isNaN-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isInfinite-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isInfinite-double-"/><a name="isInfinite-double-"/><ul class="blockList"><li class="blockList"><h4>isInfinite</h4><pre>public static boolean isInfinite(double v)</pre><div class="block">Returns <code>true</code> if the specified number is infinitely large in magnitude, <code>false</code> otherwise.            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the value to be tested.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value of the argument is positive infinity or negative infinity; <code>false</code> otherwise.               </dd>  </dl></li></ul> <a end_ctx_id="method:isInfinite-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isFinite-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isFinite-double-"/><a name="isFinite-double-"/><ul class="blockList"><li class="blockList"><h4>isFinite</h4><pre>public static boolean isFinite(double d)</pre><div class="block">Returns <code>true</code> if the argument is a finite floating-point value; returns <code>false</code> otherwise (for NaN and infinity arguments).                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - the <code>double</code> value to be tested        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the argument is a finite floating-point value, <code>false</code> otherwise.           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:isFinite-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isNaN-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isNaN--"/><a name="isNaN--"/><ul class="blockList"><li class="blockList"><h4>isNaN</h4><pre>public boolean isNaN()</pre><div class="block">Returns <code>true</code> if this <code>Double</code> value is a Not-a-Number (NaN), <code>false</code> otherwise.           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value represented by this object is NaN; <code>false</code> otherwise.            </dd> </dl></li></ul> <a end_ctx_id="method:isNaN--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isInfinite-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isInfinite--"/><a name="isInfinite--"/><ul class="blockList"><li class="blockList"><h4>isInfinite</h4><pre>public boolean isInfinite()</pre><div class="block">Returns <code>true</code> if this <code>Double</code> value is infinitely large in magnitude, <code>false</code> otherwise.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value represented by this object is positive infinity or negative infinity; <code>false</code> otherwise.                </dd> </dl></li></ul> <a end_ctx_id="method:isInfinite--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this <code>Double</code> object. The primitive <code>double</code> value represented by this object is converted to a string exactly as if by the method <code>toString</code> of one argument.                              </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>String</code> representation of this object.     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Double.html#toString-double-"><code>toString(double)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:byteValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:byteValue--"/><a name="byteValue--"/><ul class="blockList"><li class="blockList"><h4>byteValue</h4><pre>public byte byteValue()</pre><div class="block">Returns the value of this <code>Double</code> as a <code>byte</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Number.html#byteValue--">byteValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by this object converted to type <code>byte</code>          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>    </dl></li></ul> <a end_ctx_id="method:byteValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shortValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shortValue--"/><a name="shortValue--"/><ul class="blockList"><li class="blockList"><h4>shortValue</h4><pre>public short shortValue()</pre><div class="block">Returns the value of this <code>Double</code> as a <code>short</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Number.html#shortValue--">shortValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by this object converted to type <code>short</code>          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>    </dl></li></ul> <a end_ctx_id="method:shortValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:intValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:intValue--"/><a name="intValue--"/><ul class="blockList"><li class="blockList"><h4>intValue</h4><pre>public int intValue()</pre><div class="block">Returns the value of this <code>Double</code> as an <code>int</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#intValue--">intValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by this object converted to type <code>int</code>          </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:intValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:longValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:longValue--"/><a name="longValue--"/><ul class="blockList"><li class="blockList"><h4>longValue</h4><pre>public long longValue()</pre><div class="block">Returns the value of this <code>Double</code> as a <code>long</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#longValue--">longValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by this object converted to type <code>long</code>          </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:longValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floatValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floatValue--"/><a name="floatValue--"/><ul class="blockList"><li class="blockList"><h4>floatValue</h4><pre>public float floatValue()</pre><div class="block">Returns the value of this <code>Double</code> as a <code>float</code> after a narrowing primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#floatValue--">floatValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by this object converted to type <code>float</code>          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.3 Narrowing Primitive Conversions   </dd>    </dl></li></ul> <a end_ctx_id="method:floatValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:doubleValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:doubleValue--"/><a name="doubleValue--"/><ul class="blockList"><li class="blockList"><h4>doubleValue</h4><pre>public double doubleValue()</pre><div class="block">Returns the <code>double</code> value of this <code>Double</code> object.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#doubleValue--">doubleValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value represented by this object      </dd>  </dl></li></ul> <a end_ctx_id="method:doubleValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns a hash code for this <code>Double</code> object. The result is the exclusive OR of the two halves of the <code>long</code> integer bit representation, exactly as produced by the method <a href="../../java/lang/Double.html#doubleToLongBits-double-"><code>doubleToLongBits(double)</code></a>, of the primitive <code>double</code> value represented by this <code>Double</code> object. That is, the hash code is the value of the expression:<blockquote> <code>(int)(v^(v&gt;&gt;&gt;32))</code> </blockquote> where <code>v</code> is defined by:<blockquote> <code>long v = Double.doubleToLongBits(this.doubleValue());   </code> </blockquote>                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>hash code </code> value for this object.     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode-double-"/><a name="hashCode-double-"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public static int hashCode(double value)</pre><div class="block">Returns a hash code for a <code>double</code> value; compatible with <code>Double.hashCode()</code>.          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to hash      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for a <code>double</code> value.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:hashCode-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Double</code> object that represents a <code>double</code> that has the same value as the <code>double</code> represented by this object. For this purpose, two <code>double</code> values are considered to be the same if and only if the method <a href="../../java/lang/Double.html#doubleToLongBits-double-"><code>doubleToLongBits(double)</code></a> returns the identical <code>long</code> value when applied to each.<p>Note that in most cases, for two instances of class <code>Double</code>, <code>d1</code> and <code>d2</code>, the value of <code>d1.equals(d2)</code> is <code>true</code> if and only if                       </p><blockquote> <code>d1.doubleValue() == d2.doubleValue()  </code> </blockquote><p>also has the value <code>true</code>. However, there are two exceptions:<ul><li>If <code>d1</code> and <code>d2</code> both represent <code>Double.NaN</code>, then the <code>equals</code> method returns <code>true</code>, even though <code>Double.NaN==Double.NaN</code> has the value <code>false</code>.                   </li><li>If <code>d1</code> represents <code>+0.0</code> while <code>d2</code> represents <code>-0.0</code>, or vice versa, the <code>equal</code> test has the value <code>false</code>, even though <code>+0.0==-0.0</code> has the value <code>true</code>.                        </li></ul> This definition allows hash tables to operate properly.                 </p>                                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to compare with.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the objects are the same; <code>false</code> otherwise.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Double.html#doubleToLongBits-double-"><code>doubleToLongBits(double)</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:doubleToLongBits-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:doubleToLongBits-double-"/><a name="doubleToLongBits-double-"/><ul class="blockList"><li class="blockList"><h4>doubleToLongBits</h4><pre>public static long doubleToLongBits(double value)</pre><div class="block">Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout.<p>Bit 63 (the bit that is selected by the mask <code>0x8000000000000000L</code>) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask <code>0x7ff0000000000000L</code>) represent the exponent. Bits 51-0 (the bits that are selected by the mask <code>0x000fffffffffffffL</code>) represent the significand (sometimes called the mantissa) of the floating-point number.                                                     </p><p>If the argument is positive infinity, the result is <code>0x7ff0000000000000L</code>.         </p><p>If the argument is negative infinity, the result is <code>0xfff0000000000000L</code>.         </p><p>If the argument is NaN, the result is <code>0x7ff8000000000000L</code>.        </p><p>In all cases, the result is a <code>long</code> integer that, when given to the <a href="../../java/lang/Double.html#longBitsToDouble-long-"><code>longBitsToDouble(long)</code></a> method, will produce a floating-point value the same as the argument to <code>doubleToLongBits</code> (except all NaN values are collapsed to a single "canonical" NaN value).                                       </p>                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - a <code>double</code> precision floating-point number.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the bits that represent the floating-point number.      </dd>  </dl></li></ul> <a end_ctx_id="method:doubleToLongBits-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:doubleToRawLongBits-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:doubleToRawLongBits-double-"/><a name="doubleToRawLongBits-double-"/><ul class="blockList"><li class="blockList"><h4>doubleToRawLongBits</h4><pre>public static long doubleToRawLongBits(double value)</pre><div class="block">Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values.<p>Bit 63 (the bit that is selected by the mask <code>0x8000000000000000L</code>) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask <code>0x7ff0000000000000L</code>) represent the exponent. Bits 51-0 (the bits that are selected by the mask <code>0x000fffffffffffffL</code>) represent the significand (sometimes called the mantissa) of the floating-point number.                                                     </p><p>If the argument is positive infinity, the result is <code>0x7ff0000000000000L</code>.         </p><p>If the argument is negative infinity, the result is <code>0xfff0000000000000L</code>.         </p><p>If the argument is NaN, the result is the <code>long</code> integer representing the actual NaN value. Unlike the <code>doubleToLongBits</code> method, <code>doubleToRawLongBits</code> does not collapse all the bit patterns encoding a NaN to a single "canonical" NaN value.                                    </p><p>In all cases, the result is a <code>long</code> integer that, when given to the <a href="../../java/lang/Double.html#longBitsToDouble-long-"><code>longBitsToDouble(long)</code></a> method, will produce a floating-point value the same as the argument to <code>doubleToRawLongBits</code>.                           </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - a <code>double</code> precision floating-point number.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the bits that represent the floating-point number.      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd>   </dl></li></ul> <a end_ctx_id="method:doubleToRawLongBits-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:longBitsToDouble-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:longBitsToDouble-long-"/><a name="longBitsToDouble-long-"/><ul class="blockList"><li class="blockList"><h4>longBitsToDouble</h4><pre>public static double longBitsToDouble(long bits)</pre><div class="block">Returns the <code>double</code> value corresponding to a given bit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point "double format" bit layout.<p>If the argument is <code>0x7ff0000000000000L</code>, the result is positive infinity.         </p><p>If the argument is <code>0xfff0000000000000L</code>, the result is negative infinity.         </p><p>If the argument is any value in the range <code>0x7ff0000000000001L</code> through <code>0x7fffffffffffffffL</code> or in the range <code>0xfff0000000000001L</code> through <code>0xffffffffffffffffL</code>, the result is a NaN. No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns. Distinct values of NaN are only distinguishable by use of the <code>Double.doubleToRawLongBits</code> method.                                                          </p><p>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three values that can be computed from the argument:                  </p><blockquote><pre><code>
 int s = ((bits &gt;&gt; 63) == 0) ? 1 : -1;
 int e = (int)((bits &gt;&gt; 52) &amp; 0x7ffL);
 long m = (e == 0) ?
                 (bits &amp; 0xfffffffffffffL) &lt;&lt; 1 :
                 (bits &amp; 0xfffffffffffffL) | 0x10000000000000L;
 </code></pre></blockquote> Then the floating-point result equals the value of the mathematical expression <i>s</i>·<i>m</i>·2<sup><i>e</i>-1075</sup>.<p>Note that this method may not be able to return a <code>double</code> NaN with exactly same bit pattern as the <code>long</code> argument. IEEE 754 distinguishes between two kinds of NaNs, quiet NaNs and <i>signaling NaNs </i>. The differences between the two kinds of NaN are generally not visible in Java. Arithmetic operations on signaling NaNs turn them into quiet NaNs with a different, but often similar, bit pattern. However, on some processors merely copying a signaling NaN also performs that conversion. In particular, copying a signaling NaN to return it to the calling method may perform this conversion. So <code>longBitsToDouble</code> may not be able to return a <code>double</code> with a signaling NaN bit pattern. Consequently, for some <code>long</code> values, <code>doubleToRawLongBits(longBitsToDouble(start))</code> may <i>not</i> equal <code>start</code>. Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.                                                                                                                                                    </p>                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bits</code> - any <code>long</code> integer.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> floating-point value with the same bit pattern.        </dd>  </dl></li></ul> <a end_ctx_id="method:longBitsToDouble-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compareTo-java.lang.Double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compareTo-java.lang.Double-"/><a name="compareTo-java.lang.Double-"/><ul class="blockList"><li class="blockList"><h4>compareTo</h4><pre>public int compareTo(<a href="../../java/lang/Double.html" title="class in java.lang">Double</a> anotherDouble)</pre><div class="block">Compares two <code>Double</code> objects numerically. There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators (<code>&lt;, &lt;=, ==, &gt;=, &gt;    </code>) when applied to primitive <code>double</code> values:<ul><li> <code>Double.NaN</code> is considered by this method to be equal to itself and greater than all other <code>double</code> values (including <code>Double.POSITIVE_INFINITY</code>).                    </li><li> <code>0.0d</code> is considered by this method to be greater than <code>-0.0d</code>.           </li></ul> This ensures that the <i>natural ordering </i> of <code>Double</code> objects imposed by this method is <i>consistent with equals  </i>.                                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Comparable.html#compareTo-T-">compareTo</a></code> in interface <code><a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Double.html" title="class in java.lang">Double</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>anotherDouble</code> - the <code>Double</code> to be compared.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if <code>anotherDouble</code> is numerically equal to this <code>Double</code>; a value less than <code>0</code> if this <code>Double</code> is numerically less than <code>anotherDouble</code>; and a value greater than <code>0</code> if this <code>Double</code> is numerically greater than <code>anotherDouble</code>.                                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:compareTo-java.lang.Double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compare-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compare-double-double-"/><a name="compare-double-double-"/><ul class="blockList"><li class="blockList"><h4>compare</h4><pre>public static int compare(double d1,
                          double d2)</pre><div class="block">Compares the two specified <code>double</code> values. The sign of the integer value returned is the same as that of the integer that would be returned by the call:<pre>
    new Double(d1).compareTo(new Double(d2))
 </pre>                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d1</code> - the first <code>double</code> to compare       </dd><dd> <code>d2</code> - the second <code>double</code> to compare       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if <code>d1</code> is numerically equal to <code>d2</code>; a value less than <code>0</code> if <code>d1</code> is numerically less than <code>d2</code>; and a value greater than <code>0</code> if <code>d1</code> is numerically greater than <code>d2</code>.                                  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:compare-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sum-double-double- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sum-double-double-"><span class="diff-html-added"/></a><a name="sum-double-double-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">sum</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static double sum(double a,</span>
                         <span class="diff-html-added">double b)</span></pre><div class="block"><span class="diff-html-added">Adds</span> <span class="diff-html-added">two</span> <code><span class="diff-html-added">double</span></code> <span class="diff-html-added">values</span> <span class="diff-html-added">together</span> <span class="diff-html-added">as</span> <span class="diff-html-added">per</span> <span class="diff-html-added">the</span> <span class="diff-html-added">+</span> <span class="diff-html-added">operator.</span>         </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">first</span> <span class="diff-html-added">operand</span>     </dd><dd> <code><span class="diff-html-added">b</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">second</span> <span class="diff-html-added">operand</span>     </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">sum</span> <span class="diff-html-added">of</span> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">and</span> <code><span class="diff-html-added">b</span></code>     </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/util/function/BinaryOperator.html" title="interface in java.util.function"><code><span class="diff-html-added">BinaryOperator</span></code></a> </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">See</span> <cite> <span class="diff-html-added">The</span> <span class="diff-html-added">Java™</span> <span class="diff-html-added">Language</span> <span class="diff-html-added">Specification</span>    </cite><span class="diff-html-added">:</span> </span>   </dt><dd><span class="diff-html-added">4.2.4</span> <span class="diff-html-added">Floating-Point</span> <span class="diff-html-added">Operations</span>  </dd>     </dl></li></ul> <a end_ctx_id="method:sum-double-double-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-double-double- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-double-double-"><span class="diff-html-added"/></a><a name="max-double-double-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">max</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static double max(double a,</span>
                         <span class="diff-html-added">double b)</span></pre><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">the</span> <span class="diff-html-added">greater</span> <span class="diff-html-added">of</span> <span class="diff-html-added">two</span> <code><span class="diff-html-added">double</span></code> <span class="diff-html-added">values</span> <span class="diff-html-added">as</span> <span class="diff-html-added">if</span> <span class="diff-html-added">by</span> <span class="diff-html-added">calling</span> <a href="../../java/lang/Math.html#max-double-double-"><code><span class="diff-html-added">Math.max</span></code></a><span class="diff-html-added">.</span>           </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">first</span> <span class="diff-html-added">operand</span>     </dd><dd> <code><span class="diff-html-added">b</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">second</span> <span class="diff-html-added">operand</span>     </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">greater</span> <span class="diff-html-added">of</span> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">and</span> <code><span class="diff-html-added">b</span></code>     </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/util/function/BinaryOperator.html" title="interface in java.util.function"><code><span class="diff-html-added">BinaryOperator</span></code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:max-double-double-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-double-double- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-double-double-"><span class="diff-html-added"/></a><a name="min-double-double-"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">min</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static double min(double a,</span>
                         <span class="diff-html-added">double b)</span></pre><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">the</span> <span class="diff-html-added">smaller</span> <span class="diff-html-added">of</span> <span class="diff-html-added">two</span> <code><span class="diff-html-added">double</span></code> <span class="diff-html-added">values</span> <span class="diff-html-added">as</span> <span class="diff-html-added">if</span> <span class="diff-html-added">by</span> <span class="diff-html-added">calling</span> <a href="../../java/lang/Math.html#min-double-double-"><code><span class="diff-html-added">Math.min</span></code></a><span class="diff-html-added">.</span>           </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">first</span> <span class="diff-html-added">operand</span>     </dd><dd> <code><span class="diff-html-added">b</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">second</span> <span class="diff-html-added">operand</span>     </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">smaller</span> <span class="diff-html-added">of</span> <code><span class="diff-html-added">a</span></code> <span class="diff-html-added">and</span> <code><span class="diff-html-added">b</span></code><span class="diff-html-added">.</span>     </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/util/function/BinaryOperator.html" title="interface in java.util.function"><code><span class="diff-html-added">BinaryOperator</span></code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:min-double-double-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>