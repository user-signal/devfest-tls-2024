<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Runtime [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Runtime"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">Runtime</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">Every Java application has a single instance of class <code>Runtime</code> that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the <code>getRuntime</code> method.<p> An application cannot create its own instance of this class.          </p>                                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#getRuntime--"><code>getRuntime()</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Runtime"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getRuntime-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getRuntime--"/><a name="getRuntime--"/><ul class="blockList"><li class="blockList"><h4>getRuntime</h4><pre>public static <a href="../../java/lang/Runtime.html" title="class in java.lang">Runtime</a> getRuntime()</pre><div class="block">Returns the runtime object associated with the current Java application. Most of the methods of class <code>Runtime</code> are instance methods and must be invoked with respect to the current runtime object.                              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>Runtime</code> object associated with the current Java application.        </dd> </dl></li></ul> <a end_ctx_id="method:getRuntime--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exit-int-"/><a name="exit-int-"/><ul class="blockList"><li class="blockList"><h4>exit</h4><pre>public void exit(int status)</pre><div class="block">Terminates the currently running Java virtual machine by initiating its shutdown sequence. This method never returns normally. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination.<p> The virtual machine's shutdown sequence consists of two phases. In the first phase all registered <a href="../../java/lang/Runtime.html#addShutdownHook-java.lang.Thread-"><code>shutdown hooks </code></a>, if any, are started in some unspecified order and allowed to run concurrently until they finish. In the second phase all uninvoked finalizers are run if <a href="../../java/lang/Runtime.html#runFinalizersOnExit-boolean-"><code>finalization-on-exit</code></a> has been enabled. Once this is done the virtual machine <a href="../../java/lang/Runtime.html#halt-int-"><code>halts</code></a>.                                                      </p><p> If this method is invoked after the virtual machine has begun its shutdown sequence then if shutdown hooks are being run this method will block indefinitely. If shutdown hooks have already been run and on-exit finalization has been enabled then this method halts the virtual machine with the given status code if the status is nonzero; otherwise, it blocks indefinitely.                                                            </p><p> The <tt><a href="../../java/lang/System.html#exit-int-"><code>System.exit</code></a></tt> method is the conventional and convenient means of invoking this method.             </p><p/>                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>status</code> - Termination status. By convention, a nonzero status code indicates abnormal termination.             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and its <tt><a href="../../java/lang/SecurityManager.html#checkExit-int-"><code>checkExit</code></a></tt> method does not permit exiting with the specified status                    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityException.html" title="class in java.lang"><code>SecurityException</code></a>, <a href="../../java/lang/SecurityManager.html#checkExit-int-"><code>SecurityManager.checkExit(int)</code></a>, <a href="../../java/lang/Runtime.html#addShutdownHook-java.lang.Thread-"><code>addShutdownHook(java.lang.Thread)</code></a>, <a href="../../java/lang/Runtime.html#removeShutdownHook-java.lang.Thread-"><code>removeShutdownHook(java.lang.Thread)</code></a>, <a href="../../java/lang/Runtime.html#runFinalizersOnExit-boolean-"><code>runFinalizersOnExit(boolean)</code></a>, <a href="../../java/lang/Runtime.html#halt-int-"><code>halt(int)</code></a>      </dd>   </dl></li></ul> <a end_ctx_id="method:exit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addShutdownHook-java.lang.Thread- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addShutdownHook-java.lang.Thread-"/><a name="addShutdownHook-java.lang.Thread-"/><ul class="blockList"><li class="blockList"><h4>addShutdownHook</h4><pre>public void addShutdownHook(<a href="../../java/lang/Thread.html" title="class in java.lang">Thread</a> hook)</pre><div class="block">Registers a new virtual-machine shutdown hook.<p> The Java virtual machine <i>shuts down </i> in response to two kinds of events:<ul><li> The program <i>exits</i> normally, when the last non-daemon thread exits or when the <tt><a href="../../java/lang/Runtime.html#exit-int-"><code>exit</code></a></tt> (equivalently, <a href="../../java/lang/System.html#exit-int-"><code>System.exit</code></a>) method is invoked, or                    </li><li> The virtual machine is <i>terminated</i> in response to a user interrupt, such as typing <tt>^C</tt>, or a system-wide event, such as user logoff or system shutdown.                          </li></ul>            </p><p> A <i>shutdown hook </i> is simply an initialized but unstarted thread. When the virtual machine begins its shutdown sequence it will start all registered shutdown hooks in some unspecified order and let them run concurrently. When all the hooks have finished it will then run all uninvoked finalizers if finalization-on-exit has been enabled. Finally, the virtual machine will halt. Note that daemon threads will continue to run during the shutdown sequence, as will non-daemon threads if shutdown was initiated by invoking the <tt><a href="../../java/lang/Runtime.html#exit-int-"><code>exit</code></a></tt> method.                                                                                  </p><p> Once the shutdown sequence has begun it can be stopped only by invoking the <tt><a href="../../java/lang/Runtime.html#halt-int-"><code>halt</code></a></tt> method, which forcibly terminates the virtual machine.                      </p><p> Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an <tt><a href="../../java/lang/IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a></tt> to be thrown.                                </p><p> Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively. They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible. They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down. Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks.                                                                                 </p><p> Shutdown hooks should also finish their work quickly. When a program invokes <tt><a href="../../java/lang/Runtime.html#exit-int-"><code>exit</code></a></tt> the expectation is that the virtual machine will promptly shut down and exit. When the virtual machine is terminated due to user logoff or system shutdown the underlying operating system may only allow a fixed amount of time in which to shut down and exit. It is therefore inadvisable to attempt any user interaction or to perform a long-running computation in a shutdown hook.                                                                             </p><p> Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the <tt><a href="../../java/lang/ThreadGroup.html#uncaughtException-java.lang.Thread-java.lang.Throwable-"><code>uncaughtException</code></a></tt> method of the thread's <tt><a href="../../java/lang/ThreadGroup.html" title="class in java.lang"><code>ThreadGroup</code></a></tt> object. The default implementation of this method prints the exception's stack trace to <tt><a href="../../java/lang/System.html#err"><code>System.err</code></a></tt> and terminates the thread; it does not cause the virtual machine to exit or halt.                                                   </p><p> In rare circumstances the virtual machine may <i>abort</i>, that is, stop running without shutting down cleanly. This occurs when the virtual machine is terminated externally, for example with the <tt>SIGKILL</tt> signal on Unix or the <tt>TerminateProcess</tt> call on Microsoft Windows. The virtual machine may also abort if a native method goes awry by, for example, corrupting internal data structures or attempting to access nonexistent memory. If the virtual machine aborts then no guarantee can be made about whether or not any shutdown hooks will be run.                                                                                      </p><p/>     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>hook</code> - An initialized but unstarted <tt><a href="../../java/lang/Thread.html" title="class in java.lang"><code>Thread</code></a></tt> object        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run                           </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - If the virtual machine is already in the process of shutting down              </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and it denies <tt><a href="../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a>("shutdownHooks")</tt>            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#removeShutdownHook-java.lang.Thread-"><code>removeShutdownHook(java.lang.Thread)</code></a>, <a href="../../java/lang/Runtime.html#halt-int-"><code>halt(int)</code></a>, <a href="../../java/lang/Runtime.html#exit-int-"><code>exit(int)</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:addShutdownHook-java.lang.Thread-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeShutdownHook-java.lang.Thread- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeShutdownHook-java.lang.Thread-"/><a name="removeShutdownHook-java.lang.Thread-"/><ul class="blockList"><li class="blockList"><h4>removeShutdownHook</h4><pre>public boolean removeShutdownHook(<a href="../../java/lang/Thread.html" title="class in java.lang">Thread</a> hook)</pre><div class="block">De-registers a previously-registered virtual-machine shutdown hook.<p/>     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>hook</code> - the hook to remove      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if the specified hook had previously been registered and was successfully de-registered, <tt>false</tt> otherwise.               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - If the virtual machine is already in the process of shutting down              </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and it denies <tt><a href="../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a>("shutdownHooks")</tt>            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#addShutdownHook-java.lang.Thread-"><code>addShutdownHook(java.lang.Thread)</code></a>, <a href="../../java/lang/Runtime.html#exit-int-"><code>exit(int)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:removeShutdownHook-java.lang.Thread-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:halt-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:halt-int-"/><a name="halt-int-"/><ul class="blockList"><li class="blockList"><h4>halt</h4><pre>public void halt(int status)</pre><div class="block">Forcibly terminates the currently running Java virtual machine. This method never returns normally.<p> This method should be used with extreme caution. Unlike the <tt><a href="../../java/lang/Runtime.html#exit-int-"><code>exit</code></a></tt> method, this method does not cause shutdown hooks to be started and does not run uninvoked finalizers if finalization-on-exit has been enabled. If the shutdown sequence has already been initiated then this method does not wait for any running shutdown hooks or finalizers to finish their work.                                                          </p><p/>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>status</code> - Termination status. By convention, a nonzero status code indicates abnormal termination. If the <tt><a href="../../java/lang/Runtime.html#exit-int-"><code>exit</code></a></tt> (equivalently, <tt><a href="../../java/lang/System.html#exit-int-"><code>System.exit</code></a></tt>) method has already been invoked then this status code will override the status code passed to that method.                                    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and its <tt><a href="../../java/lang/SecurityManager.html#checkExit-int-"><code>checkExit</code></a></tt> method does not permit an exit with the specified status                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#exit-int-"><code>exit(int)</code></a>, <a href="../../java/lang/Runtime.html#addShutdownHook-java.lang.Thread-"><code>addShutdownHook(java.lang.Thread)</code></a>, <a href="../../java/lang/Runtime.html#removeShutdownHook-java.lang.Thread-"><code>removeShutdownHook(java.lang.Thread)</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:halt-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:runFinalizersOnExit-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:runFinalizersOnExit-boolean-"/><a name="runFinalizersOnExit-boolean-"/><ul class="blockList"><li class="blockList"><h4>runFinalizersOnExit</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public static void runFinalizersOnExit(boolean value)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This method is inherently unsafe. It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.                            </span> </div><div class="block">Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled.<p>If there is a security manager, its <code>checkExit</code> method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException.                            </p>                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - true to enable finalization on exit, false to disable           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkExit</code> method doesn't allow the exit.               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#exit-int-"><code>exit(int)</code></a>, <a href="../../java/lang/Runtime.html#gc--"><code>gc()</code></a>, <a href="../../java/lang/SecurityManager.html#checkExit-int-"><code>SecurityManager.checkExit(int)</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:runFinalizersOnExit-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec-java.lang.String-"/><a name="exec-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>public <a href="../../java/lang/Process.html" title="class in java.lang">Process</a> exec(<a href="../../java/lang/String.html" title="class in java.lang">String</a> command)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Executes the specified string command in a separate process.<p>This is a convenience method. An invocation of the form <tt>exec(command)</tt> behaves in exactly the same way as the invocation <tt><a href="../../java/lang/Runtime.html#exec-java.lang.String-java.lang.String:A-java.io.File-"><code>exec</code></a>(command, null, null)  </tt>.                    </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>command</code> - a specified system command.      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new <a href="../../java/lang/Process.html" title="class in java.lang"><code>Process</code></a> object for managing the subprocess       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method doesn't allow creation of the subprocess                 </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>command</code> is <code>null</code>      </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If <code>command</code> is empty      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#exec-java.lang.String:A-java.lang.String:A-java.io.File-"><code>exec(String[], String[], File)  </code></a>, <a href="../../java/lang/ProcessBuilder.html" title="class in java.lang"><code>ProcessBuilder</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:exec-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-java.lang.String-java.lang.String:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec-java.lang.String-java.lang.String:A-"/><a name="exec-java.lang.String-java.lang.String:A-"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>public <a href="../../java/lang/Process.html" title="class in java.lang">Process</a> exec(<a href="../../java/lang/String.html" title="class in java.lang">String</a> command,
                    <a href="../../java/lang/String.html" title="class in java.lang">String</a>[] envp)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Executes the specified string command in a separate process with the specified environment.<p>This is a convenience method. An invocation of the form <tt>exec(command, envp) </tt> behaves in exactly the same way as the invocation <tt><a href="../../java/lang/Runtime.html#exec-java.lang.String-java.lang.String:A-java.io.File-"><code>exec</code></a>(command, envp, null)  </tt>.                    </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>command</code> - a specified system command.      </dd><dd> <code>envp</code> - array of strings, each element of which has environment variable settings in the format <i>name</i>=<i>value</i>, or <tt>null</tt> if the subprocess should inherit the environment of the current process.                              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new <a href="../../java/lang/Process.html" title="class in java.lang"><code>Process</code></a> object for managing the subprocess       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method doesn't allow creation of the subprocess                 </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>command</code> is <code>null</code>, or one of the elements of <code>envp</code> is <code>null</code>               </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If <code>command</code> is empty      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#exec-java.lang.String:A-java.lang.String:A-java.io.File-"><code>exec(String[], String[], File)  </code></a>, <a href="../../java/lang/ProcessBuilder.html" title="class in java.lang"><code>ProcessBuilder</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:exec-java.lang.String-java.lang.String:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-java.lang.String-java.lang.String:A-java.io.File- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec-java.lang.String-java.lang.String:A-java.io.File-"/><a name="exec-java.lang.String-java.lang.String:A-java.io.File-"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>public <a href="../../java/lang/Process.html" title="class in java.lang">Process</a> exec(<a href="../../java/lang/String.html" title="class in java.lang">String</a> command,
                    <a href="../../java/lang/String.html" title="class in java.lang">String</a>[] envp,
                    <a href="../../java/io/File.html" title="class in java.io">File</a> dir)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Executes the specified string command in a separate process with the specified environment and working directory.<p>This is a convenience method. An invocation of the form <tt>exec(command, envp, dir)  </tt> behaves in exactly the same way as the invocation <tt><a href="../../java/lang/Runtime.html#exec-java.lang.String:A-java.lang.String:A-java.io.File-"><code>exec</code></a>(cmdarray, envp, dir)  </tt>, where <code>cmdarray</code> is an array of all the tokens in <code>command</code>.                               </p><p>More precisely, the <code>command</code> string is broken into tokens using a <a href="../../java/util/StringTokenizer.html" title="class in java.util"><code>StringTokenizer</code></a> created by the call <code>new <a href="../../java/util/StringTokenizer.html" title="class in java.util"><code>StringTokenizer</code></a>(command) </code> with no further modification of the character categories. The tokens produced by the tokenizer are then placed in the new string array <code>cmdarray</code>, in the same order.                                           </p>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>command</code> - a specified system command.      </dd><dd> <code>envp</code> - array of strings, each element of which has environment variable settings in the format <i>name</i>=<i>value</i>, or <tt>null</tt> if the subprocess should inherit the environment of the current process.                              </dd><dd> <code>dir</code> - the working directory of the subprocess, or <tt>null</tt> if the subprocess should inherit the working directory of the current process.                      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new <a href="../../java/lang/Process.html" title="class in java.lang"><code>Process</code></a> object for managing the subprocess       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method doesn't allow creation of the subprocess                 </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>command</code> is <code>null</code>, or one of the elements of <code>envp</code> is <code>null</code>               </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If <code>command</code> is empty      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ProcessBuilder.html" title="class in java.lang"><code>ProcessBuilder</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:exec-java.lang.String-java.lang.String:A-java.io.File-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-java.lang.String:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec-java.lang.String:A-"/><a name="exec-java.lang.String:A-"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>public <a href="../../java/lang/Process.html" title="class in java.lang">Process</a> exec(<a href="../../java/lang/String.html" title="class in java.lang">String</a>[] cmdarray)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Executes the specified command and arguments in a separate process.<p>This is a convenience method. An invocation of the form <tt>exec(cmdarray)</tt> behaves in exactly the same way as the invocation <tt><a href="../../java/lang/Runtime.html#exec-java.lang.String:A-java.lang.String:A-java.io.File-"><code>exec</code></a>(cmdarray, null, null)  </tt>.                    </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cmdarray</code> - array containing the command to call and its arguments.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new <a href="../../java/lang/Process.html" title="class in java.lang"><code>Process</code></a> object for managing the subprocess       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method doesn't allow creation of the subprocess                 </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>cmdarray</code> is <code>null</code>, or one of the elements of <code>cmdarray</code> is <code>null</code>               </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>cmdarray</code> is an empty array (has length <code>0</code>)           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ProcessBuilder.html" title="class in java.lang"><code>ProcessBuilder</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:exec-java.lang.String:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-java.lang.String:A-java.lang.String:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec-java.lang.String:A-java.lang.String:A-"/><a name="exec-java.lang.String:A-java.lang.String:A-"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>public <a href="../../java/lang/Process.html" title="class in java.lang">Process</a> exec(<a href="../../java/lang/String.html" title="class in java.lang">String</a>[] cmdarray,
                    <a href="../../java/lang/String.html" title="class in java.lang">String</a>[] envp)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Executes the specified command and arguments in a separate process with the specified environment.<p>This is a convenience method. An invocation of the form <tt>exec(cmdarray, envp) </tt> behaves in exactly the same way as the invocation <tt><a href="../../java/lang/Runtime.html#exec-java.lang.String:A-java.lang.String:A-java.io.File-"><code>exec</code></a>(cmdarray, envp, null)  </tt>.                    </p>             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cmdarray</code> - array containing the command to call and its arguments.           </dd><dd> <code>envp</code> - array of strings, each element of which has environment variable settings in the format <i>name</i>=<i>value</i>, or <tt>null</tt> if the subprocess should inherit the environment of the current process.                              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new <a href="../../java/lang/Process.html" title="class in java.lang"><code>Process</code></a> object for managing the subprocess       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method doesn't allow creation of the subprocess                 </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>cmdarray</code> is <code>null</code>, or one of the elements of <code>cmdarray</code> is <code>null</code>, or one of the elements of <code>envp</code> is <code>null</code>                        </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>cmdarray</code> is an empty array (has length <code>0</code>)           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ProcessBuilder.html" title="class in java.lang"><code>ProcessBuilder</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:exec-java.lang.String:A-java.lang.String:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-java.lang.String:A-java.lang.String:A-java.io.File- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec-java.lang.String:A-java.lang.String:A-java.io.File-"/><a name="exec-java.lang.String:A-java.lang.String:A-java.io.File-"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>public <a href="../../java/lang/Process.html" title="class in java.lang">Process</a> exec(<a href="../../java/lang/String.html" title="class in java.lang">String</a>[] cmdarray,
                    <a href="../../java/lang/String.html" title="class in java.lang">String</a>[] envp,
                    <a href="../../java/io/File.html" title="class in java.io">File</a> dir)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Executes the specified command and arguments in a separate process with the specified environment and working directory.<p>Given an array of strings <code>cmdarray</code>, representing the tokens of a command line, and an array of strings <code>envp</code>, representing "environment" variable settings, this method creates a new process in which to execute the specified command.                                   </p><p>This method checks that <code>cmdarray</code> is a valid operating system command. Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings.                               </p><p>If <tt>envp</tt> is <tt>null</tt>, the subprocess inherits the environment settings of the current process.             </p><p>A minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the specified environment.                                   </p><p> <a href="../../java/lang/ProcessBuilder.html#start--"><code>ProcessBuilder.start()</code></a> is now the preferred way to start a process with a modified environment.              </p><p>The working directory of the new subprocess is specified by <tt>dir</tt>. If <tt>dir</tt> is <tt>null</tt>, the subprocess inherits the current working directory of the current process.                         </p><p>If a security manager exists, its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method is invoked with the first component of the array <code>cmdarray</code> as its argument. This may result in a <a href="../../java/lang/SecurityException.html" title="class in java.lang"><code>SecurityException</code></a> being thrown.                            </p><p>Starting an operating system process is highly system-dependent. Among the many things that can go wrong are:<ul><li>The operating system program file was not found.       </li><li>Access to the program file was denied.      </li><li>The working directory does not exist.     </li></ul>                </p><p>In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of <a href="../../java/io/IOException.html" title="class in java.io"><code>IOException</code></a>.                        </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cmdarray</code> - array containing the command to call and its arguments.           </dd><dd> <code>envp</code> - array of strings, each element of which has environment variable settings in the format <i>name</i>=<i>value</i>, or <tt>null</tt> if the subprocess should inherit the environment of the current process.                              </dd><dd> <code>dir</code> - the working directory of the subprocess, or <tt>null</tt> if the subprocess should inherit the working directory of the current process.                      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new <a href="../../java/lang/Process.html" title="class in java.lang"><code>Process</code></a> object for managing the subprocess       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager exists and its <a href="../../java/lang/SecurityManager.html#checkExec-java.lang.String-"><code>checkExec</code></a> method doesn't allow creation of the subprocess                 </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>cmdarray</code> is <code>null</code>, or one of the elements of <code>cmdarray</code> is <code>null</code>, or one of the elements of <code>envp</code> is <code>null</code>                        </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>cmdarray</code> is an empty array (has length <code>0</code>)           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ProcessBuilder.html" title="class in java.lang"><code>ProcessBuilder</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:exec-java.lang.String:A-java.lang.String:A-java.io.File-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:availableProcessors-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:availableProcessors--"/><a name="availableProcessors--"/><ul class="blockList"><li class="blockList"><h4>availableProcessors</h4><pre>public int availableProcessors()</pre><div class="block">Returns the number of processors available to the Java virtual machine.<p> This value may change during a particular invocation of the virtual machine. Applications that are sensitive to the number of available processors should therefore occasionally poll this property and adjust their resource usage appropriately.                                  </p>          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the maximum number of processors available to the virtual machine; never smaller than one             </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:availableProcessors--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:freeMemory-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:freeMemory--"/><a name="freeMemory--"/><ul class="blockList"><li class="blockList"><h4>freeMemory</h4><pre>public long freeMemory()</pre><div class="block">Returns the amount of free memory in the Java Virtual Machine. Calling the <code>gc</code> method may result in increasing the value returned by <code>freeMemory.</code>                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an approximation to the total amount of memory currently available for future allocated objects, measured in bytes.                </dd> </dl></li></ul> <a end_ctx_id="method:freeMemory--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:totalMemory-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:totalMemory--"/><a name="totalMemory--"/><ul class="blockList"><li class="blockList"><h4>totalMemory</h4><pre>public long totalMemory()</pre><div class="block">Returns the total amount of memory in the Java virtual machine. The value returned by this method may vary over time, depending on the host environment.<p> Note that the amount of memory required to hold an object of any given type may be implementation-dependent.                  </p>                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total amount of memory currently available for current and future objects, measured in bytes.              </dd> </dl></li></ul> <a end_ctx_id="method:totalMemory--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:maxMemory-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:maxMemory--"/><a name="maxMemory--"/><ul class="blockList"><li class="blockList"><h4>maxMemory</h4><pre>public long maxMemory()</pre><div class="block">Returns the maximum amount of memory that the Java virtual machine will attempt to use. If there is no inherent limit then the value <a href="../../java/lang/Long.html#MAX_VALUE"><code>Long.MAX_VALUE</code></a> will be returned.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the maximum amount of memory that the virtual machine will attempt to use, measured in bytes               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:maxMemory--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:gc-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:gc--"/><a name="gc--"/><ul class="blockList"><li class="blockList"><h4>gc</h4><pre>public void gc()</pre><div class="block">Runs the garbage collector. Calling this method suggests that the Java virtual machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the virtual machine has made its best effort to recycle all discarded objects.<p> The name <code>gc</code> stands for "garbage collector". The virtual machine performs this recycling process automatically as needed, in a separate thread, even if the <code>gc</code> method is not invoked explicitly.                              </p><p> The method <a href="../../java/lang/System.html#gc--"><code>System.gc()</code></a> is the conventional and convenient means of invoking this method.             </p>                                                   </div></li></ul> <a end_ctx_id="method:gc--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:runFinalization-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:runFinalization--"/><a name="runFinalization--"/><ul class="blockList"><li class="blockList"><h4>runFinalization</h4><pre>public void runFinalization()</pre><div class="block">Runs the finalization methods of any objects pending finalization. Calling this method suggests that the Java virtual machine expend effort toward running the <code>finalize</code> methods of objects that have been found to be discarded but whose <code>finalize</code> methods have not yet been run. When control returns from the method call, the virtual machine has made a best effort to complete all outstanding finalizations.<p> The virtual machine performs the finalization process automatically as needed, in a separate thread, if the <code>runFinalization</code> method is not invoked explicitly.                      </p><p> The method <a href="../../java/lang/System.html#runFinalization--"><code>System.runFinalization()</code></a> is the conventional and convenient means of invoking this method.             </p>                                                              </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#finalize--"><code>Object.finalize()</code></a> </dd> </dl></li></ul> <a end_ctx_id="method:runFinalization--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:traceInstructions-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:traceInstructions-boolean-"/><a name="traceInstructions-boolean-"/><ul class="blockList"><li class="blockList"><h4>traceInstructions</h4><pre>public void traceInstructions(boolean on)</pre><div class="block">Enables/Disables tracing of instructions. If the <code>boolean</code> argument is <code>true</code>, this method suggests that the Java virtual machine emit debugging information for each instruction in the virtual machine as it is executed. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. The destination of the trace output is system dependent.<p> If the <code>boolean</code> argument is <code>false</code>, this method causes the virtual machine to stop performing the detailed instruction trace it is performing.                      </p>                                                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>on</code> - <code>true</code> to enable instruction tracing; <code>false</code> to disable this feature.            </dd> </dl></li></ul> <a end_ctx_id="method:traceInstructions-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:traceMethodCalls-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:traceMethodCalls-boolean-"/><a name="traceMethodCalls-boolean-"/><ul class="blockList"><li class="blockList"><h4>traceMethodCalls</h4><pre>public void traceMethodCalls(boolean on)</pre><div class="block">Enables/Disables tracing of method calls. If the <code>boolean</code> argument is <code>true</code>, this method suggests that the Java virtual machine emit debugging information for each method in the virtual machine as it is called. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature.<p> Calling this method with argument false suggests that the virtual machine cease emitting per-call debugging information.                </p>                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>on</code> - <code>true</code> to enable instruction tracing; <code>false</code> to disable this feature.            </dd> </dl></li></ul> <a end_ctx_id="method:traceMethodCalls-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:load-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:load-java.lang.String-"/><a name="load-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>load</h4><pre>public void load(<a href="../../java/lang/String.html" title="class in java.lang">String</a> filename)</pre><div class="block">Loads the native library specified by the filename argument. The filename argument must be an absolute path name. (for example <code>Runtime.getRuntime().load("/home/avh/lib/libX11.so");</code>). If the filename argument, when stripped of any platform-specific library prefix, path, and file extension, indicates a library whose name is, for example, L, and a native library called L is statically linked with the VM, then the JNI_OnLoad_L function exported by the library is invoked rather than attempting to load a dynamic library. A filename matching the argument does not have to exist in the file system. See the JNI Specification for more details. Otherwise, the filename argument is mapped to a native library image in an implementation-dependent manner.<p> First, if there is a security manager, its <code>checkLink</code> method is called with the <code>filename</code> as its argument. This may result in a security exception.                         </p><p> This is similar to the method <a href="../../java/lang/Runtime.html#loadLibrary-java.lang.String-"><code>loadLibrary(String)</code></a>, but it accepts a general file name as an argument rather than just a library name, allowing any file of native code to be loaded.                                </p><p> The method <a href="../../java/lang/System.html#load-java.lang.String-"><code>System.load(String)</code></a> is the conventional and convenient means of invoking this method.             </p>                                                                                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>filename</code> - the file to load.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkLink</code> method doesn't allow loading of the specified dynamic library                   </dd><dd> <code><a href="../../java/lang/UnsatisfiedLinkError.html" title="class in java.lang">UnsatisfiedLinkError</a></code> - if either the filename is not an absolute path name, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system.                                     </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>filename</code> is <code>null</code>      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#getRuntime--"><code>getRuntime()</code></a>, <a href="../../java/lang/SecurityException.html" title="class in java.lang"><code>SecurityException</code></a>, <a href="../../java/lang/SecurityManager.html#checkLink-java.lang.String-"><code>SecurityManager.checkLink(java.lang.String)</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:load-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:loadLibrary-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:loadLibrary-java.lang.String-"/><a name="loadLibrary-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>loadLibrary</h4><pre>public void loadLibrary(<a href="../../java/lang/String.html" title="class in java.lang">String</a> libname)</pre><div class="block">Loads the native library specified by the <code>libname</code> argument. The <code>libname</code> argument must not contain any platform specific prefix, file extension or path. If a native library called <code>libname</code> is statically linked with the VM, then the JNI_OnLoad_<code>libname</code> function exported by the library is invoked. See the JNI Specification for more details. Otherwise, the libname argument is loaded from a system library location and mapped to a native library image in an implementation- dependent manner.<p> First, if there is a security manager, its <code>checkLink</code> method is called with the <code>libname</code> as its argument. This may result in a security exception.                         </p><p> The method <a href="../../java/lang/System.html#loadLibrary-java.lang.String-"><code>System.loadLibrary(String)</code></a> is the conventional and convenient means of invoking this method. If native methods are to be used in the implementation of a class, a standard strategy is to put the native code in a library file (call it <code>LibFile</code>) and then to put a static initializer:                                                 </p><blockquote><pre>
 static { System.loadLibrary("LibFile"); }
 </pre></blockquote> within the class declaration. When the class is loaded and initialized, the necessary native code implementation for the native methods will then be loaded as well.<p> If this method is called more than once with the same library name, the second and subsequent calls are ignored.                    </p>                                                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>libname</code> - the name of the library.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkLink</code> method doesn't allow loading of the specified dynamic library                   </dd><dd> <code><a href="../../java/lang/UnsatisfiedLinkError.html" title="class in java.lang">UnsatisfiedLinkError</a></code> - if either the libname argument contains a file path, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system.                                    </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>libname</code> is <code>null</code>      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityException.html" title="class in java.lang"><code>SecurityException</code></a>, <a href="../../java/lang/SecurityManager.html#checkLink-java.lang.String-"><code>SecurityManager.checkLink(java.lang.String)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:loadLibrary-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLocalizedInputStream-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLocalizedInputStream-java.io.InputStream-"/><a name="getLocalizedInputStream-java.io.InputStream-"/><ul class="blockList"><li class="blockList"><h4>getLocalizedInputStream</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> getLocalizedInputStream(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> in)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">As of JDK 1.1, the preferred way to translate a byte stream in the local encoding into a character stream in Unicode is via the <code>InputStreamReader</code> and <code>BufferedReader</code> classes.                           </span> </div><div class="block">Creates a localized version of an input stream. This method takes an <code>InputStream</code> and returns an <code>InputStream</code> equivalent to the argument in all respects except that it is localized: as characters in the local character set are read from the stream, they are automatically converted from the local character set to Unicode.<p> If the argument is already a localized stream, it may be returned as the result.               </p>                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>in</code> - InputStream to localize     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a localized input stream   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html" title="class in java.io"><code>InputStream</code></a>, <a href="../../java/io/BufferedReader.html#BufferedReader-java.io.Reader-"><code>BufferedReader.BufferedReader(java.io.Reader)</code></a>, <a href="../../java/io/InputStreamReader.html#InputStreamReader-java.io.InputStream-"><code>InputStreamReader.InputStreamReader(java.io.InputStream)</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:getLocalizedInputStream-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLocalizedOutputStream-java.io.OutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLocalizedOutputStream-java.io.OutputStream-"/><a name="getLocalizedOutputStream-java.io.OutputStream-"/><ul class="blockListLast"><li class="blockList"><h4>getLocalizedOutputStream</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public <a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> getLocalizedOutputStream(<a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">As of JDK 1.1, the preferred way to translate a Unicode character stream into a byte stream in the local encoding is via the <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, and <code>PrintWriter</code> classes.                           </span> </div><div class="block">Creates a localized version of an output stream. This method takes an <code>OutputStream</code> and returns an <code>OutputStream</code> equivalent to the argument in all respects except that it is localized: as Unicode characters are written to the stream, they are automatically converted to the local character set.<p> If the argument is already a localized stream, it may be returned as the result.               </p>                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - OutputStream to localize     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a localized output stream   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/OutputStream.html" title="class in java.io"><code>OutputStream</code></a>, <a href="../../java/io/BufferedWriter.html#BufferedWriter-java.io.Writer-"><code>BufferedWriter.BufferedWriter(java.io.Writer)</code></a>, <a href="../../java/io/OutputStreamWriter.html#OutputStreamWriter-java.io.OutputStream-"><code>OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</code></a>, <a href="../../java/io/PrintWriter.html#PrintWriter-java.io.OutputStream-"><code>PrintWriter.PrintWriter(java.io.OutputStream)</code></a>    </dd>   </dl></li></ul> <a end_ctx_id="method:getLocalizedOutputStream-java.io.OutputStream-"/>  </td></tr></table></td></tr></table></diff></diffreport>