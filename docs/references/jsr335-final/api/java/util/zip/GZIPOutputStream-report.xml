<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:GZIPOutputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:GZIPOutputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../../java/io/Flushable.html" title="interface in java.io">Flushable</a>, <a href="../../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">GZIPOutputStream</span>
extends <a href="../../../java/util/zip/DeflaterOutputStream.html" title="class in java.util.zip">DeflaterOutputStream</a></pre><div class="block">This class implements a stream filter for writing compressed data in the GZIP file format.              </div>  </li></ul> </div> <a end_ctx_id="class:GZIPOutputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:crc [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:crc"/><a name="crc"/><ul class="blockListLast"><li class="blockList"><h4>crc</h4><pre>protected <a href="../../../java/util/zip/CRC32.html" title="class in java.util.zip">CRC32</a> crc</pre><div class="block">CRC-32 of uncompressed data.   </div></li></ul> <a end_ctx_id="field:crc"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:GZIPOutputStream-java.io.OutputStream-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-int-"/><a name="GZIPOutputStream-java.io.OutputStream-int-"/><ul class="blockList"><li class="blockList"><h4>GZIPOutputStream</h4><pre>public GZIPOutputStream(<a href="../../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                        int size)
                 throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a new output stream with the specified buffer size.<p>The new output stream instance is created as if by invoking the 3-argument constructor GZIPOutputStream(out, size, false).                </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - the output stream     </dd><dd> <code>size</code> - the output buffer size      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>size &lt;= 0  </code>    </dd>  </dl></li></ul> <a end_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:GZIPOutputStream-java.io.OutputStream-int-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-int-boolean-"/><a name="GZIPOutputStream-java.io.OutputStream-int-boolean-"/><ul class="blockList"><li class="blockList"><h4>GZIPOutputStream</h4><pre>public GZIPOutputStream(<a href="../../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                        int size,
                        boolean syncFlush)
                 throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a new output stream with the specified buffer size and flush mode.            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - the output stream     </dd><dd> <code>size</code> - the output buffer size      </dd><dd> <code>syncFlush</code> - if <code>true</code> invocation of the inherited <a href="../../../java/util/zip/DeflaterOutputStream.html#flush--"><code>flush()</code></a> method of this instance flushes the compressor with flush mode <a href="../../../java/util/zip/Deflater.html#SYNC_FLUSH"><code>Deflater.SYNC_FLUSH</code></a> before flushing the output stream, otherwise only flushes the output stream                               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>size &lt;= 0  </code>    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-int-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:GZIPOutputStream-java.io.OutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-"/><a name="GZIPOutputStream-java.io.OutputStream-"/><ul class="blockList"><li class="blockList"><h4>GZIPOutputStream</h4><pre>public GZIPOutputStream(<a href="../../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out)
                 throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a new output stream with a default buffer size.<p>The new output stream instance is created as if by invoking the 2-argument constructor GZIPOutputStream(out, false).               </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - the output stream     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd>  </dl></li></ul> <a end_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:GZIPOutputStream-java.io.OutputStream-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-boolean-"/><a name="GZIPOutputStream-java.io.OutputStream-boolean-"/><ul class="blockListLast"><li class="blockList"><h4>GZIPOutputStream</h4><pre>public GZIPOutputStream(<a href="../../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                        boolean syncFlush)
                 throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a new output stream with a default buffer size and the specified flush mode.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - the output stream     </dd><dd> <code>syncFlush</code> - if <code>true</code> invocation of the inherited <a href="../../../java/util/zip/DeflaterOutputStream.html#flush--"><code>flush()</code></a> method of this instance flushes the compressor with flush mode <a href="../../../java/util/zip/Deflater.html#SYNC_FLUSH"><code>Deflater.SYNC_FLUSH</code></a> before flushing the output stream, otherwise only flushes the output stream                               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="constructor:GZIPOutputStream-java.io.OutputStream-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-byte:A-int-int-"/><a name="write-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(byte[] buf,
                  int off,
                  int len)
           throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes array of bytes to the compressed output stream. This method will block until all the bytes are written.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/zip/DeflaterOutputStream.html#write-byte:A-int-int-">write</a></code> in class <code><a href="../../../java/util/zip/DeflaterOutputStream.html" title="class in java.util.zip">DeflaterOutputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buf</code> - the data to be written       </dd><dd> <code>off</code> - the start offset of the data        </dd><dd> <code>len</code> - the length of the data       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error has occurred.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/io/FilterOutputStream.html#write-int-"><code>FilterOutputStream.write(int)</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:write-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:finish-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:finish--"/><a name="finish--"/><ul class="blockListLast"><li class="blockList"><h4>finish</h4><pre>public void finish()
            throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Finishes writing compressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream.                          </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/zip/DeflaterOutputStream.html#finish--">finish</a></code> in class <code><a href="../../../java/util/zip/DeflaterOutputStream.html" title="class in java.util.zip">DeflaterOutputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error has occurred        </dd>  </dl></li></ul> <a end_ctx_id="method:finish--"/>  </td></tr></table></td></tr></table></diff></diffreport>