<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Iterator [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Iterator"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements returned by this iterator          </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/ListIterator.html" title="interface in java.util">ListIterator</a>&lt;E&gt;, <a href="../../java/util/PrimitiveIterator.html" title="interface in java.util">PrimitiveIterator</a>&lt;T,T_CONS&gt;, <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a>, <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a>, <a href="../../javax/xml/stream/XMLEventReader.html" title="interface in javax.xml.stream">XMLEventReader</a>      </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../java/beans/beancontext/BeanContextSupport.BCSIterator.html" title="class in java.beans.beancontext">BeanContextSupport.BCSIterator</a>, <a href="../../javax/xml/stream/util/EventReaderDelegate.html" title="class in javax.xml.stream.util">EventReaderDelegate</a>, <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a>   </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">Iterator&lt;E&gt;</span></pre><div class="block">An iterator over a collection. <code>Iterator</code> takes the place of <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a> in the Java Collections Framework. Iterators differ from enumerations in two ways:<ul><li> Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.                 </li><li> Method names have been improved.     </li></ul><p>This interface is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/ListIterator.html" title="interface in java.util"><code>ListIterator</code></a>, <a href="../../java/lang/Iterable.html" title="interface in java.lang"><code>Iterable</code></a>   </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Iterator"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNext-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNext--"/><a name="hasNext--"/><ul class="blockList"><li class="blockList"><h4>hasNext</h4><pre>boolean hasNext()</pre><div class="block">Returns <code>true</code> if the iteration has more elements. (In other words, returns <code>true</code> if <a href="../../java/util/Iterator.html#next--"><code>next()</code></a> would return an element rather than throwing an exception.)                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the iteration has more elements       </dd> </dl></li></ul> <a end_ctx_id="method:hasNext--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:next-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:next--"/><a name="next--"/><ul class="blockList"><li class="blockList"><h4>next</h4><pre><a href="../../java/util/Iterator.html" title="type parameter in Iterator">E</a> next()</pre><div class="block">Returns the next element in the iteration.      </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next element in the iteration     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the iteration has no more elements         </dd>  </dl></li></ul> <a end_ctx_id="method:next--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove--"/><a name="remove--"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>default void remove()</pre><div class="block">Removes from the underlying collection the last element returned by this iterator (optional operation). This method can be called only once per call to <a href="../../java/util/Iterator.html#next--"><code>next()</code></a>. The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method.                                                    </div><dl> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>The default implementation throws an instance of <a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang"><code>UnsupportedOperationException</code></a> and performs no other action.            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <code>remove</code> operation is not supported by this iterator            </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the <code>next</code> method has not yet been called, or the <code>remove</code> method has already been called after the last call to the <code>next</code> method                           </dd>  </dl></li></ul> <a end_ctx_id="method:remove--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachRemaining-java.util.function.Consumer- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachRemaining-java.util.function.Consumer-"><span class="diff-html-added"/></a><a name="forEachRemaining-java.util.function.Consumer-"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">forEachRemaining</span></h4><pre><span class="diff-html-added">default void forEachRemaining(</span><a href="../../java/util/function/Consumer.html" title="interface in java.util.function"><span class="diff-html-added">Consumer</span></a><span class="diff-html-added">&lt;?</span> <span class="diff-html-added">super</span> <a href="../../java/util/Iterator.html" title="type parameter in Iterator"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt; action)</span></pre><div class="block"><span class="diff-html-added">Performs</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">action</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">remaining</span> <span class="diff-html-added">element</span> <span class="diff-html-added">until</span> <span class="diff-html-added">all</span> <span class="diff-html-added">elements</span> <span class="diff-html-added">have</span> <span class="diff-html-added">been</span> <span class="diff-html-added">processed</span> <span class="diff-html-added">or</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception.</span> <span class="diff-html-added">Actions</span> <span class="diff-html-added">are</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">order</span> <span class="diff-html-added">of</span> <span class="diff-html-added">iteration,</span> <span class="diff-html-added">if</span> <span class="diff-html-added">that</span> <span class="diff-html-added">order</span> <span class="diff-html-added">is</span> <span class="diff-html-added">specified.</span> <span class="diff-html-added">Exceptions</span> <span class="diff-html-added">thrown</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">are</span> <span class="diff-html-added">relayed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">caller.</span>                                          </div><dl> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Implementation</span> <span class="diff-html-added">Requirements:</span> </span>   </dt><dd><p><span class="diff-html-added">The</span> <span class="diff-html-added">default</span> <span class="diff-html-added">implementation</span> <span class="diff-html-added">behaves</span> <span class="diff-html-added">as</span> <span class="diff-html-added">if:</span><pre><code>
     <span class="diff-html-added">while</span> <span class="diff-html-added">(hasNext())</span>
         <span class="diff-html-added">action.accept(next());</span>
 </code></pre>     </p></dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">action</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">The</span> <span class="diff-html-added">action</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">element</span>          </dd> <dt> <span class="throwsLabel"><span class="diff-html-added">Throws:</span></span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang"><span class="diff-html-added">NullPointerException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">action</span> <span class="diff-html-added">is</span> <span class="diff-html-added">null</span>        </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd>    </dl></li></ul> <a end_ctx_id="method:forEachRemaining-java.util.function.Consumer-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>