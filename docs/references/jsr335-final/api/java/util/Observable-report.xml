<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Observable [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Observable"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">Observable</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class represents an observable object, or "data" in the model-view paradigm. It can be subclassed to represent an object that the application wants to have observed.<p> An observable object can have one or more observers. An observer may be any object that implements interface <tt>Observer</tt>. After an observable instance changes, an application calling the <code>Observable</code>'s <code>notifyObservers</code> method causes all of its observers to be notified of the change by a call to their <code>update</code> method.                                                 </p><p> The order in which notifications will be delivered is unspecified. The default implementation provided in the Observable class will notify Observers in the order in which they registered interest, but subclasses may change this order, use no guaranteed order, deliver notifications on separate threads, or may guarantee that their subclass follows this order, as they choose.                                                        </p><p> Note that this notification mechanism has nothing to do with threads and is completely separate from the <tt>wait</tt> and <tt>notify</tt> mechanism of class <tt>Object</tt>.                        </p><p> When an observable object is newly created, its set of observers is empty. Two observers are considered the same if and only if the <tt>equals</tt> method returns true for them.                              </p>                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Observable.html#notifyObservers--"><code>notifyObservers()</code></a>, <a href="../../java/util/Observable.html#notifyObservers-java.lang.Object-"><code>notifyObservers(java.lang.Object)</code></a>, <a href="../../java/util/Observer.html" title="interface in java.util"><code>Observer</code></a>, <a href="../../java/util/Observer.html#update-java.util.Observable-java.lang.Object-"><code>Observer.update(java.util.Observable, java.lang.Object) </code></a>    </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Observable"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Observable-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Observable--"/><a name="Observable--"/><ul class="blockListLast"><li class="blockList"><h4>Observable</h4><pre>public Observable()</pre><div class="block">Construct an Observable with zero Observers.     </div></li></ul> <a end_ctx_id="constructor:Observable--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addObserver-java.util.Observer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addObserver-java.util.Observer-"/><a name="addObserver-java.util.Observer-"/><ul class="blockList"><li class="blockList"><h4>addObserver</h4><pre>public void addObserver(<a href="../../java/util/Observer.html" title="interface in java.util">Observer</a> o)</pre><div class="block">Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set. The order in which notifications will be delivered to multiple observers is not specified. See the class comment.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - an observer to be added.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the parameter o is null.        </dd>  </dl></li></ul> <a end_ctx_id="method:addObserver-java.util.Observer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:deleteObserver-java.util.Observer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:deleteObserver-java.util.Observer-"/><a name="deleteObserver-java.util.Observer-"/><ul class="blockList"><li class="blockList"><h4>deleteObserver</h4><pre>public void deleteObserver(<a href="../../java/util/Observer.html" title="interface in java.util">Observer</a> o)</pre><div class="block">Deletes an observer from the set of observers of this object. Passing <code>null</code> to this method will have no effect.                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - the observer to be deleted.       </dd> </dl></li></ul> <a end_ctx_id="method:deleteObserver-java.util.Observer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:notifyObservers-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:notifyObservers--"/><a name="notifyObservers--"/><ul class="blockList"><li class="blockList"><h4>notifyObservers</h4><pre>public void notifyObservers()</pre><div class="block">If this object has changed, as indicated by the <code>hasChanged</code> method, then notify all of its observers and then call the <code>clearChanged</code> method to indicate that this object has no longer changed.<p> Each observer has its <code>update</code> method called with two arguments: this observable object and <code>null</code>. In other words, this method is equivalent to:                       </p><blockquote> <tt> notifyObservers(null) </tt> </blockquote>                               </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Observable.html#clearChanged--"><code>clearChanged()</code></a>, <a href="../../java/util/Observable.html#hasChanged--"><code>hasChanged()</code></a>, <a href="../../java/util/Observer.html#update-java.util.Observable-java.lang.Object-"><code>Observer.update(java.util.Observable, java.lang.Object) </code></a>   </dd> </dl></li></ul> <a end_ctx_id="method:notifyObservers--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:notifyObservers-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:notifyObservers-java.lang.Object-"/><a name="notifyObservers-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>notifyObservers</h4><pre>public void notifyObservers(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> arg)</pre><div class="block">If this object has changed, as indicated by the <code>hasChanged</code> method, then notify all of its observers and then call the <code>clearChanged</code> method to indicate that this object has no longer changed.<p> Each observer has its <code>update</code> method called with two arguments: this observable object and the <code>arg</code> argument.                 </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>arg</code> - any object.    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Observable.html#clearChanged--"><code>clearChanged()</code></a>, <a href="../../java/util/Observable.html#hasChanged--"><code>hasChanged()</code></a>, <a href="../../java/util/Observer.html#update-java.util.Observable-java.lang.Object-"><code>Observer.update(java.util.Observable, java.lang.Object) </code></a>   </dd>  </dl></li></ul> <a end_ctx_id="method:notifyObservers-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:deleteObservers-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:deleteObservers--"/><a name="deleteObservers--"/><ul class="blockList"><li class="blockList"><h4>deleteObservers</h4><pre>public void deleteObservers()</pre><div class="block">Clears the observer list so that this object no longer has any observers.            </div></li></ul> <a end_ctx_id="method:deleteObservers--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setChanged-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setChanged--"/><a name="setChanged--"/><ul class="blockList"><li class="blockList"><h4>setChanged</h4><pre>protected void setChanged()</pre><div class="block">Marks this <tt>Observable</tt> object as having been changed; the <tt>hasChanged</tt> method will now return <tt>true</tt>.              </div></li></ul> <a end_ctx_id="method:setChanged--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clearChanged-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clearChanged--"/><a name="clearChanged--"/><ul class="blockList"><li class="blockList"><h4>clearChanged</h4><pre>protected void clearChanged()</pre><div class="block">Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the <tt>hasChanged</tt> method will now return <tt>false</tt>. This method is called automatically by the <code>notifyObservers</code> methods.                                        </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Observable.html#notifyObservers--"><code>notifyObservers()</code></a>, <a href="../../java/util/Observable.html#notifyObservers-java.lang.Object-"><code>notifyObservers(java.lang.Object)</code></a>  </dd> </dl></li></ul> <a end_ctx_id="method:clearChanged--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasChanged-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasChanged--"/><a name="hasChanged--"/><ul class="blockList"><li class="blockList"><h4>hasChanged</h4><pre>public boolean hasChanged()</pre><div class="block">Tests if this object has changed.     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if and only if the <code>setChanged</code> method has been called more recently than the <code>clearChanged</code> method on this object; <code>false</code> otherwise.                      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Observable.html#clearChanged--"><code>clearChanged()</code></a>, <a href="../../java/util/Observable.html#setChanged--"><code>setChanged()</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:hasChanged--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:countObservers-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:countObservers--"/><a name="countObservers--"/><ul class="blockListLast"><li class="blockList"><h4>countObservers</h4><pre>public int countObservers()</pre><div class="block">Returns the number of observers of this <tt>Observable</tt> object.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of observers of this object.      </dd> </dl></li></ul> <a end_ctx_id="method:countObservers--"/>  </td></tr></table></td></tr></table></diff></diffreport>