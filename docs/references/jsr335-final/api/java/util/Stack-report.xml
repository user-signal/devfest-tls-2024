<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Stack [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Stack"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;E&gt;, <a href="../../java/util/RandomAccess.html" title="interface in java.util">RandomAccess</a>      </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">Stack&lt;E&gt;</span>
extends <a href="../../java/util/Vector.html" title="class in java.util">Vector</a>&lt;E&gt;</pre><div class="block">The <code>Stack</code> class represents a last-in-first-out (LIFO) stack of objects. It extends class <tt>Vector</tt> with five operations that allow a vector to be treated as a stack. The usual <tt>push</tt> and <tt>pop</tt> operations are provided, as well as a method to <tt>peek</tt> at the top item on the stack, a method to test for whether the stack is <tt>empty</tt>, and a method to <tt>search</tt> the stack for an item and discover how far it is from the top.<p> When a stack is first created, it contains no items.          </p><p>A more complete and consistent set of LIFO stack operations is provided by the <a href="../../java/util/Deque.html" title="interface in java.util"><code>Deque</code></a> interface and its implementations, which should be used in preference to this class. For example:<pre>   
<code>
   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</code></pre>                             </p>                                                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../serialized-form.html#java.util.Stack">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Stack"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Stack-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Stack--"/><a name="Stack--"/><ul class="blockListLast"><li class="blockList"><h4>Stack</h4><pre>public Stack()</pre><div class="block">Creates an empty Stack.   </div></li></ul> <a end_ctx_id="constructor:Stack--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:push-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:push-E-"/><a name="push-E-"/><ul class="blockList"><li class="blockList"><h4>push</h4><pre>public <a href="../../java/util/Stack.html" title="type parameter in Stack">E</a> push(<a href="../../java/util/Stack.html" title="type parameter in Stack">E</a> item)</pre><div class="block">Pushes an item onto the top of this stack. This has exactly the same effect as:<blockquote><pre>
 addElement(item)</pre></blockquote>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>item</code> - the item to be pushed onto this stack.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>item</code> argument.  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Vector.html#addElement-E-"><code>Vector.addElement(E)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:push-E-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pop-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pop--"/><a name="pop--"/><ul class="blockList"><li class="blockList"><h4>pop</h4><pre>public <a href="../../java/util/Stack.html" title="type parameter in Stack">E</a> pop()</pre><div class="block">Removes the object at the top of this stack and returns that object as the value of this function.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The object at the top of this stack (the last item of the <tt>Vector</tt> object).              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/EmptyStackException.html" title="class in java.util">EmptyStackException</a></code> - if this stack is empty.       </dd>  </dl></li></ul> <a end_ctx_id="method:pop--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peek-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peek--"/><a name="peek--"/><ul class="blockList"><li class="blockList"><h4>peek</h4><pre>public <a href="../../java/util/Stack.html" title="type parameter in Stack">E</a> peek()</pre><div class="block">Looks at the object at the top of this stack without removing it from the stack.               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the object at the top of this stack (the last item of the <tt>Vector</tt> object).              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/EmptyStackException.html" title="class in java.util">EmptyStackException</a></code> - if this stack is empty.       </dd>  </dl></li></ul> <a end_ctx_id="method:peek--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:empty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:empty--"/><a name="empty--"/><ul class="blockList"><li class="blockList"><h4>empty</h4><pre>public boolean empty()</pre><div class="block">Tests if this stack is empty.     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if and only if this stack contains no items; <code>false</code> otherwise.            </dd> </dl></li></ul> <a end_ctx_id="method:empty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:search-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:search-java.lang.Object-"/><a name="search-java.lang.Object-"/><ul class="blockListLast"><li class="blockList"><h4>search</h4><pre>public int search(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns the 1-based position where an object is on this stack. If the object <tt>o</tt> occurs as an item in this stack, this method returns the distance from the top of the stack of the occurrence nearest the top of the stack; the topmost item on the stack is considered to be at distance <tt>1</tt>. The <tt>equals</tt> method is used to compare <tt>o</tt> to the items in this stack.                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - the desired object.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 1-based position from the top of the stack where the object is located; the return value <code>-1</code> indicates that the object is not on the stack.                          </dd>  </dl></li></ul> <a end_ctx_id="method:search-java.lang.Object-"/>  </td></tr></table></td></tr></table></diff></diffreport>