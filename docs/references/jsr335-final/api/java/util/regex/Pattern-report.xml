<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Pattern [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Pattern"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a> </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Pattern</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">A compiled representation of a regular expression.<p> A regular expression, specified as a string, must first be compiled into an instance of this class. The resulting pattern can then be used to create a <a href="../../../java/util/regex/Matcher.html" title="class in java.util.regex"><code>Matcher</code></a> object that can match arbitrary <a href="../../../java/lang/CharSequence.html" title="interface in java.lang">character sequences </a> against the regular expression. All of the state involved in performing a match resides in the matcher, so many matchers can share the same pattern.                                                           </p><p> A typical invocation sequence is thus      </p><blockquote><pre>
 Pattern p = Pattern.<a href="../../../java/util/regex/Pattern.html#compile-java.lang.String-"><code>compile</code></a>("a*b");
 Matcher m = p.<a href="../../../java/util/regex/Pattern.html#matcher-java.lang.CharSequence-"><code>matcher</code></a>("aaaaab");
 boolean b = m.<a href="../../../java/util/regex/Matcher.html#matches--"><code>matches</code></a>();</pre></blockquote><p> A <a href="../../../java/util/regex/Pattern.html#matches-java.lang.String-java.lang.CharSequence-"><code>matches</code></a> method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement                                      </p><blockquote><pre>
 boolean b = Pattern.matches("a*b", "aaaaab");</pre></blockquote> is equivalent to the three statements above, though for repeated matches it is less efficient since it does not allow the compiled pattern to be reused.<p> Instances of this class are immutable and are safe for use by multiple concurrent threads. Instances of the <a href="../../../java/util/regex/Matcher.html" title="class in java.util.regex"><code>Matcher</code></a> class are not safe for such use.                          </p><h3> <a name="sum">Summary of regular-expression constructs   </a> </h3><table border="0" cellpadding="1" cellspacing="0" summary="Regular expression constructs, and what they match"><tbody><tr align="left"><th align="left" id="construct">Construct</th><th align="left" id="matches">Matches</th></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="characters">Characters</th></tr><tr><td valign="top" headers="construct characters"><i>x</i></td><td headers="matches">The character <i>x</i>  </td></tr><tr><td valign="top" headers="construct characters"><tt>\\</tt></td><td headers="matches">The backslash character  </td></tr><tr><td valign="top" headers="construct characters"><tt>\0</tt><i>n</i></td><td headers="matches">The character with octal value <tt>0</tt><i>n</i> (0 <tt>&lt;=</tt> <i>n</i> <tt>&lt;=</tt> 7)      </td></tr><tr><td valign="top" headers="construct characters"><tt>\0</tt><i>nn</i></td><td headers="matches">The character with octal value <tt>0</tt><i>nn</i> (0 <tt>&lt;=</tt> <i>n</i> <tt>&lt;=</tt> 7)      </td></tr><tr><td valign="top" headers="construct characters"><tt>\0</tt><i>mnn</i></td><td headers="matches">The character with octal value <tt>0</tt><i>mnn</i> (0 <tt>&lt;=</tt> <i>m</i> <tt>&lt;=</tt> 3, 0 <tt>&lt;=</tt> <i>n</i> <tt>&lt;=</tt> 7)       </td></tr><tr><td valign="top" headers="construct characters"><tt>\x</tt><i>hh</i></td><td headers="matches">The character with hexadecimal value <tt>0x</tt><i>hh</i>   </td></tr><tr><td valign="top" headers="construct characters"><tt>\u</tt><i>hhhh</i></td><td headers="matches">The character with hexadecimal value <tt>0x</tt><i>hhhh</i>   </td></tr><tr><td valign="top" headers="construct characters"><tt>\x</tt><i>{h...h}</i></td><td headers="matches">The character with hexadecimal value <tt>0x</tt><i>h...h</i> (<a href="../../../java/lang/Character.html#MIN_CODE_POINT"><code>Character.MIN_CODE_POINT</code></a>  &lt;= <tt>0x</tt><i>h...h</i> &lt;=  <a href="../../../java/lang/Character.html#MAX_CODE_POINT"><code>Character.MAX_CODE_POINT</code></a>)      </td></tr><tr><td valign="top" headers="matches"><tt>\t</tt></td><td headers="matches">The tab character (<tt>'\u0009'</tt>)   </td></tr><tr><td valign="top" headers="construct characters"><tt>\n</tt></td><td headers="matches">The newline (line feed) character (<tt>'\u000A'</tt>)     </td></tr><tr><td valign="top" headers="construct characters"><tt>\r</tt></td><td headers="matches">The carriage-return character (<tt>'\u000D'</tt>)   </td></tr><tr><td valign="top" headers="construct characters"><tt>\f</tt></td><td headers="matches">The form-feed character (<tt>'\u000C'</tt>)   </td></tr><tr><td valign="top" headers="construct characters"><tt>\a</tt></td><td headers="matches">The alert (bell) character (<tt>'\u0007'</tt>)    </td></tr><tr><td valign="top" headers="construct characters"><tt>\e</tt></td><td headers="matches">The escape character (<tt>'\u001B'</tt>)   </td></tr><tr><td valign="top" headers="construct characters"><tt>\c</tt><i>x</i></td><td headers="matches">The control character corresponding to <i>x</i>     </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="classes">Character classes </th></tr><tr><td valign="top" headers="construct classes"><code>[abc]</code></td><td headers="matches"><code>a</code>, <code>b</code>, or <code>c</code> (simple class)     </td></tr><tr><td valign="top" headers="construct classes"><code>[^abc]</code></td><td headers="matches">Any character except <code>a</code>, <code>b</code>, or <code>c</code> (negation)       </td></tr><tr><td valign="top" headers="construct classes"><code>[a-zA-Z]</code></td><td headers="matches"><code>a</code> through <code>z</code> or <code>A</code> through <code>Z</code>, inclusive (range)        </td></tr><tr><td valign="top" headers="construct classes"><code>[a-d[m-p]]</code></td><td headers="matches"><code>a</code> through <code>d</code>, or <code>m</code> through <code>p</code>: <code>[a-dm-p]</code> (union)        </td></tr><tr><td valign="top" headers="construct classes"><code>[a-z&amp;&amp;[def]]</code></td><td headers="matches"><code>d</code>, <code>e</code>, or <code>f</code> (intersection)    </td></tr><tr><td valign="top" headers="construct classes"><code>[a-z&amp;&amp;[^bc]]</code></td><td headers="matches"><code>a</code> through <code>z</code>, except for <code>b</code> and <code>c</code>: <code>[ad-z]</code> (subtraction)         </td></tr><tr><td valign="top" headers="construct classes"><code>[a-z&amp;&amp;[^m-p]]</code></td><td headers="matches"><code>a</code> through <code>z</code>, and not <code>m</code> through <code>p</code>: <code>[a-lq-z]</code>(subtraction)        </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="predef">Predefined character classes  </th></tr><tr><td valign="top" headers="construct predef"><tt>.</tt></td><td headers="matches">Any character (may or may not match <a href="#lt">line terminators </a>)       </td></tr><tr><td valign="top" headers="construct predef"><tt>\d</tt></td><td headers="matches">A digit: <tt>[0-9]</tt>  </td></tr><tr><td valign="top" headers="construct predef"><tt>\D</tt></td><td headers="matches">A non-digit: <tt>[^0-9]</tt>  </td></tr><tr><td valign="top" headers="construct predef"><tt>\h</tt></td><td headers="matches">A horizontal whitespace character: <tt>[ \t\xA0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000] </tt>    </td></tr><tr><td valign="top" headers="construct predef"><tt>\H</tt></td><td headers="matches">A non-horizontal whitespace character: <tt>[^\h]</tt>    </td></tr><tr><td valign="top" headers="construct predef"><tt>\s</tt></td><td headers="matches">A whitespace character: <tt>[ \t\n\x0B\f\r] </tt>   </td></tr><tr><td valign="top" headers="construct predef"><tt>\S</tt></td><td headers="matches">A non-whitespace character: <tt>[^\s]</tt>   </td></tr><tr><td valign="top" headers="construct predef"><tt>\v</tt></td><td headers="matches">A vertical whitespace character: <tt>[\n\x0B\f\r\x85\u2028\u2029]</tt>    </td></tr><tr><td valign="top" headers="construct predef"><tt>\V</tt></td><td headers="matches">A non-vertical whitespace character: <tt>[^\v]</tt>    </td></tr><tr><td valign="top" headers="construct predef"><tt>\w</tt></td><td headers="matches">A word character: <tt>[a-zA-Z_0-9]</tt>   </td></tr><tr><td valign="top" headers="construct predef"><tt>\W</tt></td><td headers="matches">A non-word character: <tt>[^\w]</tt>   </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="posix"><b>POSIX character classes (US-ASCII only)    </b></th></tr><tr><td valign="top" headers="construct posix"><code>\p{Lower}</code></td><td headers="matches">A lower-case alphabetic character: <code>[a-z]</code>    </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Upper}</code></td><td headers="matches">An upper-case alphabetic character:<code>[A-Z]</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{ASCII}</code></td><td headers="matches">All ASCII:<code>[\x00-\x7F]</code> </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Alpha}</code></td><td headers="matches">An alphabetic character:<code>[\p{Lower}\p{Upper}]</code>  </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Digit}</code></td><td headers="matches">A decimal digit: <code>[0-9]</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Alnum}</code></td><td headers="matches">An alphanumeric character:<code>[\p{Alpha}\p{Digit}]</code>  </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Punct}</code></td><td headers="matches">Punctuation: One of <code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Graph}</code></td><td headers="matches">A visible character: <code>[\p{Alnum}\p{Punct}]</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Print}</code></td><td headers="matches">A printable character: <code>[\p{Graph}\x20]</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Blank}</code></td><td headers="matches">A space or a tab: <code>[ \t] </code>     </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Cntrl}</code></td><td headers="matches">A control character: <code>[\x00-\x1F\x7F]</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{XDigit}</code></td><td headers="matches">A hexadecimal digit: <code>[0-9a-fA-F]</code>   </td></tr><tr><td valign="top" headers="construct posix"><code>\p{Space}</code></td><td headers="matches">A whitespace character: <code>[ \t\n\x0B\f\r] </code>   </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2">java.lang.Character classes (simple <a href="#jcc">java character type  </a>)   </th></tr><tr><td valign="top"><tt>\p{javaLowerCase}</tt></td><td>Equivalent to java.lang.Character.isLowerCase()  </td></tr><tr><td valign="top"><tt>\p{javaUpperCase}</tt></td><td>Equivalent to java.lang.Character.isUpperCase()  </td></tr><tr><td valign="top"><tt>\p{javaWhitespace}</tt></td><td>Equivalent to java.lang.Character.isWhitespace()  </td></tr><tr><td valign="top"><tt>\p{javaMirrored}</tt></td><td>Equivalent to java.lang.Character.isMirrored()  </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="unicode">Classes for Unicode scripts, blocks, categories and binary properties        </th></tr><tr><td valign="top" headers="construct unicode"><code>\p{IsLatin}</code></td><td headers="matches">A Latin script character (<a href="#usc">script</a>)   </td></tr><tr><td valign="top" headers="construct unicode"><code>\p{InGreek}</code></td><td headers="matches">A character in the Greek block (<a href="#ubc">block</a>)     </td></tr><tr><td valign="top" headers="construct unicode"><code>\p{Lu}</code></td><td headers="matches">An uppercase letter (<a href="#ucc">category</a>)   </td></tr><tr><td valign="top" headers="construct unicode"><code>\p{IsAlphabetic}</code></td><td headers="matches">An alphabetic character (<a href="#ubpc">binary property </a>)   </td></tr><tr><td valign="top" headers="construct unicode"><code>\p{Sc}</code></td><td headers="matches">A currency symbol  </td></tr><tr><td valign="top" headers="construct unicode"><code>\P{InGreek}</code></td><td headers="matches">Any character except one in the Greek block (negation)        </td></tr><tr><td valign="top" headers="construct unicode"><code>[\p{L}&amp;&amp;[^\p{Lu}]]</code></td><td headers="matches">Any letter except an uppercase letter (subtraction)      </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="bounds">Boundary matchers </th></tr><tr><td valign="top" headers="construct bounds"><tt>^</tt></td><td headers="matches">The beginning of a line    </td></tr><tr><td valign="top" headers="construct bounds"><tt>$</tt></td><td headers="matches">The end of a line    </td></tr><tr><td valign="top" headers="construct bounds"><tt>\b</tt></td><td headers="matches">A word boundary  </td></tr><tr><td valign="top" headers="construct bounds"><tt>\B</tt></td><td headers="matches">A non-word boundary  </td></tr><tr><td valign="top" headers="construct bounds"><tt>\A</tt></td><td headers="matches">The beginning of the input    </td></tr><tr><td valign="top" headers="construct bounds"><tt>\G</tt></td><td headers="matches">The end of the previous match     </td></tr><tr><td valign="top" headers="construct bounds"><tt>\Z</tt></td><td headers="matches">The end of the input but for the final <a href="#lt">terminator</a>, if any          </td></tr><tr><td valign="top" headers="construct bounds"><tt>\z</tt></td><td headers="matches">The end of the input    </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="lineending">Linebreak matcher </th></tr><tr><td valign="top" headers="construct lineending"><tt>\R</tt></td><td headers="matches">Any Unicode linebreak sequence, is equivalent to <tt>\u000D\u000A|[\u000A\u000B\u000C\u000D\u0085\u2028\u2029]  </tt>       </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="greedy">Greedy quantifiers </th></tr><tr><td valign="top" headers="construct greedy"><i>X</i><tt>?</tt></td><td headers="matches"><i>X</i>, once or not at all     </td></tr><tr><td valign="top" headers="construct greedy"><i>X</i><tt>*</tt></td><td headers="matches"><i>X</i>, zero or more times    </td></tr><tr><td valign="top" headers="construct greedy"><i>X</i><tt>+</tt></td><td headers="matches"><i>X</i>, one or more times    </td></tr><tr><td valign="top" headers="construct greedy"><i>X</i><tt>{</tt><i>n</i><tt>}</tt></td><td headers="matches"><i>X</i>, exactly <i>n</i> times   </td></tr><tr><td valign="top" headers="construct greedy"><i>X</i><tt>{</tt><i>n</i><tt>,}</tt></td><td headers="matches"><i>X</i>, at least <i>n</i> times    </td></tr><tr><td valign="top" headers="construct greedy"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}</tt></td><td headers="matches"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times         </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="reluc">Reluctant quantifiers </th></tr><tr><td valign="top" headers="construct reluc"><i>X</i><tt>??</tt></td><td headers="matches"><i>X</i>, once or not at all     </td></tr><tr><td valign="top" headers="construct reluc"><i>X</i><tt>*?</tt></td><td headers="matches"><i>X</i>, zero or more times    </td></tr><tr><td valign="top" headers="construct reluc"><i>X</i><tt>+?</tt></td><td headers="matches"><i>X</i>, one or more times    </td></tr><tr><td valign="top" headers="construct reluc"><i>X</i><tt>{</tt><i>n</i><tt>}?</tt></td><td headers="matches"><i>X</i>, exactly <i>n</i> times   </td></tr><tr><td valign="top" headers="construct reluc"><i>X</i><tt>{</tt><i>n</i><tt>,}?</tt></td><td headers="matches"><i>X</i>, at least <i>n</i> times    </td></tr><tr><td valign="top" headers="construct reluc"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}?</tt></td><td headers="matches"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times         </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="poss">Possessive quantifiers </th></tr><tr><td valign="top" headers="construct poss"><i>X</i><tt>?+</tt></td><td headers="matches"><i>X</i>, once or not at all     </td></tr><tr><td valign="top" headers="construct poss"><i>X</i><tt>*+</tt></td><td headers="matches"><i>X</i>, zero or more times    </td></tr><tr><td valign="top" headers="construct poss"><i>X</i><tt>++</tt></td><td headers="matches"><i>X</i>, one or more times    </td></tr><tr><td valign="top" headers="construct poss"><i>X</i><tt>{</tt><i>n</i><tt>}+</tt></td><td headers="matches"><i>X</i>, exactly <i>n</i> times   </td></tr><tr><td valign="top" headers="construct poss"><i>X</i><tt>{</tt><i>n</i><tt>,}+</tt></td><td headers="matches"><i>X</i>, at least <i>n</i> times    </td></tr><tr><td valign="top" headers="construct poss"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}+</tt></td><td headers="matches"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times         </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="logical">Logical operators </th></tr><tr><td valign="top" headers="construct logical"><i>XY</i></td><td headers="matches"><i>X</i> followed by <i>Y</i>   </td></tr><tr><td valign="top" headers="construct logical"><i>X</i><tt>|</tt><i>Y</i></td><td headers="matches">Either <i>X</i> or <i>Y</i>   </td></tr><tr><td valign="top" headers="construct logical"><tt>(</tt><i>X</i><tt>)</tt></td><td headers="matches">X, as a <a href="#cg">capturing group </a>   </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="backref">Back references </th></tr><tr><td valign="bottom" headers="construct backref"><tt>\</tt><i>n</i></td><td valign="bottom" headers="matches">Whatever the <i>n</i><sup>th</sup><a href="#cg">capturing group </a> matched   </td></tr><tr><td valign="bottom" headers="construct backref"><tt>\</tt><i>k</i>&lt;<i>name</i>&gt;</td><td valign="bottom" headers="matches">Whatever the <a href="#groupname">named-capturing group </a> "name" matched    </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="quot">Quotation</th></tr><tr><td valign="top" headers="construct quot"><tt>\</tt></td><td headers="matches">Nothing, but quotes the following character     </td></tr><tr><td valign="top" headers="construct quot"><tt>\Q</tt></td><td headers="matches">Nothing, but quotes all characters until <tt>\E</tt>      </td></tr><tr><td valign="top" headers="construct quot"><tt>\E</tt></td><td headers="matches">Nothing, but ends quoting started by <tt>\Q</tt>      </td></tr><tr><th> </th></tr><tr align="left"><th colspan="2" id="special">Special constructs (named-capturing and non-capturing)    </th></tr><tr><td valign="top" headers="construct special"><tt>(?&lt;<a href="#groupname">name</a>&gt;</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, as a named-capturing group    </td></tr><tr><td valign="top" headers="construct special"><tt>(?:</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, as a non-capturing group    </td></tr><tr><td valign="top" headers="construct special"><tt>(?idmsuxU-idmsuxU) </tt></td><td headers="matches">Nothing, but turns match flags <a href="#CASE_INSENSITIVE">i</a><a href="#UNIX_LINES">d</a><a href="#MULTILINE">m</a><a href="#DOTALL">s</a><a href="#UNICODE_CASE">u</a><a href="#COMMENTS">x</a><a href="#UNICODE_CHARACTER_CLASS">U</a> on - off        </td></tr><tr><td valign="top" headers="construct special"><tt>(?idmsux-idmsux:</tt><i>X</i><tt>)</tt>  </td><td headers="matches"><i>X</i>, as a <a href="#cg">non-capturing group </a> with the given flags <a href="#CASE_INSENSITIVE">i</a><a href="#UNIX_LINES">d</a><a href="#MULTILINE">m</a><a href="#DOTALL">s</a><a href="#UNICODE_CASE">u</a><a href="#COMMENTS">x</a> on - off           </td></tr><tr><td valign="top" headers="construct special"><tt>(?=</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, via zero-width positive lookahead    </td></tr><tr><td valign="top" headers="construct special"><tt>(?!</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, via zero-width negative lookahead    </td></tr><tr><td valign="top" headers="construct special"><tt>(?&lt;=</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, via zero-width positive lookbehind    </td></tr><tr><td valign="top" headers="construct special"><tt>(?&lt;!</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, via zero-width negative lookbehind    </td></tr><tr><td valign="top" headers="construct special"><tt>(?&gt;</tt><i>X</i><tt>)</tt></td><td headers="matches"><i>X</i>, as an independent, non-capturing group     </td></tr></tbody></table> <hr/><h3> <a name="bs">Backslashes, escapes, and quoting   </a> </h3><p> The backslash character (<tt>'\'</tt>) serves to introduce escaped constructs, as defined in the table above, as well as to quote characters that otherwise would be interpreted as unescaped constructs. Thus the expression <tt>\\</tt> matches a single backslash and <tt>\{</tt> matches a left brace.                                           </p><p> It is an error to use a backslash prior to any alphabetic character that does not denote an escaped construct; these are reserved for future extensions to the regular-expression language. A backslash may be used prior to a non-alphabetic character regardless of whether that character is part of an unescaped construct.                                                   </p><p> Backslashes within string literals in Java source code are interpreted as required by <cite>The Java™ Language Specification   </cite> as either Unicode escapes (section 3.3) or other character escapes (section 3.10.6) It is therefore necessary to double backslashes in string literals that represent regular expressions to protect them from interpretation by the Java bytecode compiler. The string literal <tt>"\b"</tt>, for example, matches a single backspace character when interpreted as a regular expression, while <tt>"\\b"</tt> matches a word boundary. The string literal <tt>"\(hello\)"</tt> is illegal and leads to a compile-time error; in order to match the string <tt>(hello)</tt> the string literal <tt>"\\(hello\\)"</tt> must be used.                                                                                                   </p><h3> <a name="cc">Character Classes </a> </h3><p> Character classes may appear within other character classes, and may be composed by the union operator (implicit) and the intersection operator (<tt>&amp;&amp;</tt>). The union operator denotes a class that contains every character that is in at least one of its operand classes. The intersection operator denotes a class that contains every character that is in both of its operand classes.                                                            </p><p> The precedence of character-class operators is as follows, from highest to lowest:            </p><blockquote><table border="0" cellpadding="1" cellspacing="0" summary="Precedence of character class operators."><tbody><tr><th>1    </th><td>Literal escape     </td><td><tt>\x</tt></td></tr><tr><th>2    </th><td>Grouping</td><td><tt>[...]</tt></td></tr><tr><th>3    </th><td>Range</td><td><tt>a-z</tt></td></tr><tr><th>4    </th><td>Union</td><td><tt>[a-e][i-u]</tt></td></tr><tr><th>5    </th><td>Intersection</td><td><code>[a-z&amp;&amp;[aeiou]]</code></td></tr></tbody></table></blockquote><p> Note that a different set of metacharacters are in effect inside a character class than outside a character class. For instance, the regular expression <tt>.</tt> loses its special meaning inside a character class, while the expression <tt>-</tt> becomes a range forming metacharacter.                                          </p><h3> <a name="lt">Line terminators </a> </h3><p> A <i>line terminator </i> is a one- or two-character sequence that marks the end of a line of the input character sequence. The following are recognized as line terminators:<ul><li> A newline (line feed) character (<tt>'\n'</tt>),     </li><li> A carriage-return character followed immediately by a newline character (<tt>"\r\n"</tt>),         </li><li> A standalone carriage-return character (<tt>'\r'</tt>),    </li><li> A next-line character (<tt>'\u0085'</tt>),   </li><li> A line-separator character (<tt>'\u2028'</tt>), or    </li><li> A paragraph-separator character (<tt>'\u2029</tt>).   </li></ul>                           </p><p>If <a href="../../../java/util/regex/Pattern.html#UNIX_LINES"><code>UNIX_LINES</code></a> mode is activated, then the only line terminators recognized are newline characters.             </p><p> The regular expression <tt>.</tt> matches any character except a line terminator unless the <a href="../../../java/util/regex/Pattern.html#DOTALL"><code>DOTALL</code></a> flag is specified.                 </p><p> By default, the regular expressions <tt>^</tt> and <tt>$</tt> ignore line terminators and only match at the beginning and the end, respectively, of the entire input sequence. If <a href="../../../java/util/regex/Pattern.html#MULTILINE"><code>MULTILINE</code></a> mode is activated then <tt>^</tt> matches at the beginning of input and after any line terminator except at the end of input. When in <a href="../../../java/util/regex/Pattern.html#MULTILINE"><code>MULTILINE</code></a> mode <tt>$</tt> matches just before a line terminator or the end of the input sequence.                                                                    </p><h3> <a name="cg">Groups and capturing  </a> </h3><h4> <a name="gnumber">Group number </a> </h4><p> Capturing groups are numbered by counting their opening parentheses from left to right. In the expression <tt>((A)(B(C)))</tt>, for example, there are four such groups:                        </p><blockquote><table cellpadding="1" cellspacing="0" summary="Capturing group numberings"><tbody><tr><th>1    </th><td><tt>((A)(B(C)))</tt></td></tr><tr><th>2    </th><td><tt>(A)</tt></td></tr><tr><th>3    </th><td><tt>(B(C))</tt></td></tr><tr><th>4    </th><td><tt>(C)</tt></td></tr></tbody></table></blockquote><p> Group zero always stands for the entire expression.        </p><p> Capturing groups are so named because, during a match, each subsequence of the input sequence that matches such a group is saved. The captured subsequence may be used later in the expression, via a back reference, and may also be retrieved from the matcher once the match operation is complete.                                                  </p><h4> <a name="groupname">Group name </a> </h4><p>A capturing group can also be assigned a "name", a <tt>named-capturing group </tt>, and then be back-referenced later by the "name". Group names are composed of the following characters. The first character must be a <tt>letter</tt>.<ul><li> The uppercase letters <tt>'A'</tt> through <tt>'Z'</tt> (<tt>'\u0041'</tt> through <tt>'\u005a'</tt>),       </li><li> The lowercase letters <tt>'a'</tt> through <tt>'z'</tt> (<tt>'\u0061'</tt> through <tt>'\u007a'</tt>),       </li><li> The digits <tt>'0'</tt> through <tt>'9'</tt> (<tt>'\u0030'</tt> through <tt>'\u0039'</tt>),      </li></ul>                                 </p><p> A <tt>named-capturing group </tt> is still numbered as described in <a href="#gnumber">Group number </a>.         </p><p> The captured input associated with a group is always the subsequence that the group most recently matched. If a group is evaluated a second time because of quantification then its previously-captured value, if any, will be retained if the second evaluation fails. Matching the string <tt>"aba"</tt> against the expression <tt>(a(b)?)+</tt>, for example, leaves group two set to <tt>"b"</tt>. All captured input is discarded at the beginning of each match.                                                                     </p><p> Groups beginning with <tt>(?</tt> are either pure, <i>non-capturing</i> groups that do not capture text and do not count towards the group total, or <i>named-capturing</i> group.                         </p><h3> Unicode support  </h3><p> This class is in conformance with Level 1 of <a href="http://www.unicode.org/reports/tr18/"><i>Unicode Technical Standard #18: Unicode Regular Expression      </i></a>, plus RL2.1 Canonical Equivalents.              </p><p> <b>Unicode escape sequences  </b> such as <tt>\u2014</tt> in Java source code are processed as described in section 3.3 of <cite>The Java™ Language Specification   </cite>. Such escape sequences are also implemented directly by the regular-expression parser so that Unicode escapes can be used in expressions that are read from files or from the keyboard. Thus the strings <tt>"\u2014"</tt> and <tt>"\\u2014"</tt>, while not equal, compile into the same pattern, which matches the character with hexadecimal value <tt>0x2014</tt>.                                                                    </p><p> A Unicode character can also be represented in a regular-expression by using its <b>Hex notation </b>(hexadecimal code point value) directly as described in construct <tt>\x{...}</tt>, for example a supplementary character U+2011F can be specified as <tt>\x{2011F}</tt>, instead of two consecutive Unicode escape sequences of the surrogate pair <tt>\uD840</tt><tt>\uDD1F</tt>.                                              </p><p> Unicode scripts, blocks, categories and binary properties are written with the <tt>\p</tt> and <tt>\P</tt> constructs as in Perl. <tt>\p{</tt><i>prop</i><tt>}</tt> matches if the input has the property <i>prop</i>, while <tt>\P{</tt><i>prop</i><tt>}</tt> does not match if the input has that property.                                      </p><p> Scripts, blocks, categories and binary properties can be used both inside and outside of a character class.                 </p><p> <b><a name="usc">Scripts</a></b> are specified either with the prefix <code>Is</code>, as in <code>IsHiragana</code>, or by using the <code>script</code> keyword (or its short form <code>sc</code>)as in <code>script=Hiragana</code> or <code>sc=Hiragana</code>.                          </p><p> The script names supported by <code>Pattern</code> are the valid script names accepted and defined by <a href="../../../java/lang/Character.UnicodeScript.html#forName-java.lang.String-"><code>UnicodeScript.forName</code></a>.                </p><p> <b><a name="ubc">Blocks</a></b> are specified with the prefix <code>In</code>, as in <code>InMongolian</code>, or by using the keyword <code>block</code> (or its short form <code>blk</code>) as in <code>block=Mongolian</code> or <code>blk=Mongolian</code>.                          </p><p> The block names supported by <code>Pattern</code> are the valid block names accepted and defined by <a href="../../../java/lang/Character.UnicodeBlock.html#forName-java.lang.String-"><code>UnicodeBlock.forName</code></a>.                </p><p> <b><a name="ucc">Categories</a></b> may be specified with the optional prefix <code>Is</code>: Both <code>\p{L}</code> and <code>\p{IsL}</code> denote the category of Unicode letters. Same as scripts and blocks, categories can also be specified by using the keyword <code>general_category</code> (or its short form <code>gc</code>) as in <code>general_category=Lu</code> or <code>gc=Lu</code>.                                            </p><p> The supported categories are those of <a href="http://www.unicode.org/unicode/standard/standard.html"><i>The Unicode Standard  </i></a> in the version specified by the <a href="../../../java/lang/Character.html" title="class in java.lang"><code>Character</code></a> class. The category names are those defined in the Standard, both normative and informative.                            </p><p> <b><a name="ubpc">Binary properties </a></b> are specified with the prefix <code>Is</code>, as in <code>IsAlphabetic</code>. The supported binary properties by <code>Pattern</code> are<ul><li> Alphabetic </li><li> Ideographic </li><li> Letter </li><li> Lowercase </li><li> Uppercase </li><li> Titlecase </li><li> Punctuation </li><li> Control </li><li> White_Space </li><li> Digit </li><li> Hex_Digit </li><li> Join_Control </li><li> Noncharacter_Code_Point </li><li> Assigned </li></ul>                 </p><p> The following <b>Predefined Character classes  </b> and <b>POSIX character classes  </b> are in conformance with the recommendation of <i>Annex C: Compatibility Properties   </i> of <a href="http://www.unicode.org/reports/tr18/"><i>Unicode Regular Expression    </i></a>, when <a href="../../../java/util/regex/Pattern.html#UNICODE_CHARACTER_CLASS"><code>UNICODE_CHARACTER_CLASS</code></a> flag is specified.<table border="0" cellpadding="1" cellspacing="0" summary="predefined and posix character classes in Unicode mode"><tbody><tr align="left"><th align="left" id="predef_classes">Classes</th><th align="left" id="predef_matches">Matches</th></tr><tr><td><tt>\p{Lower}</tt></td><td>A lowercase character:<tt>\p{IsLowercase}</tt>  </td></tr><tr><td><tt>\p{Upper}</tt></td><td>An uppercase character:<tt>\p{IsUppercase}</tt>  </td></tr><tr><td><tt>\p{ASCII}</tt></td><td>All ASCII:<tt>[\x00-\x7F]</tt> </td></tr><tr><td><tt>\p{Alpha}</tt></td><td>An alphabetic character:<tt>\p{IsAlphabetic}</tt>  </td></tr><tr><td><tt>\p{Digit}</tt></td><td>A decimal digit character:<tt>p{IsDigit}</tt>   </td></tr><tr><td><tt>\p{Alnum}</tt></td><td>An alphanumeric character:<tt>[\p{IsAlphabetic}\p{IsDigit}]</tt>  </td></tr><tr><td><tt>\p{Punct}</tt></td><td>A punctuation character:<tt>p{IsPunctuation}</tt>  </td></tr><tr><td><tt>\p{Graph}</tt></td><td>A visible character: <tt>[^\p{IsWhite_Space}\p{gc=Cc}\p{gc=Cs}\p{gc=Cn}]</tt>   </td></tr><tr><td><tt>\p{Print}</tt></td><td>A printable character: <code>[\p{Graph}\p{Blank}&amp;&amp;[^\p{Cntrl}]]</code>   </td></tr><tr><td><tt>\p{Blank}</tt></td><td>A space or a tab: <code>[\p{IsWhite_Space}&amp;&amp;[^\p{gc=Zl}\p{gc=Zp}\x0a\x0b\x0c\x0d\x85]]</code>     </td></tr><tr><td><tt>\p{Cntrl}</tt></td><td>A control character: <tt>\p{gc=Cc}</tt>   </td></tr><tr><td><tt>\p{XDigit}</tt></td><td>A hexadecimal digit: <tt>[\p{gc=Nd}\p{IsHex_Digit}]</tt>   </td></tr><tr><td><tt>\p{Space}</tt></td><td>A whitespace character:<tt>\p{IsWhite_Space}</tt>  </td></tr><tr><td><tt>\d</tt></td><td>A digit: <tt>\p{IsDigit}</tt>  </td></tr><tr><td><tt>\D</tt></td><td>A non-digit: <tt>[^\d]</tt>  </td></tr><tr><td><tt>\s</tt></td><td>A whitespace character: <tt>\p{IsWhite_Space}</tt>   </td></tr><tr><td><tt>\S</tt></td><td>A non-whitespace character: <tt>[^\s]</tt>   </td></tr><tr><td><tt>\w</tt></td><td>A word character: <tt>[\p{Alpha}\p{gc=Mn}\p{gc=Me}\p{gc=Mc}\p{Digit}\p{gc=Pc}\p{IsJoin_Control}]</tt>   </td></tr><tr><td><tt>\W</tt></td><td>A non-word character: <tt>[^\w]</tt>   </td></tr></tbody></table>                    </p><p> <a name="jcc"> Categories that behave like the java.lang.Character boolean is<i>methodname</i> methods (except for the deprecated ones) are available through the same <tt>\p{</tt><i>prop</i><tt>}</tt> syntax where the specified property has the name <tt>java<i>methodname</i></tt>                             </a>. </p><h3> Comparison to Perl 5    </h3><p>The <code>Pattern</code> engine performs traditional NFA-based matching with ordered alternation as occurs in Perl 5.              </p><p> Perl constructs not supported by this class:       </p><ul><li><p> Predefined character classes (Unicode character)     </p><p> <tt>\X    </tt>Match Unicode <a href="http://www.unicode.org/reports/tr18/#Default_Grapheme_Clusters"><i>extended grapheme cluster  </i></a>   </p></li><li><p> The backreference constructs, <tt>\g{</tt><i>n</i><tt>}</tt> for the <i>n</i><sup>th</sup><a href="#cg">capturing group </a> and <tt>\g{</tt><i>name</i><tt>}</tt> for <a href="#groupname">named-capturing group </a>.           </p></li><li><p> The named character construct, <tt>\N{</tt><i>name</i><tt>}</tt> for a Unicode character by its name.            </p></li><li><p> The conditional constructs <tt>(?(</tt><i>condition</i><tt>)</tt><i>X</i><tt>)</tt> and <tt>(?(</tt><i>condition</i><tt>)</tt><i>X</i><tt>|</tt><i>Y</i><tt>)</tt>,      </p></li><li><p> The embedded code constructs <tt>(?{</tt><i>code</i><tt>})</tt> and <tt>(??{</tt><i>code</i><tt>})</tt>,       </p></li><li><p> The embedded comment syntax <tt>(?#comment)</tt>, and      </p></li><li><p> The preprocessing operations <tt>\l</tt><tt>\u</tt>, <tt>\L</tt>, and <tt>\U</tt>.       </p></li></ul><p> Constructs supported by this class but not by Perl:         </p><ul><li><p> Character-class union and intersection as described <a href="#cc">above</a>.       </p></li></ul><p> Notable differences from Perl:    </p><ul><li><p> In Perl, <tt>\1</tt> through <tt>\9</tt> are always interpreted as back references; a backslash-escaped number greater than <tt>9</tt> is treated as a back reference if at least that many subexpressions exist, otherwise it is interpreted, if possible, as an octal escape. In this class octal escapes must always begin with a zero. In this class, <tt>\1</tt> through <tt>\9</tt> are always interpreted as back references, and a larger number is accepted as a back reference if at least that many subexpressions exist at that point in the regular expression, otherwise the parser will drop digits until the number is smaller or equal to the existing number of groups or it is one digit.                                                                                                               </p></li><li><p> Perl uses the <tt>g</tt> flag to request a match that resumes where the last match left off. This functionality is provided implicitly by the <a href="../../../java/util/regex/Matcher.html" title="class in java.util.regex"><code>Matcher</code></a> class: Repeated invocations of the <a href="../../../java/util/regex/Matcher.html#find--"><code>find</code></a> method will resume where the last match left off, unless the matcher is reset.                                             </p></li><li><p> In Perl, embedded flags at the top level of an expression affect the whole expression. In this class, embedded flags always take effect at the point at which they appear, whether they are at the top level or within a group; in the latter case, flags are restored at the end of the group just as in Perl.                                                          </p></li></ul><p> For a more precise description of the behavior of regular expression constructs, please see <a href="http://www.oreilly.com/catalog/regex3/"><i>Mastering Regular Expressions, 3nd Edition    </i>, Jeffrey E. F. Friedl, O'Reilly and Associates, 2006.        </a>               </p>                                 </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/String.html#split-java.lang.String-int-"><code>String.split(String, int) </code></a>, <a href="../../../java/lang/String.html#split-java.lang.String-"><code>String.split(String)</code></a>, <a href="../../../serialized-form.html#java.util.regex.Pattern">Serialized Form </a>   </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Pattern"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:UNIX_LINES [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:UNIX_LINES"/><a name="UNIX_LINES"/><ul class="blockList"><li class="blockList"><h4>UNIX_LINES</h4><pre>public static final int UNIX_LINES</pre><div class="block">Enables Unix lines mode.<p> In this mode, only the <tt>'\n'</tt> line terminator is recognized in the behavior of <tt>.</tt>, <tt>^</tt>, and <tt>$</tt>.                  </p><p> Unix lines mode can also be enabled via the embedded flag expression <tt>(?d)</tt>.            </p>   </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.UNIX_LINES">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:UNIX_LINES"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CASE_INSENSITIVE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CASE_INSENSITIVE"/><a name="CASE_INSENSITIVE"/><ul class="blockList"><li class="blockList"><h4>CASE_INSENSITIVE</h4><pre>public static final int CASE_INSENSITIVE</pre><div class="block">Enables case-insensitive matching.<p> By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched. Unicode-aware case-insensitive matching can be enabled by specifying the <a href="../../../java/util/regex/Pattern.html#UNICODE_CASE"><code>UNICODE_CASE</code></a> flag in conjunction with this flag.                               </p><p> Case-insensitive matching can also be enabled via the embedded flag expression <tt>(?i)</tt>.           </p><p> Specifying this flag may impose a slight performance penalty.         </p>  </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.CASE_INSENSITIVE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:CASE_INSENSITIVE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:COMMENTS [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:COMMENTS"/><a name="COMMENTS"/><ul class="blockList"><li class="blockList"><h4>COMMENTS</h4><pre>public static final int COMMENTS</pre><div class="block">Permits whitespace and comments in pattern.<p> In this mode, whitespace is ignored, and embedded comments starting with <tt>#</tt> are ignored until the end of a line.                    </p><p> Comments mode can also be enabled via the embedded flag expression <tt>(?x)</tt>.           </p>     </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.COMMENTS">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:COMMENTS"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MULTILINE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MULTILINE"/><a name="MULTILINE"/><ul class="blockList"><li class="blockList"><h4>MULTILINE</h4><pre>public static final int MULTILINE</pre><div class="block">Enables multiline mode.<p> In multiline mode the expressions <tt>^</tt> and <tt>$</tt> match just after or just before, respectively, a line terminator or the end of the input sequence. By default these expressions only match at the beginning and the end of the entire input sequence.                                          </p><p> Multiline mode can also be enabled via the embedded flag expression <tt>(?m)</tt>.           </p>  </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.MULTILINE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MULTILINE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:LITERAL [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:LITERAL"/><a name="LITERAL"/><ul class="blockList"><li class="blockList"><h4>LITERAL</h4><pre>public static final int LITERAL</pre><div class="block">Enables literal parsing of the pattern.<p> When this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters. Metacharacters or escape sequences in the input sequence will be given no special meaning.                                   </p><p>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on matching when used in conjunction with this flag. The other flags become superfluous.                     </p><p> There is no embedded flag character for enabling literal parsing.          </p>     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.LITERAL">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:LITERAL"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:DOTALL [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:DOTALL"/><a name="DOTALL"/><ul class="blockList"><li class="blockList"><h4>DOTALL</h4><pre>public static final int DOTALL</pre><div class="block">Enables dotall mode.<p> In dotall mode, the expression <tt>.</tt> matches any character, including a line terminator. By default this expression does not match line terminators.                      </p><p> Dotall mode can also be enabled via the embedded flag expression <tt>(?s)</tt>. (The <tt>s</tt> is a mnemonic for "single-line" mode, which is what this is called in Perl.)                           </p>  </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.DOTALL">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:DOTALL"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:UNICODE_CASE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:UNICODE_CASE"/><a name="UNICODE_CASE"/><ul class="blockList"><li class="blockList"><h4>UNICODE_CASE</h4><pre>public static final int UNICODE_CASE</pre><div class="block">Enables Unicode-aware case folding.<p> When this flag is specified then case-insensitive matching, when enabled by the <a href="../../../java/util/regex/Pattern.html#CASE_INSENSITIVE"><code>CASE_INSENSITIVE</code></a> flag, is done in a manner consistent with the Unicode Standard. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.                                       </p><p> Unicode-aware case folding can also be enabled via the embedded flag expression <tt>(?u)</tt>.            </p><p> Specifying this flag may impose a performance penalty.        </p>   </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.UNICODE_CASE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:UNICODE_CASE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CANON_EQ [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CANON_EQ"/><a name="CANON_EQ"/><ul class="blockList"><li class="blockList"><h4>CANON_EQ</h4><pre>public static final int CANON_EQ</pre><div class="block">Enables canonical equivalence.<p> When this flag is specified then two characters will be considered to match if, and only if, their full canonical decompositions match. The expression <tt>"a\u030A"</tt>, for example, will match the string <tt>"\u00E5"</tt> when this flag is specified. By default, matching does not take canonical equivalence into account.                                               </p><p> There is no embedded flag character for enabling canonical equivalence.          </p><p> Specifying this flag may impose a performance penalty.        </p>  </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.CANON_EQ">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:CANON_EQ"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:UNICODE_CHARACTER_CLASS [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:UNICODE_CHARACTER_CLASS"/><a name="UNICODE_CHARACTER_CLASS"/><ul class="blockListLast"><li class="blockList"><h4>UNICODE_CHARACTER_CLASS</h4><pre>public static final int UNICODE_CHARACTER_CLASS</pre><div class="block">Enables the Unicode version of <i>Predefined character classes  </i> and <i>POSIX character classes  </i>.<p> When this flag is specified then the (US-ASCII only) <i>Predefined character classes  </i> and <i>POSIX character classes  </i> are in conformance with <a href="http://www.unicode.org/reports/tr18/"><i>Unicode Technical Standard #18: Unicode Regular Expression      </i></a><i>Annex C: Compatibility Properties   </i>.                 </p><p> The UNICODE_CHARACTER_CLASS mode can also be enabled via the embedded flag expression <tt>(?U)</tt>.            </p><p> The flag implies UNICODE_CASE, that is, it enables Unicode-aware case folding.           </p><p> Specifying this flag may impose a performance penalty.        </p>       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../constant-values.html#java.util.regex.Pattern.UNICODE_CHARACTER_CLASS">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:UNICODE_CHARACTER_CLASS"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compile-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compile-java.lang.String-"/><a name="compile-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>compile</h4><pre>public static <a href="../../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> compile(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> regex)</pre><div class="block">Compiles the given regular expression into a pattern.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>regex</code> - The expression to be compiled       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the given regular expression compiled into a pattern       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/regex/PatternSyntaxException.html" title="class in java.util.regex">PatternSyntaxException</a></code> - If the expression's syntax is invalid        </dd>   </dl></li></ul> <a end_ctx_id="method:compile-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compile-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compile-java.lang.String-int-"/><a name="compile-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>compile</h4><pre>public static <a href="../../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> compile(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> regex,
                              int flags)</pre><div class="block">Compiles the given regular expression into a pattern with the given flags.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>regex</code> - The expression to be compiled       </dd><dd> <code>flags</code> - Match flags, a bit mask that may include <a href="../../../java/util/regex/Pattern.html#CASE_INSENSITIVE"><code>CASE_INSENSITIVE</code></a>, <a href="../../../java/util/regex/Pattern.html#MULTILINE"><code>MULTILINE</code></a>, <a href="../../../java/util/regex/Pattern.html#DOTALL"><code>DOTALL</code></a>, <a href="../../../java/util/regex/Pattern.html#UNICODE_CASE"><code>UNICODE_CASE</code></a>, <a href="../../../java/util/regex/Pattern.html#CANON_EQ"><code>CANON_EQ</code></a>, <a href="../../../java/util/regex/Pattern.html#UNIX_LINES"><code>UNIX_LINES</code></a>, <a href="../../../java/util/regex/Pattern.html#LITERAL"><code>LITERAL</code></a>, <a href="../../../java/util/regex/Pattern.html#UNICODE_CHARACTER_CLASS"><code>UNICODE_CHARACTER_CLASS</code></a> and <a href="../../../java/util/regex/Pattern.html#COMMENTS"><code>COMMENTS</code></a>                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the given regular expression compiled into a pattern with the given flags           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If bit values other than those corresponding to the defined match flags are set in <tt>flags</tt>                  </dd><dd> <code><a href="../../../java/util/regex/PatternSyntaxException.html" title="class in java.util.regex">PatternSyntaxException</a></code> - If the expression's syntax is invalid        </dd>   </dl></li></ul> <a end_ctx_id="method:compile-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pattern-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pattern--"/><a name="pattern--"/><ul class="blockList"><li class="blockList"><h4>pattern</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> pattern()</pre><div class="block">Returns the regular expression from which this pattern was compiled.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The source of this pattern    </dd> </dl></li></ul> <a end_ctx_id="method:pattern--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block"><p>Returns the string representation of this pattern. This is the regular expression from which this pattern was compiled.                 </p></div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The string representation of this pattern     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:matcher-java.lang.CharSequence- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:matcher-java.lang.CharSequence-"/><a name="matcher-java.lang.CharSequence-"/><ul class="blockList"><li class="blockList"><h4>matcher</h4><pre>public <a href="../../../java/util/regex/Matcher.html" title="class in java.util.regex">Matcher</a> matcher(<a href="../../../java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a> input)</pre><div class="block">Creates a matcher that will match the given input against this pattern.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>input</code> - The character sequence to be matched        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new matcher for this pattern     </dd>  </dl></li></ul> <a end_ctx_id="method:matcher-java.lang.CharSequence-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flags-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flags--"/><a name="flags--"/><ul class="blockList"><li class="blockList"><h4>flags</h4><pre>public int flags()</pre><div class="block">Returns this pattern's match flags.    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The match flags specified when this pattern was compiled        </dd> </dl></li></ul> <a end_ctx_id="method:flags--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:matches-java.lang.String-java.lang.CharSequence- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:matches-java.lang.String-java.lang.CharSequence-"/><a name="matches-java.lang.String-java.lang.CharSequence-"/><ul class="blockList"><li class="blockList"><h4>matches</h4><pre>public static boolean matches(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> regex,
                              <a href="../../../java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a> input)</pre><div class="block">Compiles the given regular expression and attempts to match the given input against it.<p> An invocation of this convenience method of the form         </p><blockquote><pre>
 Pattern.matches(regex, input);</pre></blockquote> behaves in exactly the same way as the expression<blockquote><pre>
 Pattern.compile(regex).matcher(input).matches()</pre></blockquote><p> If a pattern is to be used multiple times, compiling it once and reusing it will be more efficient than invoking this method each time.                         </p>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>regex</code> - The expression to be compiled       </dd><dd> <code>input</code> - The character sequence to be matched        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>whether or not the regular expression matches on the input         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/regex/PatternSyntaxException.html" title="class in java.util.regex">PatternSyntaxException</a></code> - If the expression's syntax is invalid        </dd>   </dl></li></ul> <a end_ctx_id="method:matches-java.lang.String-java.lang.CharSequence-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:split-java.lang.CharSequence-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:split-java.lang.CharSequence-int-"/><a name="split-java.lang.CharSequence-int-"/><ul class="blockList"><li class="blockList"><h4>split</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a>[] split(<a href="../../../java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a> input,
                      int limit)</pre><div class="block">Splits the given input sequence around matches of this pattern.<p> The array returned by this method contains each substring of the input sequence that is terminated by another subsequence that matches this pattern or is terminated by the end of the input sequence. The substrings in the array are in the order in which they occur in the input. If this pattern does not match any subsequence of the input then the resulting array has just one element, namely the input sequence in string form.                                                                           </p><p> When there is a positive-width match at the beginning of the input sequence then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring.                                        </p><p> The <tt>limit</tt> parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit <i>n</i> is greater than zero then the pattern will be applied at most <i>n</i> - 1 times, the array's length will be no greater than <i>n</i>, and the array's last entry will contain all input beyond the last matched delimiter. If <i>n</i> is non-positive then the pattern will be applied as many times as possible and the array can have any length. If <i>n</i> is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded.                                                                                                                </p><p> The input <tt>"boo:and:foo"</tt>, for example, yields the following results with these parameters:            </p><blockquote><table cellpadding="1" cellspacing="0" summary="Split examples showing regex, limit, and result"><tbody><tr><th align="left"><i>Regex    </i></th><th align="left"><i>Limit    </i></th><th align="left"><i>Result    </i></th></tr><tr><td align="center">:</td><td align="center">2</td><td><tt>{ "boo", "and:foo" }   </tt></td></tr><tr><td align="center">:</td><td align="center">5</td><td><tt>{ "boo", "and", "foo" }    </tt></td></tr><tr><td align="center">:</td><td align="center">-2</td><td><tt>{ "boo", "and", "foo" }    </tt></td></tr><tr><td align="center">o</td><td align="center">5</td><td><tt>{ "b", "", ":and:f", "", "" }      </tt></td></tr><tr><td align="center">o</td><td align="center">-2</td><td><tt>{ "b", "", ":and:f", "", "" }      </tt></td></tr><tr><td align="center">o</td><td align="center">0</td><td><tt>{ "b", "", ":and:f" }    </tt></td></tr></tbody></table></blockquote>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>input</code> - The character sequence to be split        </dd><dd> <code>limit</code> - The result threshold, as described above        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The array of strings computed by splitting the input around matches of this pattern             </dd>  </dl></li></ul> <a end_ctx_id="method:split-java.lang.CharSequence-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:split-java.lang.CharSequence- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:split-java.lang.CharSequence-"/><a name="split-java.lang.CharSequence-"/><ul class="blockList"><li class="blockList"><h4>split</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a>[] split(<a href="../../../java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a> input)</pre><div class="block">Splits the given input sequence around matches of this pattern.<p> This method works as if by invoking the two-argument <a href="../../../java/util/regex/Pattern.html#split-java.lang.CharSequence-int-"><code>split</code></a> method with the given input sequence and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array.                                 </p><p> The input <tt>"boo:and:foo"</tt>, for example, yields the following results with these expressions:            </p><blockquote><table cellpadding="1" cellspacing="0" summary="Split examples showing regex and result"><tbody><tr><th align="left"><i>Regex    </i></th><th align="left"><i>Result</i></th></tr><tr><td align="center">:</td><td><tt>{ "boo", "and", "foo" }    </tt></td></tr><tr><td align="center">o</td><td><tt>{ "b", "", ":and:f" }    </tt></td></tr></tbody></table></blockquote>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>input</code> - The character sequence to be split        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The array of strings computed by splitting the input around matches of this pattern             </dd>  </dl></li></ul> <a end_ctx_id="method:split-java.lang.CharSequence-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:quote-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:quote-java.lang.String-"/><a name="quote-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>quote</h4><pre>public static <a href="../../../java/lang/String.html" title="class in java.lang">String</a> quote(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> s)</pre><div class="block">Returns a literal pattern <code>String</code> for the specified <code>String</code>.<p>This method produces a <code>String</code> that can be used to create a <code>Pattern</code> that would match the string <code>s</code> as if it were a literal pattern.                         </p> Metacharacters or escape sequences in the input sequence will be given no special meaning.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - The string to be literalized       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A literal string replacement   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:quote-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:asPredicate-- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:asPredicate--"><span class="diff-html-added"/></a><a name="asPredicate--"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">asPredicate</span></h4><pre><span class="diff-html-added">public </span><a href="../../../java/util/function/Predicate.html" title="interface in java.util.function"><span class="diff-html-added">Predicate</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/lang/String.html" title="class in java.lang"><span class="diff-html-added">String</span></a><span class="diff-html-added">&gt; asPredicate()</span></pre><div class="block"><span class="diff-html-added">Creates</span> <span class="diff-html-added">a</span> <span class="diff-html-added">predicate</span> <span class="diff-html-added">which</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> <span class="diff-html-added">used</span> <span class="diff-html-added">to</span> <span class="diff-html-added">match</span> <span class="diff-html-added">a</span> <span class="diff-html-added">string.</span>          </div><dl> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">The</span> <span class="diff-html-added">predicate</span> <span class="diff-html-added">which</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> <span class="diff-html-added">used</span> <span class="diff-html-added">for</span> <span class="diff-html-added">matching</span> <span class="diff-html-added">on</span> <span class="diff-html-added">a</span> <span class="diff-html-added">string</span>          </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd>  </dl></li></ul> <a end_ctx_id="method:asPredicate--"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:splitAsStream-java.lang.CharSequence- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:splitAsStream-java.lang.CharSequence-"><span class="diff-html-added"/></a><a name="splitAsStream-java.lang.CharSequence-"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">splitAsStream</span></h4><pre><span class="diff-html-added">public </span><a href="../../../java/util/stream/Stream.html" title="interface in java.util.stream"><span class="diff-html-added">Stream</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/lang/String.html" title="class in java.lang"><span class="diff-html-added">String</span></a><span class="diff-html-added">&gt; splitAsStream(</span><a href="../../../java/lang/CharSequence.html" title="interface in java.lang"><span class="diff-html-added">CharSequence</span></a><span class="diff-html-added"> input)</span></pre><div class="block"><span class="diff-html-added">Creates</span> <span class="diff-html-added">a</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">from</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">input</span> <span class="diff-html-added">sequence</span> <span class="diff-html-added">around</span> <span class="diff-html-added">matches</span> <span class="diff-html-added">of</span> <span class="diff-html-added">this</span> <span class="diff-html-added">pattern.</span><p> <span class="diff-html-added">The</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">this</span> <span class="diff-html-added">method</span> <span class="diff-html-added">contains</span> <span class="diff-html-added">each</span> <span class="diff-html-added">substring</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">sequence</span> <span class="diff-html-added">that</span> <span class="diff-html-added">is</span> <span class="diff-html-added">terminated</span> <span class="diff-html-added">by</span> <span class="diff-html-added">another</span> <span class="diff-html-added">subsequence</span> <span class="diff-html-added">that</span> <span class="diff-html-added">matches</span> <span class="diff-html-added">this</span> <span class="diff-html-added">pattern</span> <span class="diff-html-added">or</span> <span class="diff-html-added">is</span> <span class="diff-html-added">terminated</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">end</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">sequence.</span> <span class="diff-html-added">The</span> <span class="diff-html-added">substrings</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">are</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">order</span> <span class="diff-html-added">in</span> <span class="diff-html-added">which</span> <span class="diff-html-added">they</span> <span class="diff-html-added">occur</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input.</span> <span class="diff-html-added">Trailing</span> <span class="diff-html-added">empty</span> <span class="diff-html-added">strings</span> <span class="diff-html-added">will</span> <span class="diff-html-added">be</span> <span class="diff-html-added">discarded</span> <span class="diff-html-added">and</span> <span class="diff-html-added">not</span> <span class="diff-html-added">encountered</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">stream.</span>                                                             </p><p> <span class="diff-html-added">If</span> <span class="diff-html-added">this</span> <span class="diff-html-added">pattern</span> <span class="diff-html-added">does</span> <span class="diff-html-added">not</span> <span class="diff-html-added">match</span> <span class="diff-html-added">any</span> <span class="diff-html-added">subsequence</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">then</span> <span class="diff-html-added">the</span> <span class="diff-html-added">resulting</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">has</span> <span class="diff-html-added">just</span> <span class="diff-html-added">one</span> <span class="diff-html-added">element,</span> <span class="diff-html-added">namely</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">sequence</span> <span class="diff-html-added">in</span> <span class="diff-html-added">string</span> <span class="diff-html-added">form.</span>                          </p><p> <span class="diff-html-added">When</span> <span class="diff-html-added">there</span> <span class="diff-html-added">is</span> <span class="diff-html-added">a</span> <span class="diff-html-added">positive-width</span> <span class="diff-html-added">match</span> <span class="diff-html-added">at</span> <span class="diff-html-added">the</span> <span class="diff-html-added">beginning</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">sequence</span> <span class="diff-html-added">then</span> <span class="diff-html-added">an</span> <span class="diff-html-added">empty</span> <span class="diff-html-added">leading</span> <span class="diff-html-added">substring</span> <span class="diff-html-added">is</span> <span class="diff-html-added">included</span> <span class="diff-html-added">at</span> <span class="diff-html-added">the</span> <span class="diff-html-added">beginning</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">stream.</span> <span class="diff-html-added">A</span> <span class="diff-html-added">zero-width</span> <span class="diff-html-added">match</span> <span class="diff-html-added">at</span> <span class="diff-html-added">the</span> <span class="diff-html-added">beginning</span> <span class="diff-html-added">however</span> <span class="diff-html-added">never</span> <span class="diff-html-added">produces</span> <span class="diff-html-added">such</span> <span class="diff-html-added">empty</span> <span class="diff-html-added">leading</span> <span class="diff-html-added">substring.</span>                                       </p><p> <span class="diff-html-added">If</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">sequence</span> <span class="diff-html-added">is</span> <span class="diff-html-added">mutable,</span> <span class="diff-html-added">it</span> <span class="diff-html-added">must</span> <span class="diff-html-added">remain</span> <span class="diff-html-added">constant</span> <span class="diff-html-added">during</span> <span class="diff-html-added">the</span> <span class="diff-html-added">execution</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">terminal</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">operation.</span> <span class="diff-html-added">Otherwise,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">result</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">terminal</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">operation</span> <span class="diff-html-added">is</span> <span class="diff-html-added">undefined.</span>                            </p>            </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">input</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">The</span> <span class="diff-html-added">character</span> <span class="diff-html-added">sequence</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">split</span>        </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">The</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">of</span> <span class="diff-html-added">strings</span> <span class="diff-html-added">computed</span> <span class="diff-html-added">by</span> <span class="diff-html-added">splitting</span> <span class="diff-html-added">the</span> <span class="diff-html-added">input</span> <span class="diff-html-added">around</span> <span class="diff-html-added">matches</span> <span class="diff-html-added">of</span> <span class="diff-html-added">this</span> <span class="diff-html-added">pattern</span>             </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../../java/util/regex/Pattern.html#split-java.lang.CharSequence-"><code><span class="diff-html-added">split(CharSequence)</span></code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:splitAsStream-java.lang.CharSequence-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>