<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Pack200 [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Pack200"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">Pack200</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">Transforms a JAR file to or from a packed stream in Pack200 format. Please refer to Network Transfer Format JSR 200 Specification at <a href="http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html">http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html</a><p> Typically the packer engine is used by application developers to deploy or host JAR files on a website. The unpacker engine is used by deployment applications to transform the byte-stream back to JAR format.                                  </p><p> Here is an example using packer and unpacker:<pre><code>
    import java.util.jar.Pack200;
    import java.util.jar.Pack200.*;
    ...
    // Create the Packer object
    Packer packer = Pack200.newPacker();

    // Initialize the state by setting the desired properties
    Map p = packer.properties();
    // take more time choosing codings for better compression
    p.put(Packer.EFFORT, "7");  // default is "5"
    // use largest-possible archive segments (&gt;10% better compression).
    p.put(Packer.SEGMENT_LIMIT, "-1");
    // reorder files for better compression.
    p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);
    // smear modification times to a single value.
    p.put(Packer.MODIFICATION_TIME, Packer.LATEST);
    // ignore all JAR deflation requests,
    // transmitting a single request to use "store" mode.
    p.put(Packer.DEFLATE_HINT, Packer.FALSE);
    // discard debug attributes
    p.put(Packer.CODE_ATTRIBUTE_PFX+"LineNumberTable", Packer.STRIP);
    // throw an error if an attribute is unrecognized
    p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);
    // pass one class file uncompressed:
    p.put(Packer.PASS_FILE_PFX+0, "mutants/Rogue.class");
    try {
        JarFile jarFile = new JarFile("/tmp/testref.jar");
        FileOutputStream fos = new FileOutputStream("/tmp/test.pack");
        // Call the packer
        packer.pack(jarFile, fos);
        jarFile.close();
        fos.close();

        File f = new File("/tmp/test.pack");
        FileOutputStream fostream = new FileOutputStream("/tmp/test.jar");
        JarOutputStream jostream = new JarOutputStream(fostream);
        Unpacker unpacker = Pack200.newUnpacker();
        // Call the unpacker
        unpacker.unpack(f, jostream);
        // Must explicitly close the output.
        jostream.close();
    } catch (IOException ioe) {
        ioe.printStackTrace();
    }
 </code></pre>        </p><p> A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers. The deployment applications can use "Accept-Encoding=pack200-gzip". This indicates to the server that the client application desires a version of the file encoded with Pack200 and further compressed with gzip. Please refer to <a href="http://download.oracle.com/javase/7/docs/technotes/guides/deployment/deployment-guide/pack200.html">Java Deployment Guide  </a> for more details and techniques.                                                   </p><p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor or method in this class will cause a <a href="../../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> to be thrown.                      </p>                       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Pack200"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newPacker-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newPacker--"/><a name="newPacker--"/><ul class="blockList"><li class="blockList"><h4>newPacker</h4><pre>public static <a href="../../../java/util/jar/Pack200.Packer.html" title="interface in java.util.jar">Pack200.Packer</a> newPacker()</pre><div class="block">Obtain new instance of a class that implements Packer.<ul><li><p>If the system property <tt>java.util.jar.Pack200.Packer</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated. If this process fails then an unspecified error is thrown.                                         </p></li><li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.                      </p></li></ul><p>Note: The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.                                     </p>        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A newly allocated Packer engine.    </dd> </dl></li></ul> <a end_ctx_id="method:newPacker--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newUnpacker-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newUnpacker--"/><a name="newUnpacker--"/><ul class="blockListLast"><li class="blockList"><h4>newUnpacker</h4><pre>public static <a href="../../../java/util/jar/Pack200.Unpacker.html" title="interface in java.util.jar">Pack200.Unpacker</a> newUnpacker()</pre><div class="block">Obtain new instance of a class that implements Unpacker.<ul><li><p>If the system property <tt>java.util.jar.Pack200.Unpacker</tt> is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated. If this process fails then an unspecified error is thrown.                                         </p></li><li><p>If an implementation has not been specified with the system property, then the system-default implementation class is instantiated, and the result is returned.                      </p></li></ul><p>Note: The returned object is not guaranteed to operate correctly if multiple threads use it at the same time. A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock.                                     </p>        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A newly allocated Unpacker engine.    </dd> </dl></li></ul> <a end_ctx_id="method:newUnpacker--"/>  </td></tr></table></td></tr></table></diff></diffreport>