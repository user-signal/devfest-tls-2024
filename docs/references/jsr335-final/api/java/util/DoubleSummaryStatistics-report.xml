<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:DoubleSummaryStatistics [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:DoubleSummaryStatistics"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/util/function/DoubleConsumer.html" title="interface in java.util.function">DoubleConsumer</a> </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">DoubleSummaryStatistics</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/util/function/DoubleConsumer.html" title="interface in java.util.function">DoubleConsumer</a></pre><div class="block">A state object for collecting statistics such as count, min, max, sum, and average.<p>This class is designed to work with (though does not require) <a href="../../java/util/stream/package-summary.html">streams</a>. For example, you can compute summary statistics on a stream of doubles with:<pre> 
<code>
 DoubleSummaryStatistics stats = doubleStream.collect(DoubleSummaryStatistics::new,
                                                      DoubleSummaryStatistics::accept,
                                                      DoubleSummaryStatistics::combine);
 </code></pre>                        </p><p> <code>DoubleSummaryStatistics</code> can be used as a <a href="../../java/util/stream/Stream.html#collect-java.util.stream.Collector-">reduction</a> target for a <a href="../../java/util/stream/Stream.html" title="interface in java.util.stream">stream</a>. For example:<pre> 
<code>
 DoubleSummaryStatistics stats = people.stream()
     .collect(Collectors.summarizingDouble(Person::getWeight));
</code></pre> This computes, in a single pass, the count of people, as well as the minimum, maximum, sum, and average of their weights.                                   </p>             </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>This implementation is not thread safe. However, it is safe to use <a href="../../java/util/stream/Collectors.html#summarizingDouble-java.util.function.ToDoubleFunction-"><code>Collectors.toDoubleStatistics()</code></a> on a parallel stream, because the parallel implementation of <a href="../../java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-"><code>Stream.collect()</code></a> provides the necessary partitioning, isolation, and merging of results for safe and efficient parallel execution.                                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:DoubleSummaryStatistics"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:DoubleSummaryStatistics-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:DoubleSummaryStatistics--"/><a name="DoubleSummaryStatistics--"/><ul class="blockListLast"><li class="blockList"><h4>DoubleSummaryStatistics</h4><pre>public DoubleSummaryStatistics()</pre><div class="block">Construct an empty instance with zero count, zero sum, <code>Double.POSITIVE_INFINITY</code> min, <code>Double.NEGATIVE_INFINITY</code> max and zero average.               </div></li></ul> <a end_ctx_id="constructor:DoubleSummaryStatistics--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:accept-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:accept-double-"/><a name="accept-double-"/><ul class="blockList"><li class="blockList"><h4>accept</h4><pre>public void accept(double value)</pre><div class="block">Records another value into the summary information.      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/function/DoubleConsumer.html#accept-double-">accept</a></code> in interface <code><a href="../../java/util/function/DoubleConsumer.html" title="interface in java.util.function">DoubleConsumer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the input value     </dd>  </dl></li></ul> <a end_ctx_id="method:accept-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:combine-java.util.DoubleSummaryStatistics- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:combine-java.util.DoubleSummaryStatistics-"/><a name="combine-java.util.DoubleSummaryStatistics-"/><ul class="blockList"><li class="blockList"><h4>combine</h4><pre>public void combine(<a href="../../java/util/DoubleSummaryStatistics.html" title="class in java.util">DoubleSummaryStatistics</a> other)</pre><div class="block">Combines the state of another <code>DoubleSummaryStatistics</code> into this one.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - another <code>DoubleSummaryStatistics</code>    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>other</code> is null      </dd>  </dl></li></ul> <a end_ctx_id="method:combine-java.util.DoubleSummaryStatistics-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getCount--"/><a name="getCount--"/><ul class="blockList"><li class="blockList"><h4>getCount</h4><pre>public final long getCount()</pre><div class="block">Return the count of values recorded.     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the count of values   </dd> </dl></li></ul> <a end_ctx_id="method:getCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSum-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSum--"/><a name="getSum--"/><ul class="blockList"><li class="blockList"><h4>getSum</h4><pre>public final double getSum()</pre><div class="block">Returns the sum of values recorded, or zero if no values have been recorded. If any recorded value is a NaN or the sum is at any point a NaN then the sum will be NaN.<p> The value of a floating-point sum is a function both of the input values as well as the order of addition operations. The order of addition operations of this method is intentionally not defined to allow for implementation flexibility to improve the speed and accuracy of the computed result. In particular, this method may be implemented using compensated summation or other technique to reduce the error bound in the numerical sum compared to a simple summation of <code>double</code> values.                                                                               </p>                                   </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>Values sorted by increasing absolute magnitude tend to yield more accurate results.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the sum of values, or zero if none       </dd>  </dl></li></ul> <a end_ctx_id="method:getSum--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getMin-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getMin--"/><a name="getMin--"/><ul class="blockList"><li class="blockList"><h4>getMin</h4><pre>public final double getMin()</pre><div class="block">Returns the minimum recorded value, <code>Double.NaN</code> if any recorded value was NaN or <code>Double.POSITIVE_INFINITY</code> if no values were recorded. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero.                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the minimum recorded value, <code>Double.NaN</code> if any recorded value was NaN or <code>Double.POSITIVE_INFINITY</code> if no values were recorded                 </dd> </dl></li></ul> <a end_ctx_id="method:getMin--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getMax-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getMax--"/><a name="getMax--"/><ul class="blockList"><li class="blockList"><h4>getMax</h4><pre>public final double getMax()</pre><div class="block">Returns the maximum recorded value, <code>Double.NaN</code> if any recorded value was NaN or <code>Double.NEGATIVE_INFINITY</code> if no values were recorded. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero.                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the maximum recorded value, <code>Double.NaN</code> if any recorded value was NaN or <code>Double.NEGATIVE_INFINITY</code> if no values were recorded                 </dd> </dl></li></ul> <a end_ctx_id="method:getMax--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getAverage-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getAverage--"/><a name="getAverage--"/><ul class="blockList"><li class="blockList"><h4>getAverage</h4><pre>public final double getAverage()</pre><div class="block">Returns the arithmetic mean of values recorded, or zero if no values have been recorded. If any recorded value is a NaN or the sum is at any point a NaN then the average will be code NaN.<p>The average returned can vary depending upon the order in which values are recorded. This method may be implemented using compensated summation or other technique to reduce the error bound in the <a href="../../java/util/DoubleSummaryStatistics.html#getSum--"><code>numerical sum </code></a> used to compute the average.                                     </p>                                     </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>Values sorted by increasing absolute magnitude tend to yield more accurate results.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the arithmetic mean of values, or zero if none        </dd>  </dl></li></ul> <a end_ctx_id="method:getAverage--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of the object. In general, the <code>toString</code> method returns a string that "textually represents" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method.<p> The <code>toString</code> method for class <code>Object</code> returns a string consisting of the name of the class of which the object is an instance, the at-sign character `<code>@</code>', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:                                                    </p><blockquote><pre>
 getClass().getName() + '@' + Integer.toHexString(hashCode())
 </pre></blockquote> Returns a non-empty string representation of this object suitable for debugging. The exact presentation format is unspecified and may vary between implementations and versions.                                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the object.     </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>