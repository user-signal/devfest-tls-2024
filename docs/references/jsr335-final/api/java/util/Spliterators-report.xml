<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Spliterators [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Spliterators"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public final class <span class="typeNameLabel">Spliterators</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">Static classes and methods for operating on or creating instances of <a href="../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> and its primitive specializations <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util"><code>Spliterator.OfInt</code></a>, <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util"><code>Spliterator.OfLong</code></a>, and <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util"><code>Spliterator.OfDouble</code></a>.                   </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Spliterators"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptySpliterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptySpliterator--"/><a name="emptySpliterator--"/><ul class="blockList"><li class="blockList"><h4>emptySpliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; emptySpliterator()</pre><div class="block">Creates an empty <code>Spliterator</code><p>The empty spliterator reports <a href="../../java/util/Spliterator.html#SIZED"><code>Spliterator.SIZED</code></a> and <a href="../../java/util/Spliterator.html#SUBSIZED"><code>Spliterator.SUBSIZED</code></a>. Calls to <a href="../../java/util/Spliterator.html#trySplit--"><code>Spliterator.trySplit()</code></a> always return <code>null</code>.            </p>   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An empty spliterator  </dd>  </dl></li></ul> <a end_ctx_id="method:emptySpliterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyIntSpliterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyIntSpliterator--"/><a name="emptyIntSpliterator--"/><ul class="blockList"><li class="blockList"><h4>emptyIntSpliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> emptyIntSpliterator()</pre><div class="block">Creates an empty <code>Spliterator.OfInt</code><p>The empty spliterator reports <a href="../../java/util/Spliterator.html#SIZED"><code>Spliterator.SIZED</code></a> and <a href="../../java/util/Spliterator.html#SUBSIZED"><code>Spliterator.SUBSIZED</code></a>. Calls to <a href="../../java/util/Spliterator.html#trySplit--"><code>Spliterator.trySplit()</code></a> always return <code>null</code>.            </p>   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An empty spliterator  </dd> </dl></li></ul> <a end_ctx_id="method:emptyIntSpliterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyLongSpliterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyLongSpliterator--"/><a name="emptyLongSpliterator--"/><ul class="blockList"><li class="blockList"><h4>emptyLongSpliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> emptyLongSpliterator()</pre><div class="block">Creates an empty <code>Spliterator.OfLong</code><p>The empty spliterator reports <a href="../../java/util/Spliterator.html#SIZED"><code>Spliterator.SIZED</code></a> and <a href="../../java/util/Spliterator.html#SUBSIZED"><code>Spliterator.SUBSIZED</code></a>. Calls to <a href="../../java/util/Spliterator.html#trySplit--"><code>Spliterator.trySplit()</code></a> always return <code>null</code>.            </p>   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An empty spliterator  </dd> </dl></li></ul> <a end_ctx_id="method:emptyLongSpliterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyDoubleSpliterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyDoubleSpliterator--"/><a name="emptyDoubleSpliterator--"/><ul class="blockList"><li class="blockList"><h4>emptyDoubleSpliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> emptyDoubleSpliterator()</pre><div class="block">Creates an empty <code>Spliterator.OfDouble</code><p>The empty spliterator reports <a href="../../java/util/Spliterator.html#SIZED"><code>Spliterator.SIZED</code></a> and <a href="../../java/util/Spliterator.html#SUBSIZED"><code>Spliterator.SUBSIZED</code></a>. Calls to <a href="../../java/util/Spliterator.html#trySplit--"><code>Spliterator.trySplit()</code></a> always return <code>null</code>.            </p>   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An empty spliterator  </dd> </dl></li></ul> <a end_ctx_id="method:emptyDoubleSpliterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.lang.Object:A-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-java.lang.Object:A-int-"/><a name="spliterator-java.lang.Object:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] array,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-T:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(Object[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-T:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(Object[])</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:spliterator-java.lang.Object:A-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-java.lang.Object:A-int-"/><a name="spliterator-java.lang.Object:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] array,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(Object[])</code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(Object[])</code> </dd>     </dl></li></ul> <a end_ctx_id="method:spliterator-java.lang.Object:A-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.lang.Object:A-int-"/><a name="spliterator-java.lang.Object:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] array,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-T:A-"><code>Arrays.spliterator(Object[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-T:A-"><code>Arrays.spliterator(Object[])</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:spliterator-java.lang.Object:A-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.lang.Object:A-int-int-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-java.lang.Object:A-int-int-int-"/><a name="spliterator-java.lang.Object:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] array,
                                             int fromIndex,
                                             int toIndex,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-T:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(Object[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-T:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(Object[], int, int)  </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:spliterator-java.lang.Object:A-int-int-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-java.lang.Object:A-int-int-int-"/><a name="spliterator-java.lang.Object:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] array,
                                             int fromIndex,
                                             int toIndex,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(Object[])</code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(Object[], int, int)  </code> </dd>     </dl></li></ul> <a end_ctx_id="method:spliterator-java.lang.Object:A-int-int-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.lang.Object:A-int-int-int-"/><a name="spliterator-java.lang.Object:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] array,
                                             int fromIndex,
                                             int toIndex,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-T:A-"><code>Arrays.spliterator(Object[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-T:A-int-int-"><code>Arrays.spliterator(Object[], int, int)  </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:spliterator-java.lang.Object:A-int-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-int:A-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-int:A-int-"/><a name="spliterator-int:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(int[] array,
                                            int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-int:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(int[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-int:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(int[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-int:A-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-int:A-int-"/><a name="spliterator-int:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(int[] array,
                                            int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(int[])</code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(int[])</code> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-int:A-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-int:A-int-"/><a name="spliterator-int:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(int[] array,
                                            int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-int:A-"><code>Arrays.spliterator(int[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-int:A-"><code>Arrays.spliterator(int[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-int:A-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-int:A-int-int-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-int:A-int-int-int-"/><a name="spliterator-int:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(int[] array,
                                            int fromIndex,
                                            int toIndex,
                                            int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-int:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(int[], int, int)  </code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-int:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(int[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-int:A-int-int-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-int:A-int-int-int-"/><a name="spliterator-int:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(int[] array,
                                            int fromIndex,
                                            int toIndex,
                                            int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(int[], int, int)  </code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(int[], int, int)  </code> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-int:A-int-int-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-int:A-int-int-int-"/><a name="spliterator-int:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(int[] array,
                                            int fromIndex,
                                            int toIndex,
                                            int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-int:A-int-int-"><code>Arrays.spliterator(int[], int, int)  </code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-int:A-int-int-"><code>Arrays.spliterator(int[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-int:A-int-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-long:A-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-long:A-int-"/><a name="spliterator-long:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(long[] array,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-long:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(long[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-long:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(long[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-long:A-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-long:A-int-"/><a name="spliterator-long:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(long[] array,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(long[])</code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(long[])</code> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-long:A-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-long:A-int-"/><a name="spliterator-long:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(long[] array,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-long:A-"><code>Arrays.spliterator(long[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-long:A-"><code>Arrays.spliterator(long[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-long:A-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-long:A-int-int-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-long:A-int-int-int-"/><a name="spliterator-long:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(long[] array,
                                             int fromIndex,
                                             int toIndex,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(long[], int, int)  </code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify <code>IMMUTABLE</code>; if the array data is considered to have an an encounter order, specify <code>ORDERED</code>). The method <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(long[], int, int)  </code></a> can often be used instead, which returns a spliterator that reports <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.                                                                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(long[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-long:A-int-int-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-long:A-int-int-int-"/><a name="spliterator-long:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(long[] array,
                                             int fromIndex,
                                             int toIndex,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(long[], int, int)  </code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify <code>IMMUTABLE</code>; if the array data is considered to have an an encounter order, specify <code>ORDERED</code>). The method <code>Arrays#spliterator(long[], int, int)  </code> can often be used instead, which returns a spliterator that reports <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.                                                                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(long[], int, int)  </code> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-long:A-int-int-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-long:A-int-int-int-"/><a name="spliterator-long:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(long[] array,
                                             int fromIndex,
                                             int toIndex,
                                             int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code>Arrays.spliterator(long[], int, int)  </code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify <code>IMMUTABLE</code>; if the array data is considered to have an an encounter order, specify <code>ORDERED</code>). The method <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code>Arrays.spliterator(long[], int, int)  </code></a> can often be used instead, which returns a spliterator that reports <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.                                                                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code>Arrays.spliterator(long[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-long:A-int-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-double:A-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-double:A-int-"/><a name="spliterator-double:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(double[] array,
                                               int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-double:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(double[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-double:A-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(double[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-double:A-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-double:A-int-"/><a name="spliterator-double:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(double[] array,
                                               int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(double[])</code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(double[])</code> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-double:A-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-double:A-int-"/><a name="spliterator-double:A-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(double[] array,
                                               int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> covering the elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-double:A-"><code>Arrays.spliterator(double[])</code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-double:A-"><code>Arrays.spliterator(double[])</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-double:A-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-double:A-int-int-int- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator-double:A-int-int-int-"/><a name="spliterator-double:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(double[] array,
                                               int fromIndex,
                                               int toIndex,
                                               int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-double:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(double[], int, int)  </code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify <code>IMMUTABLE</code>; if the array data is considered to have an an encounter order, specify <code>ORDERED</code>). The method <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(long[], int, int)  </code></a> can often be used instead, which returns a spliterator that reports <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.                                                                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-double:A-int-int-"><code><span class="diff-html-removed">Arrays#spliterator</span><span class="diff-html-added">Arrays.spliterator</span>(double[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-double:A-int-int-int-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator-double:A-int-int-int-"/><a name="spliterator-double:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(double[] array,
                                               int fromIndex,
                                               int toIndex,
                                               int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <code>Arrays#spliterator(double[], int, int)  </code>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify <code>IMMUTABLE</code>; if the array data is considered to have an an encounter order, specify <code>ORDERED</code>). The method <code>Arrays#spliterator(long[], int, int)  </code> can often be used instead, which returns a spliterator that reports <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.                                                                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <code>Arrays#spliterator(double[], int, int)  </code> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-double:A-int-int-int-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-double:A-int-int-int-"/><a name="spliterator-double:A-int-int-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(double[] array,
                                               int fromIndex,
                                               int toIndex,
                                               int additionalCharacteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> covering a range of elements of a given array, using a customized set of spliterator characteristics.<p>This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use <a href="../../java/util/Arrays.html#spliterator-double:A-int-int-"><code>Arrays.spliterator(double[], int, int)  </code></a>.                                       </p><p>The returned spliterator always reports the characteristics <code>SIZED</code> and <code>SUBSIZED</code>. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify <code>IMMUTABLE</code>; if the array data is considered to have an an encounter order, specify <code>ORDERED</code>). The method <a href="../../java/util/Arrays.html#spliterator-long:A-int-int-"><code>Arrays.spliterator(long[], int, int)  </code></a> can often be used instead, which returns a spliterator that reports <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.                                                                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>array</code> - The array, assumed to be unmodified during use          </dd><dd> <code>fromIndex</code> - The least index (inclusive) to cover        </dd><dd> <code>toIndex</code> - One past the greatest index to cover         </dd><dd> <code>additionalCharacteristics</code> - Additional spliterator characteristics of this spliterator's source or elements beyond <code>SIZED</code> and <code>SUBSIZED</code> which are are always reported                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator for an array    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given array is <code>null</code>        </dd><dd> <code><a href="../../java/lang/ArrayIndexOutOfBoundsException.html" title="class in java.lang">ArrayIndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, <code>toIndex</code> is less than <code>fromIndex</code>, or <code>toIndex</code> is greater than the array size                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#spliterator-double:A-int-int-"><code>Arrays.spliterator(double[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-double:A-int-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.util.Collection-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.util.Collection-int-"/><a name="spliterator-java.util.Collection-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends T&gt; c,
                                             int characteristics)</pre><div class="block">Creates a <code>Spliterator</code> using the given collection's <a href="../../java/util/Collection.html#iterator--"><code>Collection.iterator()</code></a> as the source of elements, and reporting its <a href="../../java/util/Collection.html#size--"><code>Collection.size()</code></a> as its initial size.<p>The spliterator is <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the collection's iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p>                    </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - The collection    </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements. The characteristics <code>SIZED</code> and <code>SUBSIZED</code> are additionally reported unless <code>CONCURRENT</code> is supplied.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given collection is <code>null</code>        </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-java.util.Collection-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.util.Iterator-long-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.util.Iterator-long-int-"/><a name="spliterator-java.util.Iterator-long-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliterator(<a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;? extends T&gt; iterator,
                                             long size,
                                             int characteristics)</pre><div class="block">Creates a <code>Spliterator</code> using a given <code>Iterator</code> as the source of elements, and with a given initially reported size.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.                                            </p>                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>size</code> - The number of elements in the source, to be reported as initial <code>estimateSize</code>               </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements. The characteristics <code>SIZED</code> and <code>SUBSIZED</code> are additionally reported unless <code>CONCURRENT</code> is supplied.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>    </dl></li></ul> <a end_ctx_id="method:spliterator-java.util.Iterator-long-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliteratorUnknownSize-java.util.Iterator-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliteratorUnknownSize-java.util.Iterator-int-"/><a name="spliteratorUnknownSize-java.util.Iterator-int-"/><ul class="blockList"><li class="blockList"><h4>spliteratorUnknownSize</h4><pre>public static &lt;T&gt; <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; spliteratorUnknownSize(<a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;? extends T&gt; iterator,
                                                        int characteristics)</pre><div class="block">Creates a <code>Spliterator</code> using a given <code>Iterator</code> as the source of elements, with no initial size estimate.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.                           </p>                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements (<code>SIZED</code> and <code>SUBSIZED</code>, if supplied, are ignored and are not reported.)                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>    </dl></li></ul> <a end_ctx_id="method:spliteratorUnknownSize-java.util.Iterator-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.util.PrimitiveIterator.OfInt-long-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.util.PrimitiveIterator.OfInt-long-int-"/><a name="spliterator-java.util.PrimitiveIterator.OfInt-long-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator(<a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a> iterator,
                                            long size,
                                            int characteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> using a given <code>IntStream.IntIterator</code> as the source of elements, and with a given initially reported size.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.                                            </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>size</code> - The number of elements in the source, to be reported as initial <code>estimateSize</code>.               </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements. The characteristics <code>SIZED</code> and <code>SUBSIZED</code> are additionally reported unless <code>CONCURRENT</code> is supplied.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:spliterator-java.util.PrimitiveIterator.OfInt-long-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfInt-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfInt-int-"/><a name="spliteratorUnknownSize-java.util.PrimitiveIterator.OfInt-int-"/><ul class="blockList"><li class="blockList"><h4>spliteratorUnknownSize</h4><pre>public static <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliteratorUnknownSize(<a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a> iterator,
                                                       int characteristics)</pre><div class="block">Creates a <code>Spliterator.OfInt</code> using a given <code>IntStream.IntIterator</code> as the source of elements, with no initial size estimate.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.                           </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements (<code>SIZED</code> and <code>SUBSIZED</code>, if supplied, are ignored and are not reported.)                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfInt-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.util.PrimitiveIterator.OfLong-long-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.util.PrimitiveIterator.OfLong-long-int-"/><a name="spliterator-java.util.PrimitiveIterator.OfLong-long-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator(<a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a> iterator,
                                             long size,
                                             int characteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> using a given <code>LongStream.LongIterator</code> as the source of elements, and with a given initially reported size.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.                                            </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>size</code> - The number of elements in the source, to be reported as initial <code>estimateSize</code>.               </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements. The characteristics <code>SIZED</code> and <code>SUBSIZED</code> are additionally reported unless <code>CONCURRENT</code> is supplied.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:spliterator-java.util.PrimitiveIterator.OfLong-long-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfLong-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfLong-int-"/><a name="spliteratorUnknownSize-java.util.PrimitiveIterator.OfLong-int-"/><ul class="blockList"><li class="blockList"><h4>spliteratorUnknownSize</h4><pre>public static <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliteratorUnknownSize(<a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a> iterator,
                                                        int characteristics)</pre><div class="block">Creates a <code>Spliterator.OfLong</code> using a given <code>LongStream.LongIterator</code> as the source of elements, with no initial size estimate.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.                           </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements (<code>SIZED</code> and <code>SUBSIZED</code>, if supplied, are ignored and are not reported.)                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfLong-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-java.util.PrimitiveIterator.OfDouble-long-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator-java.util.PrimitiveIterator.OfDouble-long-int-"/><a name="spliterator-java.util.PrimitiveIterator.OfDouble-long-int-"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator(<a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a> iterator,
                                               long size,
                                               int characteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> using a given <code>DoubleStream.DoubleIterator</code> as the source of elements, and with a given initially reported size.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.                                            </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>size</code> - The number of elements in the source, to be reported as initial <code>estimateSize</code>               </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements. The characteristics <code>SIZED</code> and <code>SUBSIZED</code> are additionally reported unless <code>CONCURRENT</code> is supplied.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:spliterator-java.util.PrimitiveIterator.OfDouble-long-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfDouble-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfDouble-int-"/><a name="spliteratorUnknownSize-java.util.PrimitiveIterator.OfDouble-int-"/><ul class="blockList"><li class="blockList"><h4>spliteratorUnknownSize</h4><pre>public static <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliteratorUnknownSize(<a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a> iterator,
                                                          int characteristics)</pre><div class="block">Creates a <code>Spliterator.OfDouble</code> using a given <code>DoubleStream.DoubleIterator</code> as the source of elements, with no initial size estimate.<p>The spliterator is not <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits the <em>fail-fast</em> properties of the iterator, and implements <code>trySplit</code> to permit limited parallelism.                  </p><p>Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.                           </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>iterator</code> - The iterator for the source       </dd><dd> <code>characteristics</code> - Characteristics of this spliterator's source or elements (<code>SIZED</code> and <code>SUBSIZED</code>, if supplied, are ignored and are not reported.)                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A spliterator from an iterator    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given iterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:spliteratorUnknownSize-java.util.PrimitiveIterator.OfDouble-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-java.util.Spliterator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator-java.util.Spliterator-"/><a name="iterator-java.util.Spliterator-"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt; iterator(<a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;? extends T&gt; spliterator)</pre><div class="block">Creates an <code>Iterator</code> from a <code>Spliterator</code>.<p>Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.                        </p>     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of elements     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>spliterator</code> - The spliterator    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An iterator </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given spliterator is <code>null</code>        </dd>    </dl></li></ul> <a end_ctx_id="method:iterator-java.util.Spliterator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-java.util.Spliterator.OfInt- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator-java.util.Spliterator.OfInt-"/><a name="iterator-java.util.Spliterator.OfInt-"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public static <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a> iterator(<a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a> spliterator)</pre><div class="block">Creates an <code>PrimitiveIterator.OfInt</code> from a <code>Spliterator.OfInt</code>.<p>Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.                        </p>     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>spliterator</code> - The spliterator    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An iterator </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given spliterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:iterator-java.util.Spliterator.OfInt-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-java.util.Spliterator.OfLong- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator-java.util.Spliterator.OfLong-"/><a name="iterator-java.util.Spliterator.OfLong-"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public static <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a> iterator(<a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a> spliterator)</pre><div class="block">Creates an <code>PrimitiveIterator.OfLong</code> from a <code>Spliterator.OfLong</code>.<p>Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.                        </p>     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>spliterator</code> - The spliterator    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An iterator </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given spliterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:iterator-java.util.Spliterator.OfLong-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-java.util.Spliterator.OfDouble- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator-java.util.Spliterator.OfDouble-"/><a name="iterator-java.util.Spliterator.OfDouble-"/><ul class="blockListLast"><li class="blockList"><h4>iterator</h4><pre>public static <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a> iterator(<a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a> spliterator)</pre><div class="block">Creates an <code>PrimitiveIterator.OfDouble</code> from a <code>Spliterator.OfDouble</code>.<p>Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.                        </p>     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>spliterator</code> - The spliterator    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An iterator </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the given spliterator is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:iterator-java.util.Spliterator.OfDouble-"/>  </td></tr></table></td></tr></table></diff></diffreport>