<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Timer [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Timer"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">Timer</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">A facility for threads to schedule tasks for future execution in a background thread. Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals.<p>Corresponding to each <tt>Timer</tt> object is a single background thread that is used to execute all of the timer's tasks, sequentially. Timer tasks should complete quickly. If a timer task takes excessive time to complete, it "hogs" the timer's task execution thread. This can, in turn, delay the execution of subsequent tasks, which may "bunch up" and execute in rapid succession when (and if) the offending task finally completes.                                                                    </p><p>After the last live reference to a <tt>Timer</tt> object goes away <i>and</i> all outstanding tasks have completed execution, the timer's task execution thread terminates gracefully (and becomes subject to garbage collection). However, this can take arbitrarily long to occur. By default, the task execution thread does not run as a <i>daemon thread </i>, so it is capable of keeping an application from terminating. If a caller wants to terminate a timer's task execution thread rapidly, the caller should invoke the timer's <tt>cancel</tt> method.                                                                                </p><p>If the timer's task execution thread terminates unexpectedly, for example, because its <tt>stop</tt> method is invoked, any further attempt to schedule a task on the timer will result in an <tt>IllegalStateException</tt>, as if the timer's <tt>cancel</tt> method had been invoked.                                       </p><p>This class is thread-safe: multiple threads can share a single <tt>Timer</tt> object without the need for external synchronization.                 </p><p>This class does <i>not</i> offer real-time guarantees: it schedules tasks using the <tt>Object.wait(long)</tt> method.             </p><p>Java 5.0 introduced the <code>java.util.concurrent</code> package and one of the concurrency utilities therein is the <a href="../../java/util/concurrent/ScheduledThreadPoolExecutor.html" title="class in java.util.concurrent"><code>ScheduledThreadPoolExecutor</code></a> which is a thread pool for repeatedly executing tasks at a given rate or delay. It is effectively a more versatile replacement for the <code>Timer</code>/<code>TimerTask</code> combination, as it allows multiple service threads, accepts various time units, and doesn't require subclassing <code>TimerTask</code> (just implement <code>Runnable</code>). Configuring <code>ScheduledThreadPoolExecutor</code> with one thread makes it equivalent to <code>Timer</code>.                                                                     </p><p>Implementation note: This class scales to large numbers of concurrently scheduled tasks (thousands should present no problem). Internally, it uses a binary heap to represent its task queue, so the cost to schedule a task is O(log n), where n is the number of concurrently scheduled tasks.                                              </p><p>Implementation note: All constructors start a timer thread.       </p>                           </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/TimerTask.html" title="class in java.util"><code>TimerTask</code></a>, <a href="../../java/lang/Object.html#wait-long-"><code>Object.wait(long)</code></a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Timer"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Timer-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Timer--"/><a name="Timer--"/><ul class="blockList"><li class="blockList"><h4>Timer</h4><pre>public Timer()</pre><div class="block">Creates a new timer. The associated thread does <i>not</i><a href="../../java/lang/Thread.html#setDaemon-boolean-">run as a daemon   </a>.        </div></li></ul> <a end_ctx_id="constructor:Timer--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Timer-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Timer-boolean-"/><a name="Timer-boolean-"/><ul class="blockList"><li class="blockList"><h4>Timer</h4><pre>public Timer(boolean isDaemon)</pre><div class="block">Creates a new timer whose associated thread may be specified to <a href="../../java/lang/Thread.html#setDaemon-boolean-">run as a daemon   </a>. A daemon thread is called for if the timer will be used to schedule repeating "maintenance activities", which must be performed as long as the application is running, but should not prolong the lifetime of the application.                                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>isDaemon</code> - true if the associated thread should run as a daemon.            </dd> </dl></li></ul> <a end_ctx_id="constructor:Timer-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Timer-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Timer-java.lang.String-"/><a name="Timer-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Timer</h4><pre>public Timer(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block">Creates a new timer whose associated thread has the specified name. The associated thread does <i>not</i><a href="../../java/lang/Thread.html#setDaemon-boolean-">run as a daemon   </a>.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the associated thread        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>name</code> is null      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:Timer-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Timer-java.lang.String-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Timer-java.lang.String-boolean-"/><a name="Timer-java.lang.String-boolean-"/><ul class="blockListLast"><li class="blockList"><h4>Timer</h4><pre>public Timer(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name,
             boolean isDaemon)</pre><div class="block">Creates a new timer whose associated thread has the specified name, and may be specified to <a href="../../java/lang/Thread.html#setDaemon-boolean-">run as a daemon   </a>.                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the associated thread        </dd><dd> <code>isDaemon</code> - true if the associated thread should run as a daemon            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>name</code> is null      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="constructor:Timer-java.lang.String-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:schedule-java.util.TimerTask-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:schedule-java.util.TimerTask-long-"/><a name="schedule-java.util.TimerTask-long-"/><ul class="blockList"><li class="blockList"><h4>schedule</h4><pre>public void schedule(<a href="../../java/util/TimerTask.html" title="class in java.util">TimerTask</a> task,
                     long delay)</pre><div class="block">Schedules the specified task for execution after the specified delay.         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - task to be scheduled.      </dd><dd> <code>delay</code> - delay in milliseconds before task is to be executed.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <tt>delay</tt> is negative, or <tt>delay + System.currentTimeMillis()  </tt> is negative.          </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>task</code> is null      </dd>  </dl></li></ul> <a end_ctx_id="method:schedule-java.util.TimerTask-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:schedule-java.util.TimerTask-java.util.Date- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:schedule-java.util.TimerTask-java.util.Date-"/><a name="schedule-java.util.TimerTask-java.util.Date-"/><ul class="blockList"><li class="blockList"><h4>schedule</h4><pre>public void schedule(<a href="../../java/util/TimerTask.html" title="class in java.util">TimerTask</a> task,
                     <a href="../../java/util/Date.html" title="class in java.util">Date</a> time)</pre><div class="block">Schedules the specified task for execution at the specified time. If the time is in the past, the task is scheduled for immediate execution.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - task to be scheduled.      </dd><dd> <code>time</code> - time at which task is to be executed.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <tt>time.getTime()</tt> is negative.      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>task</code> or <code>time</code> is null        </dd>  </dl></li></ul> <a end_ctx_id="method:schedule-java.util.TimerTask-java.util.Date-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:schedule-java.util.TimerTask-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:schedule-java.util.TimerTask-long-long-"/><a name="schedule-java.util.TimerTask-long-long-"/><ul class="blockList"><li class="blockList"><h4>schedule</h4><pre>public void schedule(<a href="../../java/util/TimerTask.html" title="class in java.util">TimerTask</a> task,
                     long delay,
                     long period)</pre><div class="block">Schedules the specified task for repeated <i>fixed-delay execution </i>, beginning after the specified delay. Subsequent executions take place at approximately regular intervals separated by the specified period.<p>In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying <tt>Object.wait(long)</tt> is accurate).                                                                   </p><p>Fixed-delay execution is appropriate for recurring activities that require "smoothness." In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.                                                                             </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - task to be scheduled.      </dd><dd> <code>delay</code> - delay in milliseconds before task is to be executed.           </dd><dd> <code>period</code> - time in milliseconds between successive task executions.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>delay &lt; 0  </code>, or <code>delay + System.currentTimeMillis() &lt; 0    </code>, or <code>period &lt;= 0  </code>        </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>task</code> is null      </dd>  </dl></li></ul> <a end_ctx_id="method:schedule-java.util.TimerTask-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:schedule-java.util.TimerTask-java.util.Date-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:schedule-java.util.TimerTask-java.util.Date-long-"/><a name="schedule-java.util.TimerTask-java.util.Date-long-"/><ul class="blockList"><li class="blockList"><h4>schedule</h4><pre>public void schedule(<a href="../../java/util/TimerTask.html" title="class in java.util">TimerTask</a> task,
                     <a href="../../java/util/Date.html" title="class in java.util">Date</a> firstTime,
                     long period)</pre><div class="block">Schedules the specified task for repeated <i>fixed-delay execution </i>, beginning at the specified time. Subsequent executions take place at approximately regular intervals, separated by the specified period.<p>In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying <tt>Object.wait(long)</tt> is accurate). As a consequence of the above, if the scheduled first time is in the past, it is scheduled for immediate execution.                                                                                        </p><p>Fixed-delay execution is appropriate for recurring activities that require "smoothness." In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.                                                                             </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - task to be scheduled.      </dd><dd> <code>firstTime</code> - First time at which task is to be executed.           </dd><dd> <code>period</code> - time in milliseconds between successive task executions.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>firstTime.getTime() &lt; 0  </code>, or <code>period &lt;= 0  </code>      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>task</code> or <code>firstTime</code> is null        </dd>  </dl></li></ul> <a end_ctx_id="method:schedule-java.util.TimerTask-java.util.Date-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:scheduleAtFixedRate-java.util.TimerTask-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:scheduleAtFixedRate-java.util.TimerTask-long-long-"/><a name="scheduleAtFixedRate-java.util.TimerTask-long-long-"/><ul class="blockList"><li class="blockList"><h4>scheduleAtFixedRate</h4><pre>public void scheduleAtFixedRate(<a href="../../java/util/TimerTask.html" title="class in java.util">TimerTask</a> task,
                                long delay,
                                long period)</pre><div class="block">Schedules the specified task for repeated <i>fixed-rate execution </i>, beginning after the specified delay. Subsequent executions take place at approximately regular intervals, separated by the specified period.<p>In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to "catch up." In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying <tt>Object.wait(long)</tt> is accurate).                                                                     </p><p>Fixed-rate execution is appropriate for recurring activities that are sensitive to <i>absolute</i> time, such as ringing a chime every hour on the hour, or running scheduled maintenance every day at a particular time. It is also appropriate for recurring activities where the total time to perform a fixed number of executions is important, such as a countdown timer that ticks once every second for ten seconds. Finally, fixed-rate execution is appropriate for scheduling multiple repeating timer tasks that must remain synchronized with respect to one another.                                                                                     </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - task to be scheduled.      </dd><dd> <code>delay</code> - delay in milliseconds before task is to be executed.           </dd><dd> <code>period</code> - time in milliseconds between successive task executions.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>delay &lt; 0  </code>, or <code>delay + System.currentTimeMillis() &lt; 0    </code>, or <code>period &lt;= 0  </code>        </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>task</code> is null      </dd>  </dl></li></ul> <a end_ctx_id="method:scheduleAtFixedRate-java.util.TimerTask-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:scheduleAtFixedRate-java.util.TimerTask-java.util.Date-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:scheduleAtFixedRate-java.util.TimerTask-java.util.Date-long-"/><a name="scheduleAtFixedRate-java.util.TimerTask-java.util.Date-long-"/><ul class="blockList"><li class="blockList"><h4>scheduleAtFixedRate</h4><pre>public void scheduleAtFixedRate(<a href="../../java/util/TimerTask.html" title="class in java.util">TimerTask</a> task,
                                <a href="../../java/util/Date.html" title="class in java.util">Date</a> firstTime,
                                long period)</pre><div class="block">Schedules the specified task for repeated <i>fixed-rate execution </i>, beginning at the specified time. Subsequent executions take place at approximately regular intervals, separated by the specified period.<p>In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to "catch up." In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying <tt>Object.wait(long)</tt> is accurate). As a consequence of the above, if the scheduled first time is in the past, then any "missed" executions will be scheduled for immediate "catch up" execution.                                                                                                </p><p>Fixed-rate execution is appropriate for recurring activities that are sensitive to <i>absolute</i> time, such as ringing a chime every hour on the hour, or running scheduled maintenance every day at a particular time. It is also appropriate for recurring activities where the total time to perform a fixed number of executions is important, such as a countdown timer that ticks once every second for ten seconds. Finally, fixed-rate execution is appropriate for scheduling multiple repeating timer tasks that must remain synchronized with respect to one another.                                                                                     </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - task to be scheduled.      </dd><dd> <code>firstTime</code> - First time at which task is to be executed.           </dd><dd> <code>period</code> - time in milliseconds between successive task executions.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>firstTime.getTime() &lt; 0  </code> or <code>period &lt;= 0  </code>      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>task</code> or <code>firstTime</code> is null        </dd>  </dl></li></ul> <a end_ctx_id="method:scheduleAtFixedRate-java.util.TimerTask-java.util.Date-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cancel-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cancel--"/><a name="cancel--"/><ul class="blockList"><li class="blockList"><h4>cancel</h4><pre>public void cancel()</pre><div class="block">Terminates this timer, discarding any currently scheduled tasks. Does not interfere with a currently executing task (if it exists). Once a timer has been terminated, its execution thread terminates gracefully, and no more tasks may be scheduled on it.<p>Note that calling this method from within the run method of a timer task that was invoked by this timer absolutely guarantees that the ongoing task execution is the last task execution that will ever be performed by this timer.                                       </p><p>This method may be called repeatedly; the second and subsequent calls have no effect.             </p>                                      </div></li></ul> <a end_ctx_id="method:cancel--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:purge-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:purge--"/><a name="purge--"/><ul class="blockListLast"><li class="blockList"><h4>purge</h4><pre>public int purge()</pre><div class="block">Removes all cancelled tasks from this timer's task queue. <i>Calling this method has no effect on the behavior of the timer           </i>, but eliminates the references to the cancelled tasks from the queue. If there are no external references to these tasks, they become eligible for garbage collection.<p>Most programs will have no need to call this method. It is designed for use by the rare application that cancels a large number of tasks. Calling this method trades time for space: the runtime of the method may be proportional to n + c log n, where n is the number of tasks in the queue and c is the number of cancelled tasks.                                                                </p><p>Note that it is permissible to call this method from within a a task scheduled on this timer.                 </p>                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of tasks removed from the queue.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>  </dl></li></ul> <a end_ctx_id="method:purge--"/>  </td></tr></table></td></tr></table></diff></diffreport>