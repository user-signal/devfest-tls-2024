<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:StreamHandler [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:StreamHandler"/><ul class="blockList"><li class="blockList"><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../../java/util/logging/ConsoleHandler.html" title="class in java.util.logging">ConsoleHandler</a>, <a href="../../../java/util/logging/FileHandler.html" title="class in java.util.logging">FileHandler</a>, <a href="../../../java/util/logging/SocketHandler.html" title="class in java.util.logging">SocketHandler</a>   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">StreamHandler</span>
extends <a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></pre><div class="block">Stream based logging <tt>Handler</tt>.<p> This is primarily intended as a base class or support class to be used in implementing other logging <tt>Handlers</tt>.                   </p><p> <tt>LogRecords</tt> are published to a given <tt>java.io.OutputStream</tt>.       </p><p> <b>Configuration:</b> By default each <tt>StreamHandler</tt> is initialized using the following <tt>LogManager</tt> configuration properties where <tt>&lt;handler-name&gt;</tt> refers to the fully-qualified class name of the handler. If properties are not defined (or have invalid values) then the specified default values are used.<ul><li> &lt;handler-name&gt;.level specifies the default level for the <tt>Handler</tt> (defaults to <tt>Level.INFO</tt>).           </li><li> &lt;handler-name&gt;.filter specifies the name of a <tt>Filter</tt> class to use (defaults to no <tt>Filter</tt>).              </li><li> &lt;handler-name&gt;.formatter specifies the name of a <tt>Formatter</tt> class to use (defaults to <tt>java.util.logging.SimpleFormatter</tt>).             </li><li> &lt;handler-name&gt;.encoding the name of the character set encoding to use (defaults to the default platform encoding).                </li></ul>                                        </p><p> For example, the properties for <code>StreamHandler</code> would be:<ul><li> java.util.logging.StreamHandler.level=INFO </li><li> java.util.logging.StreamHandler.formatter=java.util.logging.SimpleFormatter </li></ul>        </p><p> For a custom handler, e.g. com.foo.MyHandler, the properties would be:<ul><li> com.foo.MyHandler.level=INFO </li><li> com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li></ul>          </p><p/>   </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:StreamHandler"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StreamHandler-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StreamHandler--"/><a name="StreamHandler--"/><ul class="blockList"><li class="blockList"><h4>StreamHandler</h4><pre>public StreamHandler()</pre><div class="block">Create a <tt>StreamHandler</tt>, with no current output stream.       </div></li></ul> <a end_ctx_id="constructor:StreamHandler--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StreamHandler-java.io.OutputStream-java.util.logging.Formatter- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StreamHandler-java.io.OutputStream-java.util.logging.Formatter-"/><a name="StreamHandler-java.io.OutputStream-java.util.logging.Formatter-"/><ul class="blockListLast"><li class="blockList"><h4>StreamHandler</h4><pre>public StreamHandler(<a href="../../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out,
                     <a href="../../../java/util/logging/Formatter.html" title="class in java.util.logging">Formatter</a> formatter)</pre><div class="block">Create a <tt>StreamHandler</tt> with a given <tt>Formatter</tt> and output stream.<p/>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - the target output stream      </dd><dd> <code>formatter</code> - Formatter to be used to format output         </dd> </dl></li></ul> <a end_ctx_id="constructor:StreamHandler-java.io.OutputStream-java.util.logging.Formatter-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setOutputStream-java.io.OutputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setOutputStream-java.io.OutputStream-"/><a name="setOutputStream-java.io.OutputStream-"/><ul class="blockList"><li class="blockList"><h4>setOutputStream</h4><pre>protected void setOutputStream(<a href="../../../java/io/OutputStream.html" title="class in java.io">OutputStream</a> out)
                        throws <a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Change the output stream.<p> If there is a current output stream then the <tt>Formatter</tt>'s tail string is written and the stream is flushed and closed. Then the output stream is replaced with the new output stream.                                </p>   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>out</code> - New output stream. May not be null.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and if the caller does not have <tt>LoggingPermission("control")</tt>.               </dd>  </dl></li></ul> <a end_ctx_id="method:setOutputStream-java.io.OutputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setEncoding-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setEncoding-java.lang.String-"/><a name="setEncoding-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>setEncoding</h4><pre>public void setEncoding(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> encoding)
                 throws <a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a>,
                        <a href="../../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></pre><div class="block">Set (or change) the character encoding used by this <tt>Handler</tt>.<p> The encoding should be set before any <tt>LogRecords</tt> are written to the <tt>Handler</tt>.             </p>         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#setEncoding-java.lang.String-">setEncoding</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>encoding</code> - The name of a supported character encoding. May be null, to indicate the default platform encoding.                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and if the caller does not have <tt>LoggingPermission("control")</tt>.               </dd><dd> <code><a href="../../../java/io/UnsupportedEncodingException.html" title="class in java.io">UnsupportedEncodingException</a></code> - if the named encoding is not supported.         </dd>   </dl></li></ul> <a end_ctx_id="method:setEncoding-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:publish-java.util.logging.LogRecord- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:publish-java.util.logging.LogRecord-"/><a name="publish-java.util.logging.LogRecord-"/><ul class="blockList"><li class="blockList"><h4>publish</h4><pre>public void publish(<a href="../../../java/util/logging/LogRecord.html" title="class in java.util.logging">LogRecord</a> record)</pre><div class="block">Format and publish a <tt>LogRecord</tt>.<p> The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt> and if the given <tt>LogRecord</tt> has at least the required log level. If not it silently returns. If so, it calls any associated <tt>Filter</tt> to check if the record should be published. If so, it calls its <tt>Formatter</tt> to format the record and then writes the result to the current output stream.                                                             </p><p> If this is the first <tt>LogRecord</tt> to be written to a given <tt>OutputStream</tt>, the <tt>Formatter</tt>'s "head" string is written to the stream before the <tt>LogRecord</tt> is written.                           </p>    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#publish-java.util.logging.LogRecord-">publish</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>record</code> - description of the log event. A null record is silently ignored and is not published                 </dd>  </dl></li></ul> <a end_ctx_id="method:publish-java.util.logging.LogRecord-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isLoggable-java.util.logging.LogRecord- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isLoggable-java.util.logging.LogRecord-"/><a name="isLoggable-java.util.logging.LogRecord-"/><ul class="blockList"><li class="blockList"><h4>isLoggable</h4><pre>public boolean isLoggable(<a href="../../../java/util/logging/LogRecord.html" title="class in java.util.logging">LogRecord</a> record)</pre><div class="block">Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.<p> This method checks if the <tt>LogRecord</tt> has an appropriate level and whether it satisfies any <tt>Filter</tt>. It will also return false if no output stream has been assigned yet or the LogRecord is null.                                  </p><p/>         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#isLoggable-java.util.logging.LogRecord-">isLoggable</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>record</code> - a <tt>LogRecord</tt>    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if the <tt>LogRecord</tt> would be logged.      </dd>   </dl></li></ul> <a end_ctx_id="method:isLoggable-java.util.logging.LogRecord-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()</pre><div class="block">Flush any buffered messages.   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#flush--">flush</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Close the current output stream.<p> The <tt>Formatter</tt>'s "tail" string is written to the stream before it is closed. In addition, if the <tt>Formatter</tt>'s "head" string has not yet been written to the stream, it will be written before the "tail" string.                                    </p>    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#close--">close</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and if the caller does not have LoggingPermission("control").               </dd>  </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>