<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><div style="background-color: #EEEEEE"><div style="padding: 6px; margin-top: 2px; margin-bottom: 6px; margin-left: 6px; margin-right: 6px; text-align: justify; font-size: 80%; font-family: Helvetica, Arial, sans-serif; font-weight: normal;"> Please note that the specifications and other information contained herein are not final and are subject to change. The information is being made available to you solely for purpose of evaluation.                               </div></div><div class="topNav"><a name="navbar.top"/><div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links  </a></div><a name="navbar.top.firstrow"/><ul class="navList" title="Navigation"><li><a href="../../../overview-summary.html">Overview</a></li><li class="navBarCell1Rev">Package</li><li>Class</li><li><a href="package-use.html">Use</a></li><li><a href="package-tree.html">Tree</a></li><li><a href="../../../deprecated-list.html">Deprecated</a></li><li><a href="../../../index-files/index-1.html">Index</a></li><li><a href="../../../help-doc.html">Help</a></li></ul><div class="aboutLanguage"><strong>Java™ Platform<br/>Standard Ed. 8</strong><br/><strong>DRAFT internal-b00</strong></div></div><div class="subNav"><ul class="navList"><li><a href="../../../java/util/jar/package-summary.html">Prev Package</a></li><li><a href="../../../java/util/prefs/package-summary.html">Next Package</a></li></ul><ul class="navList"><li><a href="../../../index.html?java/util/logging/package-summary.html" target="_top">Frames</a></li><li><a href="package-summary.html" target="_top">No Frames</a></li></ul><ul class="navList" id="allclasses_navbar_top"><li><a href="../../../allclasses-noframe.html">All Classes</a></li></ul><div/><a name="skip.navbar.top"/></div><div class="header"><h1 title="Package" class="title">Package java.util.logging</h1><div class="docSummary"><div class="block"> Provides the classes and interfaces of the Java<sup><font size="-2">TM</font></sup> 2 platform's core logging facilities.             </div></div><p>See: <a href="#package.description">Description</a></p></div><div class="contentContainer"><ul class="blockList"><li class="blockList"><table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Interface Summary table, listing interfaces, and an explanation"><caption><span>Interface Summary </span><span class="tabEnd"> </span></caption><tbody><tr><th class="colFirst" scope="col">Interface</th><th class="colLast" scope="col">Description</th></tr><tbody><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/Filter.html" title="interface in java.util.logging">Filter</a></td><td class="colLast"><div class="block">A Filter can be used to provide fine grain control over what is logged, beyond the control provided by log levels.                    </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/LoggingMXBean.html" title="interface in java.util.logging">LoggingMXBean</a></td><td class="colLast"><div class="block">The management interface for the logging facility.      </div></td></tr></tbody></tbody></table></li><li class="blockList"><table class="typeSummary" border="0" cellpadding="3" cellspacing="0" summary="Class Summary table, listing classes, and an explanation"><caption><span>Class Summary </span><span class="tabEnd"> </span></caption><tbody><tr><th class="colFirst" scope="col">Class</th><th class="colLast" scope="col">Description</th></tr><tbody><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/ConsoleHandler.html" title="class in java.util.logging">ConsoleHandler</a></td><td class="colLast"><div class="block">This <tt>Handler</tt> publishes log records to <tt>System.err</tt>.      </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/ErrorManager.html" title="class in java.util.logging">ErrorManager</a></td><td class="colLast"><div class="block">ErrorManager objects can be attached to Handlers to process any error that occurs on a Handler during Logging.                 </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/FileHandler.html" title="class in java.util.logging">FileHandler</a></td><td class="colLast"><div class="block">Simple file logging <tt>Handler</tt>.   </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/Formatter.html" title="class in java.util.logging">Formatter</a></td><td class="colLast"><div class="block">A Formatter provides support for formatting LogRecords.      </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></td><td class="colLast"><div class="block">A <tt>Handler</tt> object takes log messages from a <tt>Logger</tt> and exports them.           </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a></td><td class="colLast"><div class="block">The Level class defines a set of standard logging levels that can be used to control logging output.                 </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/Logger.html" title="class in java.util.logging">Logger</a></td><td class="colLast"><div class="block">A Logger object is used to log messages for a specific system or application component.              </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/LoggingPermission.html" title="class in java.util.logging">LoggingPermission</a></td><td class="colLast"><div class="block">The permission which the SecurityManager will check when code that is running with a SecurityManager calls one of the logging control methods (such as Logger.setLevel).                        </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/LogManager.html" title="class in java.util.logging">LogManager</a></td><td class="colLast"><div class="block">There is a single global LogManager object that is used to maintain a set of shared state about Loggers and log services.                     </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/LogRecord.html" title="class in java.util.logging">LogRecord</a></td><td class="colLast"><div class="block">LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers.               </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/MemoryHandler.html" title="class in java.util.logging">MemoryHandler</a></td><td class="colLast"><div class="block"><tt>Handler</tt> that buffers requests in a circular buffer in memory.         </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/SimpleFormatter.html" title="class in java.util.logging">SimpleFormatter</a></td><td class="colLast"><div class="block">Print a brief summary of the <code>LogRecord</code> in a human readable format.           </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/SocketHandler.html" title="class in java.util.logging">SocketHandler</a></td><td class="colLast"><div class="block">Simple network logging <tt>Handler</tt>.   </div></td></tr><tr class="rowColor"><td class="colFirst"><a href="../../../java/util/logging/StreamHandler.html" title="class in java.util.logging">StreamHandler</a></td><td class="colLast"><div class="block">Stream based logging <tt>Handler</tt>.   </div></td></tr><tr class="altColor"><td class="colFirst"><a href="../../../java/util/logging/XMLFormatter.html" title="class in java.util.logging">XMLFormatter</a></td><td class="colLast"><div class="block">Format a LogRecord into a standard XML format.       </div></td></tr></tbody></tbody></table></li></ul><a name="package.description"/><h2 title="Package java.util.logging Description">Package java.util.logging Description  </h2><div class="block"><p> Provides the classes and interfaces of the Java<sup><font size="-2">TM</font></sup> 2 platform's core logging facilities. The central goal of the logging APIs is to support maintaining and servicing software at customer sites.                              </p><p> There are four main target uses of the logs:         </p><ol><li><i>Problem diagnosis by end users and system administrators       </i>. This consists of simple logging of common problems that can be fixed or tracked locally, such as running out of resources, security failures, and simple configuration errors.                           </li><li><i>Problem diagnosis by field service engineers     </i>. The logging information used by field service engineers may be considerably more complex and verbose than that required by system administrators. Typically such information will require extra logging within particular subsystems.                               </li><li><i>Problem diagnosis by the development organization     </i>. When a problem occurs in the field, it may be necessary to return the captured logging information to the original development team for diagnosis. This logging information may be extremely detailed and fairly inscrutable. Such information might include detailed tracing on the internal execution of particular subsystems.                                               </li><li><i>Problem diagnosis by developers   </i>. The Logging APIs may also be used to help debug an application under development. This may include logging information generated by the target application as well as logging information generated by lower-level libraries. Note however that while this use is perfectly reasonable, the logging APIs are not intended to replace the normal debugging and profiling tools that may already exist in the development environment.                                                                </li></ol><p/> The key elements of this package include:<ul><li><i>Logger</i>: The main entity on which applications make logging calls. A Logger object is used to log messages for a specific system or application component.                        </li><li><i>LogRecord</i>: Used to pass logging requests between the logging framework and individual log handlers.             </li><li><i>Handler</i>: Exports LogRecord objects to a variety of destinations including memory, output streams, consoles, files, and sockets. A variety of Handler subclasses exist for this purpose. Additional Handlers may be developed by third parties and delivered on top of the core platform.                                         </li><li><i>Level</i>: Defines a set of standard logging levels that can be used to control logging output. Programs can be configured to output logging for some levels while ignoring output for others.                              </li><li><i>Filter</i>: Provides fine-grained control over what gets logged, beyond the control provided by log levels. The logging APIs support a general-purpose filter mechanism that allows application code to attach arbitrary filters to control logging output.                                  </li><li><i>Formatter</i>: Provides support for formatting LogRecord objects. This package includes two formatters, SimpleFormatter and XMLFormatter, for formatting log records in plain text or XML respectively. As with Handlers, additional Formatters may be developed by third parties.                                   </li></ul><p> The Logging APIs offer both static and dynamic configuration control. Static control enables field service staff to set up a particular configuration and then re-launch the application with the new logging settings. Dynamic control allows for updates to the logging configuration within a currently running program. The APIs also allow for logging to be enabled or disabled for different functional areas of the system. For example, a field service engineer might be interested in tracing all AWT events, but might have no interest in socket events or memory management.                                                                                         </p><h2>Null Pointers </h2><p> In general, unless otherwise noted in the javadoc, methods and constructors will throw NullPointerException if passed a null argument. The one broad exception to this rule is that the logging convenience methods in the Logger class (the config, entering, exiting, fine, finer, finest, log, logp, logrb, severe, throwing, and warning methods) will accept null values for all arguments except for the initial Level argument (if any).                                                                  </p><p/><h2>Related Documentation </h2><p> For an overview of control flow, please refer to the <a href="../../../../technotes/guides/logging/overview.html"> Java Logging Overview   </a>.           </p>       </div><dl><dt><span class="simpleTagLabel">Since:</span></dt><dd>1.4</dd></dl></div><div class="bottomNav"><a name="navbar.bottom"/><div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links  </a></div><a name="navbar.bottom.firstrow"/><ul class="navList" title="Navigation"><li><a href="../../../overview-summary.html">Overview</a></li><li class="navBarCell1Rev">Package</li><li>Class</li><li><a href="package-use.html">Use</a></li><li><a href="package-tree.html">Tree</a></li><li><a href="../../../deprecated-list.html">Deprecated</a></li><li><a href="../../../index-files/index-1.html">Index</a></li><li><a href="../../../help-doc.html">Help</a></li></ul><div class="aboutLanguage"><strong>Java™ Platform<br/>Standard Ed. 8</strong><br/><strong>DRAFT internal-b00</strong></div></div><div class="subNav"><ul class="navList"><li><a href="../../../java/util/jar/package-summary.html">Prev Package</a></li><li><a href="../../../java/util/prefs/package-summary.html">Next Package</a></li></ul><ul class="navList"><li><a href="../../../index.html?java/util/logging/package-summary.html" target="_top">Frames</a></li><li><a href="package-summary.html" target="_top">No Frames</a></li></ul><ul class="navList" id="allclasses_navbar_bottom"><li><a href="../../../allclasses-noframe.html">All Classes</a></li></ul><div/><a name="skip.navbar.bottom"/></div><p class="legalCopy"><small><font size="-1"><a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature    </a><br/>For further API reference and developer documentation, see <a href="http://download.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation  </a>. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.<br/> Copyright © 1993, 2014, Oracle and/or its affiliates. All rights reserved.                                       </font><br/><strong>DRAFT internal-b00</strong></small></p></diff></diffreport>