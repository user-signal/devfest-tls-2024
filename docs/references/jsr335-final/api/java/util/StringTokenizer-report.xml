<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:StringTokenizer [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:StringTokenizer"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&gt; </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">StringTokenizer</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&gt;</pre><div class="block">The string tokenizer class allows an application to break a string into tokens. The tokenization method is much simpler than the one used by the <code>StreamTokenizer</code> class. The <code>StringTokenizer</code> methods do not distinguish among identifiers, numbers, and quoted strings, nor do they recognize and skip comments.<p> The set of delimiters (the characters that separate tokens) may be specified either at creation time or on a per-token basis.                     </p><p> An instance of <code>StringTokenizer</code> behaves in one of two ways, depending on whether it was created with the <code>returnDelims</code> flag having the value <code>true</code> or <code>false</code>:<ul><li>If the flag is <code>false</code>, delimiter characters serve to separate tokens. A token is a maximal sequence of consecutive characters that are not delimiters.                       </li><li>If the flag is <code>true</code>, delimiter characters are themselves considered to be tokens. A token is thus either one delimiter character, or a maximal sequence of consecutive characters that are not delimiters.                               </li></ul>                          </p><p> A <tt>StringTokenizer</tt> object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.                        </p><p> A token is returned by taking a substring of the string that was used to create the <tt>StringTokenizer</tt> object.                   </p><p> The following is one example of the use of the tokenizer. The code:             </p><blockquote><pre>
     StringTokenizer st = new StringTokenizer("this is a test");
     while (st.hasMoreTokens()) {
         System.out.println(st.nextToken());
     }
 </pre></blockquote><p> prints the following output:    </p><blockquote><pre>
     this
     is
     a
     test
 </pre></blockquote><p> <tt>StringTokenizer</tt> is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the <tt>split</tt> method of <tt>String</tt> or the java.util.regex package instead.                                      </p><p> The following example illustrates how the <tt>String.split</tt> method can be used to break up a string into its basic tokens:                    </p><blockquote><pre>
     String[] result = "this is a test".split("\\s");
     for (int x=0; x&lt;result.length; x++)
         System.out.println(result[x]);
 </pre></blockquote><p> prints the following output:    </p><blockquote><pre>
     this
     is
     a
     test
 </pre></blockquote>                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/StreamTokenizer.html" title="class in java.io"><code>StreamTokenizer</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:StringTokenizer"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StringTokenizer-java.lang.String-java.lang.String-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StringTokenizer-java.lang.String-java.lang.String-boolean-"/><a name="StringTokenizer-java.lang.String-java.lang.String-boolean-"/><ul class="blockList"><li class="blockList"><h4>StringTokenizer</h4><pre>public StringTokenizer(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str,
                       <a href="../../java/lang/String.html" title="class in java.lang">String</a> delim,
                       boolean returnDelims)</pre><div class="block">Constructs a string tokenizer for the specified string. All characters in the <code>delim</code> argument are the delimiters for separating tokens.<p> If the <code>returnDelims</code> flag is <code>true</code>, then the delimiter characters are also returned as tokens. Each delimiter is returned as a string of length one. If the flag is <code>false</code>, the delimiter characters are skipped and only serve as separators between tokens.                                          </p><p> Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does not throw an exception. However, trying to invoke other methods on the resulting <tt>StringTokenizer</tt> may result in a <tt>NullPointerException</tt>.                            </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - a string to be parsed.       </dd><dd> <code>delim</code> - the delimiters.    </dd><dd> <code>returnDelims</code> - flag indicating whether to return the delimiters as tokens.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if str is <code>null</code>      </dd>  </dl></li></ul> <a end_ctx_id="constructor:StringTokenizer-java.lang.String-java.lang.String-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StringTokenizer-java.lang.String-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StringTokenizer-java.lang.String-java.lang.String-"/><a name="StringTokenizer-java.lang.String-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>StringTokenizer</h4><pre>public StringTokenizer(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str,
                       <a href="../../java/lang/String.html" title="class in java.lang">String</a> delim)</pre><div class="block">Constructs a string tokenizer for the specified string. The characters in the <code>delim</code> argument are the delimiters for separating tokens. Delimiter characters themselves will not be treated as tokens.<p> Note that if <tt>delim</tt> is <tt>null</tt>, this constructor does not throw an exception. However, trying to invoke other methods on the resulting <tt>StringTokenizer</tt> may result in a <tt>NullPointerException</tt>.                            </p>                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - a string to be parsed.       </dd><dd> <code>delim</code> - the delimiters.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if str is <code>null</code>      </dd>  </dl></li></ul> <a end_ctx_id="constructor:StringTokenizer-java.lang.String-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:StringTokenizer-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:StringTokenizer-java.lang.String-"/><a name="StringTokenizer-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>StringTokenizer</h4><pre>public StringTokenizer(<a href="../../java/lang/String.html" title="class in java.lang">String</a> str)</pre><div class="block">Constructs a string tokenizer for the specified string. The tokenizer uses the default delimiter set, which is <code>" \t\n\r\f"</code>: the space character, the tab character, the newline character, the carriage-return character, and the form-feed character. Delimiter characters themselves will not be treated as tokens.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>str</code> - a string to be parsed.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if str is <code>null</code>      </dd>  </dl></li></ul> <a end_ctx_id="constructor:StringTokenizer-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasMoreTokens-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasMoreTokens--"/><a name="hasMoreTokens--"/><ul class="blockList"><li class="blockList"><h4>hasMoreTokens</h4><pre>public boolean hasMoreTokens()</pre><div class="block">Tests if there are more tokens available from this tokenizer's string. If this method returns <tt>true</tt>, then a subsequent call to <tt>nextToken</tt> with no argument will successfully return a token.                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if and only if there is at least one token in the string after the current position; <code>false</code> otherwise.                    </dd> </dl></li></ul> <a end_ctx_id="method:hasMoreTokens--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextToken-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextToken--"/><a name="nextToken--"/><ul class="blockList"><li class="blockList"><h4>nextToken</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> nextToken()</pre><div class="block">Returns the next token from this string tokenizer.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next token from this string tokenizer.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if there are no more tokens in this tokenizer's string.            </dd>  </dl></li></ul> <a end_ctx_id="method:nextToken--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextToken-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextToken-java.lang.String-"/><a name="nextToken-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>nextToken</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> nextToken(<a href="../../java/lang/String.html" title="class in java.lang">String</a> delim)</pre><div class="block">Returns the next token in this string tokenizer's string. First, the set of characters considered to be delimiters by this <tt>StringTokenizer</tt> object is changed to be the characters in the string <tt>delim</tt>. Then the next token in the string after the current position is returned. The current position is advanced beyond the recognized token. The new delimiter set remains the default after this call.                                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>delim</code> - the new delimiters.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next token, after switching to the new delimiter set.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if there are no more tokens in this tokenizer's string.            </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if delim is <code>null</code>      </dd>   </dl></li></ul> <a end_ctx_id="method:nextToken-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasMoreElements-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasMoreElements--"/><a name="hasMoreElements--"/><ul class="blockList"><li class="blockList"><h4>hasMoreElements</h4><pre>public boolean hasMoreElements()</pre><div class="block">Returns the same value as the <code>hasMoreTokens</code> method. It exists so that this class can implement the <code>Enumeration</code> interface.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Enumeration.html#hasMoreElements--">hasMoreElements</a></code> in interface <code><a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if there are more tokens; <code>false</code> otherwise.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a>, <a href="../../java/util/StringTokenizer.html#hasMoreTokens--"><code>hasMoreTokens()</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hasMoreElements--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextElement-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextElement--"/><a name="nextElement--"/><ul class="blockList"><li class="blockList"><h4>nextElement</h4><pre>public <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> nextElement()</pre><div class="block">Returns the same value as the <code>nextToken</code> method, except that its declared return value is <code>Object</code> rather than <code>String</code>. It exists so that this class can implement the <code>Enumeration</code> interface.                             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Enumeration.html#nextElement--">nextElement</a></code> in interface <code><a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next token in the string.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if there are no more tokens in this tokenizer's string.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a>, <a href="../../java/util/StringTokenizer.html#nextToken--"><code>nextToken()</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:nextElement--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:countTokens-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:countTokens--"/><a name="countTokens--"/><ul class="blockListLast"><li class="blockList"><h4>countTokens</h4><pre>public int countTokens()</pre><div class="block">Calculates the number of times that this tokenizer's <code>nextToken</code> method can be called before it generates an exception. The current position is not advanced.                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of tokens remaining in the string using the current delimiter set.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/StringTokenizer.html#nextToken--"><code>nextToken()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:countTokens--"/>  </td></tr></table></td></tr></table></diff></diffreport>