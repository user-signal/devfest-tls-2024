<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:LinkedHashMap [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"><div class="description"> <a start_ctx_id="class:LinkedHashMap"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the type of keys maintained by this map          </dd><dd> <code>V</code> - the type of mapped values       </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">LinkedHashMap&lt;K,V&gt;</span>
extends <a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;K,V&gt;
implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</pre><div class="block"><p>Hash table and linked list implementation of the <tt>Map</tt> interface, with predictable iteration order. This implementation differs from <tt>HashMap</tt> in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (<i>insertion-order</i>). Note that insertion order is not affected if a key is <i>re-inserted</i> into the map. (A key <tt>k</tt> is reinserted into a map <tt>m</tt> if <tt>m.put(k, v) </tt> is invoked when <tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to the invocation.)                                                                                          </p><p>This implementation spares its clients from the unspecified, generally chaotic ordering provided by <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a> (and <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>), without incurring the increased cost associated with <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>. It can be used to produce a copy of a map that has the same order as the original, regardless of the original map's implementation:<pre>
     void foo(Map m) {
         Map copy = new LinkedHashMap(m);
         ...
     }
 </pre> This technique is particularly useful if a module takes a map on input, copies it, and later returns results whose order is determined by that of the copy. (Clients generally appreciate having things returned in the same order they were presented.)                                                                                         </p><p>A special <a href="../../java/util/LinkedHashMap.html#LinkedHashMap-int-float-boolean-"><code>constructor</code></a> is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed, from least-recently accessed to most-recently (<i>access-order</i>). This kind of map is well-suited to building LRU caches. Invoking the <code>put</code><span class="diff-html-added">,</span> <code><span class="diff-html-added">putIfAbsent</span></code><span class="diff-html-added">,</span> <code><span class="diff-html-added">get</span></code><span class="diff-html-added">,</span> <code><span class="diff-html-added">getOrDefault</span></code><span class="diff-html-added">,</span> <code><span class="diff-html-added">compute</span></code><span class="diff-html-added">,</span> <code><span class="diff-html-added">computeIfAbsent</span></code><span class="diff-html-added">,</span> <code><span class="diff-html-added">computeIfPresent</span></code><span class="diff-html-added">,</span> or <code> <tt changeType="diff-removed-tag"><span class="diff-html-removed">get</span></tt> <span class="diff-html-removed">method</span><span class="diff-html-added">merge</span>  </code> <span class="diff-html-added">methods</span> results in an access to the corresponding entry (assuming it exists after the invocation completes). The <code><span class="diff-html-added">replace</span></code> <span class="diff-html-added">methods</span> <span class="diff-html-added">only</span> <span class="diff-html-added">result</span> <span class="diff-html-added">in</span> <span class="diff-html-added">an</span> <span class="diff-html-added">access</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">value</span> <span class="diff-html-added">is</span> <span class="diff-html-added">replaced.</span> <span class="diff-html-added">The</span> <code>putAll</code> method generates one entry access for each mapping in the specified map, in the order that key-value mappings are provided by the specified map's entry set iterator. <i>No other methods generate entry accesses.     </i> In particular, operations on collection-views do <i>not</i> affect the order of iteration of the backing map.                                                                                                                                 </p><p>The <a href="../../java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-"><code>removeEldestEntry(Map.Entry)</code></a> method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map.                      </p><p>This class provides all of the optional <tt>Map</tt> operations, and permits null elements. Like <tt>HashMap</tt>, it provides constant-time performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and <tt>remove</tt>), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of <tt>HashMap</tt>, due to the added expense of maintaining the linked list, with one exception: Iteration over the collection-views of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i> of the map, regardless of its capacity. Iteration over a <tt>HashMap</tt> is likely to be more expensive, requiring time proportional to its <i>capacity</i>.                                                                                                </p><p>A linked hash map has two parameters that affect its performance: <i>initial capacity </i> and <i>load factor </i>. They are defined precisely as for <tt>HashMap</tt>. Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for <tt>HashMap</tt>, as iteration times for this class are unaffected by capacity.                                                     </p><p> <strong>Note that this implementation is not synchronized.      </strong> If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it <em>must</em> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:<pre>
   Map m = Collections.synchronizedMap(new LinkedHashMap(...));</pre> A structural modification is any operation that adds or deletes one or more mappings or, in the case of access-ordered linked hash maps, affects iteration order. In insertion-ordered linked hash maps, merely changing the value associated with a key that is already contained in the map is not a structural modification. <strong>In access-ordered linked hash maps, merely querying the map with <tt>get</tt> is a structural modification.                </strong>)                                                                                                                         </p><p>The iterators returned by the <tt>iterator</tt> method of the collections returned by all of this class's collection view methods are <em>fail-fast</em>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.                                                                            </p><p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.           </i>                                                      </p><p><span class="diff-html-added">The</span> <span class="diff-html-added">spliterators</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">spliterator</span> <span class="diff-html-added">method</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">collections</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">all</span> <span class="diff-html-added">of</span> <span class="diff-html-added">this</span> <span class="diff-html-added">class's</span> <span class="diff-html-added">collection</span> <span class="diff-html-added">view</span> <span class="diff-html-added">methods</span> <span class="diff-html-added">are</span> <em><a href="Spliterator.html#binding"><span class="diff-html-added">late-binding</span></a></em><span class="diff-html-added">,</span> <em><span class="diff-html-added">fail-fast</span></em><span class="diff-html-added">,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">additionally</span> <span class="diff-html-added">report</span> <a href="../../java/util/Spliterator.html#ORDERED"><code><span class="diff-html-added">Spliterator.ORDERED</span></code></a><span class="diff-html-added">.</span>                         </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a><span class="diff-html-added">.</span>       </p></div><dl> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Implementation</span> <span class="diff-html-added">Note:</span> </span>   </dt><dd><span class="diff-html-added">The</span> <span class="diff-html-added">spliterators</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">spliterator</span> <span class="diff-html-added">method</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">collections</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">all</span> <span class="diff-html-added">of</span> <span class="diff-html-added">this</span> <span class="diff-html-added">class's</span> <span class="diff-html-added">collection</span> <span class="diff-html-added">view</span> <span class="diff-html-added">methods</span> <span class="diff-html-added">are</span> <span class="diff-html-added">created</span> <span class="diff-html-added">from</span> <span class="diff-html-added">the</span> <span class="diff-html-added">iterators</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">corresponding</span> <span class="diff-html-added">collections</span>.                           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.LinkedHashMap">Serialized Form </a>       </dd>   </dl>  </li></ul> </div> <a end_ctx_id="class:LinkedHashMap"/> </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"><div class="description"> <a start_ctx_id="class:LinkedHashMap"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the type of keys maintained by this map          </dd><dd> <code>V</code> - the type of mapped values       </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">LinkedHashMap&lt;K,V&gt;</span>
extends <a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;K,V&gt;
implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</pre><div class="block"><p>Hash table and linked list implementation of the <tt>Map</tt> interface, with predictable iteration order. This implementation differs from <tt>HashMap</tt> in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (<i>insertion-order</i>). Note that insertion order is not affected if a key is <i>re-inserted</i> into the map. (A key <tt>k</tt> is reinserted into a map <tt>m</tt> if <tt>m.put(k, v) </tt> is invoked when <tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to the invocation.)                                                                                          </p><p>This implementation spares its clients from the unspecified, generally chaotic ordering provided by <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a> (and <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>), without incurring the increased cost associated with <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>. It can be used to produce a copy of a map that has the same order as the original, regardless of the original map's implementation:<pre>
     void foo(Map m) {
         Map copy = new LinkedHashMap(m);
         ...
     }
 </pre> This technique is particularly useful if a module takes a map on input, copies it, and later returns results whose order is determined by that of the copy. (Clients generally appreciate having things returned in the same order they were presented.)                                                                                         </p><p>A special <a href="../../java/util/LinkedHashMap.html#LinkedHashMap-int-float-boolean-"><code>constructor</code></a> is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed, from least-recently accessed to most-recently (<i>access-order</i>). This kind of map is well-suited to building LRU caches. Invoking the <tt>put</tt> or <tt changeType="diff-removed-tag">get</tt> method results in an access to the corresponding entry (assuming it exists after the invocation completes). The <tt>putAll</tt> method generates one entry access for each mapping in the specified map, in the order that key-value mappings are provided by the specified map's entry set iterator. <i>No other methods generate entry accesses.     </i> In particular, operations on collection-views do <i>not</i> affect the order of iteration of the backing map.                                                                                                           </p><p>The <a href="../../java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-"><code>removeEldestEntry(Map.Entry)</code></a> method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map.                      </p><p>This class provides all of the optional <tt>Map</tt> operations, and permits null elements. Like <tt>HashMap</tt>, it provides constant-time performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and <tt>remove</tt>), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of <tt>HashMap</tt>, due to the added expense of maintaining the linked list, with one exception: Iteration over the collection-views of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i> of the map, regardless of its capacity. Iteration over a <tt>HashMap</tt> is likely to be more expensive, requiring time proportional to its <i>capacity</i>.                                                                                                </p><p>A linked hash map has two parameters that affect its performance: <i>initial capacity </i> and <i>load factor </i>. They are defined precisely as for <tt>HashMap</tt>. Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for <tt>HashMap</tt>, as iteration times for this class are unaffected by capacity.                                                     </p><p> <strong>Note that this implementation is not synchronized.      </strong> If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it <em>must</em> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:<pre>
   Map m = Collections.synchronizedMap(new LinkedHashMap(...));</pre> A structural modification is any operation that adds or deletes one or more mappings or, in the case of access-ordered linked hash maps, affects iteration order. In insertion-ordered linked hash maps, merely changing the value associated with a key that is already contained in the map is not a structural modification. <strong>In access-ordered linked hash maps, merely querying the map with <tt>get</tt> is a structural modification.              </strong>)                                                                                                                         </p><p>The iterators returned by the <tt>iterator</tt> method of the collections returned by all of this class's collection view methods are <em>fail-fast</em>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.                                                                            </p><p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.           </i>                                                      </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p></div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.LinkedHashMap">Serialized Form </a>       </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:LinkedHashMap"/> </td><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:LinkedHashMap"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the type of keys maintained by this map          </dd><dd> <code>V</code> - the type of mapped values       </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">LinkedHashMap&lt;K,V&gt;</span>
extends <a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;K,V&gt;
implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</pre><div class="block"><p>Hash table and linked list implementation of the <tt>Map</tt> interface, with predictable iteration order. This implementation differs from <tt>HashMap</tt> in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (<i>insertion-order</i>). Note that insertion order is not affected if a key is <i>re-inserted</i> into the map. (A key <tt>k</tt> is reinserted into a map <tt>m</tt> if <tt>m.put(k, v) </tt> is invoked when <tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to the invocation.)                                                                                          </p><p>This implementation spares its clients from the unspecified, generally chaotic ordering provided by <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a> (and <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>), without incurring the increased cost associated with <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>. It can be used to produce a copy of a map that has the same order as the original, regardless of the original map's implementation:<pre>
     void foo(Map m) {
         Map copy = new LinkedHashMap(m);
         ...
     }
 </pre> This technique is particularly useful if a module takes a map on input, copies it, and later returns results whose order is determined by that of the copy. (Clients generally appreciate having things returned in the same order they were presented.)                                                                                         </p><p>A special <a href="../../java/util/LinkedHashMap.html#LinkedHashMap-int-float-boolean-"><code>constructor</code></a> is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed, from least-recently accessed to most-recently (<i>access-order</i>). This kind of map is well-suited to building LRU caches. Invoking the <code>put</code>, <code>putIfAbsent</code>, <code>get</code>, <code>getOrDefault</code>, <code>compute</code>, <code>computeIfAbsent</code>, <code>computeIfPresent</code>, or <code>merge</code> methods results in an access to the corresponding entry (assuming it exists after the invocation completes). The <code>replace</code> methods only result in an access of the entry if the value is replaced. The <code>putAll</code> method generates one entry access for each mapping in the specified map, in the order that key-value mappings are provided by the specified map's entry set iterator. <i>No other methods generate entry accesses.     </i> In particular, operations on collection-views do <i>not</i> affect the order of iteration of the backing map.                                                                                                                                 </p><p>The <a href="../../java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-"><code>removeEldestEntry(Map.Entry)</code></a> method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map.                      </p><p>This class provides all of the optional <tt>Map</tt> operations, and permits null elements. Like <tt>HashMap</tt>, it provides constant-time performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and <tt>remove</tt>), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of <tt>HashMap</tt>, due to the added expense of maintaining the linked list, with one exception: Iteration over the collection-views of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i> of the map, regardless of its capacity. Iteration over a <tt>HashMap</tt> is likely to be more expensive, requiring time proportional to its <i>capacity</i>.                                                                                                </p><p>A linked hash map has two parameters that affect its performance: <i>initial capacity </i> and <i>load factor </i>. They are defined precisely as for <tt>HashMap</tt>. Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for <tt>HashMap</tt>, as iteration times for this class are unaffected by capacity.                                                     </p><p> <strong>Note that this implementation is not synchronized.      </strong> If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it <em>must</em> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedMap-java.util.Map-"><code>Collections.synchronizedMap</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the map:<pre>
   Map m = Collections.synchronizedMap(new LinkedHashMap(...));</pre> A structural modification is any operation that adds or deletes one or more mappings or, in the case of access-ordered linked hash maps, affects iteration order. In insertion-ordered linked hash maps, merely changing the value associated with a key that is already contained in the map is not a structural modification. <strong>In access-ordered linked hash maps, merely querying the map with <tt>get</tt> is a structural modification.                </strong>)                                                                                                                         </p><p>The iterators returned by the <tt>iterator</tt> method of the collections returned by all of this class's collection view methods are <em>fail-fast</em>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt>remove</tt> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.                                                                            </p><p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt>ConcurrentModificationException</tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.           </i>                                                      </p><p>The spliterators returned by the spliterator method of the collections returned by all of this class's collection view methods are <em><a href="Spliterator.html#binding">late-binding</a></em>, <em>fail-fast</em>, and additionally report <a href="../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a>.                         </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p></div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>The spliterators returned by the spliterator method of the collections returned by all of this class's collection view methods are created from the iterators of the corresponding collections.                           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, <a href="../../serialized-form.html#java.util.LinkedHashMap">Serialized Form </a>       </dd>   </dl>  </li></ul> </div> <a end_ctx_id="class:LinkedHashMap"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedHashMap-int-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedHashMap-int-float-"/><a name="LinkedHashMap-int-float-"/><ul class="blockList"><li class="blockList"><h4>LinkedHashMap</h4><pre>public LinkedHashMap(int initialCapacity,
                     float loadFactor)</pre><div class="block">Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance with the specified initial capacity and load factor.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - the initial capacity     </dd><dd> <code>loadFactor</code> - the load factor     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive              </dd>  </dl></li></ul> <a end_ctx_id="constructor:LinkedHashMap-int-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedHashMap-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedHashMap-int-"/><a name="LinkedHashMap-int-"/><ul class="blockList"><li class="blockList"><h4>LinkedHashMap</h4><pre>public LinkedHashMap(int initialCapacity)</pre><div class="block">Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance with the specified initial capacity and a default load factor (0.75).                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - the initial capacity     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative        </dd>  </dl></li></ul> <a end_ctx_id="constructor:LinkedHashMap-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedHashMap-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedHashMap--"/><a name="LinkedHashMap--"/><ul class="blockList"><li class="blockList"><h4>LinkedHashMap</h4><pre>public LinkedHashMap()</pre><div class="block">Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance with the default initial capacity (16) and load factor (0.75).               </div></li></ul> <a end_ctx_id="constructor:LinkedHashMap--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedHashMap-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedHashMap-java.util.Map-"/><a name="LinkedHashMap-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>LinkedHashMap</h4><pre>public LinkedHashMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,? extends <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt; m)</pre><div class="block">Constructs an insertion-ordered <tt>LinkedHashMap</tt> instance with the same mappings as the specified map. The <tt>LinkedHashMap</tt> instance is created with a default load factor (0.75) and an initial capacity sufficient to hold the mappings in the specified map.                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map whose mappings are to be placed in this map             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null        </dd>  </dl></li></ul> <a end_ctx_id="constructor:LinkedHashMap-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedHashMap-int-float-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedHashMap-int-float-boolean-"/><a name="LinkedHashMap-int-float-boolean-"/><ul class="blockListLast"><li class="blockList"><h4>LinkedHashMap</h4><pre>public LinkedHashMap(int initialCapacity,
                     float loadFactor,
                     boolean accessOrder)</pre><div class="block">Constructs an empty <tt>LinkedHashMap</tt> instance with the specified initial capacity, load factor and ordering mode.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - the initial capacity     </dd><dd> <code>loadFactor</code> - the load factor     </dd><dd> <code>accessOrder</code> - the ordering mode - <tt>true</tt> for access-order, <tt>false</tt> for insertion-order            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor is nonpositive              </dd>  </dl></li></ul> <a end_ctx_id="constructor:LinkedHashMap-int-float-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:containsValue-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:containsValue-java.lang.Object-"/><a name="containsValue-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>containsValue</h4><pre>public boolean containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/HashMap.html#containsValue-java.lang.Object-">containsValue</a></code> in class <code><a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - value whose presence in this map is to be tested            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this map maps one or more keys to the specified value             </dd>    </dl></li></ul> <a end_ctx_id="method:containsValue-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.Object-"/><a name="get-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a> get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.<p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))    </code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.)                                   </p><p>A return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/HashMap.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.                                        </p>                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/HashMap.html#get-java.lang.Object-">get</a></code> in class <code><a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key whose associated value is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/HashMap.html#put-K-V-"><code>HashMap.put(Object, Object) </code></a> </dd>     </dl></li></ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:get-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getOrDefault-java.lang.Object-V- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getOrDefault-java.lang.Object-V-"><span class="diff-html-added"/></a><a name="getOrDefault-java.lang.Object-V-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">getOrDefault</span></h4><pre><span class="diff-html-added">public </span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added"> getOrDefault(</span><a href="../../java/lang/Object.html" title="class in java.lang"><span class="diff-html-added">Object</span></a><span class="diff-html-added"> key,</span>
                      <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added"> defaultValue)</span></pre><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">the</span> <span class="diff-html-added">value</span> <span class="diff-html-added">to</span> <span class="diff-html-added">which</span> <span class="diff-html-added">the</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">key</span> <span class="diff-html-added">is</span> <span class="diff-html-added">mapped,</span> <span class="diff-html-added">or</span> <code><span class="diff-html-added">defaultValue</span></code> <span class="diff-html-added">if</span> <span class="diff-html-added">this</span> <span class="diff-html-added">map</span> <span class="diff-html-added">contains</span> <span class="diff-html-added">no</span> <span class="diff-html-added">mapping</span> <span class="diff-html-added">for</span> <span class="diff-html-added">the</span> <span class="diff-html-added">key.</span>                    </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/util/Map.html#getOrDefault-java.lang.Object-V-"><span class="diff-html-added">getOrDefault</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Overrides:</span></span>   </dt><dd> <code><a href="../../java/util/HashMap.html#getOrDefault-java.lang.Object-V-"><span class="diff-html-added">getOrDefault</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">class </span><code><a href="../../java/util/HashMap.html" title="class in java.util"><span class="diff-html-added">HashMap</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">key</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">key</span> <span class="diff-html-added">whose</span> <span class="diff-html-added">associated</span> <span class="diff-html-added">value</span> <span class="diff-html-added">is</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">returned</span>           </dd><dd> <code><span class="diff-html-added">defaultValue</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">default</span> <span class="diff-html-added">mapping</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">key</span>        </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">value</span> <span class="diff-html-added">to</span> <span class="diff-html-added">which</span> <span class="diff-html-added">the</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">key</span> <span class="diff-html-added">is</span> <span class="diff-html-added">mapped,</span> <span class="diff-html-added">or</span> <code><span class="diff-html-added">defaultValue</span></code> <span class="diff-html-added">if</span> <span class="diff-html-added">this</span> <span class="diff-html-added">map</span> <span class="diff-html-added">contains</span> <span class="diff-html-added">no</span> <span class="diff-html-added">mapping</span> <span class="diff-html-added">for</span> <span class="diff-html-added">the</span> <span class="diff-html-added">key</span>                   </dd>    </dl></li></ul> <a end_ctx_id="method:getOrDefault-java.lang.Object-V-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Removes all of the mappings from this map. The map will be empty after this call returns.                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#clear--">clear</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/HashMap.html#clear--">clear</a></code> in class <code><a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd>  </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeEldestEntry-java.util.Map.Entry- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeEldestEntry-java.util.Map.Entry-"/><a name="removeEldestEntry-java.util.Map.Entry-"/><ul class="blockList"><li class="blockList"><h4>removeEldestEntry</h4><pre>protected boolean removeEldestEntry(<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt; eldest)</pre><div class="block">Returns <tt>true</tt> if this map should remove its eldest entry. This method is invoked by <tt>put</tt> and <tt>putAll</tt> after inserting a new entry into the map. It provides the implementor with the opportunity to remove the eldest entry each time a new one is added. This is useful if the map represents a cache: it allows the map to reduce memory consumption by deleting stale entries.<p>Sample use: this override will allow the map to grow up to 100 entries and then delete the eldest entry each time a new entry is added, maintaining a steady state of 100 entries.<pre>
     private static final int MAX_ENTRIES = 100;

     protected boolean removeEldestEntry(Map.Entry eldest) {
        return size() &gt; MAX_ENTRIES;
     }
 </pre>                                 </p><p>This method typically does not modify the map in any way, instead allowing the map to modify itself as directed by its return value. It <i>is</i> permitted for this method to modify the map directly, but if it does so, it <i>must</i> return <tt>false</tt> (indicating that the map should not attempt any further modification). The effects of returning <tt>true</tt> after modifying the map from within this method are unspecified.                                                                    </p><p>This implementation merely returns <tt>false</tt> (so that this map acts like a normal map - the eldest element is never removed).                    </p>                                                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>eldest</code> - The least recently inserted entry in the map, or if this is an access-ordered map, the least recently accessed entry. This is the entry that will be removed it this method returns <tt>true</tt>. If the map was empty prior to the <tt>put</tt> or <tt>putAll</tt> invocation resulting in this invocation, this will be the entry that was just inserted; in other words, if the map contains a single entry, the eldest entry is also the newest.                                                                             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if the eldest entry should be removed from the map; <tt>false</tt> if it should be retained.                 </dd>  </dl></li></ul> <a end_ctx_id="method:removeEldestEntry-java.util.Map.Entry-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:keySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:keySet--"/><a name="keySet--"/><ul class="blockList"><li class="blockList"><h4>keySet</h4><pre>public <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>&gt; keySet()</pre><div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations. Its <a href="../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> typically provides faster sequential performance but much poorer parallel performance than that of <code>HashMap</code>.                                                                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#keySet--">keySet</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/HashMap.html#keySet--">keySet</a></code> in class <code><a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a set view of the keys contained in this map         </dd>   </dl></li></ul> <a end_ctx_id="method:keySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:values-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:values--"/><a name="values--"/><ul class="blockList"><li class="blockList"><h4>values</h4><pre>public <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt; values()</pre><div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations. Its <a href="../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> typically provides faster sequential performance but much poorer parallel performance than that of <code>HashMap</code>.                                                                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#values--">values</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/HashMap.html#values--">values</a></code> in class <code><a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the values contained in this map        </dd>   </dl></li></ul> <a end_ctx_id="method:values--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:entrySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:entrySet--"/><a name="entrySet--"/><ul class="blockList"><li class="blockList"><h4>entrySet</h4><pre>public <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;&gt; entrySet()</pre><div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations. Its <a href="../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> typically provides faster sequential performance but much poorer parallel performance than that of <code>HashMap</code>.                                                                                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/HashMap.html#entrySet--">entrySet</a></code> in class <code><a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>&lt;<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">K</a>,<a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a set view of the mappings contained in this map         </dd>   </dl></li></ul> <a end_ctx_id="method:entrySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEach-java.util.function.BiConsumer- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEach-java.util.function.BiConsumer-"><span class="diff-html-added"/></a><a name="forEach-java.util.function.BiConsumer-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">forEach</span></h4><pre><span class="diff-html-added">public void forEach(</span><a href="../../java/util/function/BiConsumer.html" title="interface in java.util.function"><span class="diff-html-added">BiConsumer</span></a><span class="diff-html-added">&lt;?</span> <span class="diff-html-added">super</span> <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,?</span> <span class="diff-html-added">super</span> <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt; action)</span></pre><div class="block"> <span class="descfrmTypeLabel"><span class="diff-html-added">Description</span> <span class="diff-html-added">copied</span> <span class="diff-html-added">from</span> <span class="diff-html-added">interface:</span> <code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-"><span class="diff-html-added">Map</span></a></code>   </span> </div><div class="block"><span class="diff-html-added">Performs</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">action</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">in</span> <span class="diff-html-added">this</span> <span class="diff-html-added">map</span> <span class="diff-html-added">until</span> <span class="diff-html-added">all</span> <span class="diff-html-added">entries</span> <span class="diff-html-added">have</span> <span class="diff-html-added">been</span> <span class="diff-html-added">processed</span> <span class="diff-html-added">or</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception.</span> <span class="diff-html-added">Unless</span> <span class="diff-html-added">otherwise</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">implementing</span> <span class="diff-html-added">class,</span> <span class="diff-html-added">actions</span> <span class="diff-html-added">are</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">order</span> <span class="diff-html-added">of</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">set</span> <span class="diff-html-added">iteration</span> <span class="diff-html-added">(if</span> <span class="diff-html-added">an</span> <span class="diff-html-added">iteration</span> <span class="diff-html-added">order</span> <span class="diff-html-added">is</span> <span class="diff-html-added">specified.)</span> <span class="diff-html-added">Exceptions</span> <span class="diff-html-added">thrown</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">are</span> <span class="diff-html-added">relayed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">caller.</span>                                                      </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/util/Map.html#forEach-java.util.function.BiConsumer-"><span class="diff-html-added">forEach</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Overrides:</span></span>   </dt><dd> <code><a href="../../java/util/HashMap.html#forEach-java.util.function.BiConsumer-"><span class="diff-html-added">forEach</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">class </span><code><a href="../../java/util/HashMap.html" title="class in java.util"><span class="diff-html-added">HashMap</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">action</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">The</span> <span class="diff-html-added">action</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry</span>          </dd>   </dl></li></ul> <a end_ctx_id="method:forEach-java.util.function.BiConsumer-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:replaceAll-java.util.function.BiFunction- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:replaceAll-java.util.function.BiFunction-"><span class="diff-html-added"/></a><a name="replaceAll-java.util.function.BiFunction-"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">replaceAll</span></h4><pre><span class="diff-html-added">public void replaceAll(</span><a href="../../java/util/function/BiFunction.html" title="interface in java.util.function"><span class="diff-html-added">BiFunction</span></a><span class="diff-html-added">&lt;?</span> <span class="diff-html-added">super</span> <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,?</span> <span class="diff-html-added">super</span> <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">,?</span> <span class="diff-html-added">extends</span> <a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt; function)</span></pre><div class="block"> <span class="descfrmTypeLabel"><span class="diff-html-added">Description</span> <span class="diff-html-added">copied</span> <span class="diff-html-added">from</span> <span class="diff-html-added">interface:</span> <code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-"><span class="diff-html-added">Map</span></a></code>   </span> </div><div class="block"><span class="diff-html-added">Replaces</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry's</span> <span class="diff-html-added">value</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">result</span> <span class="diff-html-added">of</span> <span class="diff-html-added">invoking</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">function</span> <span class="diff-html-added">on</span> <span class="diff-html-added">that</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">until</span> <span class="diff-html-added">all</span> <span class="diff-html-added">entries</span> <span class="diff-html-added">have</span> <span class="diff-html-added">been</span> <span class="diff-html-added">processed</span> <span class="diff-html-added">or</span> <span class="diff-html-added">the</span> <span class="diff-html-added">function</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception.</span> <span class="diff-html-added">Exceptions</span> <span class="diff-html-added">thrown</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">function</span> <span class="diff-html-added">are</span> <span class="diff-html-added">relayed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">caller.</span>                                    </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/util/Map.html#replaceAll-java.util.function.BiFunction-"><span class="diff-html-added">replaceAll</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Overrides:</span></span>   </dt><dd> <code><a href="../../java/util/HashMap.html#replaceAll-java.util.function.BiFunction-"><span class="diff-html-added">replaceAll</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">class </span><code><a href="../../java/util/HashMap.html" title="class in java.util"><span class="diff-html-added">HashMap</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../java/util/LinkedHashMap.html" title="type parameter in LinkedHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">function</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">function</span> <span class="diff-html-added">to</span> <span class="diff-html-added">apply</span> <span class="diff-html-added">to</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry</span>         </dd>   </dl></li></ul> <a end_ctx_id="method:replaceAll-java.util.function.BiFunction-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>