<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ListIterator [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ListIterator"/><ul class="blockList"><li class="blockList"><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;E&gt; </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">ListIterator&lt;E&gt;</span>
extends <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;E&gt;</pre><div class="block">An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. A <code>ListIterator</code> has no current element; its <i>cursor position </i> always lies between the element that would be returned by a call to <code>previous()</code> and the element that would be returned by a call to <code>next()</code>. An iterator for a list of length <code>n</code> has <code>n+1</code> possible cursor positions, as illustrated by the carets (<code>^</code>) below:<pre>
                      Element(0)   Element(1)   Element(2)   ... Element(n-1)
 cursor positions:  ^            ^            ^            ^                  ^
 </pre> Note that the <a href="../../java/util/ListIterator.html#remove--"><code>remove()</code></a> and <a href="../../java/util/ListIterator.html#set-E-"><code>set(Object)</code></a> methods are <i>not</i> defined in terms of the cursor position; they are defined to operate on the last element returned by a call to <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a> or <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a>.<p>This interface is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                                                                                                   </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/List.html" title="interface in java.util"><code>List</code></a>, <a href="../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a>, <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a>, <a href="../../java/util/List.html#listIterator--"><code>List.listIterator()</code></a>     </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:ListIterator"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNext-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNext--"/><a name="hasNext--"/><ul class="blockList"><li class="blockList"><h4>hasNext</h4><pre>boolean hasNext()</pre><div class="block">Returns <code>true</code> if this list iterator has more elements when traversing the list in the forward direction. (In other words, returns <code>true</code> if <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a> would return an element rather than throwing an exception.)                                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Iterator.html#hasNext--">hasNext</a></code> in interface <code><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the list iterator has more elements when traversing the list in the forward direction                </dd>  </dl></li></ul> <a end_ctx_id="method:hasNext--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:next-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:next--"/><a name="next--"/><ul class="blockList"><li class="blockList"><h4>next</h4><pre><a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a> next()</pre><div class="block">Returns the next element in the list and advances the cursor position. This method may be called repeatedly to iterate through the list, or intermixed with calls to <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a> to go back and forth. (Note that alternating calls to <code>next</code> and <code>previous</code> will return the same element repeatedly.)                                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Iterator.html#next--">next</a></code> in interface <code><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next element in the list     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the iteration has no next element         </dd>   </dl></li></ul> <a end_ctx_id="method:next--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasPrevious-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasPrevious--"/><a name="hasPrevious--"/><ul class="blockList"><li class="blockList"><h4>hasPrevious</h4><pre>boolean hasPrevious()</pre><div class="block">Returns <code>true</code> if this list iterator has more elements when traversing the list in the reverse direction. (In other words, returns <code>true</code> if <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a> would return an element rather than throwing an exception.)                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the list iterator has more elements when traversing the list in the reverse direction                </dd> </dl></li></ul> <a end_ctx_id="method:hasPrevious--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:previous-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:previous--"/><a name="previous--"/><ul class="blockList"><li class="blockList"><h4>previous</h4><pre><a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a> previous()</pre><div class="block">Returns the previous element in the list and moves the cursor position backwards. This method may be called repeatedly to iterate through the list backwards, or intermixed with calls to <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a> to go back and forth. (Note that alternating calls to <code>next</code> and <code>previous</code> will return the same element repeatedly.)                                                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous element in the list     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the iteration has no previous element         </dd>  </dl></li></ul> <a end_ctx_id="method:previous--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextIndex-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextIndex--"/><a name="nextIndex--"/><ul class="blockList"><li class="blockList"><h4>nextIndex</h4><pre>int nextIndex()</pre><div class="block">Returns the index of the element that would be returned by a subsequent call to <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a>. (Returns list size if the list iterator is at the end of the list.)                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the element that would be returned by a subsequent call to <code>next</code>, or list size if the list iterator is at the end of the list                            </dd> </dl></li></ul> <a end_ctx_id="method:nextIndex--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:previousIndex-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:previousIndex--"/><a name="previousIndex--"/><ul class="blockList"><li class="blockList"><h4>previousIndex</h4><pre>int previousIndex()</pre><div class="block">Returns the index of the element that would be returned by a subsequent call to <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a>. (Returns -1 if the list iterator is at the beginning of the list.)                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the element that would be returned by a subsequent call to <code>previous</code>, or -1 if the list iterator is at the beginning of the list                           </dd> </dl></li></ul> <a end_ctx_id="method:previousIndex--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove--"/><a name="remove--"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>void remove()</pre><div class="block">Removes from the list the last element that was returned by <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a> or <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a> (optional operation). This call can only be made once per call to <code>next</code> or <code>previous</code>. It can be made only if <a href="../../java/util/ListIterator.html#add-E-"><code>add(E)</code></a> has not been called after the last call to <code>next</code> or <code>previous</code>.                                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Iterator.html#remove--">remove</a></code> in interface <code><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a>&gt;</code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <code>remove</code> operation is not supported by this list iterator             </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if neither <code>next</code> nor <code>previous</code> have been called, or <code>remove</code> or <code>add</code> have been called after the last call to <code>next</code> or <code>previous</code>                         </dd>  </dl></li></ul> <a name="set-java.lang.Object-"/><a end_ctx_id="method:remove--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-E-"/><a name="set-E-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>void set(<a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a> e)</pre><div class="block">Replaces the last element returned by <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a> or <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a> with the specified element (optional operation). This call can be made only if neither <a href="../../java/util/ListIterator.html#remove--"><code>remove()</code></a> nor <a href="../../java/util/ListIterator.html#add-E-"><code>add(E)</code></a> have been called after the last call to <code>next</code> or <code>previous</code>.                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element with which to replace the last element returned by <code>next</code> or <code>previous</code>                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <code>set</code> operation is not supported by this list iterator             </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some aspect of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if neither <code>next</code> nor <code>previous</code> have been called, or <code>remove</code> or <code>add</code> have been called after the last call to <code>next</code> or <code>previous</code>                         </dd>  </dl></li></ul> <a name="add-java.lang.Object-"/><a end_ctx_id="method:set-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockListLast"><li class="blockList"><h4>add</h4><pre>void add(<a href="../../java/util/ListIterator.html" title="type parameter in ListIterator">E</a> e)</pre><div class="block">Inserts the specified element into the list (optional operation). The element is inserted immediately before the element that would be returned by <a href="../../java/util/ListIterator.html#next--"><code>next()</code></a>, if any, and after the element that would be returned by <a href="../../java/util/ListIterator.html#previous--"><code>previous()</code></a>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <code>next</code> would be unaffected, and a subsequent call to <code>previous</code> would return the new element. (This call increases by one the value that would be returned by a call to <code>nextIndex</code> or <code>previousIndex</code>.)                                                                                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to insert      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <code>add</code> method is not supported by this list iterator             </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some aspect of this element prevents it from being added to this list                </dd>  </dl></li></ul> <a end_ctx_id="method:add-E-"/>  </td></tr></table></td></tr></table></diff></diffreport>