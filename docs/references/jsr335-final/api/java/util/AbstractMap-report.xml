<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:AbstractMap [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:AbstractMap"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the type of keys maintained by this map          </dd><dd> <code>V</code> - the type of mapped values       </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/util/concurrent/ConcurrentHashMap.html" title="class in java.util.concurrent">ConcurrentHashMap</a>, <a href="../../java/util/concurrent/ConcurrentSkipListMap.html" title="class in java.util.concurrent">ConcurrentSkipListMap</a>, <a href="../../java/util/EnumMap.html" title="class in java.util">EnumMap</a>, <a href="../../java/util/HashMap.html" title="class in java.util">HashMap</a>, <a href="../../java/util/IdentityHashMap.html" title="class in java.util">IdentityHashMap</a>, <a href="../../java/util/TreeMap.html" title="class in java.util">TreeMap</a>, <a href="../../java/util/WeakHashMap.html" title="class in java.util">WeakHashMap</a>       </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">AbstractMap&lt;K,V&gt;</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;</pre><div class="block">This class provides a skeletal implementation of the <tt>Map</tt> interface, to minimize the effort required to implement this interface.<p>To implement an unmodifiable map, the programmer needs only to extend this class and provide an implementation for the <tt>entrySet</tt> method, which returns a set-view of the map's mappings. Typically, the returned set will, in turn, be implemented atop <tt>AbstractSet</tt>. This set should not support the <tt>add</tt> or <tt>remove</tt> methods, and its iterator should not support the <tt>remove</tt> method.                                                          </p><p>To implement a modifiable map, the programmer must additionally override this class's <tt>put</tt> method (which otherwise throws an <tt>UnsupportedOperationException</tt>), and the iterator returned by <tt>entrySet().iterator()</tt> must additionally implement its <tt>remove</tt> method.                              </p><p>The programmer should generally provide a void (no argument) and map constructor, as per the recommendation in the <tt>Map</tt> interface specification.                    </p><p>The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the map being implemented admits a more efficient implementation.                              </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:AbstractMap"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:AbstractMap-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:AbstractMap--"/><a name="AbstractMap--"/><ul class="blockListLast"><li class="blockList"><h4>AbstractMap</h4><pre>protected AbstractMap()</pre><div class="block">Sole constructor. (For invocation by subclass constructors, typically implicit.)        </div></li></ul> <a end_ctx_id="constructor:AbstractMap--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>public int size()</pre><div class="block">Returns the number of key-value mappings in this map. If the map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#size--">size</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation returns <tt>entrySet().size()</tt>.   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of key-value mappings in this map       </dd>   </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isEmpty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isEmpty--"/><a name="isEmpty--"/><ul class="blockList"><li class="blockList"><h4>isEmpty</h4><pre>public boolean isEmpty()</pre><div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#isEmpty--">isEmpty</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation returns <tt>size() == 0  </tt>.   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this map contains no key-value mappings        </dd>   </dl></li></ul> <a end_ctx_id="method:isEmpty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:containsValue-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:containsValue-java.lang.Object-"/><a name="containsValue-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>containsValue</h4><pre>public boolean containsValue(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Returns <tt>true</tt> if this map maps one or more keys to the specified value. More formally, returns <tt>true</tt> if and only if this map contains at least one mapping to a value <tt>v</tt> such that <tt>(value==null ? v==null : value.equals(v))    </tt>. This operation will probably require time linear in the map size for most implementations of the <tt>Map</tt> interface.                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation iterates over <tt>entrySet()</tt> searching for an entry with the specified value. If such an entry is found, <tt>true</tt> is returned. If the iteration terminates without finding such an entry, <tt>false</tt> is returned. Note that this implementation requires linear time in the size of the map.                                              </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - value whose presence in this map is to be tested            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this map maps one or more keys to the specified value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the value is of an inappropriate type for this map (<a href="Collection.html#optional-restrictions">optional</a>)              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified value is null and this map does not permit null values (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>     </dl></li></ul> <a end_ctx_id="method:containsValue-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:containsKey-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:containsKey-java.lang.Object-"/><a name="containsKey-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>containsKey</h4><pre>public boolean containsKey(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Returns <tt>true</tt> if this map contains a mapping for the specified key. More formally, returns <tt>true</tt> if and only if this map contains a mapping for a key <tt>k</tt> such that <tt>(key==null ? k==null : key.equals(k))    </tt>. (There can be at most one such mapping.)                                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation iterates over <tt>entrySet()</tt> searching for an entry with the specified key. If such an entry is found, <tt>true</tt> is returned. If the iteration terminates without finding such an entry, <tt>false</tt> is returned. Note that this implementation requires linear time in the size of the map; many implementations will override this method.                                                    </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key whose presence in this map is to be tested            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this map contains a mapping for the specified key           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the key is of an inappropriate type for this map (<a href="Collection.html#optional-restrictions">optional</a>)              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null and this map does not permit null keys (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>     </dl></li></ul> <a end_ctx_id="method:containsKey-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.Object-"/><a name="get-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a> get(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.<p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))    </code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.)                                   </p><p>If this map permits null values, then a return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code>. The <a href="../../java/util/Map.html#containsKey-java.lang.Object-"><code>containsKey</code></a> operation may be used to distinguish these two cases.                                               </p>                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#get-java.lang.Object-">get</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation iterates over <tt>entrySet()</tt> searching for an entry with the specified key. If such an entry is found, the entry's value is returned. If the iteration terminates without finding such an entry, <tt>null</tt> is returned. Note that this implementation requires linear time in the size of the map; many implementations will override this method.                                                      </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key whose associated value is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the key is of an inappropriate type for this map (<a href="Collection.html#optional-restrictions">optional</a>)              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null and this map does not permit null keys (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>     </dl></li></ul> <a name="put-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:get-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:put-K-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:put-K-V-"/><a name="put-K-V-"/><ul class="blockList"><li class="blockList"><h4>put</h4><pre>public <a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a> put(<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a> key,
             <a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a> value)</pre><div class="block">Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map <tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only if <a href="../../java/util/Map.html#containsKey-java.lang.Object-"><code>m.containsKey(k)</code></a> would return <tt>true</tt>.)                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#put-K-V-">put</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation always throws an <tt>UnsupportedOperationException</tt>.     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>, if the implementation supports <tt>null</tt> values.)                                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>put</tt> operation is not supported by this map            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified key or value prevents it from being stored in this map                   </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null and this map does not permit null keys or values                    </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified key or value prevents it from being stored in this map                   </dd>     </dl></li></ul> <a end_ctx_id="method:put-K-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public <a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a> remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Removes the mapping for a key from this map if it is present (optional operation). More formally, if this map contains a mapping from key <tt>k</tt> to value <tt>v</tt> such that <code>(key==null ? k==null : key.equals(k))    </code>, that mapping is removed. (The map can contain at most one such mapping.)<p>Returns the value to which this map previously associated the key, or <tt>null</tt> if the map contained no mapping for the key.                     </p><p>If this map permits null values, then a return value of <tt>null</tt> does not <i>necessarily</i> indicate that the map contained no mapping for the key; it's also possible that the map explicitly mapped the key to <tt>null</tt>.                                    </p><p>The map will not contain a mapping for the specified key once the call returns.              </p>                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation iterates over <tt>entrySet()</tt> searching for an entry with the specified key. If such an entry is found, its value is obtained with its <tt>getValue</tt> operation, the entry is removed from the collection (and the backing map) with the iterator's <tt>remove</tt> operation, and the saved value is returned. If the iteration terminates without finding such an entry, <tt>null</tt> is returned. Note that this implementation requires linear time in the size of the map; many implementations will override this method.<p>Note that this implementation throws an <tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt> iterator does not support the <tt>remove</tt> method and this map contains a mapping for the specified key.                          </p>                                                                               </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key whose mapping is to be removed from the map            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>remove</tt> operation is not supported by this map            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the key is of an inappropriate type for this map (<a href="Collection.html#optional-restrictions">optional</a>)              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null and this map does not permit null keys (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>     </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:putAll-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:putAll-java.util.Map-"/><a name="putAll-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>putAll</h4><pre>public void putAll(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,? extends <a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt; m)</pre><div class="block">Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is equivalent to that of calling <a href="../../java/util/Map.html#put-K-V-"><code>put(k, v) </code></a> on this map once for each mapping from key <tt>k</tt> to value <tt>v</tt> in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress.                                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation iterates over the specified map's <tt>entrySet()</tt> collection, and calls this map's <tt>put</tt> operation once for each entry returned by the iteration.<p>Note that this implementation throws an <tt>UnsupportedOperationException</tt> if this map does not support the <tt>put</tt> operation and the specified map is nonempty.                     </p>                      </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - mappings to be stored in this map         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>putAll</tt> operation is not supported by this map            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of a key or value in the specified map prevents it from being stored in this map                      </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified map is null, or if this map does not permit null keys or values, and the specified map contains null keys or values                            </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of a key or value in the specified map prevents it from being stored in this map                      </dd>    </dl></li></ul> <a end_ctx_id="method:putAll-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Removes all of the mappings from this map (optional operation). The map will be empty after this call returns.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#clear--">clear</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation calls <tt>entrySet().clear()</tt>.<p>Note that this implementation throws an <tt>UnsupportedOperationException</tt> if the <tt>entrySet</tt> does not support the <tt>clear</tt> operation.               </p>   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>clear</tt> operation is not supported by this map            </dd>   </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:keySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:keySet--"/><a name="keySet--"/><ul class="blockList"><li class="blockList"><h4>keySet</h4><pre>public <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>&gt; keySet()</pre><div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.                                                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#keySet--">keySet</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation returns a set that subclasses <a href="../../java/util/AbstractSet.html" title="class in java.util"><code>AbstractSet</code></a>. The subclass's iterator method returns a "wrapper object" over this map's <tt>entrySet()</tt> iterator. The <tt>size</tt> method delegates to this map's <tt>size</tt> method and the <tt>contains</tt> method delegates to this map's <tt>containsKey</tt> method.<p>The set is created the first time this method is called, and returned in response to all subsequent calls. No synchronization is performed, so there is a slight chance that multiple calls to this method will not all return the same set.                                         </p>                                       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a set view of the keys contained in this map         </dd>   </dl></li></ul> <a end_ctx_id="method:keySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:values-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:values--"/><a name="values--"/><ul class="blockList"><li class="blockList"><h4>values</h4><pre>public <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt; values()</pre><div class="block">Returns a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.                                                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#values--">values</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation returns a collection that subclasses <a href="../../java/util/AbstractCollection.html" title="class in java.util"><code>AbstractCollection</code></a>. The subclass's iterator method returns a "wrapper object" over this map's <tt>entrySet()</tt> iterator. The <tt>size</tt> method delegates to this map's <tt>size</tt> method and the <tt>contains</tt> method delegates to this map's <tt>containsValue</tt> method.<p>The collection is created the first time this method is called, and returned in response to all subsequent calls. No synchronization is performed, so there is a slight chance that multiple calls to this method will not all return the same collection.                                         </p>                                       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a collection view of the values contained in this map         </dd>   </dl></li></ul> <a end_ctx_id="method:values--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:entrySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:entrySet--"/><a name="entrySet--"/><ul class="blockList"><li class="blockList"><h4>entrySet</h4><pre>public abstract <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;&gt; entrySet()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/Map.html#entrySet--">Map</a></code>   </span> </div><div class="block">Returns a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations. It does not support the <tt>add</tt> or <tt>addAll</tt> operations.                                                                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#entrySet--">entrySet</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a set view of the mappings contained in this map         </dd>  </dl></li></ul> <a end_ctx_id="method:entrySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Compares the specified object with this map for equality. Returns <tt>true</tt> if the given object is also a map and the two maps represent the same mappings. More formally, two maps <tt>m1</tt> and <tt>m2</tt> represent the same mappings if <tt>m1.entrySet().equals(m2.entrySet())</tt>. This ensures that the <tt>equals</tt> method works properly across different implementations of the <tt>Map</tt> interface.                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#equals-java.lang.Object-">equals</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation first checks if the specified object is this map; if so it returns <tt>true</tt>. Then, it checks if the specified object is a map whose size is identical to the size of this map; if not, it returns <tt>false</tt>. If so, it iterates over this map's <tt>entrySet</tt> collection, and checks that the specified map contains each mapping that this map contains. If the specified map fails to contain such a mapping, <tt>false</tt> is returned. If the iteration completes, <tt>true</tt> is returned.                                                                                  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - object to be compared for equality with this map           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if the specified object is equal to this map          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>      </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's <tt>entrySet()</tt> view. This ensures that <tt>m1.equals(m2)</tt> implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>.                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Map.html#hashCode--">hashCode</a></code> in interface <code><a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">K</a>,<a href="../../java/util/AbstractMap.html" title="type parameter in AbstractMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>This implementation iterates over <tt>entrySet()</tt>, calling <a href="../../java/util/Map.Entry.html#hashCode--"><code>hashCode()</code></a> on each element (entry) in the set, and adding up the results.                  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the hash code value for this map      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Map.Entry.html#hashCode--"><code>Map.Entry.hashCode()</code></a>, <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(Object)</code></a>, <a href="../../java/util/Set.html#equals-java.lang.Object-"><code>Set.equals(Object)</code></a>   </dd>     </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this map. The string representation consists of a list of key-value mappings in the order returned by the map's <tt>entrySet</tt> view's iterator, enclosed in braces (<tt>"{}"</tt>). Adjacent mappings are separated by the characters <tt>", " </tt> (comma and space). Each key-value mapping is rendered as the key followed by an equals sign (<tt>"="</tt>) followed by the associated value. Keys and values are converted to strings as by <a href="../../java/lang/String.html#valueOf-java.lang.Object-"><code>String.valueOf(Object)</code></a>.                                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of this map     </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clone--"/><a name="clone--"/><ul class="blockListLast"><li class="blockList"><h4>clone</h4><pre>protected <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> clone()
                throws <a href="../../java/lang/CloneNotSupportedException.html" title="class in java.lang">CloneNotSupportedException</a></pre><div class="block">Returns a shallow copy of this <tt>AbstractMap</tt> instance: the keys and values themselves are not cloned.               </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#clone--">clone</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a shallow copy of this map     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/CloneNotSupportedException.html" title="class in java.lang">CloneNotSupportedException</a></code> - if the object's class does not support the <code>Cloneable</code> interface. Subclasses that override the <code>clone</code> method can also throw this exception to indicate that an instance cannot be cloned.                               </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:clone--"/>  </td></tr></table></td></tr></table></diff></diffreport>