<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PrimitiveIterator [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"><div class="description"> <a start_ctx_id="class:PrimitiveIterator"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of elements returned by this PrimitiveIterator. The type must be a wrapper type for a primitive type, such as <code>Integer</code> for the primitive <code>int</code> type.                             </dd><dd> <code>T_CONS</code> - the type of primitive consumer. The type must be a primitive specialization of <a href="../../java/util/function/Consumer.html" title="interface in java.util.function"><code>Consumer</code></a> for <code>T</code>, such as <a href="../../java/util/function/IntConsumer.html" title="interface in java.util.function"><code>IntConsumer</code></a> for <code>Integer</code>.                       </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt; </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a>, <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a>   </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">PrimitiveIterator&lt;T,T_CONS&gt;</span>
extends <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt;</pre><div class="block">A base type for primitive specializations of <code>Iterator</code>. Specialized subtypes are provided for <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util"><code>int</code></a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util"><code>long</code></a>, and <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util"><code>double</code></a> values.<p>The specialized subtype default implementations of <a href="../../java/util/Iterator.html#next--"><code>Iterator.next()</code></a> and <a href="../../java/util/Iterator.html#forEachRemaining-java.util.function.Consumer-"><code><span class="diff-html-removed">Iterator#forEachRemaining</span><span class="diff-html-added">Iterator.forEachRemaining</span>(java.util.function.Consumer)</code></a> box primitive values to instances of their corresponding wrapper class. Such boxing may offset any advantages gained when using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, <a href="../../java/util/PrimitiveIterator.OfInt.html#nextInt--"><code>PrimitiveIterator.OfInt.nextInt()</code></a> and <a href="../../java/util/PrimitiveIterator.OfInt.html#forEachRemaining-java.util.function.IntConsumer-"><code>PrimitiveIterator.<span class="diff-html-removed">OfInt#forEachRemaining</span><span class="diff-html-added">OfInt.forEachRemaining</span>(java.util.function.IntConsumer)</code></a> should be used in preference to <a href="../../java/util/PrimitiveIterator.OfInt.html#next--"><code>PrimitiveIterator.OfInt.next()</code></a> and <a href="../../java/util/PrimitiveIterator.OfInt.html#forEachRemaining-java.util.function.Consumer-"><code>PrimitiveIterator.<span class="diff-html-removed">OfInt#forEachRemaining</span><span class="diff-html-added">OfInt.forEachRemaining</span>(java.util.function.Consumer)</code></a>.                                                      </p><p>Iteration of primitive values using boxing-based methods <a href="../../java/util/Iterator.html#next--"><code>next()</code></a> and <a href="../../java/util/Iterator.html#forEachRemaining-java.util.function.Consumer-"><code>forEachRemaining()</code></a>, does not affect the order in which the values, transformed to boxed values, are encountered.                        </p>                 </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>If the boolean system property <code>org.openjdk.java.util.stream.tripwire</code> is set to <code>true</code> then diagnostic warnings are reported if boxing of primitive values occur when operating on primitive subtype specializations.                          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl>  </li></ul> </div><div class="summary" changeType="diff-removed-tag"><ul class="blockList"><li class="blockList"><ul class="blockList"><li class="blockList"> <a name="nested.class.summary"><span class="diff-html-removed"/></a><h3><span class="diff-html-removed">Nested</span> <span class="diff-html-removed">Class</span> <span class="diff-html-removed">Summary</span>  </h3><table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation"> <caption> <span><span class="diff-html-removed">Nested</span> <span class="diff-html-removed">Classes</span> </span><span class="tabEnd"><span class="diff-html-removed"> </span></span> <span class="diff-html-removed"/>  </caption><tbody><tr><th class="colFirst" scope="col"><span class="diff-html-removed">Modifier</span> <span class="diff-html-removed">and</span> <span class="diff-html-removed">Type</span>  </th><th class="colLast" scope="col"><span class="diff-html-removed">Interface</span> <span class="diff-html-removed">and</span> <span class="diff-html-removed">Description</span>  </th></tr><tr class="altColor"><td class="colFirst"><code><span class="diff-html-removed">static</span> <span class="diff-html-removed">interface </span> </code></td><td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util"><span class="diff-html-removed">PrimitiveIterator.OfDouble</span></a><span class="diff-html-removed"/></span><span class="diff-html-removed"/></code><div class="block"><span class="diff-html-removed">An</span> <span class="diff-html-removed">Iterator</span> <span class="diff-html-removed">specialized</span> <span class="diff-html-removed">for</span> <code><span class="diff-html-removed">double</span></code> <span class="diff-html-removed">values.</span>     </div></td></tr><tr class="rowColor"><td class="colFirst"><code><span class="diff-html-removed">static</span> <span class="diff-html-removed">interface </span> </code></td><td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util"><span class="diff-html-removed">PrimitiveIterator.OfInt</span></a><span class="diff-html-removed"/></span><span class="diff-html-removed"/></code><div class="block"><span class="diff-html-removed">An</span> <span class="diff-html-removed">Iterator</span> <span class="diff-html-removed">specialized</span> <span class="diff-html-removed">for</span> <code><span class="diff-html-removed">int</span></code> <span class="diff-html-removed">values.</span>     </div></td></tr><tr class="altColor"><td class="colFirst"><code><span class="diff-html-removed">static</span> <span class="diff-html-removed">interface </span> </code></td><td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util"><span class="diff-html-removed">PrimitiveIterator.OfLong</span></a><span class="diff-html-removed"/></span><span class="diff-html-removed"/></code><div class="block"><span class="diff-html-removed">An</span> <span class="diff-html-removed">Iterator</span> <span class="diff-html-removed">specialized</span> <span class="diff-html-removed">for</span> <code><span class="diff-html-removed">long</span></code> <span class="diff-html-removed">values.</span>     </div></td></tr></tbody> </table> </li></ul><ul class="blockList"><li class="blockList"> <a name="method.summary"><span class="diff-html-removed"/></a><h3><span class="diff-html-removed">Method</span> <span class="diff-html-removed">Summary</span> </h3><ul class="blockList"><li class="blockList"> <a name="methods.inherited.from.class.java.util.Iterator"><span class="diff-html-removed"/></a><h3><span class="diff-html-removed">Methods</span> <span class="diff-html-removed">inherited</span> <span class="diff-html-removed">from</span> <span class="diff-html-removed">interface java.util.</span><a href="../../java/util/Iterator.html" title="interface in java.util"><span class="diff-html-removed">Iterator</span></a>   </h3> <code><a href="../../java/util/Iterator.html#hasNext--"><span class="diff-html-removed">hasNext</span></a><span class="diff-html-removed">,</span> <a href="../../java/util/Iterator.html#next--"><span class="diff-html-removed">next</span></a><span class="diff-html-removed">,</span> <a href="../../java/util/Iterator.html#remove--"><span class="diff-html-removed">remove</span></a><span class="diff-html-removed"/>  </code>  </li></ul> </li></ul></li></ul></div> <a end_ctx_id="class:PrimitiveIterator"/> </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"><div class="contentContainer"><div class="description"> <a start_ctx_id="class:PrimitiveIterator"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of elements returned by this PrimitiveIterator. The type must be a wrapper type for a primitive type, such as <code>Integer</code> for the primitive <code>int</code> type.                             </dd><dd> <code>T_CONS</code> - the type of primitive consumer. The type must be a primitive specialization of <a href="../../java/util/function/Consumer.html" title="interface in java.util.function"><code>Consumer</code></a> for <code>T</code>, such as <a href="../../java/util/function/IntConsumer.html" title="interface in java.util.function"><code>IntConsumer</code></a> for <code>Integer</code>.                       </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt; </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a>, <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a>   </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">PrimitiveIterator&lt;T,T_CONS&gt;</span>
extends <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt;</pre><div class="block">A base type for primitive specializations of <code>Iterator</code>. Specialized subtypes are provided for <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util"><code>int</code></a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util"><code>long</code></a>, and <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util"><code>double</code></a> values.<p>The specialized subtype default implementations of <a href="../../java/util/Iterator.html#next--"><code>Iterator.next()</code></a> and <code>Iterator#forEachRemaining(java.util.function.Consumer)</code> box primitive values to instances of their corresponding wrapper class. Such boxing may offset any advantages gained when using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, <a href="../../java/util/PrimitiveIterator.OfInt.html#nextInt--"><code>PrimitiveIterator.OfInt.nextInt()</code></a> and <code>PrimitiveIterator.OfInt#forEachRemaining(java.util.function.IntConsumer)</code> should be used in preference to <a href="../../java/util/PrimitiveIterator.OfInt.html#next--"><code>PrimitiveIterator.OfInt.next()</code></a> and <code>PrimitiveIterator.OfInt#forEachRemaining(java.util.function.Consumer)</code>.                                                      </p><p>Iteration of primitive values using boxing-based methods <a href="../../java/util/Iterator.html#next--"><code>next()</code></a> and <code>forEachRemaining()</code>, does not affect the order in which the values, transformed to boxed values, are encountered.                        </p>                 </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>If the boolean system property <code>org.openjdk.java.util.stream.tripwire</code> is set to <code>true</code> then diagnostic warnings are reported if boxing of primitive values occur when operating on primitive subtype specializations.                          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl>  </li></ul> </div><div class="summary" changeType="diff-removed-tag"><ul class="blockList"><li class="blockList"><ul class="blockList"><li class="blockList"> <a name="nested.class.summary"/><h3>Nested Class Summary  </h3><table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation"> <caption> <span>Nested Classes </span><span class="tabEnd"> </span>   </caption><tbody><tr><th class="colFirst" scope="col">Modifier and Type  </th><th class="colLast" scope="col">Interface and Description  </th></tr><tr class="altColor"><td class="colFirst"><code>static interface  </code></td><td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a></span></code><div class="block">An Iterator specialized for <code>double</code> values.     </div></td></tr><tr class="rowColor"><td class="colFirst"><code>static interface  </code></td><td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a></span></code><div class="block">An Iterator specialized for <code>int</code> values.     </div></td></tr><tr class="altColor"><td class="colFirst"><code>static interface  </code></td><td class="colLast"><code><span class="memberNameLink"><a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a></span></code><div class="block">An Iterator specialized for <code>long</code> values.     </div></td></tr></tbody> </table> </li></ul><ul class="blockList"><li class="blockList"> <a name="method.summary"/><h3>Method Summary </h3><ul class="blockList"><li class="blockList"> <a name="methods.inherited.from.class.java.util.Iterator"/><h3>Methods inherited from interface java.util.<a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>   </h3> <code><a href="../../java/util/Iterator.html#hasNext--">hasNext</a>, <a href="../../java/util/Iterator.html#next--">next</a>, <a href="../../java/util/Iterator.html#remove--">remove</a>  </code>  </li></ul> </li></ul></li></ul></div></div> <a end_ctx_id="class:PrimitiveIterator"/> </td><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PrimitiveIterator"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of elements returned by this PrimitiveIterator. The type must be a wrapper type for a primitive type, such as <code>Integer</code> for the primitive <code>int</code> type.                             </dd><dd> <code>T_CONS</code> - the type of primitive consumer. The type must be a primitive specialization of <a href="../../java/util/function/Consumer.html" title="interface in java.util.function"><code>Consumer</code></a> for <code>T</code>, such as <a href="../../java/util/function/IntConsumer.html" title="interface in java.util.function"><code>IntConsumer</code></a> for <code>Integer</code>.                       </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt; </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util">PrimitiveIterator.OfDouble</a>, <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util">PrimitiveIterator.OfInt</a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util">PrimitiveIterator.OfLong</a>   </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">PrimitiveIterator&lt;T,T_CONS&gt;</span>
extends <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt;</pre><div class="block">A base type for primitive specializations of <code>Iterator</code>. Specialized subtypes are provided for <a href="../../java/util/PrimitiveIterator.OfInt.html" title="interface in java.util"><code>int</code></a>, <a href="../../java/util/PrimitiveIterator.OfLong.html" title="interface in java.util"><code>long</code></a>, and <a href="../../java/util/PrimitiveIterator.OfDouble.html" title="interface in java.util"><code>double</code></a> values.<p>The specialized subtype default implementations of <a href="../../java/util/Iterator.html#next--"><code>Iterator.next()</code></a> and <a href="../../java/util/Iterator.html#forEachRemaining-java.util.function.Consumer-"><code>Iterator.forEachRemaining(java.util.function.Consumer)</code></a> box primitive values to instances of their corresponding wrapper class. Such boxing may offset any advantages gained when using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, <a href="../../java/util/PrimitiveIterator.OfInt.html#nextInt--"><code>PrimitiveIterator.OfInt.nextInt()</code></a> and <a href="../../java/util/PrimitiveIterator.OfInt.html#forEachRemaining-java.util.function.IntConsumer-"><code>PrimitiveIterator.OfInt.forEachRemaining(java.util.function.IntConsumer)</code></a> should be used in preference to <a href="../../java/util/PrimitiveIterator.OfInt.html#next--"><code>PrimitiveIterator.OfInt.next()</code></a> and <a href="../../java/util/PrimitiveIterator.OfInt.html#forEachRemaining-java.util.function.Consumer-"><code>PrimitiveIterator.OfInt.forEachRemaining(java.util.function.Consumer)</code></a>.                                                      </p><p>Iteration of primitive values using boxing-based methods <a href="../../java/util/Iterator.html#next--"><code>next()</code></a> and <a href="../../java/util/Iterator.html#forEachRemaining-java.util.function.Consumer-"><code>forEachRemaining()</code></a>, does not affect the order in which the values, transformed to boxed values, are encountered.                        </p>                 </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>If the boolean system property <code>org.openjdk.java.util.stream.tripwire</code> is set to <code>true</code> then diagnostic warnings are reported if boxing of primitive values occur when operating on primitive subtype specializations.                          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:PrimitiveIterator"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachRemaining-T_CONS- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:forEachRemaining-T_CONS-"><span class="diff-html-added"/></a><a name="forEachRemaining-T_CONS-"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">forEachRemaining</span></h4><pre><span class="diff-html-added">void forEachRemaining(</span><a href="../../java/util/PrimitiveIterator.html" title="type parameter in PrimitiveIterator"><span class="diff-html-added">T_CONS</span></a><span class="diff-html-added"> action)</span></pre><div class="block"><span class="diff-html-added">Performs</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">action</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">remaining</span> <span class="diff-html-added">element,</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">order</span> <span class="diff-html-added">elements</span> <span class="diff-html-added">occur</span> <span class="diff-html-added">when</span> <span class="diff-html-added">iterating,</span> <span class="diff-html-added">until</span> <span class="diff-html-added">all</span> <span class="diff-html-added">elements</span> <span class="diff-html-added">have</span> <span class="diff-html-added">been</span> <span class="diff-html-added">processed</span> <span class="diff-html-added">or</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception.</span> <span class="diff-html-added">Errors</span> <span class="diff-html-added">or</span> <span class="diff-html-added">runtime</span> <span class="diff-html-added">exceptions</span> <span class="diff-html-added">thrown</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">are</span> <span class="diff-html-added">relayed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">caller.</span>                                       </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">action</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">The</span> <span class="diff-html-added">action</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">element</span>          </dd> <dt> <span class="throwsLabel"><span class="diff-html-added">Throws:</span></span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang"><span class="diff-html-added">NullPointerException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">action</span> <span class="diff-html-added">is</span> <span class="diff-html-added">null</span>        </dd>  </dl></li></ul> <a end_ctx_id="method:forEachRemaining-T_CONS-"><span class="diff-html-added"/></a> </td></tr></table></td></tr></table></diff></diffreport>