<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ExecutorService [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ExecutorService"/><ul class="blockList"><li class="blockList"><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent">Executor</a> </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../../java/util/concurrent/ScheduledExecutorService.html" title="interface in java.util.concurrent">ScheduledExecutorService</a> </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a>, <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent">ForkJoinPool</a>, <a href="../../../java/util/concurrent/ScheduledThreadPoolExecutor.html" title="class in java.util.concurrent">ScheduledThreadPoolExecutor</a>, <a href="../../../java/util/concurrent/ThreadPoolExecutor.html" title="class in java.util.concurrent">ThreadPoolExecutor</a>    </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">ExecutorService</span>
extends <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent">Executor</a></pre><div class="block">An <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent"><code>Executor</code></a> that provides methods to manage termination and methods that can produce a <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent"><code>Future</code></a> for tracking progress of one or more asynchronous tasks.<p>An <code>ExecutorService</code> can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an <code>ExecutorService</code>. The <a href="../../../java/util/concurrent/ExecutorService.html#shutdown--"><code>shutdown()</code></a> method will allow previously submitted tasks to execute before terminating, while the <a href="../../../java/util/concurrent/ExecutorService.html#shutdownNow--"><code>shutdownNow()</code></a> method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused <code>ExecutorService</code> should be shut down to allow reclamation of its resources.                                                                                    </p><p>Method <code>submit</code> extends base method <a href="../../../java/util/concurrent/Executor.html#execute-java.lang.Runnable-"><code>Executor.execute(Runnable)</code></a> by creating and returning a <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent"><code>Future</code></a> that can be used to cancel execution and/or wait for completion. Methods <code>invokeAny</code> and <code>invokeAll</code> perform the most commonly useful forms of bulk execution, executing a collection of tasks and then waiting for at least one, or all, to complete. (Class <a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="class in java.util.concurrent"><code>ExecutorCompletionService</code></a> can be used to write customized variants of these methods.)                                                               </p><p>The <a href="../../../java/util/concurrent/Executors.html" title="class in java.util.concurrent"><code>Executors</code></a> class provides factory methods for the executor services provided in this package.             </p><h3>Usage Examples </h3> Here is a sketch of a network service in which threads in a thread pool service incoming requests. It uses the preconfigured <a href="../../../java/util/concurrent/Executors.html#newFixedThreadPool-int-"><code>Executors.newFixedThreadPool(int)</code></a> factory method:<pre> 
<code>
 class NetworkService implements Runnable {
   private final ServerSocket serverSocket;
   private final ExecutorService pool;

   public NetworkService(int port, int poolSize)
       throws IOException {
     serverSocket = new ServerSocket(port);
     pool = Executors.newFixedThreadPool(poolSize);
   }

   public void run() { // run the service
     try {
       for (;;) {
         pool.execute(new Handler(serverSocket.accept()));
       }
     } catch (IOException ex) {
       pool.shutdown();
     }
   }
 }

 class Handler implements Runnable {
   private final Socket socket;
   Handler(Socket socket) { this.socket = socket; }
   public void run() {
     // read and service request on socket
   }
 }</code></pre> The following method shuts down an <code>ExecutorService</code> in two phases, first by calling <code>shutdown</code> to reject incoming tasks, and then calling <code>shutdownNow</code>, if necessary, to cancel any lingering tasks:<pre> 
<code>
 void shutdownAndAwaitTermination(ExecutorService pool) {
   pool.shutdown(); // Disable new tasks from being submitted
   try {
     // Wait a while for existing tasks to terminate
     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
       pool.shutdownNow(); // Cancel currently executing tasks
       // Wait a while for tasks to respond to being cancelled
       if (!pool.awaitTermination(60, TimeUnit.SECONDS))
           System.err.println("Pool did not terminate");
     }
   } catch (InterruptedException ie) {
     // (Re-)Cancel if current thread also interrupted
     pool.shutdownNow();
     // Preserve interrupt status
     Thread.currentThread().interrupt();
   }
 }</code></pre><p>Memory consistency effects: Actions in a thread prior to the submission of a <code>Runnable</code> or <code>Callable</code> task to an <code>ExecutorService</code><a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> any actions taken by that task, which in turn <i>happen-before</i> the result is retrieved via <code>Future.get()</code>.                                   </p>                                                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:ExecutorService"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shutdown-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shutdown--"/><a name="shutdown--"/><ul class="blockList"><li class="blockList"><h4>shutdown</h4><pre>void shutdown()</pre><div class="block">Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down.<p>This method does not wait for previously submitted tasks to complete execution. Use <a href="../../../java/util/concurrent/ExecutorService.html#awaitTermination-long-java.util.concurrent.TimeUnit-"><code>awaitTermination</code></a> to do that.                </p>                          </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>, or the security manager's <code>checkAccess</code> method denies access.                                     </dd> </dl></li></ul> <a end_ctx_id="method:shutdown--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shutdownNow-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shutdownNow--"/><a name="shutdownNow--"/><ul class="blockList"><li class="blockList"><h4>shutdownNow</h4><pre><a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>&gt; shutdownNow()</pre><div class="block">Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.<p>This method does not wait for actively executing tasks to terminate. Use <a href="../../../java/util/concurrent/ExecutorService.html#awaitTermination-long-java.util.concurrent.TimeUnit-"><code>awaitTermination</code></a> to do that.               </p><p>There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. For example, typical implementations will cancel via <a href="../../../java/lang/Thread.html#interrupt--"><code>Thread.interrupt()</code></a>, so any task that fails to respond to interrupts may never terminate.                                </p>                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>list of tasks that never commenced execution      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>, or the security manager's <code>checkAccess</code> method denies access.                                     </dd>  </dl></li></ul> <a end_ctx_id="method:shutdownNow--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isShutdown-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isShutdown--"/><a name="isShutdown--"/><ul class="blockList"><li class="blockList"><h4>isShutdown</h4><pre>boolean isShutdown()</pre><div class="block">Returns <code>true</code> if this executor has been shut down.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this executor has been shut down        </dd> </dl></li></ul> <a end_ctx_id="method:isShutdown--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isTerminated-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isTerminated--"/><a name="isTerminated--"/><ul class="blockList"><li class="blockList"><h4>isTerminated</h4><pre>boolean isTerminated()</pre><div class="block">Returns <code>true</code> if all tasks have completed following shut down. Note that <code>isTerminated</code> is never <code>true</code> unless either <code>shutdown</code> or <code>shutdownNow</code> was called first.                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if all tasks have completed following shut down         </dd> </dl></li></ul> <a end_ctx_id="method:isTerminated--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:awaitTermination-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:awaitTermination-long-java.util.concurrent.TimeUnit-"/><a name="awaitTermination-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>awaitTermination</h4><pre>boolean awaitTermination(long timeout,
                         <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
                  throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this executor terminated and <code>false</code> if the timeout elapsed before termination             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:awaitTermination-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.util.concurrent.Callable-"/><a name="submit-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>&lt;T&gt; <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt; submit(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt; task)</pre><div class="block">Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's <code>get</code> method will return the task's result upon successful completion.<p> If you would like to immediately block waiting for a task, you can use constructions of the form <code>result = exec.submit(aCallable).get();  </code>                   </p><p>Note: The <a href="../../../java/util/concurrent/Executors.html" title="class in java.util.concurrent"><code>Executors</code></a> class includes a set of methods that can convert some other common closure-like objects, for example, <a href="../../../java/security/PrivilegedAction.html" title="interface in java.security"><code>PrivilegedAction</code></a> to <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent"><code>Callable</code></a> form so they can be submitted.                           </p>                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the task's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>    </dl></li></ul> <a name="submit-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:submit-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-T-"/><a name="submit-java.lang.Runnable-T-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>&lt;T&gt; <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt; submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> task,
                     T result)</pre><div class="block">Submits a Runnable task for execution and returns a Future representing that task. The Future's <code>get</code> method will return the given result upon successful completion.                        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the result       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd><dd> <code>result</code> - the result to return      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>    </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-"/><a name="submit-java.lang.Runnable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;?&gt; submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> task)</pre><div class="block">Submits a Runnable task for execution and returns a Future representing that task. The Future's <code>get</code> method will return <code>null</code> upon <em>successful</em> completion.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>   </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.Collection-"/><a name="invokeAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>&lt;T&gt; <a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt;&gt; invokeAll(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks)
                       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Executes the given tasks, returning a list of Futures holding their status and results when all complete. <a href="../../../java/util/concurrent/Future.html#isDone--"><code>Future.isDone()</code></a> is <code>true</code> for each element of the returned list. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case unfinished tasks are cancelled             </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if tasks or any of its elements are <code>null</code>           </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if any task cannot be scheduled for execution          </dd>    </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><a name="invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>&lt;T&gt; <a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt;&gt; invokeAll(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks,
                              long timeout,
                              <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
                       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first. <a href="../../../java/util/concurrent/Future.html#isDone--"><code>Future.isDone()</code></a> is <code>true</code> for each element of the returned list. Upon return, tasks that have not completed are cancelled. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed.                                              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case unfinished tasks are cancelled             </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if tasks, any of its elements, or unit are <code>null</code>            </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if any task cannot be scheduled for execution          </dd>    </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAny-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAny-java.util.Collection-"/><a name="invokeAny-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>invokeAny</h4><pre>&lt;T&gt; T invokeAny(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks)
         throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></pre><div class="block">Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result returned by one of the tasks       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if tasks or any element task subject to execution is <code>null</code>             </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if tasks is empty      </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if no task successfully completes       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if tasks cannot be scheduled for execution         </dd>    </dl></li></ul> <a end_ctx_id="method:invokeAny-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><a name="invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><ul class="blockListLast"><li class="blockList"><h4>invokeAny</h4><pre>&lt;T&gt; T invokeAny(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks,
                long timeout,
                <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
         throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a>,
                <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></pre><div class="block">Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result returned by one of the tasks       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if tasks, or unit, or any element task subject to execution is <code>null</code>               </dd><dd> <code><a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></code> - if the given timeout elapses before any task successfully completes            </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if no task successfully completes       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if tasks cannot be scheduled for execution         </dd>    </dl></li></ul> <a end_ctx_id="method:invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table></diff></diffreport>