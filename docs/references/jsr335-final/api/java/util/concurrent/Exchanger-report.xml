<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Exchanger [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Exchanger"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>V</code> - The type of objects that may be exchanged          </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">Exchanger&lt;V&gt;</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">A synchronization point at which threads can pair and swap elements within pairs. Each thread presents some object on entry to the <a href="../../../java/util/concurrent/Exchanger.html#exchange-V-"><code>exchange</code></a> method, matches with a partner thread, and receives its partner's object on return. An Exchanger may be viewed as a bidirectional form of a <a href="../../../java/util/concurrent/SynchronousQueue.html" title="class in java.util.concurrent"><code>SynchronousQueue</code></a>. Exchangers may be useful in applications such as genetic algorithms and pipeline designs.<p> <b>Sample Usage: </b> Here are the highlights of a class that uses an <code>Exchanger</code> to swap buffers between threads so that the thread filling the buffer gets a freshly emptied one when it needs it, handing off the filled one to the thread emptying the buffer.<pre> 
<code>
 class FillAndEmpty {
   Exchanger&lt;DataBuffer&gt; exchanger = new Exchanger&lt;DataBuffer&gt;();
   DataBuffer initialEmptyBuffer = ... a made-up type
   DataBuffer initialFullBuffer = ...

   class FillingLoop implements Runnable {
     public void run() {
       DataBuffer currentBuffer = initialEmptyBuffer;
       try {
         while (currentBuffer != null) {
           addToBuffer(currentBuffer);
           if (currentBuffer.isFull())
             currentBuffer = exchanger.exchange(currentBuffer);
         }
       } catch (InterruptedException ex) { ... handle ... }
     }
   }

   class EmptyingLoop implements Runnable {
     public void run() {
       DataBuffer currentBuffer = initialFullBuffer;
       try {
         while (currentBuffer != null) {
           takeFromBuffer(currentBuffer);
           if (currentBuffer.isEmpty())
             currentBuffer = exchanger.exchange(currentBuffer);
         }
       } catch (InterruptedException ex) { ... handle ...}
     }
   }

   void start() {
     new Thread(new FillingLoop()).start();
     new Thread(new EmptyingLoop()).start();
   }
 }</code></pre>                                            </p><p>Memory consistency effects: For each pair of threads that successfully exchange objects via an <code>Exchanger</code>, actions prior to the <code>exchange()</code> in each thread <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> those subsequent to a return from the corresponding <code>exchange()</code> in the other thread.                                    </p>                                                            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Exchanger"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Exchanger-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Exchanger--"/><a name="Exchanger--"/><ul class="blockListLast"><li class="blockList"><h4>Exchanger</h4><pre>public Exchanger()</pre><div class="block">Creates a new Exchanger.   </div></li></ul> <a end_ctx_id="constructor:Exchanger--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exchange-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:exchange-V-"/><a name="exchange-V-"/><ul class="blockList"><li class="blockList"><h4>exchange</h4><pre>public <a href="../../../java/util/concurrent/Exchanger.html" title="type parameter in Exchanger">V</a> exchange(<a href="../../../java/util/concurrent/Exchanger.html" title="type parameter in Exchanger">V</a> x)
           throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Waits for another thread to arrive at this exchange point (unless the current thread is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a>), and then transfers the given object to it, receiving its object in return.<p>If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread.                                           </p><p>If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of two things happens:<ul><li>Some other thread enters the exchange; or      </li><li>Some other thread <a href="../../../java/lang/Thread.html#interrupt--">interrupts</a> the current thread.      </li></ul>                            </p><p>If the current thread:<ul><li>has its interrupted status set on entry to this method; or          </li><li>is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a> while waiting for the exchange,      </li></ul> then <a href="../../../java/lang/InterruptedException.html" title="class in java.lang"><code>InterruptedException</code></a> is thrown and the current thread's interrupted status is cleared.               </p>                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the object to exchange      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the object provided by the other thread      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread was interrupted while waiting          </dd>   </dl></li></ul> <a name="exchange-java.lang.Object-long-java.util.concurrent.TimeUnit-"/><a end_ctx_id="method:exchange-V-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exchange-V-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exchange-V-long-java.util.concurrent.TimeUnit-"/><a name="exchange-V-long-java.util.concurrent.TimeUnit-"/><ul class="blockListLast"><li class="blockList"><h4>exchange</h4><pre>public <a href="../../../java/util/concurrent/Exchanger.html" title="type parameter in Exchanger">V</a> exchange(<a href="../../../java/util/concurrent/Exchanger.html" title="type parameter in Exchanger">V</a> x,
                  long timeout,
                  <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
           throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                  <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></pre><div class="block">Waits for another thread to arrive at this exchange point (unless the current thread is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a> or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.<p>If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread.                                           </p><p>If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of three things happens:<ul><li>Some other thread enters the exchange; or      </li><li>Some other thread <a href="../../../java/lang/Thread.html#interrupt--">interrupts</a> the current thread; or       </li><li>The specified waiting time elapses.    </li></ul>                            </p><p>If the current thread:<ul><li>has its interrupted status set on entry to this method; or          </li><li>is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a> while waiting for the exchange,      </li></ul> then <a href="../../../java/lang/InterruptedException.html" title="class in java.lang"><code>InterruptedException</code></a> is thrown and the current thread's interrupted status is cleared.               </p><p>If the specified waiting time elapses then <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent"><code>TimeoutException</code></a> is thrown. If the time is less than or equal to zero, the method will not wait at all.                          </p>                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the object to exchange      </dd><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the <code>timeout</code> argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the object provided by the other thread      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread was interrupted while waiting          </dd><dd> <code><a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></code> - if the specified waiting time elapses before another thread enters the exchange              </dd>   </dl></li></ul> <a end_ctx_id="method:exchange-V-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table></diff></diffreport>