<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ForkJoinTask [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ForkJoinTask"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;V&gt;  </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../../java/util/concurrent/CountedCompleter.html" title="class in java.util.concurrent">CountedCompleter</a>, <a href="../../../java/util/concurrent/RecursiveAction.html" title="class in java.util.concurrent">RecursiveAction</a>, <a href="../../../java/util/concurrent/RecursiveTask.html" title="class in java.util.concurrent">RecursiveTask</a>   </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">ForkJoinTask&lt;V&gt;</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;V&gt;, <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">Abstract base class for tasks that run within a <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent"><code>ForkJoinPool</code></a>. A <code>ForkJoinTask</code> is a thread-like entity that is much lighter weight than a normal thread. Huge numbers of tasks and subtasks may be hosted by a small number of actual threads in a ForkJoinPool, at the price of some usage limitations.<p>A "main" <code>ForkJoinTask</code> begins execution when it is explicitly submitted to a <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent"><code>ForkJoinPool</code></a>, or, if not already engaged in a ForkJoin computation, commenced in the <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>ForkJoinPool.commonPool()</code></a> via <a href="../../../java/util/concurrent/ForkJoinTask.html#fork--"><code>fork()</code></a>, <a href="../../../java/util/concurrent/ForkJoinTask.html#invoke--"><code>invoke()</code></a>, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using <code>ForkJoinTask</code> employ only methods <a href="../../../java/util/concurrent/ForkJoinTask.html#fork--"><code>fork()</code></a> and <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>, or derivatives such as <a href="../../../java/util/concurrent/ForkJoinTask.html#invokeAll-java.util.concurrent.ForkJoinTask...-"><code>invokeAll</code></a>. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing.                                                                                                </p><p>A <code>ForkJoinTask</code> is a lightweight form of <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent"><code>Future</code></a>. The efficiency of <code>ForkJoinTask</code>s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are <a href="../../../java/util/concurrent/ForkJoinTask.html#fork--"><code>fork()</code></a>, that arranges asynchronous execution, and <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>, that doesn't proceed until the task's result has been computed. Computations should ideally avoid <code>synchronized</code> methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as <code>IOExceptions</code> to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include <a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent"><code>RejectedExecutionException</code></a> stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using <code>ex.printStackTrace()</code>) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter.                                                                                                                                                                                                                    </p><p>It is possible to define and use ForkJoinTasks that may block, but doing do requires three further considerations: (1) Completion of few if any <em>other</em> tasks should be dependent on a task that blocks on external synchronization or I/O. Event-style async tasks that are never joined (for example, those subclassing <a href="../../../java/util/concurrent/CountedCompleter.html" title="class in java.util.concurrent"><code>CountedCompleter</code></a>) often fall into this category. (2) To minimize resource impact, tasks should be small; ideally performing only the (possibly) blocking action. (3) Unless the <a href="../../../java/util/concurrent/ForkJoinPool.ManagedBlocker.html" title="interface in java.util.concurrent"><code>ForkJoinPool.ManagedBlocker</code></a> API is used, or the number of possibly blocked tasks is known to be less than the pool's <a href="../../../java/util/concurrent/ForkJoinPool.html#getParallelism--"><code>ForkJoinPool.getParallelism()</code></a> level, the pool cannot guarantee that enough threads will be available to ensure progress or good performance.                                                                                                               </p><p>The primary method for awaiting completion and extracting results of a task is <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>, but there are several variants: The <a href="../../../java/util/concurrent/Future.html#get--"><code>Future.get()</code></a> methods support interruptible and/or timed waits for completion and report results using <code>Future</code> conventions. Method <a href="../../../java/util/concurrent/ForkJoinTask.html#invoke--"><code>invoke()</code></a> is semantically equivalent to <code>fork(); join() </code> but always attempts to begin execution in the current thread. The "<em>quiet</em>" forms of these methods do not extract results or report exceptions. These may be useful when a set of tasks are being executed, and you need to delay processing of results or exceptions until all complete. Method <code>invokeAll</code> (available in multiple versions) performs the most common form of parallel invocation: forking a set of tasks and joining them all.                                                                                                                </p><p>In the most typical usages, a fork-join pair act like a call (fork) and return (join) from a parallel recursive function. As is the case with other forms of recursive calls, returns (joins) should be performed innermost-first. For example, <code>a.fork(); b.fork(); b.join(); a.join();   </code> is likely to be substantially more efficient than joining <code>a</code> before <code>b</code>.                                                   </p><p>The execution status of tasks may be queried at several levels of detail: <a href="../../../java/util/concurrent/ForkJoinTask.html#isDone--"><code>isDone()</code></a> is true if a task completed in any way (including the case where a task was cancelled without executing); <a href="../../../java/util/concurrent/ForkJoinTask.html#isCompletedNormally--"><code>isCompletedNormally()</code></a> is true if a task completed without cancellation or encountering an exception; <a href="../../../java/util/concurrent/ForkJoinTask.html#isCancelled--"><code>isCancelled()</code></a> is true if the task was cancelled (in which case <a href="../../../java/util/concurrent/ForkJoinTask.html#getException--"><code>getException()</code></a> returns a <a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent"><code>CancellationException</code></a>); and <a href="../../../java/util/concurrent/ForkJoinTask.html#isCompletedAbnormally--"><code>isCompletedAbnormally()</code></a> is true if a task was either cancelled or encountered an exception, in which case <a href="../../../java/util/concurrent/ForkJoinTask.html#getException--"><code>getException()</code></a> will return either the encountered exception or <a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent"><code>CancellationException</code></a>.                                                                                      </p><p>The ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically <a href="../../../java/util/concurrent/RecursiveAction.html" title="class in java.util.concurrent"><code>RecursiveAction</code></a> for most computations that do not return results, <a href="../../../java/util/concurrent/RecursiveTask.html" title="class in java.util.concurrent"><code>RecursiveTask</code></a> for those that do, and <a href="../../../java/util/concurrent/CountedCompleter.html" title="class in java.util.concurrent"><code>CountedCompleter</code></a> for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a <code>compute</code> method that somehow uses the control methods supplied by this base class.                                                                                </p><p>Method <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a> and its variants are appropriate for use only when completion dependencies are acyclic; that is, the parallel computation can be described as a directed acyclic graph (DAG). Otherwise, executions may encounter a form of deadlock as tasks cyclically wait for each other. However, this framework supports other methods and techniques (for example the use of <a href="../../../java/util/concurrent/Phaser.html" title="class in java.util.concurrent"><code>Phaser</code></a>, <a href="../../../java/util/concurrent/ForkJoinTask.html#helpQuiesce--"><code>helpQuiesce()</code></a>, and <a href="../../../java/util/concurrent/ForkJoinTask.html#complete-V-"><code>complete(V)</code></a>) that may be of use in constructing custom subclasses for problems that are not statically structured as DAGs. To support such usages, a ForkJoinTask may be atomically <em>tagged</em> with a <code>short</code> value using <a href="../../../java/util/concurrent/ForkJoinTask.html#setForkJoinTaskTag-short-"><code>setForkJoinTaskTag(short)</code></a> or <a href="../../../java/util/concurrent/ForkJoinTask.html#compareAndSetForkJoinTaskTag-short-short-"><code>compareAndSetForkJoinTaskTag(short, short) </code></a> and checked using <a href="../../../java/util/concurrent/ForkJoinTask.html#getForkJoinTaskTag--"><code>getForkJoinTaskTag()</code></a>. The ForkJoinTask implementation does not use these <code>protected</code> methods or tags for any purpose, but they may be of use in the construction of specialized subclasses. For example, parallel graph traversals can use the supplied methods to avoid revisiting nodes/tasks that have already been processed. (Method names for tagging are bulky in part to encourage definition of methods that reflect their usage patterns.)                                                                                                                                                                   </p><p>Most base support methods are <code>final</code>, to prevent overriding of implementations that are intrinsically tied to the underlying lightweight task scheduling framework. Developers creating new basic styles of fork/join processing should minimally implement <code>protected</code> methods <a href="../../../java/util/concurrent/ForkJoinTask.html#exec--"><code>exec()</code></a>, <a href="../../../java/util/concurrent/ForkJoinTask.html#setRawResult-V-"><code>setRawResult(V)</code></a>, and <a href="../../../java/util/concurrent/ForkJoinTask.html#getRawResult--"><code>getRawResult()</code></a>, while also introducing an abstract computational method that can be implemented in its subclasses, possibly relying on other <code>protected</code> methods provided by this class.                                                              </p><p>ForkJoinTasks should perform relatively small amounts of computation. Large tasks should be split into smaller subtasks, usually via recursive decomposition. As a very rough rule of thumb, a task should perform more than 100 and less than 10000 basic computational steps, and should avoid indefinite looping. If tasks are too big, then parallelism cannot improve throughput. If too small, then memory and internal task maintenance overhead may overwhelm processing.                                                                    </p><p>This class provides <code>adapt</code> methods for <a href="../../../java/lang/Runnable.html" title="interface in java.lang"><code>Runnable</code></a> and <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent"><code>Callable</code></a>, that may be of use when mixing execution of <code>ForkJoinTasks</code> with other kinds of tasks. When all tasks are of this form, consider using a pool constructed in <em>asyncMode</em>.                                     </p><p>ForkJoinTasks are <code>Serializable</code>, which enables them to be used in extensions such as remote execution frameworks. It is sensible to serialize tasks only before or after, but not during, execution. Serialization is not relied on during execution itself.                                     </p>                                                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../serialized-form.html#java.util.concurrent.ForkJoinTask">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:ForkJoinTask"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ForkJoinTask-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ForkJoinTask--"/><a name="ForkJoinTask--"/><ul class="blockListLast"><li class="blockList"><h4>ForkJoinTask</h4><pre>public ForkJoinTask()</pre></li></ul> <a end_ctx_id="constructor:ForkJoinTask--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:fork-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:fork--"/><a name="fork--"/><ul class="blockList"><li class="blockList"><h4>fork</h4><pre>public final <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a>&gt; fork()</pre><div class="block">Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>ForkJoinPool.commonPool()</code></a> if not <a href="../../../java/util/concurrent/ForkJoinTask.html#inForkJoinPool--"><code>inForkJoinPool()</code></a>. While it is not necessarily enforced, it is a usage error to fork a task more than once unless it has completed and been reinitialized. Subsequent modifications to the state of this task or any data it operates on are not necessarily consistently observable by any thread other than the one executing it unless preceded by a call to <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a> or related methods, or a call to <a href="../../../java/util/concurrent/ForkJoinTask.html#isDone--"><code>isDone()</code></a> returning <code>true</code>.                                                                                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>this</code>, to simplify usage    </dd> </dl></li></ul> <a end_ctx_id="method:fork--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:join-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:join--"/><a name="join--"/><ul class="blockList"><li class="blockList"><h4>join</h4><pre>public final <a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> join()</pre><div class="block">Returns the result of the computation when it <a href="../../../java/util/concurrent/ForkJoinTask.html#isDone--"><code>is done </code></a>. This method differs from <a href="../../../java/util/concurrent/ForkJoinTask.html#get--"><code>get()</code></a> in that abnormal completion results in <code>RuntimeException</code> or <code>Error</code>, not <code>ExecutionException</code>, and that interrupts of the calling thread do <em>not</em> cause the method to abruptly return by throwing <code>InterruptedException</code>.                                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> </dl></li></ul> <a end_ctx_id="method:join--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invoke-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invoke--"/><a name="invoke--"/><ul class="blockList"><li class="blockList"><h4>invoke</h4><pre>public final <a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> invoke()</pre><div class="block">Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) <code>RuntimeException</code> or <code>Error</code> if the underlying computation did so.                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> </dl></li></ul> <a end_ctx_id="method:invoke--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.concurrent.ForkJoinTask-java.util.concurrent.ForkJoinTask- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.concurrent.ForkJoinTask-java.util.concurrent.ForkJoinTask-"/><a name="invokeAll-java.util.concurrent.ForkJoinTask-java.util.concurrent.ForkJoinTask-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>public static void invokeAll(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt; t1,
                             <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt; t2)</pre><div class="block">Forks the given tasks, returning when <code>isDone</code> holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, the other may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using <a href="../../../java/util/concurrent/ForkJoinTask.html#getException--"><code>getException()</code></a> and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.                                                                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>t1</code> - the first task     </dd><dd> <code>t2</code> - the second task     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if any task is null       </dd>  </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.concurrent.ForkJoinTask-java.util.concurrent.ForkJoinTask-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.concurrent.ForkJoinTask...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.concurrent.ForkJoinTask...-"/><a name="invokeAll-java.util.concurrent.ForkJoinTask...-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>public static void invokeAll(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt;... tasks)</pre><div class="block">Forks the given tasks, returning when <code>isDone</code> holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using <a href="../../../java/util/concurrent/ForkJoinTask.html#getException--"><code>getException()</code></a> and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.                                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the tasks    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if any task is null       </dd>  </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.concurrent.ForkJoinTask...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.Collection-"/><a name="invokeAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>public static &lt;T extends <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt;&gt; <a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;T&gt; invokeAll(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;T&gt; tasks)</pre><div class="block">Forks all tasks in the specified collection, returning when <code>isDone</code> holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using <a href="../../../java/util/concurrent/ForkJoinTask.html#getException--"><code>getException()</code></a> and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.                                                                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tasks argument, to simplify usage     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if tasks or any element are null         </dd>    </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cancel-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cancel-boolean-"/><a name="cancel-boolean-"/><ul class="blockList"><li class="blockList"><h4>cancel</h4><pre>public boolean cancel(boolean mayInterruptIfRunning)</pre><div class="block">Attempts to cancel execution of this task. This attempt will fail if the task has already completed or could not be cancelled for some other reason. If successful, and this task has not started when <code>cancel</code> is called, execution of this task is suppressed. After this method returns successfully, unless there is an intervening call to <a href="../../../java/util/concurrent/ForkJoinTask.html#reinitialize--"><code>reinitialize()</code></a>, subsequent calls to <a href="../../../java/util/concurrent/ForkJoinTask.html#isCancelled--"><code>isCancelled()</code></a>, <a href="../../../java/util/concurrent/ForkJoinTask.html#isDone--"><code>isDone()</code></a>, and <code>cancel</code> will return <code>true</code> and calls to <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a> and related methods will result in <code>CancellationException</code>.<p>This method may be overridden in subclasses, but if so, must still ensure that these properties hold. In particular, the <code>cancel</code> method itself must not throw exceptions.                          </p><p>This method is designed to be invoked by <em>other</em> tasks. To terminate the current task, you can just return or throw an unchecked exception from its computation method, or invoke <a href="../../../java/util/concurrent/ForkJoinTask.html#completeExceptionally-java.lang.Throwable-"><code>completeExceptionally(Throwable)</code></a>.                              </p>                                                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#cancel-boolean-">cancel</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>mayInterruptIfRunning</code> - this value has no effect in the default implementation because interrupts are not used to control cancellation.                   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task is now cancelled       </dd>   </dl></li></ul> <a end_ctx_id="method:cancel-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isDone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isDone--"/><a name="isDone--"/><ul class="blockList"><li class="blockList"><h4>isDone</h4><pre>public final boolean isDone()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#isDone--">Future</a></code>   </span> </div><div class="block">Returns <code>true</code> if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return <code>true</code>.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#isDone--">isDone</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task completed     </dd>  </dl></li></ul> <a end_ctx_id="method:isDone--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isCancelled-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isCancelled--"/><a name="isCancelled--"/><ul class="blockList"><li class="blockList"><h4>isCancelled</h4><pre>public final boolean isCancelled()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#isCancelled--">Future</a></code>   </span> </div><div class="block">Returns <code>true</code> if this task was cancelled before it completed normally.          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#isCancelled--">isCancelled</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task was cancelled before it completed         </dd>  </dl></li></ul> <a end_ctx_id="method:isCancelled--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isCompletedAbnormally-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isCompletedAbnormally--"/><a name="isCompletedAbnormally--"/><ul class="blockList"><li class="blockList"><h4>isCompletedAbnormally</h4><pre>public final boolean isCompletedAbnormally()</pre><div class="block">Returns <code>true</code> if this task threw an exception or was cancelled.          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task threw an exception or was cancelled          </dd> </dl></li></ul> <a end_ctx_id="method:isCompletedAbnormally--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isCompletedNormally-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isCompletedNormally--"/><a name="isCompletedNormally--"/><ul class="blockList"><li class="blockList"><h4>isCompletedNormally</h4><pre>public final boolean isCompletedNormally()</pre><div class="block">Returns <code>true</code> if this task completed without throwing an exception and was not cancelled.             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task completed without throwing an exception and was not cancelled             </dd> </dl></li></ul> <a end_ctx_id="method:isCompletedNormally--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getException-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getException--"/><a name="getException--"/><ul class="blockList"><li class="blockList"><h4>getException</h4><pre>public final <a href="../../../java/lang/Throwable.html" title="class in java.lang">Throwable</a> getException()</pre><div class="block">Returns the exception thrown by the base computation, or a <code>CancellationException</code> if cancelled, or <code>null</code> if none or if the method has not yet completed.                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the exception, or <code>null</code> if none     </dd> </dl></li></ul> <a end_ctx_id="method:getException--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:completeExceptionally-java.lang.Throwable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:completeExceptionally-java.lang.Throwable-"/><a name="completeExceptionally-java.lang.Throwable-"/><ul class="blockList"><li class="blockList"><h4>completeExceptionally</h4><pre>public void completeExceptionally(<a href="../../../java/lang/Throwable.html" title="class in java.lang">Throwable</a> ex)</pre><div class="block">Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon <code>join</code> and related operations. This method may be used to induce exceptions in asynchronous tasks, or to force completion of tasks that would not otherwise complete. Its use in other situations is discouraged. This method is overridable, but overridden versions must invoke <code>super</code> implementation to maintain guarantees.                                                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>ex</code> - the exception to throw. If this exception is not a <code>RuntimeException</code> or <code>Error</code>, the actual exception thrown will be a <code>RuntimeException</code> with cause <code>ex</code>.                          </dd> </dl></li></ul> <a name="complete-java.lang.Object-"/><a end_ctx_id="method:completeExceptionally-java.lang.Throwable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:complete-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:complete-V-"/><a name="complete-V-"/><ul class="blockList"><li class="blockList"><h4>complete</h4><pre>public void complete(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> value)</pre><div class="block">Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of <code>join</code> and related operations. This method may be used to provide results for asynchronous tasks, or to provide alternative handling for tasks that would not otherwise complete normally. Its use in other situations is discouraged. This method is overridable, but overridden versions must invoke <code>super</code> implementation to maintain guarantees.                                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the result value for this task        </dd> </dl></li></ul> <a end_ctx_id="method:complete-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:quietlyComplete-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:quietlyComplete--"/><a name="quietlyComplete--"/><ul class="blockList"><li class="blockList"><h4>quietlyComplete</h4><pre>public final void quietlyComplete()</pre><div class="block">Completes this task normally without setting a value. The most recent value established by <a href="../../../java/util/concurrent/ForkJoinTask.html#setRawResult-V-"><code>setRawResult(V)</code></a> (or <code>null</code> by default) will be returned as the result of subsequent invocations of <code>join</code> and related operations.                                </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> </dl></li></ul> <a end_ctx_id="method:quietlyComplete--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get--"/><a name="get--"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public final <a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> get()
            throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                   <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></pre><div class="block">Waits if necessary for the computation to complete, and then retrieves its result.            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#get--">get</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent">CancellationException</a></code> - if the computation was cancelled       </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if the computation threw an exception        </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread is not a member of a ForkJoinPool and was interrupted while waiting                  </dd>   </dl></li></ul> <a end_ctx_id="method:get--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-long-java.util.concurrent.TimeUnit-"/><a name="get-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public final <a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> get(long timeout,
                   <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
            throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                   <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a>,
                   <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></pre><div class="block">Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#get-long-java.util.concurrent.TimeUnit-">get</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent">CancellationException</a></code> - if the computation was cancelled       </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if the computation threw an exception        </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread is not a member of a ForkJoinPool and was interrupted while waiting                  </dd><dd> <code><a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></code> - if the wait timed out       </dd>    </dl></li></ul> <a end_ctx_id="method:get-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:quietlyJoin-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:quietlyJoin--"/><a name="quietlyJoin--"/><ul class="blockList"><li class="blockList"><h4>quietlyJoin</h4><pre>public final void quietlyJoin()</pre><div class="block">Joins this task, without returning its result or throwing its exception. This method may be useful when processing collections of tasks when some have been cancelled or otherwise known to have aborted.                               </div></li></ul> <a end_ctx_id="method:quietlyJoin--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:quietlyInvoke-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:quietlyInvoke--"/><a name="quietlyInvoke--"/><ul class="blockList"><li class="blockList"><h4>quietlyInvoke</h4><pre>public final void quietlyInvoke()</pre><div class="block">Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception.                 </div></li></ul> <a end_ctx_id="method:quietlyInvoke--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:helpQuiesce-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:helpQuiesce--"/><a name="helpQuiesce--"/><ul class="blockList"><li class="blockList"><h4>helpQuiesce</h4><pre>public static void helpQuiesce()</pre><div class="block">Possibly executes tasks until the pool hosting the current task <a href="../../../java/util/concurrent/ForkJoinPool.html#isQuiescent--"><code>is quiescent </code></a>. This method may be of use in designs in which many tasks are forked, but none are explicitly joined, instead executing them until all are processed.                                    </div></li></ul> <a end_ctx_id="method:helpQuiesce--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reinitialize-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reinitialize--"/><a name="reinitialize--"/><ul class="blockList"><li class="blockList"><h4>reinitialize</h4><pre>public void reinitialize()</pre><div class="block">Resets the internal bookkeeping state of this task, allowing a subsequent <code>fork</code>. This method allows repeated reuse of this task, but only if reuse occurs when this task has either never been forked, or has been forked, then completed and all outstanding joins of this task have also completed. Effects under any other usage conditions are not guaranteed. This method may be useful when executing pre-constructed trees of subtasks in loops.<p>Upon completion of this method, <code>isDone()</code> reports <code>false</code>, and <code>getException()</code> reports <code>null</code>. However, the value returned by <code>getRawResult</code> is unaffected. To clear this value, you can invoke <code>setRawResult(null)</code>.                           </p>                                                                      </div></li></ul> <a end_ctx_id="method:reinitialize--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getPool-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getPool--"/><a name="getPool--"/><ul class="blockList"><li class="blockList"><h4>getPool</h4><pre>public static <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent">ForkJoinPool</a> getPool()</pre><div class="block">Returns the pool hosting the current task execution, or null if this task is executing outside of any ForkJoinPool.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the pool, or <code>null</code> if none     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/concurrent/ForkJoinTask.html#inForkJoinPool--"><code>inForkJoinPool()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getPool--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:inForkJoinPool-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:inForkJoinPool--"/><a name="inForkJoinPool--"/><ul class="blockList"><li class="blockList"><h4>inForkJoinPool</h4><pre>public static boolean inForkJoinPool()</pre><div class="block">Returns <code>true</code> if the current thread is a <a href="../../../java/util/concurrent/ForkJoinWorkerThread.html" title="class in java.util.concurrent"><code>ForkJoinWorkerThread</code></a> executing as a ForkJoinPool computation.             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the current thread is a <a href="../../../java/util/concurrent/ForkJoinWorkerThread.html" title="class in java.util.concurrent"><code>ForkJoinWorkerThread</code></a> executing as a ForkJoinPool computation, or <code>false</code> otherwise                </dd> </dl></li></ul> <a end_ctx_id="method:inForkJoinPool--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tryUnfork-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tryUnfork--"/><a name="tryUnfork--"/><ul class="blockList"><li class="blockList"><h4>tryUnfork</h4><pre>public boolean tryUnfork()</pre><div class="block">Tries to unschedule this task for execution. This method will typically (but is not guaranteed to) succeed if this task is the most recently forked task by the current thread, and has not commenced executing in another thread. This method may be useful when arranging alternative local processing of tasks that could have been, but were not, stolen.                                                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if unforked   </dd> </dl></li></ul> <a end_ctx_id="method:tryUnfork--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getQueuedTaskCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getQueuedTaskCount--"/><a name="getQueuedTaskCount--"/><ul class="blockList"><li class="blockList"><h4>getQueuedTaskCount</h4><pre>public static int getQueuedTaskCount()</pre><div class="block">Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed. This value may be useful for heuristic decisions about whether to fork other tasks.                                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of tasks   </dd> </dl></li></ul> <a end_ctx_id="method:getQueuedTaskCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSurplusQueuedTaskCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSurplusQueuedTaskCount--"/><a name="getSurplusQueuedTaskCount--"/><ul class="blockList"><li class="blockList"><h4>getSurplusQueuedTaskCount</h4><pre>public static int getSurplusQueuedTaskCount()</pre><div class="block">Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool. This value may be useful for heuristic decisions about whether to fork other tasks. In many usages of ForkJoinTasks, at steady state, each worker should aim to maintain a small constant surplus (for example, 3) of tasks, and to process computations locally if this threshold is exceeded.                                                                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the surplus number of tasks, which may be negative        </dd> </dl></li></ul> <a end_ctx_id="method:getSurplusQueuedTaskCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getRawResult-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getRawResult--"/><a name="getRawResult--"/><ul class="blockList"><li class="blockList"><h4>getRawResult</h4><pre>public abstract <a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> getRawResult()</pre><div class="block">Returns the result that would be returned by <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>, even if this task completed abnormally, or <code>null</code> if this task is not known to have been completed. This method is designed to aid debugging, as well as to support extensions. Its use in any other context is discouraged.                                               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result, or <code>null</code> if not completed      </dd> </dl></li></ul> <a name="setRawResult-java.lang.Object-"/><a end_ctx_id="method:getRawResult--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setRawResult-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setRawResult-V-"/><a name="setRawResult-V-"/><ul class="blockList"><li class="blockList"><h4>setRawResult</h4><pre>protected abstract void setRawResult(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="type parameter in ForkJoinTask">V</a> value)</pre><div class="block">Forces the given value to be returned as a result. This method is designed to support extensions, and should not in general be called otherwise.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value    </dd> </dl></li></ul> <a end_ctx_id="method:setRawResult-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exec-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exec--"/><a name="exec--"/><ul class="blockList"><li class="blockList"><h4>exec</h4><pre>protected abstract boolean exec()</pre><div class="block">Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally. This method may return false otherwise, to indicate that this task is not necessarily complete (or is not known to be complete), for example in asynchronous actions that require explicit invocations of completion methods. This method may also throw an (unchecked) exception to indicate abnormal exit. This method is designed to support extensions, and should not in general be called otherwise.                                                                                     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task is known to have completed normally          </dd> </dl></li></ul> <a end_ctx_id="method:exec--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peekNextLocalTask-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peekNextLocalTask--"/><a name="peekNextLocalTask--"/><ul class="blockList"><li class="blockList"><h4>peekNextLocalTask</h4><pre>protected static <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt; peekNextLocalTask()</pre><div class="block">Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available. There is no guarantee that this task will actually be polled or executed next. Conversely, this method may return null even if a task exists but cannot be accessed without contention with other threads. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.                                                                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next task, or <code>null</code> if none are available        </dd> </dl></li></ul> <a end_ctx_id="method:peekNextLocalTask--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollNextLocalTask-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollNextLocalTask--"/><a name="pollNextLocalTask--"/><ul class="blockList"><li class="blockList"><h4>pollNextLocalTask</h4><pre>protected static <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt; pollNextLocalTask()</pre><div class="block">Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next task, or <code>null</code> if none are available        </dd> </dl></li></ul> <a end_ctx_id="method:pollNextLocalTask--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollTask-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollTask--"/><a name="pollTask--"/><ul class="blockList"><li class="blockList"><h4>pollTask</h4><pre>protected static <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt; pollTask()</pre><div class="block">If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available. Availability may be transient, so a <code>null</code> result does not necessarily imply quiescence of the pool this task is operating in. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.                                                                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a task, or <code>null</code> if none are available       </dd> </dl></li></ul> <a end_ctx_id="method:pollTask--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getForkJoinTaskTag-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getForkJoinTaskTag--"/><a name="getForkJoinTaskTag--"/><ul class="blockList"><li class="blockList"><h4>getForkJoinTaskTag</h4><pre>public final short getForkJoinTaskTag()</pre><div class="block">Returns the tag for this task.     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tag for this task    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:getForkJoinTaskTag--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setForkJoinTaskTag-short- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setForkJoinTaskTag-short-"/><a name="setForkJoinTaskTag-short-"/><ul class="blockList"><li class="blockList"><h4>setForkJoinTaskTag</h4><pre>public final short setForkJoinTaskTag(short tag)</pre><div class="block">Atomically sets the tag value for this task.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tag</code> - the tag value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value of the tag     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:setForkJoinTaskTag-short-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compareAndSetForkJoinTaskTag-short-short- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compareAndSetForkJoinTaskTag-short-short-"/><a name="compareAndSetForkJoinTaskTag-short-short-"/><ul class="blockList"><li class="blockList"><h4>compareAndSetForkJoinTaskTag</h4><pre>public final boolean compareAndSetForkJoinTaskTag(short e,
                                                  short tag)</pre><div class="block">Atomically conditionally sets the tag value for this task. Among other applications, tags can be used as visit markers in tasks operating on graphs, as in methods that check: <code>if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))  </code> before processing, otherwise exiting because the node has already been visited.                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the expected tag value      </dd><dd> <code>tag</code> - the new tag value      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if successful; i.e., the current value was equal to e and is now tag.               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:compareAndSetForkJoinTaskTag-short-short-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:adapt-java.lang.Runnable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:adapt-java.lang.Runnable-"/><a name="adapt-java.lang.Runnable-"/><ul class="blockList"><li class="blockList"><h4>adapt</h4><pre>public static <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt; adapt(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> runnable)</pre><div class="block">Returns a new <code>ForkJoinTask</code> that performs the <code>run</code> method of the given <code>Runnable</code> as its action, and returns a null result upon <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>runnable</code> - the runnable action     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the task </dd>  </dl></li></ul> <a name="adapt-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:adapt-java.lang.Runnable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:adapt-java.lang.Runnable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:adapt-java.lang.Runnable-T-"/><a name="adapt-java.lang.Runnable-T-"/><ul class="blockList"><li class="blockList"><h4>adapt</h4><pre>public static &lt;T&gt; <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt; adapt(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> runnable,
                                        T result)</pre><div class="block">Returns a new <code>ForkJoinTask</code> that performs the <code>run</code> method of the given <code>Runnable</code> as its action, and returns the given result upon <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>.                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the result       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>runnable</code> - the runnable action     </dd><dd> <code>result</code> - the result upon completion      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the task </dd>   </dl></li></ul> <a end_ctx_id="method:adapt-java.lang.Runnable-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:adapt-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:adapt-java.util.concurrent.Callable-"/><a name="adapt-java.util.concurrent.Callable-"/><ul class="blockListLast"><li class="blockList"><h4>adapt</h4><pre>public static &lt;T&gt; <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt; adapt(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;? extends T&gt; callable)</pre><div class="block">Returns a new <code>ForkJoinTask</code> that performs the <code>call</code> method of the given <code>Callable</code> as its action, and returns its result upon <a href="../../../java/util/concurrent/ForkJoinTask.html#join--"><code>join()</code></a>, translating any checked exceptions encountered into <code>RuntimeException</code>.                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the callable's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>callable</code> - the callable action     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the task </dd>   </dl></li></ul> <a end_ctx_id="method:adapt-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table></diff></diffreport>