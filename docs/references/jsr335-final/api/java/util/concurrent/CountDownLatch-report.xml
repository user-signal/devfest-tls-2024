<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:CountDownLatch [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:CountDownLatch"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">CountDownLatch</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.<p>A <code>CountDownLatch</code> is initialized with a given <em>count</em>. The <a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a> methods block until the current count reaches zero due to invocations of the <a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a> method, after which all waiting threads are released and any subsequent invocations of <a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a> return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a <a href="../../../java/util/concurrent/CyclicBarrier.html" title="class in java.util.concurrent"><code>CyclicBarrier</code></a>.                                                               </p><p>A <code>CountDownLatch</code> is a versatile synchronization tool and can be used for a number of purposes. A <code>CountDownLatch</code> initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking <a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a> wait at the gate until it is opened by a thread invoking <a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a>. A <code>CountDownLatch</code> initialized to <em>N</em> can be used to make one thread wait until <em>N</em> threads have completed some action, or some action has been completed N times.                                                                            </p><p>A useful property of a <code>CountDownLatch</code> is that it doesn't require that threads calling <code>countDown</code> wait for the count to reach zero before proceeding, it simply prevents any thread from proceeding past an <a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await</code></a> until all threads could pass.                                      </p><p> <b>Sample usage: </b> Here is a pair of classes in which a group of worker threads use two countdown latches:<ul><li>The first is a start signal that prevents any worker from proceeding until the driver is ready for them to proceed;                    </li><li>The second is a completion signal that allows the driver to wait until all workers have completed.                </li></ul><pre> 
<code>
 class Driver { // ...
   void main() throws InterruptedException {
     CountDownLatch startSignal = new CountDownLatch(1);
     CountDownLatch doneSignal = new CountDownLatch(N);

     for (int i = 0; i &lt; N; ++i) // create and start threads
       new Thread(new Worker(startSignal, doneSignal)).start();

     doSomethingElse();            // don't let run yet
     startSignal.countDown();      // let all threads proceed
     doSomethingElse();
     doneSignal.await();           // wait for all to finish
   }
 }

 class Worker implements Runnable {
   private final CountDownLatch startSignal;
   private final CountDownLatch doneSignal;
   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
     this.startSignal = startSignal;
     this.doneSignal = doneSignal;
   }
   public void run() {
     try {
       startSignal.await();
       doWork();
       doneSignal.countDown();
     } catch (InterruptedException ex) {} // return;
   }

   void doWork() { ... }
 }</code></pre>                  </p><p>Another typical usage would be to divide a problem into N parts, describe each part with a Runnable that executes that portion and counts down on the latch, and queue all the Runnables to an Executor. When all sub-parts are complete, the coordinating thread will be able to pass through await. (When threads must repeatedly count down in this way, instead use a <a href="../../../java/util/concurrent/CyclicBarrier.html" title="class in java.util.concurrent"><code>CyclicBarrier</code></a>.)<pre> 
<code>
 class Driver2 { // ...
   void main() throws InterruptedException {
     CountDownLatch doneSignal = new CountDownLatch(N);
     Executor e = ...

     for (int i = 0; i &lt; N; ++i) // create and start threads
       e.execute(new WorkerRunnable(doneSignal, i));

     doneSignal.await();           // wait for all to finish
   }
 }

 class WorkerRunnable implements Runnable {
   private final CountDownLatch doneSignal;
   private final int i;
   WorkerRunnable(CountDownLatch doneSignal, int i) {
     this.doneSignal = doneSignal;
     this.i = i;
   }
   public void run() {
     try {
       doWork(i);
       doneSignal.countDown();
     } catch (InterruptedException ex) {} // return;
   }

   void doWork() { ... }
 }</code></pre>                                                               </p><p>Memory consistency effects: Until the count reaches zero, actions in a thread prior to calling <code>countDown()</code><a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> actions following a successful return from a corresponding <code>await()</code> in another thread.                           </p>                     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:CountDownLatch"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:CountDownLatch-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:CountDownLatch-int-"/><a name="CountDownLatch-int-"/><ul class="blockListLast"><li class="blockList"><h4>CountDownLatch</h4><pre>public CountDownLatch(int count)</pre><div class="block">Constructs a <code>CountDownLatch</code> initialized with the given count.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>count</code> - the number of times <a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a> must be invoked before threads can pass through <a href="../../../java/util/concurrent/CountDownLatch.html#await--"><code>await()</code></a>                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>count</code> is negative      </dd>  </dl></li></ul> <a end_ctx_id="constructor:CountDownLatch-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:await-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:await--"/><a name="await--"/><ul class="blockList"><li class="blockList"><h4>await</h4><pre>public void await()
           throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Causes the current thread to wait until the latch has counted down to zero, unless the thread is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a>.<p>If the current count is zero then this method returns immediately.          </p><p>If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen:<ul><li>The count reaches zero due to invocations of the <a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a> method; or           </li><li>Some other thread <a href="../../../java/lang/Thread.html#interrupt--">interrupts</a> the current thread.      </li></ul>                          </p><p>If the current thread:<ul><li>has its interrupted status set on entry to this method; or          </li><li>is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a> while waiting,   </li></ul> then <a href="../../../java/lang/InterruptedException.html" title="class in java.lang"><code>InterruptedException</code></a> is thrown and the current thread's interrupted status is cleared.               </p>                  </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread is interrupted while waiting          </dd> </dl></li></ul> <a end_ctx_id="method:await--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:await-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:await-long-java.util.concurrent.TimeUnit-"/><a name="await-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>await</h4><pre>public boolean await(long timeout,
                     <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
              throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Causes the current thread to wait until the latch has counted down to zero, unless the thread is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a>, or the specified waiting time elapses.<p>If the current count is zero then this method returns immediately with the value <code>true</code>.              </p><p>If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen:<ul><li>The count reaches zero due to invocations of the <a href="../../../java/util/concurrent/CountDownLatch.html#countDown--"><code>countDown()</code></a> method; or           </li><li>Some other thread <a href="../../../java/lang/Thread.html#interrupt--">interrupts</a> the current thread; or       </li><li>The specified waiting time elapses.    </li></ul>                          </p><p>If the count reaches zero then the method returns with the value <code>true</code>.            </p><p>If the current thread:<ul><li>has its interrupted status set on entry to this method; or          </li><li>is <a href="../../../java/lang/Thread.html#interrupt--">interrupted</a> while waiting,   </li></ul> then <a href="../../../java/lang/InterruptedException.html" title="class in java.lang"><code>InterruptedException</code></a> is thrown and the current thread's interrupted status is cleared.               </p><p>If the specified waiting time elapses then the value <code>false</code> is returned. If the time is less than or equal to zero, the method will not wait at all.                            </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the <code>timeout</code> argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the count reached zero and <code>false</code> if the waiting time elapsed before the count reached zero                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread is interrupted while waiting          </dd>   </dl></li></ul> <a end_ctx_id="method:await-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:countDown-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:countDown--"/><a name="countDown--"/><ul class="blockList"><li class="blockList"><h4>countDown</h4><pre>public void countDown()</pre><div class="block">Decrements the count of the latch, releasing all waiting threads if the count reaches zero.<p>If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes.                           </p><p>If the current count equals zero then nothing happens.        </p>              </div></li></ul> <a end_ctx_id="method:countDown--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getCount--"/><a name="getCount--"/><ul class="blockList"><li class="blockList"><h4>getCount</h4><pre>public long getCount()</pre><div class="block">Returns the current count.<p>This method is typically used for debugging and testing purposes.         </p>   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current count  </dd> </dl></li></ul> <a end_ctx_id="method:getCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string identifying this latch, as well as its state. The state, in brackets, includes the String <code>"Count =" </code> followed by the current count.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string identifying this latch, as well as its state         </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>