<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ForkJoinPool [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ForkJoinPool"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent">Executor</a>, <a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a>  </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">ForkJoinPool</span>
extends <a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></pre><div class="block">An <a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent"><code>ExecutorService</code></a> for running <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent"><code>ForkJoinTask</code></a>s. A <code>ForkJoinPool</code> provides the entry point for submissions from non-<code>ForkJoinTask</code> clients, as well as management and monitoring operations.<p>A <code>ForkJoinPool</code> differs from other kinds of <a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent"><code>ExecutorService</code></a> mainly by virtue of employing <em>work-stealing</em>: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most <code>ForkJoinTask</code>s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting <em>asyncMode</em> to true in constructors, <code>ForkJoinPool</code>s may also be appropriate for use with event-style tasks that are never joined.                                                                                             </p><p>A static <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>commonPool()</code></a> is available and appropriate for most applications. The common pool is used by any ForkJoinTask that is not explicitly submitted to a specified pool. Using the common pool normally reduces resource usage (its threads are slowly reclaimed during periods of non-use, and reinstated upon subsequent use).                                                </p><p>For applications that require separate or custom pools, a <code>ForkJoinPool</code> may be constructed with a given target parallelism level; by default, equal to the number of available processors. The pool attempts to maintain enough active (or available) threads by dynamically adding, suspending, or resuming internal worker threads, even if some tasks are stalled waiting to join others. However, no such adjustments are guaranteed in the face of blocked I/O or other unmanaged synchronization. The nested <a href="../../../java/util/concurrent/ForkJoinPool.ManagedBlocker.html" title="interface in java.util.concurrent"><code>ForkJoinPool.ManagedBlocker</code></a> interface enables extension of the kinds of synchronization accommodated.                                                                                    </p><p>In addition to execution and lifecycle control methods, this class provides status check methods (for example <a href="../../../java/util/concurrent/ForkJoinPool.html#getStealCount--"><code>getStealCount()</code></a>) that are intended to aid in developing, tuning, and monitoring fork/join applications. Also, method <a href="../../../java/util/concurrent/ForkJoinPool.html#toString--"><code>toString()</code></a> returns indications of pool state in a convenient form for informal monitoring.                                           </p><p>As is the case with other ExecutorServices, there are three main task execution methods summarized in the following table. These are designed to be used primarily by clients not already engaged in fork/join computations in the current pool. The main forms of these methods accept instances of <code>ForkJoinTask</code>, but overloaded forms also allow mixed execution of plain <code>Runnable</code>- or <code>Callable</code>- based activities as well. However, tasks that are already executing in a pool should normally instead use the within-computation forms listed in the table unless using async event-style tasks that are not usually joined, in which case there is little difference among choice of methods.<table border="" cellpadding="3" cellspacing="1"> <caption>Summary of task execution methods    </caption><tbody><tr><td/><td align="CENTER"><b>Call from non-fork/join clients   </b></td><td align="CENTER"><b>Call from within fork/join computations    </b></td></tr><tr><td><b>Arrange async execution  </b></td><td><a href="../../../java/util/concurrent/ForkJoinPool.html#execute-java.util.concurrent.ForkJoinTask-"><code>execute(ForkJoinTask)</code></a></td><td><a href="../../../java/util/concurrent/ForkJoinTask.html#fork--"><code>ForkJoinTask.fork()</code></a></td></tr><tr><td><b>Await and obtain result   </b></td><td><a href="../../../java/util/concurrent/ForkJoinPool.html#invoke-java.util.concurrent.ForkJoinTask-"><code>invoke(ForkJoinTask)</code></a></td><td><a href="../../../java/util/concurrent/ForkJoinTask.html#invoke--"><code>ForkJoinTask.invoke()</code></a></td></tr><tr><td><b>Arrange exec and obtain Future    </b></td><td><a href="../../../java/util/concurrent/ForkJoinPool.html#submit-java.util.concurrent.ForkJoinTask-"><code>submit(ForkJoinTask)</code></a></td><td><a href="../../../java/util/concurrent/ForkJoinTask.html#fork--"><code>ForkJoinTask.fork()</code></a> (ForkJoinTasks <em>are</em> Futures)   </td></tr></tbody> </table>                                                                                                        </p><p>The common pool is by default constructed with default parameters, but these may be controlled by setting three <a href="../../../java/lang/System.html#getProperty-java.lang.String-">system properties </a>:<ul><li> <code>java.util.concurrent.ForkJoinPool.common.parallelism</code> - the parallelism level, a non-negative integer        </li><li> <code>java.util.concurrent.ForkJoinPool.common.threadFactory</code> - the class name of a <a href="../../../java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html" title="interface in java.util.concurrent"><code>ForkJoinPool.ForkJoinWorkerThreadFactory</code></a>        </li><li> <code>java.util.concurrent.ForkJoinPool.common.exceptionHandler</code> - the class name of a <a href="../../../java/lang/Thread.UncaughtExceptionHandler.html" title="interface in java.lang"><code>Thread.UncaughtExceptionHandler</code></a>        </li></ul> If a <a href="../../../java/lang/SecurityManager.html" title="class in java.lang"><code>SecurityManager</code></a> is present and no factory is specified, then the default pool uses a factory supplying threads that have no <a href="../../../java/security/Permissions.html" title="class in java.security"><code>Permissions</code></a> enabled. The system class loader is used to load these classes. Upon any error in establishing these settings, default parameters are used. It is possible to disable or limit the use of threads in the common pool by setting the parallelism property to zero, and/or using a factory that may return <code>null</code>. However doing so may cause unjoined tasks to never be executed.                                                                                                        </p><p> <b>Implementation notes </b>: This implementation restricts the maximum number of running threads to 32767. Attempts to create pools with greater than the maximum number result in <code>IllegalArgumentException</code>.                         </p><p>This implementation rejects submitted tasks (that is, by throwing <a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent"><code>RejectedExecutionException</code></a>) only when the pool is shut down or internal resources have been exhausted.                      </p>                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:ForkJoinPool"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:defaultForkJoinWorkerThreadFactory [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:defaultForkJoinWorkerThreadFactory"/><a name="defaultForkJoinWorkerThreadFactory"/><ul class="blockListLast"><li class="blockList"><h4>defaultForkJoinWorkerThreadFactory</h4><pre>public static finalÂ <a href="../../../java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html" title="interface in java.util.concurrent">ForkJoinPool.ForkJoinWorkerThreadFactory</a> defaultForkJoinWorkerThreadFactory</pre><div class="block">Creates a new ForkJoinWorkerThread. This factory is used unless overridden in ForkJoinPool constructors.            </div></li></ul> <a end_ctx_id="field:defaultForkJoinWorkerThreadFactory"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ForkJoinPool-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ForkJoinPool--"/><a name="ForkJoinPool--"/><ul class="blockList"><li class="blockList"><h4>ForkJoinPool</h4><pre>publicÂ ForkJoinPool()</pre><div class="block">Creates a <code>ForkJoinPool</code> with parallelism equal to <a href="../../../java/lang/Runtime.html#availableProcessors--"><code>Runtime.availableProcessors()</code></a>, using the <a href="../../../java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory">default thread factory  </a>, no UncaughtExceptionHandler, and non-async LIFO processing mode.                 </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and the caller is not permitted to modify threads because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>                      </dd> </dl></li></ul> <a end_ctx_id="constructor:ForkJoinPool--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ForkJoinPool-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ForkJoinPool-int-"/><a name="ForkJoinPool-int-"/><ul class="blockList"><li class="blockList"><h4>ForkJoinPool</h4><pre>publicÂ ForkJoinPool(intÂ parallelism)</pre><div class="block">Creates a <code>ForkJoinPool</code> with the indicated parallelism level, the <a href="../../../java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory">default thread factory  </a>, no UncaughtExceptionHandler, and non-async LIFO processing mode.                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelism</code> - the parallelism level     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if parallelism less than or equal to zero, or greater than implementation limit               </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and the caller is not permitted to modify threads because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>                      </dd>  </dl></li></ul> <a end_ctx_id="constructor:ForkJoinPool-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ForkJoinPool-int-java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory-java.lang.Thread.UncaughtExceptionHandler-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ForkJoinPool-int-java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory-java.lang.Thread.UncaughtExceptionHandler-boolean-"/><a name="ForkJoinPool-int-java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory-java.lang.Thread.UncaughtExceptionHandler-boolean-"/><ul class="blockListLast"><li class="blockList"><h4>ForkJoinPool</h4><pre>publicÂ ForkJoinPool(intÂ parallelism,
                    <a href="../../../java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html" title="interface in java.util.concurrent">ForkJoinPool.ForkJoinWorkerThreadFactory</a>Â factory,
                    <a href="../../../java/lang/Thread.UncaughtExceptionHandler.html" title="interface in java.lang">Thread.UncaughtExceptionHandler</a>Â handler,
                    booleanÂ asyncMode)</pre><div class="block">Creates a <code>ForkJoinPool</code> with the given parameters.      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelism</code> - the parallelism level. For default value, use <a href="../../../java/lang/Runtime.html#availableProcessors--"><code>Runtime.availableProcessors()</code></a>.          </dd><dd> <code>factory</code> - the factory for creating new threads. For default value, use <a href="../../../java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory"><code>defaultForkJoinWorkerThreadFactory</code></a>.             </dd><dd> <code>handler</code> - the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks. For default value, use <code>null</code>.                       </dd><dd> <code>asyncMode</code> - if true, establishes local first-in-first-out scheduling mode for forked tasks that are never joined. This mode may be more appropriate than default locally stack-based mode in applications in which worker threads only process event-style asynchronous tasks. For default value, use <code>false</code>.                                           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if parallelism less than or equal to zero, or greater than implementation limit               </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the factory is null       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and the caller is not permitted to modify threads because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>                      </dd>  </dl></li></ul> <a end_ctx_id="constructor:ForkJoinPool-int-java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory-java.lang.Thread.UncaughtExceptionHandler-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:commonPool-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:commonPool--"/><a name="commonPool--"/><ul class="blockList"><li class="blockList"><h4>commonPool</h4><pre>public staticÂ <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent">ForkJoinPool</a>Â commonPool()</pre><div class="block">Returns the common pool instance. This pool is statically constructed; its run state is unaffected by attempts to <a href="../../../java/util/concurrent/ForkJoinPool.html#shutdown--"><code>shutdown()</code></a> or <a href="../../../java/util/concurrent/ForkJoinPool.html#shutdownNow--"><code>shutdownNow()</code></a>. However this pool and any ongoing processing are automatically terminated upon program <a href="../../../java/lang/System.html#exit-int-"><code>System.exit(int)</code></a>. Any program that relies on asynchronous task processing to complete before program termination should invoke <code>commonPool().</code><a href="../../../java/util/concurrent/ForkJoinPool.html#awaitQuiescence-long-java.util.concurrent.TimeUnit-"><code>awaitQuiescence</code></a>, before exit.                                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the common pool instance   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:commonPool--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invoke-java.util.concurrent.ForkJoinTask- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invoke-java.util.concurrent.ForkJoinTask-"/><a name="invoke-java.util.concurrent.ForkJoinTask-"/><ul class="blockList"><li class="blockList"><h4>invoke</h4><pre>publicÂ &lt;T&gt;Â TÂ invoke(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt;Â task)</pre><div class="block">Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using <code>ex.printStackTrace()</code>) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.                                                                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the task's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the task's result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>    </dl></li></ul> <a end_ctx_id="method:invoke-java.util.concurrent.ForkJoinTask-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:execute-java.util.concurrent.ForkJoinTask- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:execute-java.util.concurrent.ForkJoinTask-"/><a name="execute-java.util.concurrent.ForkJoinTask-"/><ul class="blockList"><li class="blockList"><h4>execute</h4><pre>publicÂ voidÂ execute(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt;Â task)</pre><div class="block">Arranges for (asynchronous) execution of the given task.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>  </dl></li></ul> <a end_ctx_id="method:execute-java.util.concurrent.ForkJoinTask-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:execute-java.lang.Runnable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:execute-java.lang.Runnable-"/><a name="execute-java.lang.Runnable-"/><ul class="blockList"><li class="blockList"><h4>execute</h4><pre>publicÂ voidÂ execute(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>Â task)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface:Â <code><a href="../../../java/util/concurrent/Executor.html#execute-java.lang.Runnable-">Executor</a></code>   </span> </div><div class="block">Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the <code>Executor</code> implementation.                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the runnable task     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>  </dl></li></ul> <a end_ctx_id="method:execute-java.lang.Runnable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.util.concurrent.ForkJoinTask- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.util.concurrent.ForkJoinTask-"/><a name="submit-java.util.concurrent.ForkJoinTask-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>publicÂ &lt;T&gt;Â <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt;Â submit(<a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt;Â task)</pre><div class="block">Submits a ForkJoinTask for execution.    </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the task's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the task </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>    </dl></li></ul> <a end_ctx_id="method:submit-java.util.concurrent.ForkJoinTask-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.util.concurrent.Callable-"/><a name="submit-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>publicÂ &lt;T&gt;Â <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt;Â submit(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;Â task)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface:Â <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.util.concurrent.Callable-">ExecutorService</a></code>   </span> </div><div class="block">Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's <code>get</code> method will return the task's result upon successful completion.<p> If you would like to immediately block waiting for a task, you can use constructions of the form <code>result = exec.submit(aCallable).get();  </code>                   </p><p>Note: The <a href="../../../java/util/concurrent/Executors.html" title="class in java.util.concurrent"><code>Executors</code></a> class includes a set of methods that can convert some other common closure-like objects, for example, <a href="../../../java/security/PrivilegedAction.html" title="interface in java.security"><code>PrivilegedAction</code></a> to <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent"><code>Callable</code></a> form so they can be submitted.                           </p>                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.util.concurrent.Callable-">submit</a></code>Â in interfaceÂ <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#submit-java.util.concurrent.Callable-">submit</a></code>Â in classÂ <code><a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the task's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>      </dl></li></ul> <a name="submit-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:submit-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-T-"/><a name="submit-java.lang.Runnable-T-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>publicÂ &lt;T&gt;Â <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;T&gt;Â submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>Â task,
                                  TÂ result)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface:Â <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-T-">ExecutorService</a></code>   </span> </div><div class="block">Submits a Runnable task for execution and returns a Future representing that task. The Future's <code>get</code> method will return the given result upon successful completion.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-T-">submit</a></code>Â in interfaceÂ <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#submit-java.lang.Runnable-T-">submit</a></code>Â in classÂ <code><a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the result       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd><dd> <code>result</code> - the result to return      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>      </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-"/><a name="submit-java.lang.Runnable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>publicÂ <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt;Â submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>Â task)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface:Â <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-">ExecutorService</a></code>   </span> </div><div class="block">Submits a Runnable task for execution and returns a Future representing that task. The Future's <code>get</code> method will return <code>null</code> upon <em>successful</em> completion.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-">submit</a></code>Â in interfaceÂ <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#submit-java.lang.Runnable-">submit</a></code>Â in classÂ <code><a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd>     </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.Collection-"/><a name="invokeAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>publicÂ &lt;T&gt;Â <a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt;&gt;Â invokeAll(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt;Â tasks)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface:Â <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-">ExecutorService</a></code>   </span> </div><div class="block">Executes the given tasks, returning a list of Futures holding their status and results when all complete. <a href="../../../java/util/concurrent/Future.html#isDone--"><code>Future.isDone()</code></a> is <code>true</code> for each element of the returned list. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-">invokeAll</a></code>Â in interfaceÂ <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#invokeAll-java.util.Collection-">invokeAll</a></code>Â in classÂ <code><a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if tasks or any of its elements are <code>null</code>           </dd><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if any task cannot be scheduled for execution          </dd>      </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFactory-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFactory--"/><a name="getFactory--"/><ul class="blockList"><li class="blockList"><h4>getFactory</h4><pre>publicÂ <a href="../../../java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html" title="interface in java.util.concurrent">ForkJoinPool.ForkJoinWorkerThreadFactory</a>Â getFactory()</pre><div class="block">Returns the factory used for constructing new workers.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the factory used for constructing new workers      </dd> </dl></li></ul> <a end_ctx_id="method:getFactory--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getUncaughtExceptionHandler-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getUncaughtExceptionHandler--"/><a name="getUncaughtExceptionHandler--"/><ul class="blockList"><li class="blockList"><h4>getUncaughtExceptionHandler</h4><pre>publicÂ <a href="../../../java/lang/Thread.UncaughtExceptionHandler.html" title="interface in java.lang">Thread.UncaughtExceptionHandler</a>Â getUncaughtExceptionHandler()</pre><div class="block">Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the handler, or <code>null</code> if none     </dd> </dl></li></ul> <a end_ctx_id="method:getUncaughtExceptionHandler--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getParallelism-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getParallelism--"/><a name="getParallelism--"/><ul class="blockList"><li class="blockList"><h4>getParallelism</h4><pre>publicÂ intÂ getParallelism()</pre><div class="block">Returns the targeted parallelism level of this pool.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the targeted parallelism level of this pool      </dd> </dl></li></ul> <a end_ctx_id="method:getParallelism--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getCommonPoolParallelism-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getCommonPoolParallelism--"/><a name="getCommonPoolParallelism--"/><ul class="blockList"><li class="blockList"><h4>getCommonPoolParallelism</h4><pre>public staticÂ intÂ getCommonPoolParallelism()</pre><div class="block">Returns the targeted parallelism level of the common pool.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the targeted parallelism level of the common pool       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:getCommonPoolParallelism--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getPoolSize-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getPoolSize--"/><a name="getPoolSize--"/><ul class="blockList"><li class="blockList"><h4>getPoolSize</h4><pre>publicÂ intÂ getPoolSize()</pre><div class="block">Returns the number of worker threads that have started but not yet terminated. The result returned by this method may differ from <a href="../../../java/util/concurrent/ForkJoinPool.html#getParallelism--"><code>getParallelism()</code></a> when threads are created to maintain parallelism when others are cooperatively blocked.                                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of worker threads    </dd> </dl></li></ul> <a end_ctx_id="method:getPoolSize--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getAsyncMode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getAsyncMode--"/><a name="getAsyncMode--"/><ul class="blockList"><li class="blockList"><h4>getAsyncMode</h4><pre>publicÂ booleanÂ getAsyncMode()</pre><div class="block">Returns <code>true</code> if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this pool uses async mode       </dd> </dl></li></ul> <a end_ctx_id="method:getAsyncMode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getRunningThreadCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getRunningThreadCount--"/><a name="getRunningThreadCount--"/><ul class="blockList"><li class="blockList"><h4>getRunningThreadCount</h4><pre>publicÂ intÂ getRunningThreadCount()</pre><div class="block">Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization. This method may overestimate the number of running threads.                              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of worker threads    </dd> </dl></li></ul> <a end_ctx_id="method:getRunningThreadCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getActiveThreadCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getActiveThreadCount--"/><a name="getActiveThreadCount--"/><ul class="blockList"><li class="blockList"><h4>getActiveThreadCount</h4><pre>publicÂ intÂ getActiveThreadCount()</pre><div class="block">Returns an estimate of the number of threads that are currently stealing or executing tasks. This method may overestimate the number of active threads.                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of active threads    </dd> </dl></li></ul> <a end_ctx_id="method:getActiveThreadCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isQuiescent-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isQuiescent--"/><a name="isQuiescent--"/><ul class="blockList"><li class="blockList"><h4>isQuiescent</h4><pre>publicÂ booleanÂ isQuiescent()</pre><div class="block">Returns <code>true</code> if all worker threads are currently idle. An idle worker is one that cannot obtain a task to execute because none are available to steal from other threads, and there are no pending submissions to the pool. This method is conservative; it might not return <code>true</code> immediately upon idleness of all threads, but will eventually become true if threads remain inactive.                                                              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if all threads are currently idle       </dd> </dl></li></ul> <a end_ctx_id="method:isQuiescent--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getStealCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getStealCount--"/><a name="getStealCount--"/><ul class="blockList"><li class="blockList"><h4>getStealCount</h4><pre>publicÂ longÂ getStealCount()</pre><div class="block">Returns an estimate of the total number of tasks stolen from one thread's work queue by another. The reported value underestimates the actual total number of steals when the pool is not quiescent. This value may be useful for monitoring and tuning fork/join programs: in general, steal counts should be high enough to keep threads busy, but low enough to avoid overhead and contention across threads.                                                                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of steals   </dd> </dl></li></ul> <a end_ctx_id="method:getStealCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getQueuedTaskCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getQueuedTaskCount--"/><a name="getQueuedTaskCount--"/><ul class="blockList"><li class="blockList"><h4>getQueuedTaskCount</h4><pre>publicÂ longÂ getQueuedTaskCount()</pre><div class="block">Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing). This value is only an approximation, obtained by iterating across all threads in the pool. This method may be useful for tuning task granularities.                                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of queued tasks    </dd> </dl></li></ul> <a end_ctx_id="method:getQueuedTaskCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getQueuedSubmissionCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getQueuedSubmissionCount--"/><a name="getQueuedSubmissionCount--"/><ul class="blockList"><li class="blockList"><h4>getQueuedSubmissionCount</h4><pre>publicÂ intÂ getQueuedSubmissionCount()</pre><div class="block">Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing. This method may take time proportional to the number of submissions.                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of queued submissions    </dd> </dl></li></ul> <a end_ctx_id="method:getQueuedSubmissionCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasQueuedSubmissions-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasQueuedSubmissions--"/><a name="hasQueuedSubmissions--"/><ul class="blockList"><li class="blockList"><h4>hasQueuedSubmissions</h4><pre>publicÂ booleanÂ hasQueuedSubmissions()</pre><div class="block">Returns <code>true</code> if there are any tasks submitted to this pool that have not yet begun executing.                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if there are any queued submissions       </dd> </dl></li></ul> <a end_ctx_id="method:hasQueuedSubmissions--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollSubmission-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollSubmission--"/><a name="pollSubmission--"/><ul class="blockList"><li class="blockList"><h4>pollSubmission</h4><pre>protectedÂ <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt;Â pollSubmission()</pre><div class="block">Removes and returns the next unexecuted submission if one is available. This method may be useful in extensions to this class that re-assign work in systems with multiple pools.                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next submission, or <code>null</code> if none      </dd> </dl></li></ul> <a end_ctx_id="method:pollSubmission--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:drainTasksTo-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:drainTasksTo-java.util.Collection-"/><a name="drainTasksTo-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>drainTasksTo</h4><pre>protectedÂ intÂ drainTasksTo(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? super <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>&lt;?&gt;&gt;Â c)</pre><div class="block">Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status. These may include artificially generated or wrapped tasks. This method is designed to be invoked only when the pool is known to be quiescent. Invocations at other times may not remove all tasks. A failure encountered while attempting to add elements to collection <code>c</code> may result in elements being in neither, either or both collections when the associated exception is thrown. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.                                                                                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection to transfer elements into        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements transferred    </dd>  </dl></li></ul> <a end_ctx_id="method:drainTasksTo-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>publicÂ <a href="../../../java/lang/String.html" title="class in java.lang">String</a>Â toString()</pre><div class="block">Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#toString--">toString</a></code>Â in classÂ <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string identifying this pool, as well as its state         </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shutdown-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shutdown--"/><a name="shutdown--"/><ul class="blockList"><li class="blockList"><h4>shutdown</h4><pre>publicÂ voidÂ shutdown()</pre><div class="block">Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no effect on execution state if this is the <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>commonPool()</code></a>, and no additional effect if already shut down. Tasks that are in the process of being submitted concurrently during the course of this method may or may not be rejected.                                                            </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and the caller is not permitted to modify threads because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>                      </dd> </dl></li></ul> <a end_ctx_id="method:shutdown--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shutdownNow-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shutdownNow--"/><a name="shutdownNow--"/><ul class="blockList"><li class="blockList"><h4>shutdownNow</h4><pre>publicÂ <a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>&gt;Â shutdownNow()</pre><div class="block">Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks. Invocation has no effect on execution state if this is the <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>commonPool()</code></a>, and no additional effect if already shut down. Otherwise, tasks that are in the process of being submitted or executed concurrently during the course of this method may or may not be rejected. This method cancels both existing and unexecuted tasks, in order to permit termination in the presence of task dependencies. So the method always returns an empty list (unlike the case for some other Executors).                                                                                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty list  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and the caller is not permitted to modify threads because it does not hold <a href="../../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a><code>("modifyThread")</code>                      </dd>  </dl></li></ul> <a end_ctx_id="method:shutdownNow--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isTerminated-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isTerminated--"/><a name="isTerminated--"/><ul class="blockList"><li class="blockList"><h4>isTerminated</h4><pre>publicÂ booleanÂ isTerminated()</pre><div class="block">Returns <code>true</code> if all tasks have completed following shut down.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if all tasks have completed following shut down         </dd> </dl></li></ul> <a end_ctx_id="method:isTerminated--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isTerminating-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isTerminating--"/><a name="isTerminating--"/><ul class="blockList"><li class="blockList"><h4>isTerminating</h4><pre>publicÂ booleanÂ isTerminating()</pre><div class="block">Returns <code>true</code> if the process of termination has commenced but not yet completed. This method may be useful for debugging. A return of <code>true</code> reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption, or are waiting for I/O, causing this executor not to properly terminate. (See the advisory notes for class <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent"><code>ForkJoinTask</code></a> stating that tasks should not normally entail blocking operations. But if they do, they must abort them on interrupt.)                                                                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if terminating but not yet terminated       </dd> </dl></li></ul> <a end_ctx_id="method:isTerminating--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isShutdown-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isShutdown--"/><a name="isShutdown--"/><ul class="blockList"><li class="blockList"><h4>isShutdown</h4><pre>publicÂ booleanÂ isShutdown()</pre><div class="block">Returns <code>true</code> if this pool has been shut down.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this pool has been shut down        </dd> </dl></li></ul> <a end_ctx_id="method:isShutdown--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:awaitTermination-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:awaitTermination-long-java.util.concurrent.TimeUnit-"/><a name="awaitTermination-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>awaitTermination</h4><pre>publicÂ booleanÂ awaitTermination(longÂ timeout,
                                <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a>Â unit)
                         throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Because the <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>commonPool()</code></a> never terminates until program shutdown, when applied to the common pool, this method is equivalent to <a href="../../../java/util/concurrent/ForkJoinPool.html#awaitQuiescence-long-java.util.concurrent.TimeUnit-"><code>awaitQuiescence(long, TimeUnit) </code></a> but always returns <code>false</code>.                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this executor terminated and <code>false</code> if the timeout elapsed before termination             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:awaitTermination-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:awaitQuiescence-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:awaitQuiescence-long-java.util.concurrent.TimeUnit-"/><a name="awaitQuiescence-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>awaitQuiescence</h4><pre>publicÂ booleanÂ awaitQuiescence(longÂ timeout,
                               <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a>Â unit)</pre><div class="block">If called by a ForkJoinTask operating in this pool, equivalent in effect to <a href="../../../java/util/concurrent/ForkJoinTask.html#helpQuiesce--"><code>ForkJoinTask.helpQuiesce()</code></a>. Otherwise, waits and/or attempts to assist performing tasks until this pool <a href="../../../java/util/concurrent/ForkJoinPool.html#isQuiescent--"><code>isQuiescent()</code></a> or the indicated timeout elapses.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if quiescent; <code>false</code> if the timeout elapsed.        </dd>  </dl></li></ul> <a end_ctx_id="method:awaitQuiescence-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-"/><a name="managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-"/><ul class="blockList"><li class="blockList"><h4>managedBlock</h4><pre>public staticÂ voidÂ managedBlock(<a href="../../../java/util/concurrent/ForkJoinPool.ManagedBlocker.html" title="interface in java.util.concurrent">ForkJoinPool.ManagedBlocker</a>Â blocker)
                         throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Blocks in accord with the given blocker. If the current thread is a <a href="../../../java/util/concurrent/ForkJoinWorkerThread.html" title="class in java.util.concurrent"><code>ForkJoinWorkerThread</code></a>, this method possibly arranges for a spare thread to be activated if necessary to ensure sufficient parallelism while the current thread is blocked.<p>If the caller is not a <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent"><code>ForkJoinTask</code></a>, this method is behaviorally equivalent to<pre> 
<code>
 while (!blocker.isReleasable())
   if (blocker.block())
     return;
 </code></pre> If the caller is a <code>ForkJoinTask</code>, then the pool may first be expanded to ensure parallelism, and later adjusted.                               </p>                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>blocker</code> - the blocker    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if blocker.block did so      </dd>  </dl></li></ul> <a name="newTaskFor-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newTaskFor-java.lang.Runnable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newTaskFor-java.lang.Runnable-T-"/><a name="newTaskFor-java.lang.Runnable-T-"/><ul class="blockList"><li class="blockList"><h4>newTaskFor</h4><pre>protectedÂ &lt;T&gt;Â <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;T&gt;Â newTaskFor(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>Â runnable,
                                           TÂ value)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from class:Â <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#newTaskFor-java.lang.Runnable-T-">AbstractExecutorService</a></code>   </span> </div><div class="block">Returns a <code>RunnableFuture</code> for the given runnable and default value.         </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#newTaskFor-java.lang.Runnable-T-">newTaskFor</a></code>Â in classÂ <code><a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the given value        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>runnable</code> - the runnable task being wrapped       </dd><dd> <code>value</code> - the default value for the returned future         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>RunnableFuture</code> which, when run, will run the underlying runnable and which, as a <code>Future</code>, will yield the given value as its result and provide for cancellation of the underlying task                              </dd>    </dl></li></ul> <a end_ctx_id="method:newTaskFor-java.lang.Runnable-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newTaskFor-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newTaskFor-java.util.concurrent.Callable-"/><a name="newTaskFor-java.util.concurrent.Callable-"/><ul class="blockListLast"><li class="blockList"><h4>newTaskFor</h4><pre>protectedÂ &lt;T&gt;Â <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;T&gt;Â newTaskFor(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;Â callable)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from class:Â <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#newTaskFor-java.util.concurrent.Callable-">AbstractExecutorService</a></code>   </span> </div><div class="block">Returns a <code>RunnableFuture</code> for the given callable task.       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/AbstractExecutorService.html#newTaskFor-java.util.concurrent.Callable-">newTaskFor</a></code>Â in classÂ <code><a href="../../../java/util/concurrent/AbstractExecutorService.html" title="class in java.util.concurrent">AbstractExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the callable's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>callable</code> - the callable task being wrapped       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>RunnableFuture</code> which, when run, will call the underlying callable and which, as a <code>Future</code>, will yield the callable's result as its result and provide for cancellation of the underlying task                              </dd>    </dl></li></ul> <a end_ctx_id="method:newTaskFor-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table></diff></diffreport>