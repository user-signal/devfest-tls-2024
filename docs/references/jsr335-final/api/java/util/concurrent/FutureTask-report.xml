<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:FutureTask [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:FutureTask"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>V</code> - The result type returned by this FutureTask's <code>get</code> methods           </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a>, <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;V&gt;, <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;V&gt;   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">FutureTask&lt;V&gt;</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;V&gt;</pre><div class="block">A cancellable asynchronous computation. This class provides a base implementation of <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent"><code>Future</code></a>, with methods to start and cancel a computation, query to see if the computation is complete, and retrieve the result of the computation. The result can only be retrieved when the computation has completed; the <code>get</code> methods will block if the computation has not yet completed. Once the computation has completed, the computation cannot be restarted or cancelled (unless the computation is invoked using <a href="../../../java/util/concurrent/FutureTask.html#runAndReset--"><code>runAndReset()</code></a>).<p>A <code>FutureTask</code> can be used to wrap a <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent"><code>Callable</code></a> or <a href="../../../java/lang/Runnable.html" title="interface in java.lang"><code>Runnable</code></a> object. Because <code>FutureTask</code> implements <code>Runnable</code>, a <code>FutureTask</code> can be submitted to an <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent"><code>Executor</code></a> for execution.                         </p><p>In addition to serving as a standalone class, this class provides <code>protected</code> functionality that may be useful when creating customized task classes.                     </p>                                                                            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:FutureTask"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FutureTask-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FutureTask-java.util.concurrent.Callable-"/><a name="FutureTask-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>FutureTask</h4><pre>public FutureTask(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt; callable)</pre><div class="block">Creates a <code>FutureTask</code> that will, upon running, execute the given <code>Callable</code>.          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>callable</code> - the callable task     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the callable is null       </dd>  </dl></li></ul> <a name="FutureTask-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="constructor:FutureTask-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FutureTask-java.lang.Runnable-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FutureTask-java.lang.Runnable-V-"/><a name="FutureTask-java.lang.Runnable-V-"/><ul class="blockListLast"><li class="blockList"><h4>FutureTask</h4><pre>public FutureTask(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> runnable,
                  <a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a> result)</pre><div class="block">Creates a <code>FutureTask</code> that will, upon running, execute the given <code>Runnable</code>, and arrange that <code>get</code> will return the given result on successful completion.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>runnable</code> - the runnable task     </dd><dd> <code>result</code> - the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: <code>Future&lt;?&gt; f = new FutureTask&lt;Void&gt;(runnable, null)     </code>                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the runnable is null       </dd>  </dl></li></ul> <a end_ctx_id="constructor:FutureTask-java.lang.Runnable-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isCancelled-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isCancelled--"/><a name="isCancelled--"/><ul class="blockList"><li class="blockList"><h4>isCancelled</h4><pre>public boolean isCancelled()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#isCancelled--">Future</a></code>   </span> </div><div class="block">Returns <code>true</code> if this task was cancelled before it completed normally.          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#isCancelled--">isCancelled</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task was cancelled before it completed         </dd>  </dl></li></ul> <a end_ctx_id="method:isCancelled--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isDone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isDone--"/><a name="isDone--"/><ul class="blockList"><li class="blockList"><h4>isDone</h4><pre>public boolean isDone()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#isDone--">Future</a></code>   </span> </div><div class="block">Returns <code>true</code> if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return <code>true</code>.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#isDone--">isDone</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task completed     </dd>  </dl></li></ul> <a end_ctx_id="method:isDone--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cancel-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cancel-boolean-"/><a name="cancel-boolean-"/><ul class="blockList"><li class="blockList"><h4>cancel</h4><pre>public boolean cancel(boolean mayInterruptIfRunning)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#cancel-boolean-">Future</a></code>   </span> </div><div class="block">Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when <code>cancel</code> is called, this task should never run. If the task has already started, then the <code>mayInterruptIfRunning</code> parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.<p>After this method returns, subsequent calls to <a href="../../../java/util/concurrent/Future.html#isDone--"><code>Future.isDone()</code></a> will always return <code>true</code>. Subsequent calls to <a href="../../../java/util/concurrent/Future.html#isCancelled--"><code>Future.isCancelled()</code></a> will always return <code>true</code> if this method returned <code>true</code>.                        </p>                                                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#cancel-boolean-">cancel</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>mayInterruptIfRunning</code> - <code>true</code> if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete                   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>false</code> if the task could not be cancelled, typically because it has already completed normally; <code>true</code> otherwise                 </dd>   </dl></li></ul> <a end_ctx_id="method:cancel-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get--"/><a name="get--"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a> get()
      throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
             <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#get--">Future</a></code>   </span> </div><div class="block">Waits if necessary for the computation to complete, and then retrieves its result.            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#get--">get</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent">CancellationException</a></code> - if the computation was cancelled       </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread was interrupted while waiting          </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if the computation threw an exception        </dd>   </dl></li></ul> <a end_ctx_id="method:get--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-long-java.util.concurrent.TimeUnit-"/><a name="get-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a> get(long timeout,
             <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
      throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
             <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a>,
             <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/Future.html#get-long-java.util.concurrent.TimeUnit-">Future</a></code>   </span> </div><div class="block">Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/Future.html#get-long-java.util.concurrent.TimeUnit-">get</a></code> in interface <code><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent">CancellationException</a></code> - if the computation was cancelled       </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread was interrupted while waiting          </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if the computation threw an exception        </dd><dd> <code><a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></code> - if the wait timed out       </dd>    </dl></li></ul> <a end_ctx_id="method:get-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:done-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:done--"/><a name="done--"/><ul class="blockList"><li class="blockList"><h4>done</h4><pre>protected void done()</pre><div class="block">Protected method invoked when this task transitions to state <code>isDone</code> (whether normally or via cancellation). The default implementation does nothing. Subclasses may override this method to invoke completion callbacks or perform bookkeeping. Note that you can query status inside the implementation of this method to determine whether this task has been cancelled.                                                   </div></li></ul> <a name="set-java.lang.Object-"/><a end_ctx_id="method:done--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-V-"/><a name="set-V-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>protected void set(<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a> v)</pre><div class="block">Sets the result of this future to the given value unless this future has already been set or has been cancelled.<p>This method is invoked internally by the <a href="../../../java/util/concurrent/FutureTask.html#run--"><code>run()</code></a> method upon successful completion of the computation.              </p>                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the value    </dd> </dl></li></ul> <a end_ctx_id="method:set-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setException-java.lang.Throwable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setException-java.lang.Throwable-"/><a name="setException-java.lang.Throwable-"/><ul class="blockList"><li class="blockList"><h4>setException</h4><pre>protected void setException(<a href="../../../java/lang/Throwable.html" title="class in java.lang">Throwable</a> t)</pre><div class="block">Causes this future to report an <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent"><code>ExecutionException</code></a> with the given throwable as its cause, unless this future has already been set or has been cancelled.<p>This method is invoked internally by the <a href="../../../java/util/concurrent/FutureTask.html#run--"><code>run()</code></a> method upon failure of the computation.             </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>t</code> - the cause of failure      </dd> </dl></li></ul> <a end_ctx_id="method:setException-java.lang.Throwable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:run-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:run--"/><a name="run--"/><ul class="blockList"><li class="blockList"><h4>run</h4><pre>public void run()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/RunnableFuture.html#run--">RunnableFuture</a></code>   </span> </div><div class="block">Sets this Future to the result of its computation unless it has been cancelled.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/lang/Runnable.html#run--">run</a></code> in interface <code><a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/RunnableFuture.html#run--">run</a></code> in interface <code><a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;<a href="../../../java/util/concurrent/FutureTask.html" title="type parameter in FutureTask">V</a>&gt;</code>  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/Thread.html#run--"><code>Thread.run()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:run--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:runAndReset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:runAndReset--"/><a name="runAndReset--"/><ul class="blockListLast"><li class="blockList"><h4>runAndReset</h4><pre>protected boolean runAndReset()</pre><div class="block">Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled. This is designed for use with tasks that intrinsically execute more than once.                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if successfully run and reset      </dd> </dl></li></ul> <a end_ctx_id="method:runAndReset--"/>  </td></tr></table></td></tr></table></diff></diffreport>