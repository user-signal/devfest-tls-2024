<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Future [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Future"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>V</code> - The result type returned by this Future's <code>get</code> method           </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../../javax/xml/ws/Response.html" title="interface in javax.xml.ws">Response</a>&lt;T&gt;, <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;V&gt;, <a href="../../../java/util/concurrent/RunnableScheduledFuture.html" title="interface in java.util.concurrent">RunnableScheduledFuture</a>&lt;V&gt;, <a href="../../../java/util/concurrent/ScheduledFuture.html" title="interface in java.util.concurrent">ScheduledFuture</a>&lt;V&gt;    </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../../java/util/concurrent/CompletableFuture.html" title="class in java.util.concurrent">CompletableFuture</a>, <a href="../../../java/util/concurrent/CountedCompleter.html" title="class in java.util.concurrent">CountedCompleter</a>, <a href="../../../java/util/concurrent/ForkJoinTask.html" title="class in java.util.concurrent">ForkJoinTask</a>, <a href="../../../java/util/concurrent/FutureTask.html" title="class in java.util.concurrent">FutureTask</a>, <a href="../../../java/util/concurrent/RecursiveAction.html" title="class in java.util.concurrent">RecursiveAction</a>, <a href="../../../java/util/concurrent/RecursiveTask.html" title="class in java.util.concurrent">RecursiveTask</a>, <a href="../../../javax/swing/SwingWorker.html" title="class in javax.swing">SwingWorker</a>       </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">Future&lt;V&gt;</span></pre><div class="block">A <code>Future</code> represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method <code>get</code> when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the <code>cancel</code> method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a <code>Future</code> for the sake of cancellability but not provide a usable result, you can declare types of the form <code>Future&lt;?&gt;</code> and return <code>null</code> as a result of the underlying task.<p> <b>Sample Usage </b> (Note that the following classes are all made-up.)<pre> 
<code>
 interface ArchiveSearcher { String search(String target); }
 class App {
   ExecutorService executor = ...
   ArchiveSearcher searcher = ...
   void showSearch(final String target)
       throws InterruptedException {
     Future&lt;String&gt; future
       = executor.submit(new Callable&lt;String&gt;() {
         public String call() {
             return searcher.search(target);
         }});
     displayOtherThings(); // do other things while searching
     try {
       displayText(future.get()); // use future
     } catch (ExecutionException ex) { cleanup(); return; }
   }
 }</code></pre> The <a href="../../../java/util/concurrent/FutureTask.html" title="class in java.util.concurrent"><code>FutureTask</code></a> class is an implementation of <code>Future</code> that implements <code>Runnable</code>, and so may be executed by an <code>Executor</code>. For example, the above construction with <code>submit</code> could be replaced by:<pre> 
<code>
 FutureTask&lt;String&gt; future =
   new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() {
     public String call() {
       return searcher.search(target);
   }});
 executor.execute(future);</code></pre>                                       </p><p>Memory consistency effects: Actions taken by the asynchronous computation <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> actions following the corresponding <code>Future.get()</code> in another thread.                 </p>                                                                                                                        </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/concurrent/FutureTask.html" title="class in java.util.concurrent"><code>FutureTask</code></a>, <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent"><code>Executor</code></a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Future"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cancel-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cancel-boolean-"/><a name="cancel-boolean-"/><ul class="blockList"><li class="blockList"><h4>cancel</h4><pre>boolean cancel(boolean mayInterruptIfRunning)</pre><div class="block">Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when <code>cancel</code> is called, this task should never run. If the task has already started, then the <code>mayInterruptIfRunning</code> parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.<p>After this method returns, subsequent calls to <a href="../../../java/util/concurrent/Future.html#isDone--"><code>isDone()</code></a> will always return <code>true</code>. Subsequent calls to <a href="../../../java/util/concurrent/Future.html#isCancelled--"><code>isCancelled()</code></a> will always return <code>true</code> if this method returned <code>true</code>.                        </p>                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>mayInterruptIfRunning</code> - <code>true</code> if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete                   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>false</code> if the task could not be cancelled, typically because it has already completed normally; <code>true</code> otherwise                 </dd>  </dl></li></ul> <a end_ctx_id="method:cancel-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isCancelled-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isCancelled--"/><a name="isCancelled--"/><ul class="blockList"><li class="blockList"><h4>isCancelled</h4><pre>boolean isCancelled()</pre><div class="block">Returns <code>true</code> if this task was cancelled before it completed normally.          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task was cancelled before it completed         </dd> </dl></li></ul> <a end_ctx_id="method:isCancelled--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isDone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isDone--"/><a name="isDone--"/><ul class="blockList"><li class="blockList"><h4>isDone</h4><pre>boolean isDone()</pre><div class="block">Returns <code>true</code> if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return <code>true</code>.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this task completed     </dd> </dl></li></ul> <a end_ctx_id="method:isDone--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get--"/><a name="get--"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre><a href="../../../java/util/concurrent/Future.html" title="type parameter in Future">V</a> get()
throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
      <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></pre><div class="block">Waits if necessary for the computation to complete, and then retrieves its result.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent">CancellationException</a></code> - if the computation was cancelled       </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if the computation threw an exception        </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread was interrupted while waiting          </dd>  </dl></li></ul> <a end_ctx_id="method:get--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-long-java.util.concurrent.TimeUnit-"/><a name="get-long-java.util.concurrent.TimeUnit-"/><ul class="blockListLast"><li class="blockList"><h4>get</h4><pre><a href="../../../java/util/concurrent/Future.html" title="type parameter in Future">V</a> get(long timeout,
      <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
      <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a>,
      <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></pre><div class="block">Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the computed result  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/CancellationException.html" title="class in java.util.concurrent">CancellationException</a></code> - if the computation was cancelled       </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if the computation threw an exception        </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if the current thread was interrupted while waiting          </dd><dd> <code><a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></code> - if the wait timed out       </dd>   </dl></li></ul> <a end_ctx_id="method:get-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table></diff></diffreport>