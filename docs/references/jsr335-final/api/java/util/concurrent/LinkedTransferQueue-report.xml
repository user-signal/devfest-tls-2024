<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:LinkedTransferQueue [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:LinkedTransferQueue"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements held in this collection          </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;E&gt;, <a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;E&gt;, <a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt;      </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">LinkedTransferQueue&lt;E&gt;</span>
extends <a href="../../../java/util/AbstractQueue.html" title="class in java.util">AbstractQueue</a>&lt;E&gt;
implements <a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;E&gt;, <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">An unbounded <a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent"><code>TransferQueue</code></a> based on linked nodes. This queue orders elements FIFO (first-in-first-out) with respect to any given producer. The <em>head</em> of the queue is that element that has been on the queue the longest time for some producer. The <em>tail</em> of the queue is that element that has been on the queue the shortest time for some producer.<p>Beware that, unlike in most collections, the <code>size</code> method is <em>NOT</em> a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations <code>addAll</code>, <code>removeAll</code>, <code>retainAll</code>, <code>containsAll</code>, <code>equals</code>, and <code>toArray</code> are <em>not</em> guaranteed to be performed atomically. For example, an iterator operating concurrently with an <code>addAll</code> operation might view only some of the added elements.                                                                                  </p><p>This class and its iterator implement all of the <em>optional</em> methods of the <a href="../../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> and <a href="../../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a> interfaces.                </p><p>Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a <code>LinkedTransferQueue</code><a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> actions subsequent to the access or removal of that element from the <code>LinkedTransferQueue</code> in another thread.                                   </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../serialized-form.html#java.util.concurrent.LinkedTransferQueue">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:LinkedTransferQueue"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedTransferQueue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedTransferQueue--"/><a name="LinkedTransferQueue--"/><ul class="blockList"><li class="blockList"><h4>LinkedTransferQueue</h4><pre>public LinkedTransferQueue()</pre><div class="block">Creates an initially empty <code>LinkedTransferQueue</code>.    </div></li></ul> <a end_ctx_id="constructor:LinkedTransferQueue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:LinkedTransferQueue-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:LinkedTransferQueue-java.util.Collection-"/><a name="LinkedTransferQueue-java.util.Collection-"/><ul class="blockListLast"><li class="blockList"><h4>LinkedTransferQueue</h4><pre>public LinkedTransferQueue(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; c)</pre><div class="block">Creates a <code>LinkedTransferQueue</code> initially containing the elements of the given collection, added in traversal order of the collection's iterator.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection of elements to initially contain         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection or any of its elements are null             </dd>  </dl></li></ul> <a end_ctx_id="constructor:LinkedTransferQueue-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:spliterator--"/><a name="spliterator--"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public <a href="../../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; spliterator()</pre><div class="block">Returns a <a href="../../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> over the elements in this queue.<p>The returned spliterator is <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.    </p><p>The <code>Spliterator</code> reports <a href="../../../java/util/Spliterator.html#CONCURRENT"><code>Spliterator.CONCURRENT</code></a>, <a href="../../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a>, and <a href="../../../java/util/Spliterator.html#NONNULL"><code>Spliterator.NONNULL</code></a>.      </p>        </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/lang/Iterable.html#spliterator--"><span class="diff-html-added">spliterator</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/lang/Iterable.html" title="interface in java.lang"><span class="diff-html-added">Iterable</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#spliterator--"><span class="diff-html-added">spliterator</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Collection.html" title="interface in java.util"><span class="diff-html-added">Collection</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>The <code>Spliterator</code> implements <code>trySplit</code> to permit limited parallelism.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Spliterator</code> over the elements in this queue       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>     </dl></li></ul> <a name="put-java.lang.Object-"/><a end_ctx_id="method:spliterator--"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:spliterator--"/><a name="spliterator--"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public <a href="../../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; spliterator()</pre><div class="block">Returns a <a href="../../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> over the elements in this queue.<p>The returned spliterator is <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.    </p><p>The <code>Spliterator</code> reports <a href="../../../java/util/Spliterator.html#CONCURRENT"><code>Spliterator.CONCURRENT</code></a>, <a href="../../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a>, and <a href="../../../java/util/Spliterator.html#NONNULL"><code>Spliterator.NONNULL</code></a>.      </p>        </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>The <code>Spliterator</code> implements <code>trySplit</code> to permit limited parallelism.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Spliterator</code> over the elements in this queue       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a name="put-java.lang.Object-"/><a end_ctx_id="method:spliterator--"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator--"/><a name="spliterator--"/><ul class="blockList"><li class="blockList"><h4>spliterator</h4><pre>public <a href="../../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; spliterator()</pre><div class="block">Returns a <a href="../../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> over the elements in this queue.<p>The returned spliterator is <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.    </p><p>The <code>Spliterator</code> reports <a href="../../../java/util/Spliterator.html#CONCURRENT"><code>Spliterator.CONCURRENT</code></a>, <a href="../../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a>, and <a href="../../../java/util/Spliterator.html#NONNULL"><code>Spliterator.NONNULL</code></a>.      </p>        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/lang/Iterable.html#spliterator--">spliterator</a></code> in interface <code><a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#spliterator--">spliterator</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>The <code>Spliterator</code> implements <code>trySplit</code> to permit limited parallelism.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Spliterator</code> over the elements in this queue       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>     </dl></li></ul> <a name="put-java.lang.Object-"/><a end_ctx_id="method:spliterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:put-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:put-E-"/><a name="put-E-"/><ul class="blockList"><li class="blockList"><h4>put</h4><pre>public void put(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e)</pre><div class="block">Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block.                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#put-E-">put</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd>   </dl></li></ul> <a name="offer-java.lang.Object-long-java.util.concurrent.TimeUnit-"/><a end_ctx_id="method:put-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offer-E-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offer-E-long-java.util.concurrent.TimeUnit-"/><a name="offer-E-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>offer</h4><pre>public boolean offer(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e,
                     long timeout,
                     <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)</pre><div class="block">Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block or return <code>false</code>.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-">offer</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../../java/util/concurrent/BlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-"><code>BlockingQueue.offer</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd>    </dl></li></ul> <a name="offer-java.lang.Object-"/><a end_ctx_id="method:offer-E-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offer-E-"/><a name="offer-E-"/><ul class="blockList"><li class="blockList"><h4>offer</h4><pre>public boolean offer(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e)</pre><div class="block">Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never return <code>false</code>.                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#offer-E-">offer</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Queue.html#offer-E-">offer</a></code> in interface <code><a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../../java/util/Queue.html#offer-E-"><code>Queue.offer(E)</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd>     </dl></li></ul> <a name="add-java.lang.Object-"/><a end_ctx_id="method:offer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>public boolean add(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e)</pre><div class="block">Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never throw <a href="../../../java/lang/IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a> or return <code>false</code>.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#add-E-">add</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Queue.html#add-E-">add</a></code> in interface <code><a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractQueue.html#add-E-">add</a></code> in class <code><a href="../../../java/util/AbstractQueue.html" title="class in java.util">AbstractQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../../java/util/Collection.html#add-E-"><code>Collection.add(E)</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd>       </dl></li></ul> <a name="tryTransfer-java.lang.Object-"/><a end_ctx_id="method:add-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tryTransfer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tryTransfer-E-"/><a name="tryTransfer-E-"/><ul class="blockList"><li class="blockList"><h4>tryTransfer</h4><pre>public boolean tryTransfer(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e)</pre><div class="block">Transfers the element to a waiting consumer immediately, if possible.<p>More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in <a href="../../../java/util/concurrent/LinkedTransferQueue.html#take--"><code>take()</code></a> or timed <a href="../../../java/util/concurrent/LinkedTransferQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>), otherwise returning <code>false</code> without enqueuing the element.                            </p>         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/TransferQueue.html#tryTransfer-E-">tryTransfer</a></code> in interface <code><a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to transfer      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was transferred, else <code>false</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd>    </dl></li></ul> <a name="transfer-java.lang.Object-"/><a end_ctx_id="method:tryTransfer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:transfer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:transfer-E-"/><a name="transfer-E-"/><ul class="blockList"><li class="blockList"><h4>transfer</h4><pre>public void transfer(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e)
              throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Transfers the element to a consumer, waiting if necessary to do so.<p>More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in <a href="../../../java/util/concurrent/LinkedTransferQueue.html#take--"><code>take()</code></a> or timed <a href="../../../java/util/concurrent/LinkedTransferQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer.                                          </p>           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/TransferQueue.html#transfer-E-">transfer</a></code> in interface <code><a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to transfer      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case the element is not left enqueued               </dd>   </dl></li></ul> <a name="tryTransfer-java.lang.Object-long-java.util.concurrent.TimeUnit-"/><a end_ctx_id="method:transfer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tryTransfer-E-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tryTransfer-E-long-java.util.concurrent.TimeUnit-"/><a name="tryTransfer-E-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>tryTransfer</h4><pre>public boolean tryTransfer(<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> e,
                           long timeout,
                           <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
                    throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Transfers the element to a consumer if it is possible to do so before the timeout elapses.<p>More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in <a href="../../../java/util/concurrent/LinkedTransferQueue.html#take--"><code>take()</code></a> or timed <a href="../../../java/util/concurrent/LinkedTransferQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer, returning <code>false</code> if the specified wait time elapses before the element can be transferred.                                                        </p>                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/TransferQueue.html#tryTransfer-E-long-java.util.concurrent.TimeUnit-">tryTransfer</a></code> in interface <code><a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to transfer      </dd><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if successful, or <code>false</code> if the specified waiting time elapses before completion, in which case the element is not left enqueued                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case the element is not left enqueued               </dd>    </dl></li></ul> <a end_ctx_id="method:tryTransfer-E-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:take-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:take--"/><a name="take--"/><ul class="blockList"><li class="blockList"><h4>take</h4><pre>public <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> take()
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/BlockingQueue.html#take--">BlockingQueue</a></code>   </span> </div><div class="block">Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#take--">take</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:take--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/><a name="poll-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre>public <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> poll(long timeout,
              <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-">BlockingQueue</a></code>   </span> </div><div class="block">Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-">poll</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue, or <code>null</code> if the specified waiting time elapses before an element is available                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>    </dl></li></ul> <a end_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll--"/><a name="poll--"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre>public <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> poll()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/Queue.html#poll--">Queue</a></code>   </span> </div><div class="block">Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty.               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Queue.html#poll--">poll</a></code> in interface <code><a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue, or <code>null</code> if this queue is empty           </dd>  </dl></li></ul> <a end_ctx_id="method:poll--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:drainTo-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:drainTo-java.util.Collection-"/><a name="drainTo-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>drainTo</h4><pre>public int drainTo(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? super <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; c)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/BlockingQueue.html#drainTo-java.util.Collection-">BlockingQueue</a></code>   </span> </div><div class="block">Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection <code>c</code> may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in <code>IllegalArgumentException</code>. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.                                                                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#drainTo-java.util.Collection-">drainTo</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection to transfer elements into        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements transferred    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection                           </dd>    </dl></li></ul> <a end_ctx_id="method:drainTo-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:drainTo-java.util.Collection-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:drainTo-java.util.Collection-int-"/><a name="drainTo-java.util.Collection-int-"/><ul class="blockList"><li class="blockList"><h4>drainTo</h4><pre>public int drainTo(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? super <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; c,
                   int maxElements)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/BlockingQueue.html#drainTo-java.util.Collection-int-">BlockingQueue</a></code>   </span> </div><div class="block">Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection <code>c</code> may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in <code>IllegalArgumentException</code>. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.                                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#drainTo-java.util.Collection-int-">drainTo</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection to transfer elements into        </dd><dd> <code>maxElements</code> - the maximum number of elements to transfer         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements transferred    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection                           </dd>    </dl></li></ul> <a end_ctx_id="method:drainTo-java.util.Collection-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public <a href="../../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt; iterator()</pre><div class="block">Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail).<p>The returned iterator is <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.    </p>                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#iterator--">iterator</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/AbstractCollection.html#iterator--">iterator</a></code> in class <code><a href="../../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements in this queue in proper sequence          </dd>    </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peek-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peek--"/><a name="peek--"/><ul class="blockList"><li class="blockList"><h4>peek</h4><pre>public <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a> peek()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/Queue.html#peek--">Queue</a></code>   </span> </div><div class="block">Retrieves, but does not remove, the head of this queue, or returns <code>null</code> if this queue is empty.                 </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Queue.html#peek--">peek</a></code> in interface <code><a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue, or <code>null</code> if this queue is empty           </dd>  </dl></li></ul> <a end_ctx_id="method:peek--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isEmpty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isEmpty--"/><a name="isEmpty--"/><ul class="blockList"><li class="blockList"><h4>isEmpty</h4><pre>public boolean isEmpty()</pre><div class="block">Returns <code>true</code> if this queue contains no elements.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#isEmpty--">isEmpty</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractCollection.html#isEmpty--">isEmpty</a></code> in class <code><a href="../../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this queue contains no elements       </dd>   </dl></li></ul> <a end_ctx_id="method:isEmpty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasWaitingConsumer-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasWaitingConsumer--"/><a name="hasWaitingConsumer--"/><ul class="blockList"><li class="blockList"><h4>hasWaitingConsumer</h4><pre>public boolean hasWaitingConsumer()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/TransferQueue.html#hasWaitingConsumer--">TransferQueue</a></code>   </span> </div><div class="block">Returns <code>true</code> if there is at least one consumer waiting to receive an element via <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>. The return value represents a momentary state of affairs.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/TransferQueue.html#hasWaitingConsumer--">hasWaitingConsumer</a></code> in interface <code><a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if there is at least one waiting consumer         </dd>  </dl></li></ul> <a end_ctx_id="method:hasWaitingConsumer--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>public int size()</pre><div class="block">Returns the number of elements in this queue. If this queue contains more than <code>Integer.MAX_VALUE</code> elements, returns <code>Integer.MAX_VALUE</code>.<p>Beware that, unlike in most collections, this method is <em>NOT</em> a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an O(n) traversal.                              </p>                 </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#size--">size</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/AbstractCollection.html#size--">size</a></code> in class <code><a href="../../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements in this queue      </dd>   </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getWaitingConsumerCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getWaitingConsumerCount--"/><a name="getWaitingConsumerCount--"/><ul class="blockList"><li class="blockList"><h4>getWaitingConsumerCount</h4><pre>public int getWaitingConsumerCount()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/TransferQueue.html#getWaitingConsumerCount--">TransferQueue</a></code>   </span> </div><div class="block">Returns an estimate of the number of consumers waiting to receive elements via <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>. The return value is an approximation of a momentary state of affairs, that may be inaccurate if consumers have completed or given up waiting. The value may be useful for monitoring and heuristics, but not for synchronization control. Implementations of this method are likely to be noticeably slower than those for <a href="../../../java/util/concurrent/TransferQueue.html#hasWaitingConsumer--"><code>TransferQueue.hasWaitingConsumer()</code></a>.                                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/TransferQueue.html#getWaitingConsumerCount--">getWaitingConsumerCount</a></code> in interface <code><a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of consumers waiting to receive elements       </dd>  </dl></li></ul> <a end_ctx_id="method:getWaitingConsumerCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public boolean remove(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element <code>e</code> such that <code>o.equals(e)</code>, if this queue contains one or more such elements. Returns <code>true</code> if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractCollection.html#remove-java.lang.Object-">remove</a></code> in class <code><a href="../../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to be removed from this queue, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this queue changed as a result of the call           </dd>     </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:contains-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:contains-java.lang.Object-"/><a name="contains-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>contains</h4><pre>public boolean contains(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns <code>true</code> if this queue contains the specified element. More formally, returns <code>true</code> if and only if this queue contains at least one element <code>e</code> such that <code>o.equals(e)</code>.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractCollection.html#contains-java.lang.Object-">contains</a></code> in class <code><a href="../../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - object to be checked for containment in this queue           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this queue contains the specified element        </dd>     </dl></li></ul> <a end_ctx_id="method:contains-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remainingCapacity-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remainingCapacity--"/><a name="remainingCapacity--"/><ul class="blockListLast"><li class="blockList"><h4>remainingCapacity</h4><pre>public int remainingCapacity()</pre><div class="block">Always returns <code>Integer.MAX_VALUE</code> because a <code>LinkedTransferQueue</code> is not capacity constrained.         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/BlockingQueue.html#remainingCapacity--">remainingCapacity</a></code> in interface <code><a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="type parameter in LinkedTransferQueue">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>Integer.MAX_VALUE</code> (as specified by <a href="../../../java/util/concurrent/BlockingQueue.html#remainingCapacity--"><code>BlockingQueue.remainingCapacity</code></a>)     </dd>  </dl></li></ul> <a end_ctx_id="method:remainingCapacity--"/>  </td></tr></table></td></tr></table></diff></diffreport>