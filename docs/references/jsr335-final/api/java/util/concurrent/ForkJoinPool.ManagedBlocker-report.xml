<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ForkJoinPool.ManagedBlocker [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ForkJoinPool.ManagedBlocker"/><ul class="blockList"><li class="blockList"><dl> <dt>Enclosing class: </dt><dd> <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent">ForkJoinPool</a> </dd> </dl> <hr/> <br/><pre>public static interface <span class="typeNameLabel">ForkJoinPool.ManagedBlocker</span></pre><div class="block">Interface for extending managed parallelism for tasks running in <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent"><code>ForkJoinPool</code></a>s.<p>A <code>ManagedBlocker</code> provides two methods. Method <code>isReleasable</code> must return <code>true</code> if blocking is not necessary. Method <code>block</code> blocks the current thread if necessary (perhaps internally invoking <code>isReleasable</code> before actually blocking). These actions are performed by any thread invoking <a href="../../../java/util/concurrent/ForkJoinPool.html#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-"><code>ForkJoinPool.managedBlock(ManagedBlocker)</code></a>. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method <code>isReleasable</code> must be amenable to repeated invocation.                                                                                            </p><p>For example, here is a ManagedBlocker based on a ReentrantLock:<pre> 
<code>
 class ManagedLocker implements ManagedBlocker {
   final ReentrantLock lock;
   boolean hasLock = false;
   ManagedLocker(ReentrantLock lock) { this.lock = lock; }
   public boolean block() {
     if (!hasLock)
       lock.lock();
     return true;
   }
   public boolean isReleasable() {
     return hasLock || (hasLock = lock.tryLock());
   }
 }</code></pre>         </p><p>Here is a class that possibly blocks waiting for an item on a given queue:<pre> 
<code>
 class QueueTaker&lt;E&gt; implements ManagedBlocker {
   final BlockingQueue&lt;E&gt; queue;
   volatile E item = null;
   QueueTaker(BlockingQueue&lt;E&gt; q) { this.queue = q; }
   public boolean block() throws InterruptedException {
     if (item == null)
       item = queue.take();
     return true;
   }
   public boolean isReleasable() {
     return item != null || (item = queue.poll()) != null;
   }
   public E getItem() { // call after pool.managedBlock completes
     return item;
   }
 }</code></pre>              </p>         </div>  </li></ul> </div> <a end_ctx_id="class:ForkJoinPool.ManagedBlocker"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:block-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:block--"/><a name="block--"/><ul class="blockList"><li class="blockList"><h4>block</h4><pre>boolean block()
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Possibly blocks the current thread, for example waiting for a lock or condition.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if no additional blocking is necessary (i.e., if isReleasable would return true)             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting (the method is not required to do so, but is allowed to)                  </dd>  </dl></li></ul> <a end_ctx_id="method:block--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isReleasable-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isReleasable--"/><a name="isReleasable--"/><ul class="blockListLast"><li class="blockList"><h4>isReleasable</h4><pre>boolean isReleasable()</pre><div class="block">Returns <code>true</code> if blocking is unnecessary.     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if blocking is unnecessary     </dd> </dl></li></ul> <a end_ctx_id="method:isReleasable--"/>  </td></tr></table></td></tr></table></diff></diffreport>