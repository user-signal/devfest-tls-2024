<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:TransferQueue [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:TransferQueue"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements held in this collection          </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;E&gt;, <a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt;    </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="class in java.util.concurrent">LinkedTransferQueue</a> </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">TransferQueue&lt;E&gt;</span>
extends <a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;E&gt;</pre><div class="block">A <a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent"><code>BlockingQueue</code></a> in which producers may wait for consumers to receive elements. A <code>TransferQueue</code> may be useful for example in message passing applications in which producers sometimes (using method <a href="../../../java/util/concurrent/TransferQueue.html#transfer-E-"><code>transfer(E)</code></a>) await receipt of elements by consumers invoking <code>take</code> or <code>poll</code>, while at other times enqueue elements (via method <code>put</code>) without waiting for receipt. <a href="../../../java/util/concurrent/TransferQueue.html#tryTransfer-E-">Non-blocking</a> and <a href="../../../java/util/concurrent/TransferQueue.html#tryTransfer-E-long-java.util.concurrent.TimeUnit-">time-out</a> versions of <code>tryTransfer</code> are also available. A <code>TransferQueue</code> may also be queried, via <a href="../../../java/util/concurrent/TransferQueue.html#hasWaitingConsumer--"><code>hasWaitingConsumer()</code></a>, whether there are any threads waiting for items, which is a converse analogy to a <code>peek</code> operation.<p>Like other blocking queues, a <code>TransferQueue</code> may be capacity bounded. If so, an attempted transfer operation may initially block waiting for available space, and/or subsequently block waiting for reception by a consumer. Note that in a queue with zero capacity, such as <a href="../../../java/util/concurrent/SynchronousQueue.html" title="class in java.util.concurrent"><code>SynchronousQueue</code></a>, <code>put</code> and <code>transfer</code> are effectively synonymous.                                                </p><p>This interface is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                                                                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:TransferQueue"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tryTransfer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:tryTransfer-E-"/><a name="tryTransfer-E-"/><ul class="blockList"><li class="blockList"><h4>tryTransfer</h4><pre>boolean tryTransfer(<a href="../../../java/util/concurrent/TransferQueue.html" title="type parameter in TransferQueue">E</a> e)</pre><div class="block">Transfers the element to a waiting consumer immediately, if possible.<p>More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>), otherwise returning <code>false</code> without enqueuing the element.                            </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to transfer      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was transferred, else <code>false</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>   </dl></li></ul> <a name="transfer-java.lang.Object-"/><a end_ctx_id="method:tryTransfer-E-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:transfer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:transfer-E-"/><a name="transfer-E-"/><ul class="blockList"><li class="blockList"><h4>transfer</h4><pre>void transfer(<a href="../../../java/util/concurrent/TransferQueue.html" title="type parameter in TransferQueue">E</a> e)
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Transfers the element to a consumer, waiting if necessary to do so.<p>More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>), else waits until the element is received by a consumer.                               </p>           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to transfer      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case the element is not left enqueued               </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>  </dl></li></ul> <a name="tryTransfer-java.lang.Object-long-java.util.concurrent.TimeUnit-"/><a end_ctx_id="method:transfer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tryTransfer-E-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tryTransfer-E-long-java.util.concurrent.TimeUnit-"/><a name="tryTransfer-E-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>tryTransfer</h4><pre>boolean tryTransfer(<a href="../../../java/util/concurrent/TransferQueue.html" title="type parameter in TransferQueue">E</a> e,
                    long timeout,
                    <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
             throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Transfers the element to a consumer if it is possible to do so before the timeout elapses.<p>More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>), else waits until the element is received by a consumer, returning <code>false</code> if the specified wait time elapses before the element can be transferred.                                             </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to transfer      </dd><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if successful, or <code>false</code> if the specified waiting time elapses before completion, in which case the element is not left enqueued                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case the element is not left enqueued               </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>   </dl></li></ul> <a end_ctx_id="method:tryTransfer-E-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasWaitingConsumer-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasWaitingConsumer--"/><a name="hasWaitingConsumer--"/><ul class="blockList"><li class="blockList"><h4>hasWaitingConsumer</h4><pre>boolean hasWaitingConsumer()</pre><div class="block">Returns <code>true</code> if there is at least one consumer waiting to receive an element via <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>. The return value represents a momentary state of affairs.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if there is at least one waiting consumer         </dd> </dl></li></ul> <a end_ctx_id="method:hasWaitingConsumer--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getWaitingConsumerCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getWaitingConsumerCount--"/><a name="getWaitingConsumerCount--"/><ul class="blockListLast"><li class="blockList"><h4>getWaitingConsumerCount</h4><pre>int getWaitingConsumerCount()</pre><div class="block">Returns an estimate of the number of consumers waiting to receive elements via <a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>BlockingQueue.take()</code></a> or timed <a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll</code></a>. The return value is an approximation of a momentary state of affairs, that may be inaccurate if consumers have completed or given up waiting. The value may be useful for monitoring and heuristics, but not for synchronization control. Implementations of this method are likely to be noticeably slower than those for <a href="../../../java/util/concurrent/TransferQueue.html#hasWaitingConsumer--"><code>hasWaitingConsumer()</code></a>.                                                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of consumers waiting to receive elements       </dd> </dl></li></ul> <a end_ctx_id="method:getWaitingConsumerCount--"/>  </td></tr></table></td></tr></table></diff></diffreport>