<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Byte [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Byte"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a>&gt;  </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Byte</span>
extends <a href="../../java/lang/Number.html" title="class in java.lang">Number</a>
implements <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a>&gt;</pre><div class="block">The <code>Byte</code> class wraps a value of primitive type <code>byte</code> in an object. An object of type <code>Byte</code> contains a single field whose type is <code>byte</code>.<p>In addition, this class provides several methods for converting a <code>byte</code> to a <code>String</code> and a <code>String</code> to a <code>byte</code>, as well as other constants and methods useful when dealing with a <code>byte</code>.                                </p>                         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Number.html" title="class in java.lang"><code>Number</code></a>, <a href="../../serialized-form.html#java.lang.Byte">Serialized Form </a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Byte"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MIN_VALUE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MIN_VALUE"/><a name="MIN_VALUE"/><ul class="blockList"><li class="blockList"><h4>MIN_VALUE</h4><pre>public static final byte MIN_VALUE</pre><div class="block">A constant holding the minimum value a <code>byte</code> can have, -2<sup>7</sup>.          </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Byte.MIN_VALUE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MIN_VALUE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:MAX_VALUE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:MAX_VALUE"/><a name="MAX_VALUE"/><ul class="blockList"><li class="blockList"><h4>MAX_VALUE</h4><pre>public static final byte MAX_VALUE</pre><div class="block">A constant holding the maximum value a <code>byte</code> can have, 2<sup>7</sup>-1.          </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Byte.MAX_VALUE">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:MAX_VALUE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TYPE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TYPE"/><a name="TYPE"/><ul class="blockList"><li class="blockList"><h4>TYPE</h4><pre>public static final <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;<a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a>&gt; TYPE</pre><div class="block">The <code>Class</code> instance representing the primitive type <code>byte</code>.       </div></li></ul> <a end_ctx_id="field:TYPE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:SIZE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:SIZE"/><a name="SIZE"/><ul class="blockList"><li class="blockList"><h4>SIZE</h4><pre>public static final int SIZE</pre><div class="block">The number of bits used to represent a <code>byte</code> value in two's complement binary form.              </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Byte.SIZE">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:SIZE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:BYTES [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:BYTES"/><a name="BYTES"/><ul class="blockListLast"><li class="blockList"><h4>BYTES</h4><pre>public static final int BYTES</pre><div class="block">The number of bytes used to represent a <code>byte</code> value in two's complement binary form.              </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Byte.BYTES">Constant Field Values  </a> </dd>  </dl></li></ul> <a end_ctx_id="field:BYTES"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Byte-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Byte-byte-"/><a name="Byte-byte-"/><ul class="blockList"><li class="blockList"><h4>Byte</h4><pre>public Byte(byte value)</pre><div class="block">Constructs a newly allocated <code>Byte</code> object that represents the specified <code>byte</code> value.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to be represented by the <code>Byte</code>.          </dd> </dl></li></ul> <a end_ctx_id="constructor:Byte-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Byte-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Byte-java.lang.String-"/><a name="Byte-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>Byte</h4><pre>public Byte(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
     throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Constructs a newly allocated <code>Byte</code> object that represents the <code>byte</code> value indicated by the <code>String</code> parameter. The string is converted to a <code>byte</code> value in exactly the manner used by the <code>parseByte</code> method for radix 10.                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the <code>String</code> to be converted to a <code>Byte</code>          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - If the <code>String</code> does not contain a parsable <code>byte</code>.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Byte.html#parseByte-java.lang.String-int-"><code>parseByte(java.lang.String, int) </code></a> </dd>   </dl></li></ul> <a end_ctx_id="constructor:Byte-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString-byte-"/><a name="toString-byte-"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString(byte b)</pre><div class="block">Returns a new <code>String</code> object representing the specified <code>byte</code>. The radix is assumed to be 10.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the <code>byte</code> to be converted       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of the specified <code>byte</code>      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#toString-int-"><code>Integer.toString(int)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:toString-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-byte-"/><a name="valueOf-byte-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a> valueOf(byte b)</pre><div class="block">Returns a <code>Byte</code> instance representing the specified <code>byte</code> value. If a new <code>Byte</code> instance is not required, this method should generally be used in preference to the constructor <a href="../../java/lang/Byte.html#Byte-byte-"><code>Byte(byte)</code></a>, as this method is likely to yield significantly better space and time performance since all byte values are cached.                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - a byte value.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Byte</code> instance representing <code>b</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseByte-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseByte-java.lang.String-int-"/><a name="parseByte-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>parseByte</h4><pre>public static byte parseByte(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s,
                             int radix)
                      throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Parses the string argument as a signed <code>byte</code> in the radix specified by the second argument. The characters in the string must all be digits, of the specified radix (as determined by whether <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit(char, int) </code></a> returns a nonnegative value) except that the first character may be an ASCII minus sign <code>'-'</code> (<code>'\u002D'</code>) to indicate a negative value or an ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>) to indicate a positive value. The resulting <code>byte</code> value is returned.<p>An exception of type <code>NumberFormatException</code> is thrown if any of the following situations occurs:<ul><li> The first argument is <code>null</code> or is a string of length zero.            </li><li> The radix is either smaller than <a href="../../java/lang/Character.html#MIN_RADIX"><code>Character.MIN_RADIX</code></a> or larger than <a href="../../java/lang/Character.html#MAX_RADIX"><code>Character.MAX_RADIX</code></a>.           </li><li> Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign <code>'-'</code> (<code>'\u002D'</code>) or plus sign <code>'+'</code> (<code>'\u002B'</code>) provided that the string is longer than length 1.                                       </li><li> The value represented by the string is not a value of type <code>byte</code>.             </li></ul>             </p>                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the <code>String</code> containing the <code>byte</code> representation to be parsed           </dd><dd> <code>radix</code> - the radix to be used while parsing <code>s</code>          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>byte</code> value represented by the string argument in the specified radix           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - If the string does not contain a parsable <code>byte</code>.           </dd>   </dl></li></ul> <a end_ctx_id="method:parseByte-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parseByte-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parseByte-java.lang.String-"/><a name="parseByte-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>parseByte</h4><pre>public static byte parseByte(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                      throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Parses the string argument as a signed decimal <code>byte</code>. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign <code>'-'</code> (<code>'\u002D'</code>) to indicate a negative value or an ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>) to indicate a positive value. The resulting <code>byte</code> value is returned, exactly as if the argument and the radix 10 were given as arguments to the <a href="../../java/lang/Byte.html#parseByte-java.lang.String-int-"><code>parseByte(java.lang.String, int) </code></a> method.                                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - a <code>String</code> containing the <code>byte</code> representation to be parsed           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>byte</code> value represented by the argument in decimal        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the string does not contain a parsable <code>byte</code>.           </dd>   </dl></li></ul> <a end_ctx_id="method:parseByte-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.lang.String-int-"/><a name="valueOf-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a> valueOf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s,
                           int radix)
                    throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Returns a <code>Byte</code> object holding the value extracted from the specified <code>String</code> when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed <code>byte</code> in the radix specified by the second argument, exactly as if the argument were given to the <a href="../../java/lang/Byte.html#parseByte-java.lang.String-int-"><code>parseByte(java.lang.String, int) </code></a> method. The result is a <code>Byte</code> object that represents the <code>byte</code> value specified by the string.<p> In other words, this method returns a <code>Byte</code> object equal to the value of:              </p><blockquote> <code>new Byte(Byte.parseByte(s, radix))  </code> </blockquote>                                                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string to be parsed       </dd><dd> <code>radix</code> - the radix to be used in interpreting <code>s</code>          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Byte</code> object holding the value represented by the string argument in the specified radix.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - If the <code>String</code> does not contain a parsable <code>byte</code>.           </dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.lang.String-"/><a name="valueOf-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a> valueOf(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
                    throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Returns a <code>Byte</code> object holding the value given by the specified <code>String</code>. The argument is interpreted as representing a signed decimal <code>byte</code>, exactly as if the argument were given to the <a href="../../java/lang/Byte.html#parseByte-java.lang.String-"><code>parseByte(java.lang.String)</code></a> method. The result is a <code>Byte</code> object that represents the <code>byte</code> value specified by the string.<p> In other words, this method returns a <code>Byte</code> object equal to the value of:              </p><blockquote> <code>new Byte(Byte.parseByte(s)) </code> </blockquote>                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string to be parsed       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Byte</code> object holding the value represented by the string argument          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - If the <code>String</code> does not contain a parsable <code>byte</code>.           </dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decode-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decode-java.lang.String-"/><a name="decode-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>decode</h4><pre>public static <a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a> decode(<a href="../../java/lang/String.html" title="class in java.lang">String</a> nm)
                   throws <a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></pre><div class="block">Decodes a <code>String</code> into a <code>Byte</code>. Accepts decimal, hexadecimal, and octal numbers given by the following grammar:<blockquote><dl> <dt> <i>DecodableString:</i>   </dt><dd> <i>Sign<sub>opt</sub> DecimalNumeral </i> </dd><dd> <i>Sign<sub>opt</sub></i><code>0x</code><i>HexDigits</i> </dd><dd> <i>Sign<sub>opt</sub></i><code>0X</code><i>HexDigits</i> </dd><dd> <i>Sign<sub>opt</sub></i><code>#</code><i>HexDigits</i> </dd><dd> <i>Sign<sub>opt</sub></i><code>0</code><i>OctalDigits</i> </dd> <dt> <i>Sign:</i>   </dt><dd> <code>-</code> </dd><dd> <code>+</code> </dd>  </dl></blockquote> <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i> are as defined in section 3.10.1 of <cite>The Java™ Language Specification   </cite>, except that underscores are not accepted between digits.<p>The sequence of characters following an optional sign and/or radix specifier ("<code>0x</code>", "<code>0X</code>", "<code>#</code>", or leading zero) is parsed as by the <code>Byte.parseByte</code> method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a <a href="../../java/lang/NumberFormatException.html" title="class in java.lang"><code>NumberFormatException</code></a> will be thrown. The result is negated if first character of the specified <code>String</code> is the minus sign. No whitespace characters are permitted in the <code>String</code>.                                                                     </p>                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nm</code> - the <code>String</code> to decode.      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Byte</code> object holding the <code>byte</code> value represented by <code>nm</code>         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NumberFormatException.html" title="class in java.lang">NumberFormatException</a></code> - if the <code>String</code> does not contain a parsable <code>byte</code>.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Byte.html#parseByte-java.lang.String-int-"><code>parseByte(java.lang.String, int) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:decode-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:byteValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:byteValue--"/><a name="byteValue--"/><ul class="blockList"><li class="blockList"><h4>byteValue</h4><pre>public byte byteValue()</pre><div class="block">Returns the value of this <code>Byte</code> as a <code>byte</code>.        </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Number.html#byteValue--">byteValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>byte</code>.           </dd>  </dl></li></ul> <a end_ctx_id="method:byteValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shortValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shortValue--"/><a name="shortValue--"/><ul class="blockList"><li class="blockList"><h4>shortValue</h4><pre>public short shortValue()</pre><div class="block">Returns the value of this <code>Byte</code> as a <code>short</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Number.html#shortValue--">shortValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>short</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:shortValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:intValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:intValue--"/><a name="intValue--"/><ul class="blockList"><li class="blockList"><h4>intValue</h4><pre>public int intValue()</pre><div class="block">Returns the value of this <code>Byte</code> as an <code>int</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#intValue--">intValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>int</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:intValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:longValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:longValue--"/><a name="longValue--"/><ul class="blockList"><li class="blockList"><h4>longValue</h4><pre>public long longValue()</pre><div class="block">Returns the value of this <code>Byte</code> as a <code>long</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#longValue--">longValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>long</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:longValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floatValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floatValue--"/><a name="floatValue--"/><ul class="blockList"><li class="blockList"><h4>floatValue</h4><pre>public float floatValue()</pre><div class="block">Returns the value of this <code>Byte</code> as a <code>float</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#floatValue--">floatValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>float</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:floatValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:doubleValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:doubleValue--"/><a name="doubleValue--"/><ul class="blockList"><li class="blockList"><h4>doubleValue</h4><pre>public double doubleValue()</pre><div class="block">Returns the value of this <code>Byte</code> as a <code>double</code> after a widening primitive conversion.             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Number.html#doubleValue--">doubleValue</a></code> in class <code><a href="../../java/lang/Number.html" title="class in java.lang">Number</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the numeric value represented by this object after conversion to type <code>double</code>.           </dd> <dt> <span class="simpleTagLabel">See <cite> The Java™ Language Specification    </cite>: </span>   </dt><dd>5.1.2 Widening Primitive Conversions   </dd>   </dl></li></ul> <a end_ctx_id="method:doubleValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a <code>String</code> object representing this <code>Byte</code>'s value. The value is converted to signed decimal representation and returned as a string, exactly as if the <code>byte</code> value were given as an argument to the <a href="../../java/lang/Byte.html#toString-byte-"><code>toString(byte)</code></a> method.                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of the value of this object in base 10.          </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns a hash code for this <code>Byte</code>; equal to the result of invoking <code>intValue()</code>.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for this <code>Byte</code>      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode-byte-"/><a name="hashCode-byte-"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public static int hashCode(byte value)</pre><div class="block">Returns a hash code for a <code>byte</code> value; compatible with <code>Byte.hashCode()</code>.          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to hash      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for a <code>byte</code> value.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:hashCode-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Compares this object to the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Byte</code> object that contains the same <code>byte</code> value as this object.                                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to compare with       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the objects are the same; <code>false</code> otherwise.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compareTo-java.lang.Byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compareTo-java.lang.Byte-"/><a name="compareTo-java.lang.Byte-"/><ul class="blockList"><li class="blockList"><h4>compareTo</h4><pre>public int compareTo(<a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a> anotherByte)</pre><div class="block">Compares two <code>Byte</code> objects numerically.    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Comparable.html#compareTo-T-">compareTo</a></code> in interface <code><a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../java/lang/Byte.html" title="class in java.lang">Byte</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>anotherByte</code> - the <code>Byte</code> to be compared.       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if this <code>Byte</code> is equal to the argument <code>Byte</code>; a value less than <code>0</code> if this <code>Byte</code> is numerically less than the argument <code>Byte</code>; and a value greater than <code>0</code> if this <code>Byte</code> is numerically greater than the argument <code>Byte</code> (signed comparison).                                            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>    </dl></li></ul> <a end_ctx_id="method:compareTo-java.lang.Byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compare-byte-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compare-byte-byte-"/><a name="compare-byte-byte-"/><ul class="blockList"><li class="blockList"><h4>compare</h4><pre>public static int compare(byte x,
                          byte y)</pre><div class="block">Compares two <code>byte</code> values numerically. The value returned is identical to what would be returned by:<pre>
    Byte.valueOf(x).compareTo(Byte.valueOf(y))
 </pre>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first <code>byte</code> to compare       </dd><dd> <code>y</code> - the second <code>byte</code> to compare       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>0</code> if <code>x == y  </code>; a value less than <code>0</code> if <code>x &lt; y  </code>; and a value greater than <code>0</code> if <code>x &gt; y  </code>                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:compare-byte-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toUnsignedInt-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toUnsignedInt-byte-"/><a name="toUnsignedInt-byte-"/><ul class="blockList"><li class="blockList"><h4>toUnsignedInt</h4><pre>public static int toUnsignedInt(byte x)</pre><div class="block">Converts the argument to an <code>int</code> by an unsigned conversion. In an unsigned conversion to an <code>int</code>, the high-order 24 bits of the <code>int</code> are zero and the low-order 8 bits are equal to the bits of the <code>byte</code> argument. Consequently, zero and positive <code>byte</code> values are mapped to a numerically equal <code>int</code> value and negative <code>byte</code> values are mapped to an <code>int</code> value equal to the input plus 2<sup>8</sup>.                                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the value to convert to an unsigned <code>int</code>          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the argument converted to <code>int</code> by an unsigned conversion        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:toUnsignedInt-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toUnsignedLong-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toUnsignedLong-byte-"/><a name="toUnsignedLong-byte-"/><ul class="blockListLast"><li class="blockList"><h4>toUnsignedLong</h4><pre>public static long toUnsignedLong(byte x)</pre><div class="block">Converts the argument to a <code>long</code> by an unsigned conversion. In an unsigned conversion to a <code>long</code>, the high-order 56 bits of the <code>long</code> are zero and the low-order 8 bits are equal to the bits of the <code>byte</code> argument. Consequently, zero and positive <code>byte</code> values are mapped to a numerically equal <code>long</code> value and negative <code>byte</code> values are mapped to a <code>long</code> value equal to the input plus 2<sup>8</sup>.                                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the value to convert to an unsigned <code>long</code>          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the argument converted to <code>long</code> by an unsigned conversion        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:toUnsignedLong-byte-"/>  </td></tr></table></td></tr></table></diff></diffreport>