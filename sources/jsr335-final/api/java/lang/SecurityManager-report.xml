<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:SecurityManager [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:SecurityManager"/><ul class="blockList"><li class="blockList"><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/rmi/RMISecurityManager.html" title="class in java.rmi">RMISecurityManager</a> </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">SecurityManager</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">The security manager is a class that allows applications to implement a security policy. It allows an application to determine, before performing a possibly unsafe or sensitive operation, what the operation is and whether it is being attempted in a security context that allows the operation to be performed. The application can allow or disallow the operation.<p> The <code>SecurityManager</code> class contains many methods with names that begin with the word <code>check</code>. These methods are called by various methods in the Java libraries before those methods perform certain potentially sensitive operations. The invocation of such a <code>check</code> method typically looks like this:                                            </p><blockquote><pre>
     SecurityManager security = System.getSecurityManager();
     if (security != null) {
         security.check<i>XXX</i>(argument,  . . . );
     }
 </pre></blockquote><p> The security manager is thereby given an opportunity to prevent completion of the operation by throwing an exception. A security manager routine simply returns if the operation is permitted, but throws a <code>SecurityException</code> if the operation is not permitted. The only exception to this convention is <code>checkTopLevelWindow</code>, which returns a <code>boolean</code> value.                                                    </p><p> The current security manager is set by the <code>setSecurityManager</code> method in class <code>System</code>. The current security manager is obtained by the <code>getSecurityManager</code> method.                       </p><p> The special method <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission(java.security.Permission)</code></a> determines whether an access request indicated by a specified permission should be granted or denied. The default implementation calls<pre>
   AccessController.checkPermission(perm);
 </pre>                       </p><p> If a requested access is allowed, <code>checkPermission</code> returns quietly. If denied, a <code>SecurityException</code> is thrown.               </p><p> As of Java 2 SDK v1.2, the default implementation of each of the other <code>check</code> methods in <code>SecurityManager</code> is to call the <code>SecurityManager checkPermission </code> method to determine if the calling thread has permission to perform the requested operation.                                     </p><p> Note that the <code>checkPermission</code> method with just a single permission argument always performs security checks within the context of the currently executing thread. Sometimes a security check that should be made within a given context will actually need to be done from within a <i>different</i> context (for example, from within a worker thread). The <a href="../../java/lang/SecurityManager.html#getSecurityContext--"><code>getSecurityContext</code></a> method and the <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-java.lang.Object-"><code>checkPermission</code></a> method that includes a context argument are provided for this situation. The <code>getSecurityContext</code> method returns a "snapshot" of the current calling context. (The default implementation returns an AccessControlContext object.) A sample call is the following:<pre>
   Object context = null;
   SecurityManager sm = System.getSecurityManager();
   if (sm != null) context = sm.getSecurityContext();
 </pre>                                                                                              </p><p> The <code>checkPermission</code> method that takes a context object in addition to a permission makes access decisions based on that context, rather than on that of the current execution thread. Code within a different context can thus call that method, passing the permission and the previously-saved context object. A sample call, using the SecurityManager <code>sm</code> obtained as in the previous example, is the following:<pre>
   if (sm != null) sm.checkPermission(permission, context);
 </pre>                                                               </p><p>Permissions fall into these categories: File, Socket, Net, Security, Runtime, Property, AWT, Reflect, and Serializable. The classes managing these various permission categories are <code>java.io.FilePermission</code>, <code>java.net.SocketPermission</code>, <code>java.net.NetPermission</code>, <code>java.security.SecurityPermission</code>, <code>java.lang.RuntimePermission</code>, <code>java.util.PropertyPermission</code>, <code>java.awt.AWTPermission</code>, <code>java.lang.reflect.ReflectPermission</code>, and <code>java.io.SerializablePermission</code>.                                </p><p>All but the first two (FilePermission and SocketPermission) are subclasses of <code>java.security.BasicPermission</code>, which itself is an abstract subclass of the top-level class for permissions, which is <code>java.security.Permission</code>. BasicPermission defines the functionality needed for all permissions that contain a name that follows the hierarchical property naming convention (for example, "exitVM", "setFactory", "queuePrintJob", etc). An asterisk may appear at the end of the name, following a ".", or by itself, to signify a wildcard match. For example: "a.*" or "*" is valid, "*a" or "a*b" is not valid.                                                                                     </p><p>FilePermission and SocketPermission are subclasses of the top-level class for permissions (<code>java.security.Permission</code>). Classes like these that have a more complicated name syntax than that used by BasicPermission subclass directly from Permission rather than from BasicPermission. For example, for a <code>java.io.FilePermission</code> object, the permission name is the path name of a file (or directory).                                                    </p><p>Some of the permission classes have an "actions" list that tells the actions that are permitted for the object. For example, for a <code>java.io.FilePermission</code> object, the actions list (such as "read, write") specifies which actions are granted for the specified file (or for files in the specified directory).                                               </p><p>Other permission classes are for "named" permissions - ones that contain a name but no actions list; you either have the named permission or you don't.                         </p><p>Note: There is also a <code>java.security.AllPermission</code> permission that implies all permissions. It exists to simplify the work of system administrators who might need to perform multiple tasks that require all (or numerous) permissions.                                </p><p> See <a href="../../../technotes/guides/security/permissions.html"> Permissions in the JDK    </a> for permission-related information. This document includes, for example, a table listing the various SecurityManager <code>check</code> methods and the permission(s) the default implementation of each such method requires. It also contains a table of all the version 1.2 methods that require permissions, and for each such method tells which permission it requires.                                                     </p><p> For more information about <code>SecurityManager</code> changes made in the JDK and advice regarding porting of 1.1-style security managers, see the <a href="../../../technotes/guides/security/index.html">security documentation </a>.                     </p>                                                        </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html" title="class in java.lang"><code>ClassLoader</code></a>, <a href="../../java/lang/SecurityException.html" title="class in java.lang"><code>SecurityException</code></a>, <a href="../../java/lang/SecurityManager.html#checkTopLevelWindow-java.lang.Object-"><code>checkTopLevelWindow</code></a>, <a href="../../java/lang/System.html#getSecurityManager--"><code>getSecurityManager</code></a>, <a href="../../java/lang/System.html#setSecurityManager-java.lang.SecurityManager-"><code>setSecurityManager</code></a>, <a href="../../java/security/AccessController.html" title="class in java.security"><code>AccessController</code></a>, <a href="../../java/security/AccessControlContext.html" title="class in java.security"><code>AccessControlContext</code></a>, <a href="../../java/security/AccessControlException.html" title="class in java.security"><code>AccessControlException</code></a>, <a href="../../java/security/Permission.html" title="class in java.security"><code>Permission</code></a>, <a href="../../java/security/BasicPermission.html" title="class in java.security"><code>BasicPermission</code></a>, <a href="../../java/io/FilePermission.html" title="class in java.io"><code>FilePermission</code></a>, <a href="../../java/net/SocketPermission.html" title="class in java.net"><code>SocketPermission</code></a>, <a href="../../java/util/PropertyPermission.html" title="class in java.util"><code>PropertyPermission</code></a>, <a href="../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a>, <a href="../../java/awt/AWTPermission.html" title="class in java.awt"><code>AWTPermission</code></a>, <a href="../../java/security/Policy.html" title="class in java.security"><code>Policy</code></a>, <a href="../../java/security/SecurityPermission.html" title="class in java.security"><code>SecurityPermission</code></a>, <a href="../../java/security/ProtectionDomain.html" title="class in java.security"><code>ProtectionDomain</code></a>                  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:SecurityManager"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:inCheck [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:inCheck"/><a name="inCheck"/><ul class="blockListLast"><li class="blockList"><h4>inCheck</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected boolean inCheck</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">This field is <code>true</code> if there is a security check in progress; <code>false</code> otherwise.             </div></li></ul> <a end_ctx_id="field:inCheck"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:SecurityManager-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:SecurityManager--"/><a name="SecurityManager--"/><ul class="blockListLast"><li class="blockList"><h4>SecurityManager</h4><pre>public SecurityManager()</pre><div class="block">Constructs a new <code>SecurityManager</code>.<p> If there is a security manager already installed, this method first calls the security manager's <code>checkPermission</code> method with the <code>RuntimePermission("createSecurityManager")</code> permission to ensure the calling thread has permission to create a new security manager. This may result in throwing a <code>SecurityException</code>.                                         </p>   </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager already exists and its <code>checkPermission</code> method doesn't allow creation of a new security manager.                    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#getSecurityManager--"><code>System.getSecurityManager()</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>, <a href="../../java/lang/RuntimePermission.html" title="class in java.lang"><code>RuntimePermission</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="constructor:SecurityManager--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getInCheck-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getInCheck--"/><a name="getInCheck--"/><ul class="blockList"><li class="blockList"><h4>getInCheck</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public boolean getInCheck()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Tests if there is a security check in progress.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the <code>inCheck</code> field. This field should contain <code>true</code> if a security check is in progress, <code>false</code> otherwise.                   </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#inCheck"><code>inCheck</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getInCheck--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getClassContext-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getClassContext--"/><a name="getClassContext--"/><ul class="blockList"><li class="blockList"><h4>getClassContext</h4><pre>protected <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>[] getClassContext()</pre><div class="block">Returns the current execution stack as an array of classes.<p> The length of the array is the number of methods on the execution stack. The element at index <code>0</code> is the class of the currently executing method, the element at index <code>1</code> is the class of that method's caller, and so on.                                          </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the execution stack.  </dd> </dl></li></ul> <a end_ctx_id="method:getClassContext--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:currentClassLoader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:currentClassLoader--"/><a name="currentClassLoader--"/><ul class="blockList"><li class="blockList"><h4>currentClassLoader</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected <a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> currentClassLoader()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Returns the class loader of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>ClassLoader.getSystemClassLoader()</code></a>) or one of its ancestors.<p> This method will return <code>null</code> in the following three cases:<ol><li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors.                   </li><li>All methods on the execution stack up to the first "privileged" caller (see <a href="../../java/security/AccessController.html#doPrivileged-java.security.PrivilegedAction-"><code>AccessController.doPrivileged(java.security.PrivilegedAction&lt;T&gt;)</code></a>) are from classes defined using the system class loader or one of its ancestors.                           </li><li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException.            </li></ol>          </p>                                               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the class loader of the most recent occurrence on the stack of a method from a class defined using a non-system class loader.                      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>getSystemClassLoader</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:currentClassLoader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:currentLoadedClass-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:currentLoadedClass--"/><a name="currentLoadedClass--"/><ul class="blockList"><li class="blockList"><h4>currentLoadedClass</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; currentLoadedClass()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Returns the class of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>ClassLoader.getSystemClassLoader()</code></a>) or one of its ancestors.<p> This method will return <code>null</code> in the following three cases:<ol><li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors.                   </li><li>All methods on the execution stack up to the first "privileged" caller (see <a href="../../java/security/AccessController.html#doPrivileged-java.security.PrivilegedAction-"><code>AccessController.doPrivileged(java.security.PrivilegedAction&lt;T&gt;)</code></a>) are from classes defined using the system class loader or one of its ancestors.                           </li><li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException.            </li></ol>          </p>                                              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the class of the most recent occurrence on the stack of a method from a class defined using a non-system class loader.                     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>getSystemClassLoader</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:currentLoadedClass--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:classDepth-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:classDepth-java.lang.String-"/><a name="classDepth-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>classDepth</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected int classDepth(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Returns the stack depth of the specified class.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the fully qualified name of the class to search for.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the depth on the stack frame of the first occurrence of a method from a class with the specified name; <code>-1</code> if such a frame cannot be found.                           </dd>  </dl></li></ul> <a end_ctx_id="method:classDepth-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:classLoaderDepth-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:classLoaderDepth--"/><a name="classLoaderDepth--"/><ul class="blockList"><li class="blockList"><h4>classLoaderDepth</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected int classLoaderDepth()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Returns the stack depth of the most recently executing method from a class defined using a non-system class loader. A non-system class loader is defined as being a class loader that is not equal to the system class loader (as returned by <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>ClassLoader.getSystemClassLoader()</code></a>) or one of its ancestors.<p> This method will return -1 in the following three cases:<ol><li>All methods on the execution stack are from classes defined using the system class loader or one of its ancestors.                   </li><li>All methods on the execution stack up to the first "privileged" caller (see <a href="../../java/security/AccessController.html#doPrivileged-java.security.PrivilegedAction-"><code>AccessController.doPrivileged(java.security.PrivilegedAction&lt;T&gt;)</code></a>) are from classes defined using the system class loader or one of its ancestors.                           </li><li> A call to <code>checkPermission</code> with <code>java.security.AllPermission</code> does not result in a SecurityException.            </li></ol>          </p>                                               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the depth on the stack frame of the most recent occurrence of a method from a class defined using a non-system class loader.                      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#getSystemClassLoader--"><code>getSystemClassLoader</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:classLoaderDepth--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:inClass-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:inClass-java.lang.String-"/><a name="inClass-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>inClass</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected boolean inClass(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Tests if a method from a class with the specified name is on the execution stack.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the fully qualified name of the class.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if a method from a class with the specified name is on the execution stack; <code>false</code> otherwise.                  </dd>  </dl></li></ul> <a end_ctx_id="method:inClass-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:inClassLoader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:inClassLoader--"/><a name="inClassLoader--"/><ul class="blockList"><li class="blockList"><h4>inClassLoader</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
protected boolean inClassLoader()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This type of security checking is not recommended. It is recommended that the <code>checkPermission</code> call be used instead.                 </span> </div><div class="block">Basically, tests if a method from a class defined using a class loader is on the execution stack.                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if a call to <code>currentClassLoader</code> has a non-null return value.           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#currentClassLoader--"><code>currentClassLoader</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:inClassLoader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getSecurityContext-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getSecurityContext--"/><a name="getSecurityContext--"/><ul class="blockList"><li class="blockList"><h4>getSecurityContext</h4><pre>public <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> getSecurityContext()</pre><div class="block">Creates an object that encapsulates the current execution environment. The result of this method is used, for example, by the three-argument <code>checkConnect</code> method and by the two-argument <code>checkRead</code> method. These methods are needed because a trusted method may be called on to read a file or open a socket on behalf of another method. The trusted method needs to determine if the other (possibly untrusted) method would be allowed to perform the operation on its own.<p> The default implementation of this method is to return an <code>AccessControlContext</code> object.            </p>                                                                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an implementation-dependent object that encapsulates sufficient information about the current execution environment to perform some security checks later.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkConnect-java.lang.String-int-java.lang.Object-"><code>checkConnect</code></a>, <a href="../../java/lang/SecurityManager.html#checkRead-java.lang.String-java.lang.Object-"><code>checkRead</code></a>, <a href="../../java/security/AccessControlContext.html" title="class in java.security"><code>AccessControlContext</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="method:getSecurityContext--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPermission-java.security.Permission- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPermission-java.security.Permission-"/><a name="checkPermission-java.security.Permission-"/><ul class="blockList"><li class="blockList"><h4>checkPermission</h4><pre>public void checkPermission(<a href="../../java/security/Permission.html" title="class in java.security">Permission</a> perm)</pre><div class="block">Throws a <code>SecurityException</code> if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect.<p> This method calls <code>AccessController.checkPermission</code> with the given permission.        </p>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>perm</code> - the requested permission.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if access is not permitted based on the current security policy.             </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the permission argument is <code>null</code>.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:checkPermission-java.security.Permission-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPermission-java.security.Permission-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPermission-java.security.Permission-java.lang.Object-"/><a name="checkPermission-java.security.Permission-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>checkPermission</h4><pre>public void checkPermission(<a href="../../java/security/Permission.html" title="class in java.security">Permission</a> perm,
                            <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> context)</pre><div class="block">Throws a <code>SecurityException</code> if the specified security context is denied access to the resource specified by the given permission. The context must be a security context returned by a previous call to <code>getSecurityContext</code> and the access control decision is based upon the configured security policy for that security context.<p> If <code>context</code> is an instance of <code>AccessControlContext</code> then the <code>AccessControlContext.checkPermission</code> method is invoked with the specified permission.                 </p><p> If <code>context</code> is not an instance of <code>AccessControlContext</code> then a <code>SecurityException</code> is thrown.             </p>                                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>perm</code> - the specified permission     </dd><dd> <code>context</code> - a system-dependent security context.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the specified security context is not an instance of <code>AccessControlContext</code> (e.g., is <code>null</code>), or is denied access to the resource specified by the given permission.                            </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the permission argument is <code>null</code>.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#getSecurityContext--"><code>getSecurityContext()</code></a>, <a href="../../java/security/AccessControlContext.html#checkPermission-java.security.Permission-"><code>AccessControlContext.checkPermission(java.security.Permission)</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:checkPermission-java.security.Permission-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkCreateClassLoader-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkCreateClassLoader--"/><a name="checkCreateClassLoader--"/><ul class="blockList"><li class="blockList"><h4>checkCreateClassLoader</h4><pre>public void checkCreateClassLoader()</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to create a new class loader.<p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("createClassLoader")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkCreateClassLoader</code> at the point the overridden method would normally throw an exception.                        </p>               </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to create a new class loader.                </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#ClassLoader--"><code>ClassLoader.ClassLoader()</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:checkCreateClassLoader--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkAccess-java.lang.Thread- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkAccess-java.lang.Thread-"/><a name="checkAccess-java.lang.Thread-"/><ul class="blockList"><li class="blockList"><h4>checkAccess</h4><pre>public void checkAccess(<a href="../../java/lang/Thread.html" title="class in java.lang">Thread</a> t)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to modify the thread argument.<p> This method is invoked for the current security manager by the <code>stop</code>, <code>suspend</code>, <code>resume</code>, <code>setPriority</code>, <code>setName</code>, and <code>setDaemon</code> methods of class <code>Thread</code>.                      </p><p> If the thread argument is a system thread (belongs to the thread group with a <code>null</code> parent) then this method calls <code>checkPermission</code> with the <code>RuntimePermission("modifyThread")</code> permission. If the thread argument is <i>not</i> a system thread, this method just returns silently.                                        </p><p> Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the <code>RuntimePermission("modifyThread")</code> permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread.                                                          </p><p> If this method is overridden, then <code>super.checkAccess</code> should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.                              </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>t</code> - the thread to be checked.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to modify the thread.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the thread argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Thread.html#resume--"><code>resume</code></a>, <a href="../../java/lang/Thread.html#setDaemon-boolean-"><code>setDaemon</code></a>, <a href="../../java/lang/Thread.html#setName-java.lang.String-"><code>setName</code></a>, <a href="../../java/lang/Thread.html#setPriority-int-"><code>setPriority</code></a>, <a href="../../java/lang/Thread.html#stop--"><code>stop</code></a>, <a href="../../java/lang/Thread.html#suspend--"><code>suspend</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>       </dd>   </dl></li></ul> <a end_ctx_id="method:checkAccess-java.lang.Thread-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkAccess-java.lang.ThreadGroup- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkAccess-java.lang.ThreadGroup-"/><a name="checkAccess-java.lang.ThreadGroup-"/><ul class="blockList"><li class="blockList"><h4>checkAccess</h4><pre>public void checkAccess(<a href="../../java/lang/ThreadGroup.html" title="class in java.lang">ThreadGroup</a> g)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to modify the thread group argument.<p> This method is invoked for the current security manager when a new child thread or child thread group is created, and by the <code>setDaemon</code>, <code>setMaxPriority</code>, <code>stop</code>, <code>suspend</code>, <code>resume</code>, and <code>destroy</code> methods of class <code>ThreadGroup</code>.                                  </p><p> If the thread group argument is the system thread group ( has a <code>null</code> parent) then this method calls <code>checkPermission</code> with the <code>RuntimePermission("modifyThreadGroup")</code> permission. If the thread group argument is <i>not</i> the system thread group, this method just returns silently.                                        </p><p> Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the <code>RuntimePermission("modifyThreadGroup")</code> permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread.                                                          </p><p> If this method is overridden, then <code>super.checkAccess</code> should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.                              </p>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>g</code> - the thread group to be checked.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to modify the thread group.               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the thread group argument is <code>null</code>.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ThreadGroup.html#destroy--"><code>destroy</code></a>, <a href="../../java/lang/ThreadGroup.html#resume--"><code>resume</code></a>, <a href="../../java/lang/ThreadGroup.html#setDaemon-boolean-"><code>setDaemon</code></a>, <a href="../../java/lang/ThreadGroup.html#setMaxPriority-int-"><code>setMaxPriority</code></a>, <a href="../../java/lang/ThreadGroup.html#stop--"><code>stop</code></a>, <a href="../../java/lang/ThreadGroup.html#suspend--"><code>suspend</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>       </dd>   </dl></li></ul> <a end_ctx_id="method:checkAccess-java.lang.ThreadGroup-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkExit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkExit-int-"/><a name="checkExit-int-"/><ul class="blockList"><li class="blockList"><h4>checkExit</h4><pre>public void checkExit(int status)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code.<p> This method is invoked for the current security manager by the <code>exit</code> method of class <code>Runtime</code>. A status of <code>0</code> indicates success; other values indicate various errors.                           </p><p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("exitVM."+status)</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkExit</code> at the point the overridden method would normally throw an exception.                        </p>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>status</code> - the exit status.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to halt the Java Virtual Machine with the specified status.                    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#exit-int-"><code>exit</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkExit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkExec-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkExec-java.lang.String-"/><a name="checkExec-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkExec</h4><pre>public void checkExec(<a href="../../java/lang/String.html" title="class in java.lang">String</a> cmd)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to create a subprocess.<p> This method is invoked for the current security manager by the <code>exec</code> methods of class <code>Runtime</code>.                </p><p> This method calls <code>checkPermission</code> with the <code>FilePermission(cmd,"execute")</code> permission if cmd is an absolute path, otherwise it calls <code>checkPermission</code> with <code>FilePermission("&lt;&lt;ALL FILES&gt;&gt;","execute") </code>.                    </p><p> If you override this method, then you should make a call to <code>super.checkExec</code> at the point the overridden method would normally throw an exception.                        </p>             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cmd</code> - the specified system command.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to create a subprocess.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>cmd</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#exec-java.lang.String-"><code>Runtime.exec(java.lang.String)</code></a>, <a href="../../java/lang/Runtime.html#exec-java.lang.String-java.lang.String:A-"><code>Runtime.exec(java.lang.String, java.lang.String[]) </code></a>, <a href="../../java/lang/Runtime.html#exec-java.lang.String:A-"><code>Runtime.exec(java.lang.String[])</code></a>, <a href="../../java/lang/Runtime.html#exec-java.lang.String:A-java.lang.String:A-"><code>Runtime.exec(java.lang.String[], java.lang.String[]) </code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>     </dd>   </dl></li></ul> <a end_ctx_id="method:checkExec-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkLink-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkLink-java.lang.String-"/><a name="checkLink-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkLink</h4><pre>public void checkLink(<a href="../../java/lang/String.html" title="class in java.lang">String</a> lib)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to dynamic link the library code specified by the string argument file. The argument is either a simple library name or a complete filename.<p> This method is invoked for the current security manager by methods <code>load</code> and <code>loadLibrary</code> of class <code>Runtime</code>.                 </p><p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("loadLibrary."+lib)</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkLink</code> at the point the overridden method would normally throw an exception.                        </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>lib</code> - the name of the library.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to dynamically link the library.               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>lib</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Runtime.html#load-java.lang.String-"><code>Runtime.load(java.lang.String)</code></a>, <a href="../../java/lang/Runtime.html#loadLibrary-java.lang.String-"><code>Runtime.loadLibrary(java.lang.String)</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:checkLink-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkRead-java.io.FileDescriptor- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkRead-java.io.FileDescriptor-"/><a name="checkRead-java.io.FileDescriptor-"/><ul class="blockList"><li class="blockList"><h4>checkRead</h4><pre>public void checkRead(<a href="../../java/io/FileDescriptor.html" title="class in java.io">FileDescriptor</a> fd)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to read from the specified file descriptor.<p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("readFileDescriptor")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkRead</code> at the point the overridden method would normally throw an exception.                        </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fd</code> - the system-dependent file descriptor.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the specified file descriptor.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the file descriptor argument is <code>null</code>.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FileDescriptor.html" title="class in java.io"><code>FileDescriptor</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkRead-java.io.FileDescriptor-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkRead-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkRead-java.lang.String-"/><a name="checkRead-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkRead</h4><pre>public void checkRead(<a href="../../java/lang/String.html" title="class in java.lang">String</a> file)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to read the file specified by the string argument.<p> This method calls <code>checkPermission</code> with the <code>FilePermission(file,"read")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkRead</code> at the point the overridden method would normally throw an exception.                        </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - the system-dependent file name.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the specified file.               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>file</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkRead-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkRead-java.lang.String-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkRead-java.lang.String-java.lang.Object-"/><a name="checkRead-java.lang.String-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>checkRead</h4><pre>public void checkRead(<a href="../../java/lang/String.html" title="class in java.lang">String</a> file,
                      <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> context)</pre><div class="block">Throws a <code>SecurityException</code> if the specified security context is not allowed to read the file specified by the string argument. The context must be a security context returned by a previous call to <code>getSecurityContext</code>.<p> If <code>context</code> is an instance of <code>AccessControlContext</code> then the <code>AccessControlContext.checkPermission</code> method will be invoked with the <code>FilePermission(file,"read")</code> permission.                  </p><p> If <code>context</code> is not an instance of <code>AccessControlContext</code> then a <code>SecurityException</code> is thrown.             </p><p> If you override this method, then you should make a call to <code>super.checkRead</code> at the point the overridden method would normally throw an exception.                        </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - the system-dependent filename.     </dd><dd> <code>context</code> - a system-dependent security context.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the specified security context is not an instance of <code>AccessControlContext</code> (e.g., is <code>null</code>), or does not have permission to read the specified file.                          </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>file</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#getSecurityContext--"><code>getSecurityContext()</code></a>, <a href="../../java/security/AccessControlContext.html#checkPermission-java.security.Permission-"><code>AccessControlContext.checkPermission(java.security.Permission)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkRead-java.lang.String-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkWrite-java.io.FileDescriptor- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkWrite-java.io.FileDescriptor-"/><a name="checkWrite-java.io.FileDescriptor-"/><ul class="blockList"><li class="blockList"><h4>checkWrite</h4><pre>public void checkWrite(<a href="../../java/io/FileDescriptor.html" title="class in java.io">FileDescriptor</a> fd)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to write to the specified file descriptor.<p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("writeFileDescriptor")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkWrite</code> at the point the overridden method would normally throw an exception.                        </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fd</code> - the system-dependent file descriptor.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the specified file descriptor.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the file descriptor argument is <code>null</code>.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FileDescriptor.html" title="class in java.io"><code>FileDescriptor</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkWrite-java.io.FileDescriptor-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkWrite-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkWrite-java.lang.String-"/><a name="checkWrite-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkWrite</h4><pre>public void checkWrite(<a href="../../java/lang/String.html" title="class in java.lang">String</a> file)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to write to the file specified by the string argument.<p> This method calls <code>checkPermission</code> with the <code>FilePermission(file,"write")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkWrite</code> at the point the overridden method would normally throw an exception.                        </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - the system-dependent filename.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the specified file.               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>file</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkWrite-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkDelete-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkDelete-java.lang.String-"/><a name="checkDelete-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkDelete</h4><pre>public void checkDelete(<a href="../../java/lang/String.html" title="class in java.lang">String</a> file)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to delete the specified file.<p> This method is invoked for the current security manager by the <code>delete</code> method of class <code>File</code>.                </p><p> This method calls <code>checkPermission</code> with the <code>FilePermission(file,"delete")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkDelete</code> at the point the overridden method would normally throw an exception.                        </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - the system-dependent filename.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to delete the file.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>file</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/File.html#delete--"><code>File.delete()</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkDelete-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkConnect-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkConnect-java.lang.String-int-"/><a name="checkConnect-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>checkConnect</h4><pre>public void checkConnect(<a href="../../java/lang/String.html" title="class in java.lang">String</a> host,
                         int port)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to open a socket connection to the specified host and port number.<p> A port number of <code>-1</code> indicates that the calling method is attempting to determine the IP address of the specified host name.                      </p><p> This method calls <code>checkPermission</code> with the <code>SocketPermission(host+":"+port,"connect")</code> permission if the port is not equal to -1. If the port is equal to -1, then it calls <code>checkPermission</code> with the <code>SocketPermission(host,"resolve")</code> permission.                               </p><p> If you override this method, then you should make a call to <code>super.checkConnect</code> at the point the overridden method would normally throw an exception.                        </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>host</code> - the host name port to connect to.         </dd><dd> <code>port</code> - the protocol port to connect to.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to open a socket connection to the specified <code>host</code> and <code>port</code>.                     </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>host</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkConnect-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkConnect-java.lang.String-int-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkConnect-java.lang.String-int-java.lang.Object-"/><a name="checkConnect-java.lang.String-int-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>checkConnect</h4><pre>public void checkConnect(<a href="../../java/lang/String.html" title="class in java.lang">String</a> host,
                         int port,
                         <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> context)</pre><div class="block">Throws a <code>SecurityException</code> if the specified security context is not allowed to open a socket connection to the specified host and port number.<p> A port number of <code>-1</code> indicates that the calling method is attempting to determine the IP address of the specified host name.                      </p><p> If <code>context</code> is not an instance of <code>AccessControlContext</code> then a <code>SecurityException</code> is thrown.             </p><p> Otherwise, the port number is checked. If it is not equal to -1, the <code>context</code>'s <code>checkPermission</code> method is called with a <code>SocketPermission(host+":"+port,"connect")</code> permission. If the port is equal to -1, then the <code>context</code>'s <code>checkPermission</code> method is called with a <code>SocketPermission(host,"resolve")</code> permission.                                         </p><p> If you override this method, then you should make a call to <code>super.checkConnect</code> at the point the overridden method would normally throw an exception.                        </p>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>host</code> - the host name port to connect to.         </dd><dd> <code>port</code> - the protocol port to connect to.        </dd><dd> <code>context</code> - a system-dependent security context.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the specified security context is not an instance of <code>AccessControlContext</code> (e.g., is <code>null</code>), or does not have permission to open a socket connection to the specified <code>host</code> and <code>port</code>.                                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>host</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#getSecurityContext--"><code>getSecurityContext()</code></a>, <a href="../../java/security/AccessControlContext.html#checkPermission-java.security.Permission-"><code>AccessControlContext.checkPermission(java.security.Permission)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkConnect-java.lang.String-int-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkListen-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkListen-int-"/><a name="checkListen-int-"/><ul class="blockList"><li class="blockList"><h4>checkListen</h4><pre>public void checkListen(int port)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to wait for a connection request on the specified local port number.<p> This method calls <code>checkPermission</code> with the <code>SocketPermission("localhost:"+port,"listen")</code>.       </p><p> If you override this method, then you should make a call to <code>super.checkListen</code> at the point the overridden method would normally throw an exception.                        </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>port</code> - the local port.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to listen on the specified port.                </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkListen-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkAccept-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkAccept-java.lang.String-int-"/><a name="checkAccept-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>checkAccept</h4><pre>public void checkAccept(<a href="../../java/lang/String.html" title="class in java.lang">String</a> host,
                        int port)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not permitted to accept a socket connection from the specified host and port number.<p> This method is invoked for the current security manager by the <code>accept</code> method of class <code>ServerSocket</code>.                </p><p> This method calls <code>checkPermission</code> with the <code>SocketPermission(host+":"+port,"accept")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkAccept</code> at the point the overridden method would normally throw an exception.                        </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>host</code> - the host name of the socket connection.         </dd><dd> <code>port</code> - the port number of the socket connection.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to accept the connection.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>host</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/net/ServerSocket.html#accept--"><code>ServerSocket.accept()</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkAccept-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkMulticast-java.net.InetAddress- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkMulticast-java.net.InetAddress-"/><a name="checkMulticast-java.net.InetAddress-"/><ul class="blockList"><li class="blockList"><h4>checkMulticast</h4><pre>public void checkMulticast(<a href="../../java/net/InetAddress.html" title="class in java.net">InetAddress</a> maddr)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to use (join/leave/send/receive) IP multicast.<p> This method calls <code>checkPermission</code> with the <code>java.net.SocketPermission(maddr.getHostAddress(), "accept,connect") </code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkMulticast</code> at the point the overridden method would normally throw an exception.                        </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>maddr</code> - Internet group address to be used.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread is not allowed to use (join/leave/send/receive) IP multicast.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the address argument is <code>null</code>.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:checkMulticast-java.net.InetAddress-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkMulticast-java.net.InetAddress-byte- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkMulticast-java.net.InetAddress-byte-"/><a name="checkMulticast-java.net.InetAddress-byte-"/><ul class="blockList"><li class="blockList"><h4>checkMulticast</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public void checkMulticast(<a href="../../java/net/InetAddress.html" title="class in java.net">InetAddress</a> maddr,
                                       byte ttl)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">Use #checkPermission(java.security.Permission) instead  </span> </div><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to use (join/leave/send/receive) IP multicast.<p> This method calls <code>checkPermission</code> with the <code>java.net.SocketPermission(maddr.getHostAddress(), "accept,connect") </code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkMulticast</code> at the point the overridden method would normally throw an exception.                        </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>maddr</code> - Internet group address to be used.        </dd><dd> <code>ttl</code> - value in use, if it is multicast send. Note: this particular implementation does not use the ttl parameter.                    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread is not allowed to use (join/leave/send/receive) IP multicast.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the address argument is <code>null</code>.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:checkMulticast-java.net.InetAddress-byte-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPropertiesAccess-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPropertiesAccess--"/><a name="checkPropertiesAccess--"/><ul class="blockList"><li class="blockList"><h4>checkPropertiesAccess</h4><pre>public void checkPropertiesAccess()</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to access or modify the system properties.<p> This method is used by the <code>getProperties</code> and <code>setProperties</code> methods of class <code>System</code>.             </p><p> This method calls <code>checkPermission</code> with the <code>PropertyPermission("*", "read,write") </code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkPropertiesAccess</code> at the point the overridden method would normally throw an exception.                        </p><p/>                </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access or modify the system properties.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#getProperties--"><code>System.getProperties()</code></a>, <a href="../../java/lang/System.html#setProperties-java.util.Properties-"><code>System.setProperties(java.util.Properties)</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>   </dd>  </dl></li></ul> <a end_ctx_id="method:checkPropertiesAccess--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPropertyAccess-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPropertyAccess-java.lang.String-"/><a name="checkPropertyAccess-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkPropertyAccess</h4><pre>public void checkPropertyAccess(<a href="../../java/lang/String.html" title="class in java.lang">String</a> key)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to access the system property with the specified <code>key</code> name.<p> This method is used by the <code>getProperty</code> method of class <code>System</code>.           </p><p> This method calls <code>checkPermission</code> with the <code>PropertyPermission(key, "read") </code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkPropertyAccess</code> at the point the overridden method would normally throw an exception.                        </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - a system property key.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the specified system property.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>key</code> argument is <code>null</code>.        </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>key</code> is empty.      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/System.html#getProperty-java.lang.String-"><code>System.getProperty(java.lang.String)</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:checkPropertyAccess-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkTopLevelWindow-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkTopLevelWindow-java.lang.Object-"/><a name="checkTopLevelWindow-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>checkTopLevelWindow</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public boolean checkTopLevelWindow(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> window)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">The dependency on <code>AWTPermission</code> creates an impediment to future modularization of the Java platform. Users of this method should instead invoke <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission(java.security.Permission)</code></a> directly. This method will be changed in a future release to check the permission <code>java.security.AllPermission</code>.                                    </span> </div><div class="block">Returns <code>false</code> if the calling thread is not trusted to bring up the top-level window indicated by the <code>window</code> argument. In this case, the caller can still decide to show the window, but the window should include some sort of visual warning. If the method returns <code>true</code>, then the window can be shown without any special restrictions.<p> See class <code>Window</code> for more information on trusted and untrusted windows.           </p><p> This method calls <code>checkPermission</code> with the <code>AWTPermission("showWindowWithoutWarningBanner")</code> permission, and returns <code>true</code> if a SecurityException is not thrown, otherwise it returns <code>false</code>. In the case of subset Profiles of Java SE that do not include the <code>java.awt</code> package, <code>checkPermission</code> is instead called to check the permission <code>java.security.AllPermission</code>.                                              </p><p> If you override this method, then you should make a call to <code>super.checkTopLevelWindow</code> at the point the overridden method would normally return <code>false</code>, and the value of <code>super.checkTopLevelWindow</code> should be returned.                               </p>                                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>window</code> - the new window that is being created.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the calling thread is trusted to put up top-level windows; <code>false</code> otherwise.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>window</code> argument is <code>null</code>.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/awt/Window.html" title="class in java.awt"><code>Window</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:checkTopLevelWindow-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPrintJobAccess-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPrintJobAccess--"/><a name="checkPrintJobAccess--"/><ul class="blockList"><li class="blockList"><h4>checkPrintJobAccess</h4><pre>public void checkPrintJobAccess()</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to initiate a print job request.<p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("queuePrintJob")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkPrintJobAccess</code> at the point the overridden method would normally throw an exception.                        </p><p/>               </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to initiate a print job request.                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkPrintJobAccess--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkSystemClipboardAccess-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkSystemClipboardAccess--"/><a name="checkSystemClipboardAccess--"/><ul class="blockList"><li class="blockList"><h4>checkSystemClipboardAccess</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public void checkSystemClipboardAccess()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">The dependency on <code>AWTPermission</code> creates an impediment to future modularization of the Java platform. Users of this method should instead invoke <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission(java.security.Permission)</code></a> directly. This method will be changed in a future release to check the permission <code>java.security.AllPermission</code>.                                    </span> </div><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to access the system clipboard.<p> This method calls <code>checkPermission</code> with the <code>AWTPermission("accessClipboard")</code> permission. In the case of subset Profiles of Java SE that do not include the <code>java.awt</code> package, <code>checkPermission</code> is instead called to check the permission <code>java.security.AllPermission</code>.                                 </p><p> If you override this method, then you should make a call to <code>super.checkSystemClipboardAccess</code> at the point the overridden method would normally throw an exception.                        </p>              </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the system clipboard.               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkSystemClipboardAccess--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkAwtEventQueueAccess-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkAwtEventQueueAccess--"/><a name="checkAwtEventQueueAccess--"/><ul class="blockList"><li class="blockList"><h4>checkAwtEventQueueAccess</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public void checkAwtEventQueueAccess()</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">The dependency on <code>AWTPermission</code> creates an impediment to future modularization of the Java platform. Users of this method should instead invoke <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission(java.security.Permission)</code></a> directly. This method will be changed in a future release to check the permission <code>java.security.AllPermission</code>.                                    </span> </div><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to access the AWT event queue.<p> This method calls <code>checkPermission</code> with the <code>AWTPermission("accessEventQueue")</code> permission. In the case of subset Profiles of Java SE that do not include the <code>java.awt</code> package, <code>checkPermission</code> is instead called to check the permission <code>java.security.AllPermission</code>.                                 </p><p> If you override this method, then you should make a call to <code>super.checkAwtEventQueueAccess</code> at the point the overridden method would normally throw an exception.                        </p>               </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the AWT event queue.                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:checkAwtEventQueueAccess--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPackageAccess-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPackageAccess-java.lang.String-"/><a name="checkPackageAccess-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkPackageAccess</h4><pre>public void checkPackageAccess(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pkg)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to access the package specified by the argument.<p> This method is used by the <code>loadClass</code> method of class loaders.           </p><p> This method first gets a list of restricted packages by obtaining a comma-separated list from a call to <code>java.security.Security.getProperty("package.access")</code>, and checks to see if <code>pkg</code> starts with or equals any of the restricted packages. If it does, then <code>checkPermission</code> gets called with the <code>RuntimePermission("accessClassInPackage."+pkg)</code> permission.                                             </p><p> If this method is overridden, then <code>super.checkPackageAccess</code> should be called as the first line in the overridden method.                  </p>                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pkg</code> - the package name.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to access the specified package.               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the package name argument is <code>null</code>.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code>loadClass</code></a>, <a href="../../java/security/Security.html#getProperty-java.lang.String-"><code>getProperty</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:checkPackageAccess-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkPackageDefinition-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkPackageDefinition-java.lang.String-"/><a name="checkPackageDefinition-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkPackageDefinition</h4><pre>public void checkPackageDefinition(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pkg)</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to define classes in the package specified by the argument.<p> This method is used by the <code>loadClass</code> method of some class loaders.            </p><p> This method first gets a list of restricted packages by obtaining a comma-separated list from a call to <code>java.security.Security.getProperty("package.definition")</code>, and checks to see if <code>pkg</code> starts with or equals any of the restricted packages. If it does, then <code>checkPermission</code> gets called with the <code>RuntimePermission("defineClassInPackage."+pkg)</code> permission.                                             </p><p> If this method is overridden, then <code>super.checkPackageDefinition</code> should be called as the first line in the overridden method.                  </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pkg</code> - the package name.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to define classes in the specified package.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"><code>ClassLoader.loadClass(java.lang.String, boolean) </code></a>, <a href="../../java/security/Security.html#getProperty-java.lang.String-"><code>getProperty</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>   </dd>   </dl></li></ul> <a end_ctx_id="method:checkPackageDefinition-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkSetFactory-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkSetFactory--"/><a name="checkSetFactory--"/><ul class="blockList"><li class="blockList"><h4>checkSetFactory</h4><pre>public void checkSetFactory()</pre><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to set the socket factory used by <code>ServerSocket</code> or <code>Socket</code>, or the stream handler factory used by <code>URL</code>.<p> This method calls <code>checkPermission</code> with the <code>RuntimePermission("setFactory")</code> permission.        </p><p> If you override this method, then you should make a call to <code>super.checkSetFactory</code> at the point the overridden method would normally throw an exception.                        </p><p/>                           </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission to specify a socket factory or a stream handler factory.                    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/net/ServerSocket.html#setSocketFactory-java.net.SocketImplFactory-"><code>setSocketFactory</code></a>, <a href="../../java/net/Socket.html#setSocketImplFactory-java.net.SocketImplFactory-"><code>setSocketImplFactory</code></a>, <a href="../../java/net/URL.html#setURLStreamHandlerFactory-java.net.URLStreamHandlerFactory-"><code>setURLStreamHandlerFactory</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>    </dd>  </dl></li></ul> <a end_ctx_id="method:checkSetFactory--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkMemberAccess-java.lang.Class-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkMemberAccess-java.lang.Class-int-"/><a name="checkMemberAccess-java.lang.Class-int-"/><ul class="blockList"><li class="blockList"><h4>checkMemberAccess</h4><pre><a href="../../java/lang/Deprecated.html" title="annotation in java.lang">@Deprecated</a>
public void checkMemberAccess(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;?&gt; clazz,
                                          int which)</pre><div class="block"> <span class="deprecatedLabel">Deprecated.</span> <span class="deprecationComment">This method relies on the caller being at a stack depth of 4 which is error-prone and cannot be enforced by the runtime. Users of this method should instead invoke <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission(java.security.Permission)</code></a> directly. This method will be changed in a future release to check the permission <code>java.security.AllPermission</code>.                                             </span> </div><div class="block">Throws a <code>SecurityException</code> if the calling thread is not allowed to access members.<p> The default policy is to allow access to PUBLIC members, as well as access to classes that have the same class loader as the caller. In all other cases, this method calls <code>checkPermission</code> with the <code>RuntimePermission("accessDeclaredMembers")  </code> permission.                                     </p><p> If this method is overridden, then a call to <code>super.checkMemberAccess</code> cannot be made, as the default implementation of <code>checkMemberAccess</code> relies on the code being checked being at a stack depth of 4.                                </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>clazz</code> - the class that reflection is to be performed on.           </dd><dd> <code>which</code> - type of access, PUBLIC or DECLARED.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the caller does not have permission to access members.            </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the <code>clazz</code> argument is <code>null</code>.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/reflect/Member.html" title="interface in java.lang.reflect"><code>Member</code></a>, <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:checkMemberAccess-java.lang.Class-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkSecurityAccess-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkSecurityAccess-java.lang.String-"/><a name="checkSecurityAccess-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>checkSecurityAccess</h4><pre>public void checkSecurityAccess(<a href="../../java/lang/String.html" title="class in java.lang">String</a> target)</pre><div class="block">Determines whether the permission with the specified permission target name should be granted or denied.<p> If the requested permission is allowed, this method returns quietly. If denied, a SecurityException is raised.                </p><p> This method creates a <code>SecurityPermission</code> object for the given permission target name and calls <code>checkPermission</code> with it.                 </p><p> See the documentation for <code><a href="../../java/security/SecurityPermission.html" title="class in java.security"><code>SecurityPermission</code></a></code> for a list of possible permission target names.             </p><p> If you override this method, then you should make a call to <code>super.checkSecurityAccess</code> at the point the overridden method would normally throw an exception.                        </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>target</code> - the target name of the <code>SecurityPermission</code>.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if the calling thread does not have permission for the requested access.              </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>target</code> is null.      </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>target</code> is empty.      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>checkPermission</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:checkSecurityAccess-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getThreadGroup-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getThreadGroup--"/><a name="getThreadGroup--"/><ul class="blockListLast"><li class="blockList"><h4>getThreadGroup</h4><pre>public <a href="../../java/lang/ThreadGroup.html" title="class in java.lang">ThreadGroup</a> getThreadGroup()</pre><div class="block">Returns the thread group into which to instantiate any new thread being created at the time this is being called. By default, it returns the thread group of the current thread. This should be overridden by a specific security manager to return the appropriate thread group.                                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>ThreadGroup that new threads are instantiated into      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ThreadGroup.html" title="class in java.lang"><code>ThreadGroup</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:getThreadGroup--"/>  </td></tr></table></td></tr></table></diff></diffreport>