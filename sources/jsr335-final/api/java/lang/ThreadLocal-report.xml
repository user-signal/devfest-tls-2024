<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ThreadLocal [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ThreadLocal"/><ul class="blockList"><li class="blockList"><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/lang/InheritableThreadLocal.html" title="class in java.lang">InheritableThreadLocal</a> </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">ThreadLocal&lt;T&gt;</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its <code>get</code> or <code>set</code> method) has its own, independently initialized copy of the variable. <code>ThreadLocal</code> instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).<p>For example, the class below generates unique identifiers local to each thread. A thread's id is assigned the first time it invokes <code>ThreadId.get()</code> and remains unchanged on subsequent calls.<pre>
 import java.util.concurrent.atomic.AtomicInteger;

 public class ThreadId {
     // Atomic integer containing the next thread ID to be assigned
     private static final AtomicInteger nextId = new AtomicInteger(0);

     // Thread local variable containing each thread's ID
     private static final ThreadLocal&lt;Integer&gt; threadId =
         new ThreadLocal&lt;Integer&gt;() {
             @Override protected Integer initialValue() {
                 return nextId.getAndIncrement();
         }
     };

     // Returns the current thread's unique ID, assigning it if necessary
     public static int get() {
         return threadId.get();
     }
 }
 </pre>                            </p><p>Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the <code>ThreadLocal</code> instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist).                                                 </p>                                                         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:ThreadLocal"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ThreadLocal-- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="constructor:ThreadLocal--"/><a name="ThreadLocal--"/><ul class="blockListLast"><li class="blockList"><h4>ThreadLocal</h4><pre>public ThreadLocal()</pre><div class="block">Creates a thread local variable.    </div><dl> <dt> <span class="seeLabel"><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </span>   </dt><dd> <a href="../../java/lang/ThreadLocal.html#withInitial-java.util.function.Supplier-"><code><span class="diff-html-added">withInitial(java.util.function.Supplier)</span></code></a> </dd> </dl></li></ul> <a end_ctx_id="constructor:ThreadLocal--"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="constructor:ThreadLocal--"/><a name="ThreadLocal--"/><ul class="blockListLast"><li class="blockList"><h4>ThreadLocal</h4><pre>public ThreadLocal()</pre><div class="block">Creates a thread local variable.    </div></li></ul> <a end_ctx_id="constructor:ThreadLocal--"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ThreadLocal--"/><a name="ThreadLocal--"/><ul class="blockListLast"><li class="blockList"><h4>ThreadLocal</h4><pre>public ThreadLocal()</pre><div class="block">Creates a thread local variable.    </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/ThreadLocal.html#withInitial-java.util.function.Supplier-"><code>withInitial(java.util.function.Supplier)</code></a> </dd> </dl></li></ul> <a end_ctx_id="constructor:ThreadLocal--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:initialValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:initialValue--"/><a name="initialValue--"/><ul class="blockList"><li class="blockList"><h4>initialValue</h4><pre>protected <a href="../../java/lang/ThreadLocal.html" title="type parameter in ThreadLocal">T</a> initialValue()</pre><div class="block">Returns the current thread's "initial value" for this thread-local variable. This method will be invoked the first time a thread accesses the variable with the <a href="../../java/lang/ThreadLocal.html#get--"><code>get()</code></a> method, unless the thread previously invoked the <a href="../../java/lang/ThreadLocal.html#set-T-"><code>set(T)</code></a> method, in which case the <code>initialValue</code> method will not be invoked for the thread. Normally, this method is invoked at most once per thread, but it may be invoked again in case of subsequent invocations of <a href="../../java/lang/ThreadLocal.html#remove--"><code>remove()</code></a> followed by <a href="../../java/lang/ThreadLocal.html#get--"><code>get()</code></a>.<p>This implementation simply returns <code>null</code>; if the programmer desires thread-local variables to have an initial value other than <code>null</code>, <code>ThreadLocal</code> must be subclassed, and this method overridden. Typically, an anonymous inner class will be used.                                  </p>                                                                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the initial value for this thread-local     </dd> </dl></li></ul> <a end_ctx_id="method:initialValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:withInitial-java.util.function.Supplier- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:withInitial-java.util.function.Supplier-"><span class="diff-html-added"/></a><a name="withInitial-java.util.function.Supplier-"/><ul class="blockList"><li class="blockList"><h4><span class="diff-html-added">withInitial</span></h4><pre><span class="diff-html-added">public</span> <span class="diff-html-added">static &lt;S&gt; </span><a href="../../java/lang/ThreadLocal.html" title="class in java.lang"><span class="diff-html-added">ThreadLocal</span></a><span class="diff-html-added">&lt;S&gt; withInitial(</span><a href="../../java/util/function/Supplier.html" title="interface in java.util.function"><span class="diff-html-added">Supplier</span></a><span class="diff-html-added">&lt;?</span> <span class="diff-html-added">extends</span> <span class="diff-html-added">S&gt; supplier)</span></pre><div class="block"><span class="diff-html-added">Creates</span> <span class="diff-html-added">a</span> <span class="diff-html-added">thread</span> <span class="diff-html-added">local</span> <span class="diff-html-added">variable.</span> <span class="diff-html-added">The</span> <span class="diff-html-added">initial</span> <span class="diff-html-added">value</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">variable</span> <span class="diff-html-added">is</span> <span class="diff-html-added">determined</span> <span class="diff-html-added">by</span> <span class="diff-html-added">invoking</span> <span class="diff-html-added">the</span> <code><span class="diff-html-added">get</span></code> <span class="diff-html-added">method</span> <span class="diff-html-added">on</span> <span class="diff-html-added">the</span> <code><span class="diff-html-added">Supplier</span></code><span class="diff-html-added">.</span>                    </div><dl> <dt> <span class="paramLabel"><span class="diff-html-added">Type</span> <span class="diff-html-added">Parameters:</span> </span>   </dt><dd> <code><span class="diff-html-added">S</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">type</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">thread</span> <span class="diff-html-added">local's</span> <span class="diff-html-added">value</span>         </dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">supplier</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">supplier</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">used</span> <span class="diff-html-added">to</span> <span class="diff-html-added">determine</span> <span class="diff-html-added">the</span> <span class="diff-html-added">initial</span> <span class="diff-html-added">value</span>            </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">thread</span> <span class="diff-html-added">local</span> <span class="diff-html-added">variable</span>    </dd> <dt> <span class="throwsLabel"><span class="diff-html-added">Throws:</span></span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang"><span class="diff-html-added">NullPointerException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">supplier</span> <span class="diff-html-added">is</span> <span class="diff-html-added">null</span>        </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd>     </dl></li></ul> <a end_ctx_id="method:withInitial-java.util.function.Supplier-"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get--"/><a name="get--"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../java/lang/ThreadLocal.html" title="type parameter in ThreadLocal">T</a> get()</pre><div class="block">Returns the value in the current thread's copy of this thread-local variable. If the variable has no value for the current thread, it is first initialized to the value returned by an invocation of the <a href="../../java/lang/ThreadLocal.html#initialValue--"><code>initialValue()</code></a> method.                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current thread's value of this thread-local      </dd> </dl></li></ul> <a name="set-java.lang.Object-"/><a end_ctx_id="method:get--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-T-"/><a name="set-T-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>public void set(<a href="../../java/lang/ThreadLocal.html" title="type parameter in ThreadLocal">T</a> value)</pre><div class="block">Sets the current thread's copy of this thread-local variable to the specified value. Most subclasses will have no need to override this method, relying solely on the <a href="../../java/lang/ThreadLocal.html#initialValue--"><code>initialValue()</code></a> method to set the values of thread-locals.                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to be stored in the current thread's copy of this thread-local.               </dd> </dl></li></ul> <a end_ctx_id="method:set-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove--"/><a name="remove--"/><ul class="blockListLast"><li class="blockList"><h4>remove</h4><pre>public void remove()</pre><div class="block">Removes the current thread's value for this thread-local variable. If this thread-local variable is subsequently <a href="../../java/lang/ThreadLocal.html#get--">read</a> by the current thread, its value will be reinitialized by invoking its <a href="../../java/lang/ThreadLocal.html#initialValue--"><code>initialValue()</code></a> method, unless its value is <a href="../../java/lang/ThreadLocal.html#set-T-">set</a> by the current thread in the interim. This may result in multiple invocations of the <code>initialValue</code> method in the current thread.                                                       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl></li></ul> <a end_ctx_id="method:remove--"/>  </td></tr></table></td></tr></table></diff></diffreport>