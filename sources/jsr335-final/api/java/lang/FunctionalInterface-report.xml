<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:FunctionalInterface [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="contentContainer"><div class="description"> <a start_ctx_id="class:FunctionalInterface"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre><a href="../../java/lang/annotation/Documented.html" title="annotation in java.lang.annotation">@Documented</a>
 <a href="../../java/lang/annotation/Retention.html" title="annotation in java.lang.annotation">@Retention</a>(<a href="../../java/lang/annotation/Retention.html#value--">value</a>=<a href="../../java/lang/annotation/RetentionPolicy.html#RUNTIME">RUNTIME</a>)
 <a href="../../java/lang/annotation/Target.html" title="annotation in java.lang.annotation">@Target</a>(<a href="../../java/lang/annotation/Target.html#value--">value</a>=<a href="../../java/lang/annotation/ElementType.html#TYPE">TYPE</a>)
public @interface <span class="memberNameLabel">FunctionalInterface</span></pre><div class="block">An informative annotation type used to indicate that an interface type declaration is intended to be a <i>functional interface </i> as defined by the Java Language Specification. Conceptually, a functional interface has exactly one abstract method. Since <a href="../../java/lang/reflect/Method.html#isDefault--">default methods </a> have an implementation, they are not abstract. If an interface declares an abstract method overriding one of the public methods of <code>java.lang.Object</code>, that also does <em>not</em> count toward the interface's abstract method count since any implementation of the interface will have an implementation from <code>java.lang.Object</code> or elsewhere.<p>Note that instances of functional interfaces can be created with lambda expressions, method references, or constructor references.                </p><p>If a type is annotated with this annotation type, compilers are required to generate an error message unless:<ul><li> The type is an interface type and not an annotation type, enum, or class.              </li><li> The annotated type satisfies the requirements of a functional interface.          </li></ul>                 </p><p>However, the compiler will treat any interface meeting the definition of a functional interface as a functional interface regardless of whether or not a <code>FunctionalInterface</code> annotation is present on the interface declaration.                               </p>                                                                                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="simpleTagLabel">See <cite> The Javaâ„¢ Language Specification    </cite>: </span>   </dt><dd>4.3.2. The Class Object, 9.8 Functional Interfaces, 9.4.3 Interface Method Body          </dd>  </dl>  </li></ul> </div></div> <a end_ctx_id="class:FunctionalInterface"/> </td></tr></table></td></tr></table></diff></diffreport>