<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Math [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Math"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public final class <span class="typeNameLabel">Math</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">The class <code>Math</code> contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions.<p>Unlike some of the numeric methods of class <code>StrictMath</code>, all implementations of the equivalent functions of class <code>Math</code> are not defined to return the bit-for-bit same results. This relaxation permits better-performing implementations where strict reproducibility is not required.                                     </p><p>By default many of the <code>Math</code> methods simply call the equivalent method in <code>StrictMath</code> for their implementation. Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of <code>Math</code> methods. Such higher-performance implementations still must conform to the specification for <code>Math</code>.                                                </p><p>The quality of implementation specifications concern two properties, accuracy of the returned result and monotonicity of the method. Accuracy of the floating-point <code>Math</code> methods is measured in terms of <i>ulps</i>, units in the last place. For a given floating-point format, an <a href="../../java/lang/Math.html#ulp-double-">ulp</a> of a specific real number value is the distance between the two floating-point values bracketing that numerical value. When discussing the accuracy of a method as a whole rather than at a specific argument, the number of ulps cited is for the worst-case error at any argument. If a method always has an error less than 0.5 ulps, the method always returns the floating-point number nearest the exact result; such a method is <i>correctly rounded </i>. A correctly rounded method is generally the best a floating-point approximation can be; however, it is impractical for many floating-point methods to be correctly rounded. Instead, for the <code>Math</code> class, a larger error bound of 1 or 2 ulps is allowed for certain methods. Informally, with a 1 ulp error bound, when the exact result is a representable number, the exact result should be returned as the computed result; otherwise, either of the two floating-point values which bracket the exact result may be returned. For exact results large in magnitude, one of the endpoints of the bracket may be infinite. Besides accuracy at individual arguments, maintaining proper relations between the method at different arguments is also important. Therefore, most methods with more than 0.5 ulp errors are required to be <i>semi-monotonic</i>: whenever the mathematical function is non-decreasing, so is the floating-point approximation, likewise, whenever the mathematical function is non-increasing, so is the floating-point approximation. Not all approximations that have 1 ulp accuracy will automatically meet the monotonicity requirements.                                                                                                                                                                                                                                                                                           </p><p> The platform uses signed two's complement integer arithmetic with int and long primitive types. The developer should choose the primitive type to ensure that arithmetic operations consistently produce correct results, which in some cases means the operations will not overflow the range of values of the computation. The best practice is to choose the primitive type and algorithm to avoid overflow. In cases where the size is <code>int</code> or <code>long</code> and overflow errors need to be detected, the methods <code>addExact</code>, <code>subtractExact</code>, <code>multiplyExact</code>, and <code>toIntExact</code> throw an <code>ArithmeticException</code> when the results overflow. For other arithmetic operations such as divide, absolute value, increment, decrement, and negation overflow occurs only with a specific minimum or maximum value and should be checked against the minimum or maximum as appropriate.                                                                                                                             </p>                    </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Math"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:E [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:E"/><a name="E"/><ul class="blockList"><li class="blockList"><h4>E</h4><pre>public static final double E</pre><div class="block">The <code>double</code> value that is closer than any other to <i>e</i>, the base of the natural logarithms.                </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Math.E">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:E"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:PI [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:PI"/><a name="PI"/><ul class="blockListLast"><li class="blockList"><h4>PI</h4><pre>public static final double PI</pre><div class="block">The <code>double</code> value that is closer than any other to <i>pi</i>, the ratio of the circumference of a circle to its diameter.                     </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../constant-values.html#java.lang.Math.PI">Constant Field Values  </a> </dd> </dl></li></ul> <a end_ctx_id="field:PI"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sin-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sin-double-"/><a name="sin-double-"/><ul class="blockList"><li class="blockList"><h4>sin</h4><pre>public static double sin(double a)</pre><div class="block">Returns the trigonometric sine of an angle. Special cases:<ul><li>If the argument is NaN or an infinity, then the result is NaN.            </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an angle, in radians.      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the sine of the argument.    </dd>  </dl></li></ul> <a end_ctx_id="method:sin-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cos-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cos-double-"/><a name="cos-double-"/><ul class="blockList"><li class="blockList"><h4>cos</h4><pre>public static double cos(double a)</pre><div class="block">Returns the trigonometric cosine of an angle. Special cases:<ul><li>If the argument is NaN or an infinity, then the result is NaN.            </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an angle, in radians.      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the cosine of the argument.    </dd>  </dl></li></ul> <a end_ctx_id="method:cos-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tan-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tan-double-"/><a name="tan-double-"/><ul class="blockList"><li class="blockList"><h4>tan</h4><pre>public static double tan(double a)</pre><div class="block">Returns the trigonometric tangent of an angle. Special cases:<ul><li>If the argument is NaN or an infinity, then the result is NaN.            </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an angle, in radians.      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tangent of the argument.    </dd>  </dl></li></ul> <a end_ctx_id="method:tan-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:asin-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:asin-double-"/><a name="asin-double-"/><ul class="blockList"><li class="blockList"><h4>asin</h4><pre>public static double asin(double a)</pre><div class="block">Returns the arc sine of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2. Special cases:<ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.                 </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value whose arc sine is to be returned.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the arc sine of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:asin-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:acos-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:acos-double-"/><a name="acos-double-"/><ul class="blockList"><li class="blockList"><h4>acos</h4><pre>public static double acos(double a)</pre><div class="block">Returns the arc cosine of a value; the returned angle is in the range 0.0 through <i>pi</i>. Special case:<ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.                 </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value whose arc cosine is to be returned.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the arc cosine of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:acos-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:atan-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:atan-double-"/><a name="atan-double-"/><ul class="blockList"><li class="blockList"><h4>atan</h4><pre>public static double atan(double a)</pre><div class="block">Returns the arc tangent of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2. Special cases:<ul><li>If the argument is NaN, then the result is NaN.         </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value whose arc tangent is to be returned.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the arc tangent of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:atan-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toRadians-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toRadians-double-"/><a name="toRadians-double-"/><ul class="blockList"><li class="blockList"><h4>toRadians</h4><pre>public static double toRadians(double angdeg)</pre><div class="block">Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>angdeg</code> - an angle, in degrees      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the measurement of the angle <code>angdeg</code> in radians.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:toRadians-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toDegrees-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toDegrees-double-"/><a name="toDegrees-double-"/><ul class="blockList"><li class="blockList"><h4>toDegrees</h4><pre>public static double toDegrees(double angrad)</pre><div class="block">Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly equal <code>0.0</code>.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>angrad</code> - an angle, in radians      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the measurement of the angle <code>angrad</code> in degrees.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>   </dl></li></ul> <a end_ctx_id="method:toDegrees-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:exp-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:exp-double-"/><a name="exp-double-"/><ul class="blockList"><li class="blockList"><h4>exp</h4><pre>public static double exp(double a)</pre><div class="block">Returns Euler's number <i>e</i> raised to the power of a <code>double</code> value. Special cases:<ul><li>If the argument is NaN, the result is NaN.        </li><li>If the argument is positive infinity, then the result is positive infinity.           </li><li>If the argument is negative infinity, then the result is positive zero.           </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the exponent to raise <i>e</i> to.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <i>e</i><sup><code>a</code></sup>, where <i>e</i> is the base of the natural logarithms.           </dd>  </dl></li></ul> <a end_ctx_id="method:exp-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:log-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:log-double-"/><a name="log-double-"/><ul class="blockList"><li class="blockList"><h4>log</h4><pre>public static double log(double a)</pre><div class="block">Returns the natural logarithm (base <i>e</i>) of a <code>double</code> value. Special cases:<ul><li>If the argument is NaN or less than zero, then the result is NaN.             </li><li>If the argument is positive infinity, then the result is positive infinity.           </li><li>If the argument is positive zero or negative zero, then the result is negative infinity.              </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a value    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value ln <code>a</code>, the natural logarithm of <code>a</code>.       </dd>  </dl></li></ul> <a end_ctx_id="method:log-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:log10-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:log10-double-"/><a name="log10-double-"/><ul class="blockList"><li class="blockList"><h4>log10</h4><pre>public static double log10(double a)</pre><div class="block">Returns the base 10 logarithm of a <code>double</code> value. Special cases:<ul><li>If the argument is NaN or less than zero, then the result is NaN.             </li><li>If the argument is positive infinity, then the result is positive infinity.           </li><li>If the argument is positive zero or negative zero, then the result is negative infinity.              </li><li> If the argument is equal to 10<sup><i>n</i></sup> for integer <i>n</i>, then the result is <i>n</i>.               </li></ul><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a value    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the base 10 logarithm of <code>a</code>.     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:log10-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sqrt-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sqrt-double-"/><a name="sqrt-double-"/><ul class="blockList"><li class="blockList"><h4>sqrt</h4><pre>public static double sqrt(double a)</pre><div class="block">Returns the correctly rounded positive square root of a <code>double</code> value. Special cases:<ul><li>If the argument is NaN or less than zero, then the result is NaN.             </li><li>If the argument is positive infinity, then the result is positive infinity.           </li><li>If the argument is positive zero or negative zero, then the result is the same as the argument.                 </li></ul> Otherwise, the result is the <code>double</code> value closest to the true mathematical square root of the argument value.                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a value.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the positive square root of <code>a</code>. If the argument is NaN or less than zero, the result is NaN.                  </dd>  </dl></li></ul> <a end_ctx_id="method:sqrt-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cbrt-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cbrt-double-"/><a name="cbrt-double-"/><ul class="blockList"><li class="blockList"><h4>cbrt</h4><pre>public static double cbrt(double a)</pre><div class="block">Returns the cube root of a <code>double</code> value. For positive finite <code>x</code>, <code>cbrt(-x) == -cbrt(x)  </code>; that is, the cube root of a negative value is the negative of the cube root of that value's magnitude. Special cases:<ul><li>If the argument is NaN, then the result is NaN.         </li><li>If the argument is infinite, then the result is an infinity with the same sign as the argument.                 </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul><p>The computed result must be within 1 ulp of the exact result.           </p>                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a value.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the cube root of <code>a</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:cbrt-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:IEEEremainder-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:IEEEremainder-double-double-"/><a name="IEEEremainder-double-double-"/><ul class="blockList"><li class="blockList"><h4>IEEEremainder</h4><pre>public static double IEEEremainder(double f1,
                                   double f2)</pre><div class="block">Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to <code>f1 - f2</code> × <i>n</i>, where <i>n</i> is the mathematical integer closest to the exact mathematical value of the quotient <code>f1/f2</code>, and if two mathematical integers are equally close to <code>f1/f2</code>, then <i>n</i> is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases:<ul><li>If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN.                         </li><li>If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.                     </li></ul>                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f1</code> - the dividend.    </dd><dd> <code>f2</code> - the divisor.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the remainder when <code>f1</code> is divided by <code>f2</code>.       </dd>  </dl></li></ul> <a end_ctx_id="method:IEEEremainder-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ceil-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ceil-double-"/><a name="ceil-double-"/><ul class="blockList"><li class="blockList"><h4>ceil</h4><pre>public static double ceil(double a)</pre><div class="block">Returns the smallest (closest to negative infinity) <code>double</code> value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases:<ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument.                   </li><li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.                      </li><li>If the argument value is less than zero but greater than -1.0, then the result is negative zero.                 </li></ul> Note that the value of <code>Math.ceil(x)</code> is exactly the value of <code>-Math.floor(-x)</code>.                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a value.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the smallest (closest to negative infinity) floating-point value that is greater than or equal to the argument and is equal to a mathematical integer.                       </dd>  </dl></li></ul> <a end_ctx_id="method:ceil-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floor-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floor-double-"/><a name="floor-double-"/><ul class="blockList"><li class="blockList"><h4>floor</h4><pre>public static double floor(double a)</pre><div class="block">Returns the largest (closest to positive infinity) <code>double</code> value that is less than or equal to the argument and is equal to a mathematical integer. Special cases:<ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument.                   </li><li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.                      </li></ul>                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a value.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the largest (closest to positive infinity) floating-point value that less than or equal to the argument and is equal to a mathematical integer.                      </dd>  </dl></li></ul> <a end_ctx_id="method:floor-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:rint-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:rint-double-"/><a name="rint-double-"/><ul class="blockList"><li class="blockList"><h4>rint</h4><pre>public static double rint(double a)</pre><div class="block">Returns the <code>double</code> value that is closest in value to the argument and is equal to a mathematical integer. If two <code>double</code> values that are mathematical integers are equally close, the result is the integer value that is even. Special cases:<ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument.                   </li><li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.                      </li></ul>                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a <code>double</code> value.     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the closest floating-point value to <code>a</code> that is equal to a mathematical integer.            </dd>  </dl></li></ul> <a end_ctx_id="method:rint-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:atan2-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:atan2-double-double-"/><a name="atan2-double-double-"/><ul class="blockList"><li class="blockList"><h4>atan2</h4><pre>public static double atan2(double y,
                           double x)</pre><div class="block">Returns the angle <i>theta</i> from the conversion of rectangular coordinates (<code>x</code>, <code>y</code>) to polar coordinates (r, <i>theta</i>). This method computes the phase <i>theta</i> by computing an arc tangent of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special cases:<ul><li>If either argument is NaN, then the result is NaN.         </li><li>If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero.                                 </li><li>If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero.                                 </li><li>If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to <i>pi</i>.                                     </li><li>If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to -<i>pi</i>.                                     </li><li>If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the <code>double</code> value closest to <i>pi</i>/2.                                      </li><li>If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the <code>double</code> value closest to -<i>pi</i>/2.                                      </li><li>If both arguments are positive infinity, then the result is the <code>double</code> value closest to <i>pi</i>/4.               </li><li>If the first argument is positive infinity and the second argument is negative infinity, then the result is the <code>double</code> value closest to 3*<i>pi</i>/4.                       </li><li>If the first argument is negative infinity and the second argument is positive infinity, then the result is the <code>double</code> value closest to -<i>pi</i>/4.                       </li><li>If both arguments are negative infinity, then the result is the <code>double</code> value closest to -3*<i>pi</i>/4.               </li></ul><p>The computed result must be within 2 ulps of the exact result. Results must be semi-monotonic.               </p>                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>y</code> - the ordinate coordinate     </dd><dd> <code>x</code> - the abscissa coordinate     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <i>theta</i> component of the point (<i>r</i>, <i>theta</i>) in polar coordinates that corresponds to the point (<i>x</i>, <i>y</i>) in Cartesian coordinates.                  </dd>  </dl></li></ul> <a end_ctx_id="method:atan2-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pow-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pow-double-double-"/><a name="pow-double-double-"/><ul class="blockList"><li class="blockList"><h4>pow</h4><pre>public static double pow(double a,
                         double b)</pre><div class="block">Returns the value of the first argument raised to the power of the second argument. Special cases:<ul><li>If the second argument is positive or negative zero, then the result is 1.0.             </li><li>If the second argument is 1.0, then the result is the same as the first argument.               </li><li>If the second argument is NaN, then the result is NaN.          </li><li>If the first argument is NaN and the second argument is nonzero, then the result is NaN.                </li><li>If<ul><li>the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or                  </li><li>the absolute value of the first argument is less than 1 and the second argument is negative infinity,                 </li></ul> then the result is positive infinity.      </li><li>If<ul><li>the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or                  </li><li>the absolute value of the first argument is less than 1 and the second argument is positive infinity,                 </li></ul> then the result is positive zero.      </li><li>If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN.                    </li><li>If<ul><li>the first argument is positive zero and the second argument is greater than zero, or              </li><li>the first argument is positive infinity and the second argument is less than zero,             </li></ul> then the result is positive zero.      </li><li>If<ul><li>the first argument is positive zero and the second argument is less than zero, or              </li><li>the first argument is positive infinity and the second argument is greater than zero,             </li></ul> then the result is positive infinity.      </li><li>If<ul><li>the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or                    </li><li>the first argument is negative infinity and the second argument is less than zero but not a finite odd integer,                   </li></ul> then the result is positive zero.      </li><li>If<ul><li>the first argument is negative zero and the second argument is a positive finite odd integer, or                </li><li>the first argument is negative infinity and the second argument is a negative finite odd integer,               </li></ul> then the result is negative zero.      </li><li>If<ul><li>the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or                    </li><li>the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer,                   </li></ul> then the result is positive infinity.      </li><li>If<ul><li>the first argument is negative zero and the second argument is a negative finite odd integer, or                </li><li>the first argument is negative infinity and the second argument is a positive finite odd integer,               </li></ul> then the result is negative infinity.      </li><li>If the first argument is finite and less than zero<ul><li> if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument                                </li><li>if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument                                  </li><li>if the second argument is finite and not an integer, then the result is NaN.              </li></ul>         </li><li>If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a <code>double</code> value.                                       </li></ul><p>(In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method <a href="../../java/lang/Math.html#ceil-double-"><code>ceil</code></a> or, equivalently, a fixed point of the method <a href="../../java/lang/Math.html#floor-double-"><code>floor</code></a>. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.)                                                                </p><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the base.    </dd><dd> <code>b</code> - the exponent.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <code>a</code><sup><code>b</code></sup>.  </dd>  </dl></li></ul> <a end_ctx_id="method:pow-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:round-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:round-float-"/><a name="round-float-"/><ul class="blockList"><li class="blockList"><h4>round</h4><pre>public static int round(float a)</pre><div class="block">Returns the closest <code>int</code> to the argument, with ties rounding to positive infinity.<p> Special cases:<ul><li>If the argument is NaN, the result is 0.        </li><li>If the argument is negative infinity or any value less than or equal to the value of <code>Integer.MIN_VALUE</code>, the result is equal to the value of <code>Integer.MIN_VALUE</code>.                          </li><li>If the argument is positive infinity or any value greater than or equal to the value of <code>Integer.MAX_VALUE</code>, the result is equal to the value of <code>Integer.MAX_VALUE</code>.                          </li></ul>  </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a floating-point value to be rounded to an integer.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the argument rounded to the nearest <code>int</code> value.          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Integer.html#MAX_VALUE"><code>Integer.MAX_VALUE</code></a>, <a href="../../java/lang/Integer.html#MIN_VALUE"><code>Integer.MIN_VALUE</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:round-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:round-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:round-double-"/><a name="round-double-"/><ul class="blockList"><li class="blockList"><h4>round</h4><pre>public static long round(double a)</pre><div class="block">Returns the closest <code>long</code> to the argument, with ties rounding to positive infinity.<p>Special cases:<ul><li>If the argument is NaN, the result is 0.        </li><li>If the argument is negative infinity or any value less than or equal to the value of <code>Long.MIN_VALUE</code>, the result is equal to the value of <code>Long.MIN_VALUE</code>.                          </li><li>If the argument is positive infinity or any value greater than or equal to the value of <code>Long.MAX_VALUE</code>, the result is equal to the value of <code>Long.MAX_VALUE</code>.                          </li></ul> </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - a floating-point value to be rounded to a <code>long</code>.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the argument rounded to the nearest <code>long</code> value.          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Long.html#MAX_VALUE"><code>Long.MAX_VALUE</code></a>, <a href="../../java/lang/Long.html#MIN_VALUE"><code>Long.MIN_VALUE</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:round-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:random-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:random--"/><a name="random--"/><ul class="blockList"><li class="blockList"><h4>random</h4><pre>public static double random()</pre><div class="block">Returns a <code>double</code> value with a positive sign, greater than or equal to <code>0.0</code> and less than <code>1.0</code>. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range.<p>When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression                  </p><blockquote> <code>new java.util.Random() </code> </blockquote> This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.<p>This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.                                       </p>                                               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a pseudorandom <code>double</code> greater than or equal to <code>0.0</code> and less than <code>1.0</code>.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Random.html#nextDouble--"><code>Random.nextDouble()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:random--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addExact-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addExact-int-int-"/><a name="addExact-int-int-"/><ul class="blockList"><li class="blockList"><h4>addExact</h4><pre>public static int addExact(int x,
                           int y)</pre><div class="block">Returns the sum of its arguments, throwing an exception if the result overflows an <code>int</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first value     </dd><dd> <code>y</code> - the second value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:addExact-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addExact-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addExact-long-long-"/><a name="addExact-long-long-"/><ul class="blockList"><li class="blockList"><h4>addExact</h4><pre>public static long addExact(long x,
                            long y)</pre><div class="block">Returns the sum of its arguments, throwing an exception if the result overflows a <code>long</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first value     </dd><dd> <code>y</code> - the second value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows a long        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:addExact-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:subtractExact-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:subtractExact-int-int-"/><a name="subtractExact-int-int-"/><ul class="blockList"><li class="blockList"><h4>subtractExact</h4><pre>public static int subtractExact(int x,
                                int y)</pre><div class="block">Returns the difference of the arguments, throwing an exception if the result overflows an <code>int</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first value     </dd><dd> <code>y</code> - the second value to subtract from the first          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:subtractExact-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:subtractExact-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:subtractExact-long-long-"/><a name="subtractExact-long-long-"/><ul class="blockList"><li class="blockList"><h4>subtractExact</h4><pre>public static long subtractExact(long x,
                                 long y)</pre><div class="block">Returns the difference of the arguments, throwing an exception if the result overflows a <code>long</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first value     </dd><dd> <code>y</code> - the second value to subtract from the first          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows a long        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:subtractExact-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:multiplyExact-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:multiplyExact-int-int-"/><a name="multiplyExact-int-int-"/><ul class="blockList"><li class="blockList"><h4>multiplyExact</h4><pre>public static int multiplyExact(int x,
                                int y)</pre><div class="block">Returns the product of the arguments, throwing an exception if the result overflows an <code>int</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first value     </dd><dd> <code>y</code> - the second value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:multiplyExact-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:multiplyExact-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:multiplyExact-long-long-"/><a name="multiplyExact-long-long-"/><ul class="blockList"><li class="blockList"><h4>multiplyExact</h4><pre>public static long multiplyExact(long x,
                                 long y)</pre><div class="block">Returns the product of the arguments, throwing an exception if the result overflows a <code>long</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the first value     </dd><dd> <code>y</code> - the second value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows a long        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:multiplyExact-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:incrementExact-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:incrementExact-int-"/><a name="incrementExact-int-"/><ul class="blockList"><li class="blockList"><h4>incrementExact</h4><pre>public static int incrementExact(int a)</pre><div class="block">Returns the argument incremented by one, throwing an exception if the result overflows an <code>int</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value to increment      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:incrementExact-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:incrementExact-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:incrementExact-long-"/><a name="incrementExact-long-"/><ul class="blockList"><li class="blockList"><h4>incrementExact</h4><pre>public static long incrementExact(long a)</pre><div class="block">Returns the argument incremented by one, throwing an exception if the result overflows a <code>long</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value to increment      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows a long        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:incrementExact-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decrementExact-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decrementExact-int-"/><a name="decrementExact-int-"/><ul class="blockList"><li class="blockList"><h4>decrementExact</h4><pre>public static int decrementExact(int a)</pre><div class="block">Returns the argument decremented by one, throwing an exception if the result overflows an <code>int</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value to decrement      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:decrementExact-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decrementExact-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decrementExact-long-"/><a name="decrementExact-long-"/><ul class="blockList"><li class="blockList"><h4>decrementExact</h4><pre>public static long decrementExact(long a)</pre><div class="block">Returns the argument decremented by one, throwing an exception if the result overflows a <code>long</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value to decrement      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows a long        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:decrementExact-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:negateExact-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:negateExact-int-"/><a name="negateExact-int-"/><ul class="blockList"><li class="blockList"><h4>negateExact</h4><pre>public static int negateExact(int a)</pre><div class="block">Returns the negation of the argument, throwing an exception if the result overflows an <code>int</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value to negate      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:negateExact-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:negateExact-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:negateExact-long-"/><a name="negateExact-long-"/><ul class="blockList"><li class="blockList"><h4>negateExact</h4><pre>public static long negateExact(long a)</pre><div class="block">Returns the negation of the argument, throwing an exception if the result overflows a <code>long</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the value to negate      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the result overflows a long        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:negateExact-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toIntExact-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toIntExact-long-"/><a name="toIntExact-long-"/><ul class="blockList"><li class="blockList"><h4>toIntExact</h4><pre>public static int toIntExact(long value)</pre><div class="block">Returns the value of the <code>long</code> argument; throwing an exception if the value overflows an <code>int</code>.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the long value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the argument as an int    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the <code>argument</code> overflows an int        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:toIntExact-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floorDiv-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floorDiv-int-int-"/><a name="floorDiv-int-int-"/><ul class="blockList"><li class="blockList"><h4>floorDiv</h4><pre>public static int floorDiv(int x,
                           int y)</pre><div class="block">Returns the largest (closest to positive infinity) <code>int</code> value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the <a href="../../java/lang/Integer.html#MIN_VALUE">Integer.MIN_VALUE</a> and the divisor is <code>-1</code>, then integer overflow occurs and the result is equal to the <code>Integer.MIN_VALUE</code>.<p> Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results than truncation when the exact result is negative.<ul><li>If the signs of the arguments are the same, the results of <code>floorDiv</code> and the <code>/</code> operator are the same. <br/> For example, <code>floorDiv(4, 3) == 1   </code> and <code>(4 / 3) == 1    </code>.                         </li><li>If the signs of the arguments are different, the quotient is negative and <code>floorDiv</code> returns the integer less than or equal to the quotient and the <code>/</code> operator returns the integer closest to zero.<br/> For example, <code>floorDiv(-4, 3) == -2   </code>, whereas <code>(-4 / 3) == -1    </code>.                                      </li></ul>                                        </p><p/>                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the dividend    </dd><dd> <code>y</code> - the divisor    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the largest (closest to positive infinity) <code>int</code> value that is less than or equal to the algebraic quotient.                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the divisor <code>y</code> is zero        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Math.html#floorMod-int-int-"><code>floorMod(int, int) </code></a>, <a href="../../java/lang/Math.html#floor-double-"><code>floor(double)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:floorDiv-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floorDiv-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floorDiv-long-long-"/><a name="floorDiv-long-long-"/><ul class="blockList"><li class="blockList"><h4>floorDiv</h4><pre>public static long floorDiv(long x,
                            long y)</pre><div class="block">Returns the largest (closest to positive infinity) <code>long</code> value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the <a href="../../java/lang/Long.html#MIN_VALUE">Long.MIN_VALUE</a> and the divisor is <code>-1</code>, then integer overflow occurs and the result is equal to the <code>Long.MIN_VALUE</code>.<p> Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results than truncation when the exact result is negative.                                        </p><p> For examples, see <a href="../../java/lang/Math.html#floorDiv-int-int-"><code>floorDiv(int, int) </code></a>.    </p>                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the dividend    </dd><dd> <code>y</code> - the divisor    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the largest (closest to positive infinity) <code>long</code> value that is less than or equal to the algebraic quotient.                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the divisor <code>y</code> is zero        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Math.html#floorMod-long-long-"><code>floorMod(long, long) </code></a>, <a href="../../java/lang/Math.html#floor-double-"><code>floor(double)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:floorDiv-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floorMod-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floorMod-int-int-"/><a name="floorMod-int-int-"/><ul class="blockList"><li class="blockList"><h4>floorMod</h4><pre>public static int floorMod(int x,
                           int y)</pre><div class="block">Returns the floor modulus of the <code>int</code> arguments.<p> The floor modulus is <code>x - (floorDiv(x, y) * y)     </code>, has the same sign as the divisor <code>y</code>, and is in the range of <code>-abs(y) &lt; r &lt; +abs(y)    </code>.                    </p><p> The relationship between <code>floorDiv</code> and <code>floorMod</code> is such that:<ul><li> <code>floorDiv(x, y) * y + floorMod(x, y) == x        </code> </li></ul>         </p><p> The difference in values between <code>floorMod</code> and the <code>%</code> operator is due to the difference between <code>floorDiv</code> that returns the integer less than or equal to the quotient and the <code>/</code> operator that returns the integer closest to zero.                                       </p><p> Examples:<ul><li>If the signs of the arguments are the same, the results of <code>floorMod</code> and the <code>%</code> operator are the same. <br/><ul><li> <code>floorMod(4, 3) == 1   </code>;   and <code>(4 % 3) == 1    </code>    </li></ul>                    </li><li>If the signs of the arguments are different, the results differ from the <code>%</code> operator.<br/><ul><li> <code>floorMod(+4, -3) == -2   </code>;   and <code>(+4 % -3) == +1    </code>    </li><li> <code>floorMod(-4, +3) == +2   </code>;   and <code>(-4 % +3) == -1    </code>    </li><li> <code>floorMod(-4, -3) == -1   </code>;   and <code>(-4 % -3) == -1      </code>    </li></ul>              </li></ul> </p><p> If the signs of arguments are unknown and a positive modulus is needed it can be computed as <code>(floorMod(x, y) + abs(y)) % abs(y)     </code>.                   </p>       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the dividend    </dd><dd> <code>y</code> - the divisor    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the floor modulus <code>x - (floorDiv(x, y) * y)     </code>   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the divisor <code>y</code> is zero        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Math.html#floorDiv-int-int-"><code>floorDiv(int, int) </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:floorMod-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floorMod-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floorMod-long-long-"/><a name="floorMod-long-long-"/><ul class="blockList"><li class="blockList"><h4>floorMod</h4><pre>public static long floorMod(long x,
                            long y)</pre><div class="block">Returns the floor modulus of the <code>long</code> arguments.<p> The floor modulus is <code>x - (floorDiv(x, y) * y)     </code>, has the same sign as the divisor <code>y</code>, and is in the range of <code>-abs(y) &lt; r &lt; +abs(y)    </code>.                    </p><p> The relationship between <code>floorDiv</code> and <code>floorMod</code> is such that:<ul><li> <code>floorDiv(x, y) * y + floorMod(x, y) == x        </code> </li></ul>         </p><p> For examples, see <a href="../../java/lang/Math.html#floorMod-int-int-"><code>floorMod(int, int) </code></a>.    </p>       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the dividend    </dd><dd> <code>y</code> - the divisor    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the floor modulus <code>x - (floorDiv(x, y) * y)     </code>   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArithmeticException.html" title="class in java.lang">ArithmeticException</a></code> - if the divisor <code>y</code> is zero        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Math.html#floorDiv-long-long-"><code>floorDiv(long, long) </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:floorMod-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:abs-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:abs-int-"/><a name="abs-int-"/><ul class="blockList"><li class="blockList"><h4>abs</h4><pre>public static int abs(int a)</pre><div class="block">Returns the absolute value of an <code>int</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned.<p>Note that if the argument is equal to the value of <a href="../../java/lang/Integer.html#MIN_VALUE"><code>Integer.MIN_VALUE</code></a>, the most negative representable <code>int</code> value, the result is that same value, which is negative.                          </p>                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the argument whose absolute value is to be determined           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the absolute value of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:abs-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:abs-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:abs-long-"/><a name="abs-long-"/><ul class="blockList"><li class="blockList"><h4>abs</h4><pre>public static long abs(long a)</pre><div class="block">Returns the absolute value of a <code>long</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned.<p>Note that if the argument is equal to the value of <a href="../../java/lang/Long.html#MIN_VALUE"><code>Long.MIN_VALUE</code></a>, the most negative representable <code>long</code> value, the result is that same value, which is negative.                          </p>                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the argument whose absolute value is to be determined           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the absolute value of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:abs-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:abs-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:abs-float-"/><a name="abs-float-"/><ul class="blockList"><li class="blockList"><h4>abs</h4><pre>public static float abs(float a)</pre><div class="block">Returns the absolute value of a <code>float</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases:<ul><li>If the argument is positive zero or negative zero, the result is positive zero.             </li><li>If the argument is infinite, the result is positive infinity.         </li><li>If the argument is NaN, the result is NaN.        </li></ul> In other words, the result is the same as the value of the expression:<p> <code>Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))  </code> </p>                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the argument whose absolute value is to be determined           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the absolute value of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:abs-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:abs-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:abs-double-"/><a name="abs-double-"/><ul class="blockList"><li class="blockList"><h4>abs</h4><pre>public static double abs(double a)</pre><div class="block">Returns the absolute value of a <code>double</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases:<ul><li>If the argument is positive zero or negative zero, the result is positive zero.             </li><li>If the argument is infinite, the result is positive infinity.         </li><li>If the argument is NaN, the result is NaN.        </li></ul> In other words, the result is the same as the value of the expression:<p> <code>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)</code> </p>                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the argument whose absolute value is to be determined           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the absolute value of the argument.     </dd>  </dl></li></ul> <a end_ctx_id="method:abs-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-int-int-"/><a name="max-int-int-"/><ul class="blockList"><li class="blockList"><h4>max</h4><pre>public static int max(int a,
                      int b)</pre><div class="block">Returns the greater of two <code>int</code> values. That is, the result is the argument closer to the value of <a href="../../java/lang/Integer.html#MAX_VALUE"><code>Integer.MAX_VALUE</code></a>. If the arguments have the same value, the result is that same value.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the larger of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:max-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-long-long-"/><a name="max-long-long-"/><ul class="blockList"><li class="blockList"><h4>max</h4><pre>public static long max(long a,
                       long b)</pre><div class="block">Returns the greater of two <code>long</code> values. That is, the result is the argument closer to the value of <a href="../../java/lang/Long.html#MAX_VALUE"><code>Long.MAX_VALUE</code></a>. If the arguments have the same value, the result is that same value.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the larger of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:max-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-float-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-float-float-"/><a name="max-float-float-"/><ul class="blockList"><li class="blockList"><h4>max</h4><pre>public static float max(float a,
                        float b)</pre><div class="block">Returns the greater of two <code>float</code> values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the larger of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:max-float-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-double-double-"/><a name="max-double-double-"/><ul class="blockList"><li class="blockList"><h4>max</h4><pre>public static double max(double a,
                         double b)</pre><div class="block">Returns the greater of two <code>double</code> values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the larger of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:max-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-int-int-"/><a name="min-int-int-"/><ul class="blockList"><li class="blockList"><h4>min</h4><pre>public static int min(int a,
                      int b)</pre><div class="block">Returns the smaller of two <code>int</code> values. That is, the result the argument closer to the value of <a href="../../java/lang/Integer.html#MIN_VALUE"><code>Integer.MIN_VALUE</code></a>. If the arguments have the same value, the result is that same value.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the smaller of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:min-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-long-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-long-long-"/><a name="min-long-long-"/><ul class="blockList"><li class="blockList"><h4>min</h4><pre>public static long min(long a,
                       long b)</pre><div class="block">Returns the smaller of two <code>long</code> values. That is, the result is the argument closer to the value of <a href="../../java/lang/Long.html#MIN_VALUE"><code>Long.MIN_VALUE</code></a>. If the arguments have the same value, the result is that same value.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the smaller of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:min-long-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-float-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-float-float-"/><a name="min-float-float-"/><ul class="blockList"><li class="blockList"><h4>min</h4><pre>public static float min(float a,
                        float b)</pre><div class="block">Returns the smaller of two <code>float</code> values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the smaller of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:min-float-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-double-double-"/><a name="min-double-double-"/><ul class="blockList"><li class="blockList"><h4>min</h4><pre>public static double min(double a,
                         double b)</pre><div class="block">Returns the smaller of two <code>double</code> values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an argument.    </dd><dd> <code>b</code> - another argument.    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the smaller of <code>a</code> and <code>b</code>.     </dd>  </dl></li></ul> <a end_ctx_id="method:min-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ulp-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ulp-double-"/><a name="ulp-double-"/><ul class="blockList"><li class="blockList"><h4>ulp</h4><pre>public static double ulp(double d)</pre><div class="block">Returns the size of an ulp of the argument. An ulp, unit in the last place, of a <code>double</code> value is the positive distance between this floating-point value and the <code>double</code> value next larger in magnitude. Note that for non-NaN <i>x</i>, <code>ulp(-<i>x</i>) == ulp(<i>x</i>)  </code>.<p>Special Cases:<ul><li> If the argument is NaN, then the result is NaN.          </li><li> If the argument is positive or negative infinity, then the result is positive infinity.              </li><li> If the argument is positive or negative zero, then the result is <code>Double.MIN_VALUE</code>.             </li><li> If the argument is ±<code>Double.MAX_VALUE</code>, then the result is equal to 2<sup>971</sup>.            </li></ul> </p>                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - the floating-point value whose ulp is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the size of an ulp of the argument       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:ulp-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ulp-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ulp-float-"/><a name="ulp-float-"/><ul class="blockList"><li class="blockList"><h4>ulp</h4><pre>public static float ulp(float f)</pre><div class="block">Returns the size of an ulp of the argument. An ulp, unit in the last place, of a <code>float</code> value is the positive distance between this floating-point value and the <code>float</code> value next larger in magnitude. Note that for non-NaN <i>x</i>, <code>ulp(-<i>x</i>) == ulp(<i>x</i>)  </code>.<p>Special Cases:<ul><li> If the argument is NaN, then the result is NaN.          </li><li> If the argument is positive or negative infinity, then the result is positive infinity.              </li><li> If the argument is positive or negative zero, then the result is <code>Float.MIN_VALUE</code>.             </li><li> If the argument is ±<code>Float.MAX_VALUE</code>, then the result is equal to 2<sup>104</sup>.            </li></ul> </p>                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - the floating-point value whose ulp is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the size of an ulp of the argument       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:ulp-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:signum-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:signum-double-"/><a name="signum-double-"/><ul class="blockList"><li class="blockList"><h4>signum</h4><pre>public static double signum(double d)</pre><div class="block">Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero.<p>Special Cases:<ul><li> If the argument is NaN, then the result is NaN.          </li><li> If the argument is positive zero or negative zero, then the result is the same as the argument.                  </li></ul> </p>                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - the floating-point value whose signum is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the signum function of the argument     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:signum-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:signum-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:signum-float-"/><a name="signum-float-"/><ul class="blockList"><li class="blockList"><h4>signum</h4><pre>public static float signum(float f)</pre><div class="block">Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero.<p>Special Cases:<ul><li> If the argument is NaN, then the result is NaN.          </li><li> If the argument is positive zero or negative zero, then the result is the same as the argument.                  </li></ul> </p>                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - the floating-point value whose signum is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the signum function of the argument     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:signum-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sinh-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sinh-double-"/><a name="sinh-double-"/><ul class="blockList"><li class="blockList"><h4>sinh</h4><pre>public static double sinh(double x)</pre><div class="block">Returns the hyperbolic sine of a <code>double</code> value. The hyperbolic sine of <i>x</i> is defined to be (<i>e<sup>x</sup> - e<sup>-x</sup></i>)/2 where <i>e</i> is <a href="../../java/lang/Math.html#E">Euler's number </a>.<p>Special cases:<ul><li>If the argument is NaN, then the result is NaN.         </li><li>If the argument is infinite, then the result is an infinity with the same sign as the argument.                 </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul> </p><p>The computed result must be within 2.5 ulps of the exact result.           </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - The number whose hyperbolic sine is to be returned.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The hyperbolic sine of <code>x</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:sinh-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cosh-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cosh-double-"/><a name="cosh-double-"/><ul class="blockList"><li class="blockList"><h4>cosh</h4><pre>public static double cosh(double x)</pre><div class="block">Returns the hyperbolic cosine of a <code>double</code> value. The hyperbolic cosine of <i>x</i> is defined to be (<i>e<sup>x</sup> + e<sup>-x</sup></i>)/2 where <i>e</i> is <a href="../../java/lang/Math.html#E">Euler's number </a>.<p>Special cases:<ul><li>If the argument is NaN, then the result is NaN.         </li><li>If the argument is infinite, then the result is positive infinity.          </li><li>If the argument is zero, then the result is <code>1.0</code>.         </li></ul> </p><p>The computed result must be within 2.5 ulps of the exact result.           </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - The number whose hyperbolic cosine is to be returned.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The hyperbolic cosine of <code>x</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:cosh-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tanh-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tanh-double-"/><a name="tanh-double-"/><ul class="blockList"><li class="blockList"><h4>tanh</h4><pre>public static double tanh(double x)</pre><div class="block">Returns the hyperbolic tangent of a <code>double</code> value. The hyperbolic tangent of <i>x</i> is defined to be (<i>e<sup>x</sup> - e<sup>-x</sup></i>)/(<i>e<sup>x</sup> + e<sup>-x</sup></i>), in other words, <a href="../../java/lang/Math.html#sinh-double-">sinh(<i>x</i>)</a>/<a href="../../java/lang/Math.html#cosh-double-">cosh(<i>x</i>)</a>. Note that the absolute value of the exact tanh is always less than 1.<p>Special cases:<ul><li>If the argument is NaN, then the result is NaN.         </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li><li>If the argument is positive infinity, then the result is <code>+1.0</code>.          </li><li>If the argument is negative infinity, then the result is <code>-1.0</code>.          </li></ul> </p><p>The computed result must be within 2.5 ulps of the exact result. The result of <code>tanh</code> for any finite input must have an absolute value less than or equal to 1. Note that once the exact result of tanh is within 1/2 of an ulp of the limit value of ±1, correctly signed ±<code>1.0</code> should be returned.                                                        </p>                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - The number whose hyperbolic tangent is to be returned.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The hyperbolic tangent of <code>x</code>.    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:tanh-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hypot-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hypot-double-double-"/><a name="hypot-double-double-"/><ul class="blockList"><li class="blockList"><h4>hypot</h4><pre>public static double hypot(double x,
                           double y)</pre><div class="block">Returns sqrt(<i>x</i><sup>2</sup> +<i>y</i><sup>2</sup>) without intermediate overflow or underflow.<p>Special cases:<ul><li> If either argument is infinite, then the result is positive infinity.           </li><li> If either argument is NaN and neither argument is infinite, then the result is NaN.               </li></ul> </p><p>The computed result must be within 1 ulp of the exact result. If one parameter is held constant, the results must be semi-monotonic in the other parameter.                          </p>      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - a value    </dd><dd> <code>y</code> - a value    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>sqrt(<i>x</i><sup>2</sup> +<i>y</i><sup>2</sup>) without intermediate overflow or underflow     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:hypot-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:expm1-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:expm1-double-"/><a name="expm1-double-"/><ul class="blockList"><li class="blockList"><h4>expm1</h4><pre>public static double expm1(double x)</pre><div class="block">Returns <i>e</i><sup>x</sup> -1. Note that for values of <i>x</i> near 0, the exact sum of <code>expm1(x)</code> + 1 is much closer to the true result of <i>e</i><sup>x</sup> than <code>exp(x)</code>.<p>Special cases:<ul><li>If the argument is NaN, the result is NaN.        </li><li>If the argument is positive infinity, then the result is positive infinity.           </li><li>If the argument is negative infinity, then the result is -1.0.          </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul> </p><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic. The result of <code>expm1</code> for any finite input must be greater than or equal to <code>-1.0</code>. Note that once the exact result of <i>e</i><sup><code>x</code></sup> - 1 is within 1/2 ulp of the limit value -1, <code>-1.0</code> should be returned.                                                    </p>                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - the exponent to raise <i>e</i> to in the computation of <i>e</i><sup><code>x</code></sup> -1.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value <i>e</i><sup><code>x</code></sup> - 1.  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:expm1-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:log1p-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:log1p-double-"/><a name="log1p-double-"/><ul class="blockList"><li class="blockList"><h4>log1p</h4><pre>public static double log1p(double x)</pre><div class="block">Returns the natural logarithm of the sum of the argument and 1. Note that for small values <code>x</code>, the result of <code>log1p(x)</code> is much closer to the true result of ln(1 + <code>x</code>) than the floating-point evaluation of <code>log(1.0+x)</code>.<p>Special cases:<ul><li>If the argument is NaN or less than -1, then the result is NaN.             </li><li>If the argument is positive infinity, then the result is positive infinity.           </li><li>If the argument is negative one, then the result is negative infinity.           </li><li>If the argument is zero, then the result is a zero with the same sign as the argument.                 </li></ul> </p><p>The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.               </p>                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>x</code> - a value    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value ln(<code>x</code> + 1), the natural log of <code>x</code> + 1       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>   </dl></li></ul> <a end_ctx_id="method:log1p-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:copySign-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:copySign-double-double-"/><a name="copySign-double-double-"/><ul class="blockList"><li class="blockList"><h4>copySign</h4><pre>public static double copySign(double magnitude,
                              double sign)</pre><div class="block">Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the <a href="../../java/lang/StrictMath.html#copySign-double-double-"><code>StrictMath.copySign</code></a> method, this method does not require NaN <code>sign</code> arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>magnitude</code> - the parameter providing the magnitude of the result          </dd><dd> <code>sign</code> - the parameter providing the sign of the result          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a value with the magnitude of <code>magnitude</code> and the sign of <code>sign</code>.           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:copySign-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:copySign-float-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:copySign-float-float-"/><a name="copySign-float-float-"/><ul class="blockList"><li class="blockList"><h4>copySign</h4><pre>public static float copySign(float magnitude,
                             float sign)</pre><div class="block">Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the <a href="../../java/lang/StrictMath.html#copySign-float-float-"><code>StrictMath.copySign</code></a> method, this method does not require NaN <code>sign</code> arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>magnitude</code> - the parameter providing the magnitude of the result          </dd><dd> <code>sign</code> - the parameter providing the sign of the result          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a value with the magnitude of <code>magnitude</code> and the sign of <code>sign</code>.           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:copySign-float-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getExponent-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getExponent-float-"/><a name="getExponent-float-"/><ul class="blockList"><li class="blockList"><h4>getExponent</h4><pre>public static int getExponent(float f)</pre><div class="block">Returns the unbiased exponent used in the representation of a <code>float</code>. Special cases:<ul><li>If the argument is NaN or infinite, then the result is <a href="../../java/lang/Float.html#MAX_EXPONENT"><code>Float.MAX_EXPONENT</code></a> + 1.             </li><li>If the argument is zero or subnormal, then the result is <a href="../../java/lang/Float.html#MIN_EXPONENT"><code>Float.MIN_EXPONENT</code></a> -1.            </li></ul>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - a <code>float</code> value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unbiased exponent of the argument     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:getExponent-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getExponent-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getExponent-double-"/><a name="getExponent-double-"/><ul class="blockList"><li class="blockList"><h4>getExponent</h4><pre>public static int getExponent(double d)</pre><div class="block">Returns the unbiased exponent used in the representation of a <code>double</code>. Special cases:<ul><li>If the argument is NaN or infinite, then the result is <a href="../../java/lang/Double.html#MAX_EXPONENT"><code>Double.MAX_EXPONENT</code></a> + 1.             </li><li>If the argument is zero or subnormal, then the result is <a href="../../java/lang/Double.html#MIN_EXPONENT"><code>Double.MIN_EXPONENT</code></a> -1.            </li></ul>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - a <code>double</code> value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unbiased exponent of the argument     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:getExponent-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextAfter-double-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextAfter-double-double-"/><a name="nextAfter-double-double-"/><ul class="blockList"><li class="blockList"><h4>nextAfter</h4><pre>public static double nextAfter(double start,
                               double direction)</pre><div class="block">Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned.<p> Special cases:<ul><li> If either argument is a NaN, then NaN is returned.          </li><li> If both arguments are signed zeros, <code>direction</code> is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal).                          </li><li> If <code>start</code> is ±<a href="../../java/lang/Double.html#MIN_VALUE"><code>Double.MIN_VALUE</code></a> and <code>direction</code> has a value such that the result should have a smaller magnitude, then a zero with the same sign as <code>start</code> is returned.                             </li><li> If <code>start</code> is infinite and <code>direction</code> has a value such that the result should have a smaller magnitude, <a href="../../java/lang/Double.html#MAX_VALUE"><code>Double.MAX_VALUE</code></a> with the same sign as <code>start</code> is returned.                           </li><li> If <code>start</code> is equal to ± <a href="../../java/lang/Double.html#MAX_VALUE"><code>Double.MAX_VALUE</code></a> and <code>direction</code> has a value such that the result should have a larger magnitude, an infinity with same sign as <code>start</code> is returned.                              </li></ul>  </p>                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>start</code> - starting floating-point value     </dd><dd> <code>direction</code> - value indicating which of <code>start</code>'s neighbors or <code>start</code> should be returned             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The floating-point number adjacent to <code>start</code> in the direction of <code>direction</code>.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:nextAfter-double-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextAfter-float-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextAfter-float-double-"/><a name="nextAfter-float-double-"/><ul class="blockList"><li class="blockList"><h4>nextAfter</h4><pre>public static float nextAfter(float start,
                              double direction)</pre><div class="block">Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned.<p> Special cases:<ul><li> If either argument is a NaN, then NaN is returned.          </li><li> If both arguments are signed zeros, a value equivalent to <code>direction</code> is returned.             </li><li> If <code>start</code> is ±<a href="../../java/lang/Float.html#MIN_VALUE"><code>Float.MIN_VALUE</code></a> and <code>direction</code> has a value such that the result should have a smaller magnitude, then a zero with the same sign as <code>start</code> is returned.                             </li><li> If <code>start</code> is infinite and <code>direction</code> has a value such that the result should have a smaller magnitude, <a href="../../java/lang/Float.html#MAX_VALUE"><code>Float.MAX_VALUE</code></a> with the same sign as <code>start</code> is returned.                           </li><li> If <code>start</code> is equal to ± <a href="../../java/lang/Float.html#MAX_VALUE"><code>Float.MAX_VALUE</code></a> and <code>direction</code> has a value such that the result should have a larger magnitude, an infinity with same sign as <code>start</code> is returned.                              </li></ul>  </p>                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>start</code> - starting floating-point value     </dd><dd> <code>direction</code> - value indicating which of <code>start</code>'s neighbors or <code>start</code> should be returned             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The floating-point number adjacent to <code>start</code> in the direction of <code>direction</code>.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:nextAfter-float-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextUp-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextUp-double-"/><a name="nextUp-double-"/><ul class="blockList"><li class="blockList"><h4>nextUp</h4><pre>public static double nextUp(double d)</pre><div class="block">Returns the floating-point value adjacent to <code>d</code> in the direction of positive infinity. This method is semantically equivalent to <code>nextAfter(d, Double.POSITIVE_INFINITY) </code>; however, a <code>nextUp</code> implementation may run faster than its equivalent <code>nextAfter</code> call.<p>Special Cases:<ul><li> If the argument is NaN, the result is NaN.         </li><li> If the argument is positive infinity, the result is positive infinity.           </li><li> If the argument is zero, the result is <a href="../../java/lang/Double.html#MIN_VALUE"><code>Double.MIN_VALUE</code></a>         </li></ul> </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - starting floating-point value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The adjacent floating-point value closer to positive infinity.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:nextUp-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextUp-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextUp-float-"/><a name="nextUp-float-"/><ul class="blockList"><li class="blockList"><h4>nextUp</h4><pre>public static float nextUp(float f)</pre><div class="block">Returns the floating-point value adjacent to <code>f</code> in the direction of positive infinity. This method is semantically equivalent to <code>nextAfter(f, Float.POSITIVE_INFINITY) </code>; however, a <code>nextUp</code> implementation may run faster than its equivalent <code>nextAfter</code> call.<p>Special Cases:<ul><li> If the argument is NaN, the result is NaN.         </li><li> If the argument is positive infinity, the result is positive infinity.           </li><li> If the argument is zero, the result is <a href="../../java/lang/Float.html#MIN_VALUE"><code>Float.MIN_VALUE</code></a>         </li></ul> </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - starting floating-point value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The adjacent floating-point value closer to positive infinity.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:nextUp-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextDown-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextDown-double-"/><a name="nextDown-double-"/><ul class="blockList"><li class="blockList"><h4>nextDown</h4><pre>public static double nextDown(double d)</pre><div class="block">Returns the floating-point value adjacent to <code>d</code> in the direction of negative infinity. This method is semantically equivalent to <code>nextAfter(d, Double.NEGATIVE_INFINITY) </code>; however, a <code>nextDown</code> implementation may run faster than its equivalent <code>nextAfter</code> call.<p>Special Cases:<ul><li> If the argument is NaN, the result is NaN.         </li><li> If the argument is negative infinity, the result is negative infinity.           </li><li> If the argument is zero, the result is <code>-Double.MIN_VALUE</code>         </li></ul> </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - starting floating-point value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The adjacent floating-point value closer to negative infinity.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:nextDown-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextDown-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextDown-float-"/><a name="nextDown-float-"/><ul class="blockList"><li class="blockList"><h4>nextDown</h4><pre>public static float nextDown(float f)</pre><div class="block">Returns the floating-point value adjacent to <code>f</code> in the direction of negative infinity. This method is semantically equivalent to <code>nextAfter(f, Float.NEGATIVE_INFINITY) </code>; however, a <code>nextDown</code> implementation may run faster than its equivalent <code>nextAfter</code> call.<p>Special Cases:<ul><li> If the argument is NaN, the result is NaN.         </li><li> If the argument is negative infinity, the result is negative infinity.           </li><li> If the argument is zero, the result is <code>-Float.MIN_VALUE</code>         </li></ul> </p>                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - starting floating-point value     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The adjacent floating-point value closer to negative infinity.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:nextDown-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:scalb-double-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:scalb-double-int-"/><a name="scalb-double-int-"/><ul class="blockList"><li class="blockList"><h4>scalb</h4><pre>public static double scalb(double d,
                           int scaleFactor)</pre><div class="block">Returns <code>d</code> × 2<sup><code>scaleFactor</code></sup> rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between <a href="../../java/lang/Double.html#MIN_EXPONENT"><code>Double.MIN_EXPONENT</code></a> and <a href="../../java/lang/Double.html#MAX_EXPONENT"><code>Double.MAX_EXPONENT</code></a>, the answer is calculated exactly. If the exponent of the result would be larger than <code>Double.MAX_EXPONENT</code>, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when <code>scalb(x, n) </code> is subnormal, <code>scalb(scalb(x, n), -n)  </code> may not equal <i>x</i>. When the result is non-NaN, the result has the same sign as <code>d</code>.<p>Special cases:<ul><li> If the first argument is NaN, NaN is returned.         </li><li> If the first argument is infinite, then an infinity of the same sign is returned.               </li><li> If the first argument is zero, then a zero of the same sign is returned.               </li></ul> </p>                                                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>d</code> - number to be scaled by a power of two.           </dd><dd> <code>scaleFactor</code> - power of 2 used to scale <code>d</code>         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>d</code> × 2<sup><code>scaleFactor</code></sup>   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:scalb-double-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:scalb-float-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:scalb-float-int-"/><a name="scalb-float-int-"/><ul class="blockListLast"><li class="blockList"><h4>scalb</h4><pre>public static float scalb(float f,
                          int scaleFactor)</pre><div class="block">Returns <code>f</code> × 2<sup><code>scaleFactor</code></sup> rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between <a href="../../java/lang/Float.html#MIN_EXPONENT"><code>Float.MIN_EXPONENT</code></a> and <a href="../../java/lang/Float.html#MAX_EXPONENT"><code>Float.MAX_EXPONENT</code></a>, the answer is calculated exactly. If the exponent of the result would be larger than <code>Float.MAX_EXPONENT</code>, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when <code>scalb(x, n) </code> is subnormal, <code>scalb(scalb(x, n), -n)  </code> may not equal <i>x</i>. When the result is non-NaN, the result has the same sign as <code>f</code>.<p>Special cases:<ul><li> If the first argument is NaN, NaN is returned.         </li><li> If the first argument is infinite, then an infinity of the same sign is returned.               </li><li> If the first argument is zero, then a zero of the same sign is returned.               </li></ul> </p>                                                                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>f</code> - number to be scaled by a power of two.           </dd><dd> <code>scaleFactor</code> - power of 2 used to scale <code>f</code>         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>f</code> × 2<sup><code>scaleFactor</code></sup>   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:scalb-float-int-"/>  </td></tr></table></td></tr></table></diff></diffreport>