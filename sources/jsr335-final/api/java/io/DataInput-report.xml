<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:DataInput [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:DataInput"/><ul class="blockList"><li class="blockList"><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../javax/imageio/stream/ImageInputStream.html" title="interface in javax.imageio.stream">ImageInputStream</a>, <a href="../../javax/imageio/stream/ImageOutputStream.html" title="interface in javax.imageio.stream">ImageOutputStream</a>, <a href="../../java/io/ObjectInput.html" title="interface in java.io">ObjectInput</a>   </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../java/io/DataInputStream.html" title="class in java.io">DataInputStream</a>, <a href="../../javax/imageio/stream/FileCacheImageInputStream.html" title="class in javax.imageio.stream">FileCacheImageInputStream</a>, <a href="../../javax/imageio/stream/FileCacheImageOutputStream.html" title="class in javax.imageio.stream">FileCacheImageOutputStream</a>, <a href="../../javax/imageio/stream/FileImageInputStream.html" title="class in javax.imageio.stream">FileImageInputStream</a>, <a href="../../javax/imageio/stream/FileImageOutputStream.html" title="class in javax.imageio.stream">FileImageOutputStream</a>, <a href="../../javax/imageio/stream/ImageInputStreamImpl.html" title="class in javax.imageio.stream">ImageInputStreamImpl</a>, <a href="../../javax/imageio/stream/ImageOutputStreamImpl.html" title="class in javax.imageio.stream">ImageOutputStreamImpl</a>, <a href="../../javax/imageio/stream/MemoryCacheImageInputStream.html" title="class in javax.imageio.stream">MemoryCacheImageInputStream</a>, <a href="../../javax/imageio/stream/MemoryCacheImageOutputStream.html" title="class in javax.imageio.stream">MemoryCacheImageOutputStream</a>, <a href="../../java/io/ObjectInputStream.html" title="class in java.io">ObjectInputStream</a>, <a href="../../java/io/RandomAccessFile.html" title="class in java.io">RandomAccessFile</a>           </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">DataInput</span></pre><div class="block">The <code>DataInput</code> interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. There is also a facility for reconstructing a <code>String</code> from data in <a href="#modified-utf-8">modified UTF-8 </a> format.<p> It is generally true of all the reading routines in this interface that if end of file is reached before the desired number of bytes has been read, an <code>EOFException</code> (which is a kind of <code>IOException</code>) is thrown. If any byte cannot be read for any reason other than end of file, an <code>IOException</code> other than <code>EOFException</code> is thrown. In particular, an <code>IOException</code> may be thrown if the input stream has been closed.                                                                         </p><h3> <a name="modified-utf-8">Modified UTF-8 </a> </h3><p> Implementations of the DataInput and DataOutput interfaces represent Unicode strings in a format that is a slight modification of UTF-8. (For information regarding the standard UTF-8 format, see section <i>3.9 Unicode Encoding Forms   </i> of <i>The Unicode Standard, Version 4.0    </i>). Note that in the following table, the most significant bit appears in the far left-hand column.                                                </p><blockquote><table border="1" cellspacing="0" cellpadding="8" summary="Bit values and bytes"><tbody><tr><th colspan="9"><span style="font-weight:normal"> All characters in the range <code>'\u0001'</code> to <code>'\u007F'</code> are represented by a single byte:              </span></th></tr><tr><td/><th colspan="8" id="bit_a">Bit Values </th></tr><tr><th id="byte1_a">Byte 1 </th><td> <center>0</center> </td><td colspan="7"> <center>bits 6-0 </center> </td></tr><tr><th colspan="9"><span style="font-weight:normal"> The null character <code>'\u0000'</code> and characters in the range <code>'\u0080'</code> to <code>'\u07FF'</code> are represented by a pair of bytes:                   </span></th></tr><tr><td/><th colspan="8" id="bit_b">Bit Values </th></tr><tr><th id="byte1_b">Byte 1 </th><td> <center>1</center> </td><td> <center>1</center> </td><td> <center>0</center> </td><td colspan="5"> <center>bits 10-6 </center> </td></tr><tr><th id="byte2_a">Byte 2 </th><td> <center>1</center> </td><td> <center>0</center> </td><td colspan="6"> <center>bits 5-0 </center> </td></tr><tr><th colspan="9"><span style="font-weight:normal"><code>char</code> values in the range <code>'\u0800'</code> to <code>'\uFFFF'</code> are represented by three bytes:            </span></th></tr><tr><td/><th colspan="8" id="bit_c">Bit Values </th></tr><tr><th id="byte1_c">Byte 1 </th><td> <center>1</center> </td><td> <center>1</center> </td><td> <center>1</center> </td><td> <center>0</center> </td><td colspan="4"> <center>bits 15-12 </center> </td></tr><tr><th id="byte2_b">Byte 2 </th><td> <center>1</center> </td><td> <center>0</center> </td><td colspan="6"> <center>bits 11-6 </center> </td></tr><tr><th id="byte3">Byte 3 </th><td> <center>1</center> </td><td> <center>0</center> </td><td colspan="6"> <center>bits 5-0 </center> </td></tr></tbody></table></blockquote><p> The differences between this format and the standard UTF-8 format are the following:<ul><li>The null byte <code>'\u0000'</code> is encoded in 2-byte format rather than 1-byte, so that the encoded strings never have embedded nulls.                    </li><li>Only the 1-byte, 2-byte, and 3-byte formats are used.        </li><li> <a href="../lang/Character.html#unicode">Supplementary characters </a> are represented in the form of surrogate pairs.         </li></ul>             </p>                                    </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/DataInputStream.html" title="class in java.io"><code>DataInputStream</code></a>, <a href="../../java/io/DataOutput.html" title="interface in java.io"><code>DataOutput</code></a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:DataInput"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFully-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFully-byte:A-"/><a name="readFully-byte:A-"/><ul class="blockList"><li class="blockList"><h4>readFully</h4><pre>void readFully(byte[] b)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads some bytes from an input stream and stores them into the buffer array <code>b</code>. The number of bytes read is equal to the length of <code>b</code>.<p> This method blocks until one of the following conditions occurs:<ul><li> <code>b.length</code> bytes of input data are available, in which case a normal return is made.               </li><li>End of file is detected, in which case an <code>EOFException</code> is thrown.           </li><li>An I/O error occurs, in which case an <code>IOException</code> other than <code>EOFException</code> is thrown.             </li></ul>          </p><p> If <code>b</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. If <code>b.length</code> is zero, then no bytes are read. Otherwise, the first byte read is stored into element <code>b[0]</code>, the next one into <code>b[1]</code>, and so on. If an exception is thrown from this method, then it may be that some but not all bytes of <code>b</code> have been updated with data from the input stream.                                                                </p>                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readFully-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFully-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFully-byte:A-int-int-"/><a name="readFully-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>readFully</h4><pre>void readFully(byte[] b,
               int off,
               int len)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads <code>len</code> bytes from an input stream.<p> This method blocks until one of the following conditions occurs:<ul><li> <code>len</code> bytes of input data are available, in which case a normal return is made.               </li><li>End of file is detected, in which case an <code>EOFException</code> is thrown.           </li><li>An I/O error occurs, in which case an <code>IOException</code> other than <code>EOFException</code> is thrown.             </li></ul>          </p><p> If <code>b</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. If <code>off</code> is negative, or <code>len</code> is negative, or <code>off+len</code> is greater than the length of the array <code>b</code>, then an <code>IndexOutOfBoundsException</code> is thrown. If <code>len</code> is zero, then no bytes are read. Otherwise, the first byte read is stored into element <code>b[off]</code>, the next one into <code>b[off+1]</code>, and so on. The number of bytes read is, at most, equal to <code>len</code>.                                                                      </p>      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd><dd> <code>off</code> - an int specifying the offset into the data.          </dd><dd> <code>len</code> - an int specifying the number of bytes to read.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readFully-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skipBytes-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skipBytes-int-"/><a name="skipBytes-int-"/><ul class="blockList"><li class="blockList"><h4>skipBytes</h4><pre>int skipBytes(int n)
       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Makes an attempt to skip over <code>n</code> bytes of data from the input stream, discarding the skipped bytes. However, it may skip over some smaller number of bytes, possibly zero. This may result from any of a number of conditions; reaching end of file before <code>n</code> bytes have been skipped is only one possibility. This method never throws an <code>EOFException</code>. The actual number of bytes skipped is returned.                                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - the number of bytes to be skipped.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of bytes actually skipped.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:skipBytes-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readBoolean-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readBoolean--"/><a name="readBoolean--"/><ul class="blockList"><li class="blockList"><h4>readBoolean</h4><pre>boolean readBoolean()
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads one input byte and returns <code>true</code> if that byte is nonzero, <code>false</code> if that byte is zero. This method is suitable for reading the byte written by the <code>writeBoolean</code> method of interface <code>DataOutput</code>.                                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>boolean</code> value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readBoolean--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readByte-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readByte--"/><a name="readByte--"/><ul class="blockList"><li class="blockList"><h4>readByte</h4><pre>byte readByte()
       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads and returns one input byte. The byte is treated as a signed value in the range <code>-128</code> through <code>127</code>, inclusive. This method is suitable for reading the byte written by the <code>writeByte</code> method of interface <code>DataOutput</code>.                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 8-bit value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readByte--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUnsignedByte-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUnsignedByte--"/><a name="readUnsignedByte--"/><ul class="blockList"><li class="blockList"><h4>readUnsignedByte</h4><pre>int readUnsignedByte()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads one input byte, zero-extends it to type <code>int</code>, and returns the result, which is therefore in the range <code>0</code> through <code>255</code>. This method is suitable for reading the byte written by the <code>writeByte</code> method of interface <code>DataOutput</code> if the argument to <code>writeByte</code> was intended to be a value in the range <code>0</code> through <code>255</code>.                                                      </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unsigned 8-bit value read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readUnsignedByte--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readShort-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readShort--"/><a name="readShort--"/><ul class="blockList"><li class="blockList"><h4>readShort</h4><pre>short readShort()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads two input bytes and returns a <code>short</code> value. Let <code>a</code> be the first byte read and <code>b</code> be the second byte. The value returned is:<pre><code> (short)((a &lt;&lt; 8) | (b &amp; 0xff))
 </code></pre> This method is suitable for reading the bytes written by the <code>writeShort</code> method of interface <code>DataOutput</code>.                                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the 16-bit value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readShort--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUnsignedShort-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUnsignedShort--"/><a name="readUnsignedShort--"/><ul class="blockList"><li class="blockList"><h4>readUnsignedShort</h4><pre>int readUnsignedShort()
               throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads two input bytes and returns an <code>int</code> value in the range <code>0</code> through <code>65535</code>. Let <code>a</code> be the first byte read and <code>b</code> be the second byte. The value returned is:<pre><code> (((a &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
 </code></pre> This method is suitable for reading the bytes written by the <code>writeShort</code> method of interface <code>DataOutput</code> if the argument to <code>writeShort</code> was intended to be a value in the range <code>0</code> through <code>65535</code>.                                                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the unsigned 16-bit value read.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readUnsignedShort--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readChar-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readChar--"/><a name="readChar--"/><ul class="blockList"><li class="blockList"><h4>readChar</h4><pre>char readChar()
       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads two input bytes and returns a <code>char</code> value. Let <code>a</code> be the first byte read and <code>b</code> be the second byte. The value returned is:<pre><code> (char)((a &lt;&lt; 8) | (b &amp; 0xff))
 </code></pre> This method is suitable for reading bytes written by the <code>writeChar</code> method of interface <code>DataOutput</code>.                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>char</code> value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readChar--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readInt-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readInt--"/><a name="readInt--"/><ul class="blockList"><li class="blockList"><h4>readInt</h4><pre>int readInt()
     throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads four input bytes and returns an <code>int</code> value. Let <code>a-d</code> be the first through fourth bytes read. The value returned is:<pre><code>
 (((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) |
  ((c &amp; 0xff) &lt;&lt;  8) | (d &amp; 0xff))
 </code></pre> This method is suitable for reading bytes written by the <code>writeInt</code> method of interface <code>DataOutput</code>.                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>int</code> value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readInt--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLong-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLong--"/><a name="readLong--"/><ul class="blockList"><li class="blockList"><h4>readLong</h4><pre>long readLong()
       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads eight input bytes and returns a <code>long</code> value. Let <code>a-h</code> be the first through eighth bytes read. The value returned is:<pre><code>
 (((long)(a &amp; 0xff) &lt;&lt; 56) |
  ((long)(b &amp; 0xff) &lt;&lt; 48) |
  ((long)(c &amp; 0xff) &lt;&lt; 40) |
  ((long)(d &amp; 0xff) &lt;&lt; 32) |
  ((long)(e &amp; 0xff) &lt;&lt; 24) |
  ((long)(f &amp; 0xff) &lt;&lt; 16) |
  ((long)(g &amp; 0xff) &lt;&lt;  8) |
  ((long)(h &amp; 0xff)))
 </code></pre><p> This method is suitable for reading bytes written by the <code>writeLong</code> method of interface <code>DataOutput</code>.               </p>                     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>long</code> value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readLong--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readFloat-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readFloat--"/><a name="readFloat--"/><ul class="blockList"><li class="blockList"><h4>readFloat</h4><pre>float readFloat()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads four input bytes and returns a <code>float</code> value. It does this by first constructing an <code>int</code> value in exactly the manner of the <code>readInt</code> method, then converting this <code>int</code> value to a <code>float</code> in exactly the manner of the method <code>Float.intBitsToFloat</code>. This method is suitable for reading bytes written by the <code>writeFloat</code> method of interface <code>DataOutput</code>.                                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>float</code> value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readFloat--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readDouble-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readDouble--"/><a name="readDouble--"/><ul class="blockList"><li class="blockList"><h4>readDouble</h4><pre>double readDouble()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads eight input bytes and returns a <code>double</code> value. It does this by first constructing a <code>long</code> value in exactly the manner of the <code>readLong</code> method, then converting this <code>long</code> value to a <code>double</code> in exactly the manner of the method <code>Double.longBitsToDouble</code>. This method is suitable for reading bytes written by the <code>writeDouble</code> method of interface <code>DataOutput</code>.                                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <code>double</code> value read.   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readDouble--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readLine-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readLine--"/><a name="readLine--"/><ul class="blockList"><li class="blockList"><h4>readLine</h4><pre><a href="../../java/lang/String.html" title="class in java.lang">String</a> readLine()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads the next line of text from the input stream. It reads successive bytes, converting each byte separately into a character, until it encounters a line terminator or end of file; the characters read are then returned as a <code>String</code>. Note that because this method processes bytes, it does not support input of the full Unicode character set.<p> If end of file is encountered before even one byte can be read, then <code>null</code> is returned. Otherwise, each byte that is read is converted to type <code>char</code> by zero-extension. If the character <code>'\n'</code> is encountered, it is discarded and reading ceases. If the character <code>'\r'</code> is encountered, it is discarded and, if the following byte converts to the character <code>'\n'</code>, then that is discarded also; reading then ceases. If end of file is encountered before either of the characters <code>'\n'</code> and <code>'\r'</code> is encountered, reading ceases. Once reading has ceased, a <code>String</code> is returned that contains all the characters read and not discarded, taken in order. Note that every character in this string will have a value less than <code>\u0100</code>, that is, <code>(char)256</code>.                                                                                                                            </p>                                                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next line of text from the input stream, or <code>null</code> if the end of file is encountered before a byte can be read.                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:readLine--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:readUTF-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:readUTF--"/><a name="readUTF--"/><ul class="blockListLast"><li class="blockList"><h4>readUTF</h4><pre><a href="../../java/lang/String.html" title="class in java.lang">String</a> readUTF()
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads in a string that has been encoded using a <a href="#modified-utf-8">modified UTF-8 </a> format. The general contract of <code>readUTF</code> is that it reads a representation of a Unicode character string encoded in modified UTF-8 format; this string of characters is then returned as a <code>String</code>.<p> First, two bytes are read and used to construct an unsigned 16-bit integer in exactly the manner of the <code>readUnsignedShort</code> method . This integer value is called the <i>UTF length </i> and specifies the number of additional bytes to be read. These bytes are then converted to characters by considering them in groups. The length of each group is computed from the value of the first byte of the group. The byte following a group, if any, is the first byte of the next group.                                                                                   </p><p> If the first byte of a group matches the bit pattern <code>0xxxxxxx</code> (where <code>x</code> means "may be <code>0</code> or <code>1</code>"), then the group consists of just that byte. The byte is zero-extended to form a character.                                    </p><p> If the first byte of a group matches the bit pattern <code>110xxxxx</code>, then the group consists of that byte <code>a</code> and a second byte <code>b</code>. If there is no byte <code>b</code> (because byte <code>a</code> was the last of the bytes to be read), or if byte <code>b</code> does not match the bit pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, the group is converted to the character:<pre><code> (char)(((a &amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))
 </code></pre> If the first byte of a group matches the bit pattern <code>1110xxxx</code>, then the group consists of that byte <code>a</code> and two more bytes <code>b</code> and <code>c</code>. If there is no byte <code>c</code> (because byte <code>a</code> was one of the last two of the bytes to be read), or either byte <code>b</code> or byte <code>c</code> does not match the bit pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, the group is converted to the character:<pre><code>
 (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))
 </code></pre> If the first byte of a group matches the pattern <code>1111xxxx</code> or the pattern <code>10xxxxxx</code>, then a <code>UTFDataFormatException</code> is thrown.                                                                                                                                                                  </p><p> If end of file is encountered at any time during this entire process, then an <code>EOFException</code> is thrown.                  </p><p> After every group has been converted to a character by this process, the characters are gathered, in the same order in which their corresponding groups were read from the input stream, to form a <code>String</code>, which is returned.                                      </p><p> The <code>writeUTF</code> method of interface <code>DataOutput</code> may be used to write data that is suitable for reading by this method.                    </p>                                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Unicode string.  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/EOFException.html" title="class in java.io">EOFException</a></code> - if this stream reaches the end before reading all the bytes.             </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd><dd> <code><a href="../../java/io/UTFDataFormatException.html" title="class in java.io">UTFDataFormatException</a></code> - if the bytes do not represent a valid modified UTF-8 encoding of a string.                </dd>  </dl></li></ul> <a end_ctx_id="method:readUTF--"/>  </td></tr></table></td></tr></table></diff></diffreport>