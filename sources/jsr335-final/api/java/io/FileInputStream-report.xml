<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:FileInputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:FileInputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>  </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">FileInputStream</span>
extends <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></pre><div class="block">A <code>FileInputStream</code> obtains input bytes from a file in a file system. What files are available depends on the host environment.<p> <code>FileInputStream</code> is meant for reading streams of raw bytes such as image data. For reading streams of characters, consider using <code>FileReader</code>.                     </p>                    </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/File.html" title="class in java.io"><code>File</code></a>, <a href="../../java/io/FileDescriptor.html" title="class in java.io"><code>FileDescriptor</code></a>, <a href="../../java/io/FileOutputStream.html" title="class in java.io"><code>FileOutputStream</code></a>, <a href="../../java/nio/file/Files.html#newInputStream-java.nio.file.Path-java.nio.file.OpenOption...-"><code>Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...) </code></a>    </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:FileInputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FileInputStream-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FileInputStream-java.lang.String-"/><a name="FileInputStream-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>FileInputStream</h4><pre>public FileInputStream(<a href="../../java/lang/String.html" title="class in java.lang">String</a> name)
                throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></pre><div class="block">Creates a <code>FileInputStream</code> by opening a connection to an actual file, the file named by the path name <code>name</code> in the file system. A new <code>FileDescriptor</code> object is created to represent this file connection.<p> First, if there is a security manager, its <code>checkRead</code> method is called with the <code>name</code> argument as its argument.                   </p><p> If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a <code>FileNotFoundException</code> is thrown.                              </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the system-dependent file name.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading.                          </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkRead</code> method denies read access to the file.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>SecurityManager.checkRead(java.lang.String)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="constructor:FileInputStream-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FileInputStream-java.io.File- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FileInputStream-java.io.File-"/><a name="FileInputStream-java.io.File-"/><ul class="blockList"><li class="blockList"><h4>FileInputStream</h4><pre>public FileInputStream(<a href="../../java/io/File.html" title="class in java.io">File</a> file)
                throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></pre><div class="block">Creates a <code>FileInputStream</code> by opening a connection to an actual file, the file named by the <code>File</code> object <code>file</code> in the file system. A new <code>FileDescriptor</code> object is created to represent this file connection.<p> First, if there is a security manager, its <code>checkRead</code> method is called with the path represented by the <code>file</code> argument as its argument.                       </p><p> If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a <code>FileNotFoundException</code> is thrown.                              </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>file</code> - the file to be opened for reading.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading.                          </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkRead</code> method denies read access to the file.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/File.html#getPath--"><code>File.getPath()</code></a>, <a href="../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>SecurityManager.checkRead(java.lang.String)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="constructor:FileInputStream-java.io.File-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:FileInputStream-java.io.FileDescriptor- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:FileInputStream-java.io.FileDescriptor-"/><a name="FileInputStream-java.io.FileDescriptor-"/><ul class="blockListLast"><li class="blockList"><h4>FileInputStream</h4><pre>public FileInputStream(<a href="../../java/io/FileDescriptor.html" title="class in java.io">FileDescriptor</a> fdObj)</pre><div class="block">Creates a <code>FileInputStream</code> by using the file descriptor <code>fdObj</code>, which represents an existing connection to an actual file in the file system.<p> If there is a security manager, its <code>checkRead</code> method is called with the file descriptor <code>fdObj</code> as its argument to see if it's ok to read the file descriptor. If read access is denied to the file descriptor a <code>SecurityException</code> is thrown.                                          </p><p> If <code>fdObj</code> is null then a <code>NullPointerException</code> is thrown.         </p><p> This constructor does not throw an exception if <code>fdObj</code> is <a href="../../java/io/FileDescriptor.html#valid--"><code>invalid</code></a>. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an <code>IOException</code> is thrown.                               </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fdObj</code> - the file descriptor to be opened for reading.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkRead</code> method denies read access to the file descriptor.                  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkRead-java.io.FileDescriptor-"><code>SecurityManager.checkRead(java.io.FileDescriptor)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="constructor:FileInputStream-java.io.FileDescriptor-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read()
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads a byte of data from this input stream. This method blocks if no input is yet available.                 </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read--">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next byte of data, or <code>-1</code> if the end of the file is reached.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-"/><a name="read-byte:A-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads up to <code>b.length</code> bytes of data from this input stream into an array of bytes. This method blocks until some input is available.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read-byte:A-">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the file has been reached.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#read-byte:A-int-int-"><code>InputStream.read(byte[], int, int)  </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:read-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-int-int-"/><a name="read-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads up to <code>len</code> bytes of data from this input stream into an array of bytes. If <code>len</code> is not zero, the method blocks until some input is available; otherwise, no bytes are read and <code>0</code> is returned.                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#read-byte:A-int-int-">read</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd><dd> <code>off</code> - the start offset in the destination array <code>b</code>          </dd><dd> <code>len</code> - the maximum number of bytes read.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the file has been reached.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>b</code> is <code>null</code>.      </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off  </code>               </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#read--"><code>InputStream.read()</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:read-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-long-"/><a name="skip-long-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public long skip(long n)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Skips over and discards <code>n</code> bytes of data from the input stream.<p>The <code>skip</code> method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly <code>0</code>. If <code>n</code> is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an <code>IOException</code> is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value.                                                                          </p><p>This method may skip more bytes than what are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.                                                           </p>           </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#skip-long-">skip</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - the number of bytes to be skipped.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of bytes skipped.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if n is negative, if the stream does not support seek, or if an I/O error occurs.                   </dd>    </dl></li></ul> <a end_ctx_id="method:skip-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:available-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:available--"/><a name="available--"/><ul class="blockList"><li class="blockList"><h4>available</h4><pre>public int available()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. Returns 0 when the file position is beyond EOF. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.<p> In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.                           </p>                                                                       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#available--">available</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking.                    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if this file input stream has been closed by calling <code>close</code> or an I/O error occurs.                  </dd>   </dl></li></ul> <a end_ctx_id="method:available--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this file input stream and releases any system resources associated with the stream.<p> If this stream has an associated channel then the channel is closed as well.              </p>             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/InputStream.html#close--">close</a></code> in class <code><a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFD-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFD--"/><a name="getFD--"/><ul class="blockList"><li class="blockList"><h4>getFD</h4><pre>public final <a href="../../java/io/FileDescriptor.html" title="class in java.io">FileDescriptor</a> getFD()
                           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the <code>FileDescriptor</code> object that represents the connection to the actual file in the file system being used by this <code>FileInputStream</code>.                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the file descriptor object associated with this stream.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FileDescriptor.html" title="class in java.io"><code>FileDescriptor</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:getFD--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getChannel-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getChannel--"/><a name="getChannel--"/><ul class="blockList"><li class="blockList"><h4>getChannel</h4><pre>public <a href="../../java/nio/channels/FileChannel.html" title="class in java.nio.channels">FileChannel</a> getChannel()</pre><div class="block">Returns the unique <a href="../../java/nio/channels/FileChannel.html" title="class in java.nio.channels"><code>FileChannel</code></a> object associated with this file input stream.<p> The initial <a href="../../java/nio/channels/FileChannel.html#position--"><code>position</code></a> of the returned channel will be equal to the number of bytes read from the file so far. Reading bytes from this stream will increment the channel's position. Changing the channel's position, either explicitly or by reading, will change this stream's file position.                                              </p>          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the file channel associated with this file input stream        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:getChannel--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:finalize-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:finalize--"/><a name="finalize--"/><ul class="blockListLast"><li class="blockList"><h4>finalize</h4><pre>protected void finalize()
                 throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Ensures that the <code>close</code> method of this file input stream is called when there are no more references to it.                   </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#finalize--">finalize</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/FileInputStream.html#close--"><code>close()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:finalize--"/>  </td></tr></table></td></tr></table></diff></diffreport>