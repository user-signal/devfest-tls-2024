<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PipedWriter [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PipedWriter"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a>, <a href="../../java/lang/Appendable.html" title="interface in java.lang">Appendable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>    </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">PipedWriter</span>
extends <a href="../../java/io/Writer.html" title="class in java.io">Writer</a></pre><div class="block">Piped character-output streams.  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.1</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:PipedWriter"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedWriter-java.io.PipedReader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedWriter-java.io.PipedReader-"/><a name="PipedWriter-java.io.PipedReader-"/><ul class="blockList"><li class="blockList"><h4>PipedWriter</h4><pre>public PipedWriter(<a href="../../java/io/PipedReader.html" title="class in java.io">PipedReader</a> snk)
            throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a piped writer connected to the specified piped reader. Data characters written to this stream will then be available as input from <code>snk</code>.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>snk</code> - The piped reader to connect to.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="constructor:PipedWriter-java.io.PipedReader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedWriter-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedWriter--"/><a name="PipedWriter--"/><ul class="blockListLast"><li class="blockList"><h4>PipedWriter</h4><pre>public PipedWriter()</pre><div class="block">Creates a piped writer that is not yet connected to a piped reader. It must be connected to a piped reader, either by the receiver or the sender, before being used.                              </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/PipedReader.html#connect-java.io.PipedWriter-"><code>PipedReader.connect(java.io.PipedWriter)</code></a>, <a href="../../java/io/PipedWriter.html#connect-java.io.PipedReader-"><code>connect(java.io.PipedReader)</code></a>  </dd> </dl></li></ul> <a end_ctx_id="constructor:PipedWriter--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:connect-java.io.PipedReader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:connect-java.io.PipedReader-"/><a name="connect-java.io.PipedReader-"/><ul class="blockList"><li class="blockList"><h4>connect</h4><pre>public void connect(<a href="../../java/io/PipedReader.html" title="class in java.io">PipedReader</a> snk)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Connects this piped writer to a receiver. If this object is already connected to some other piped reader, an <code>IOException</code> is thrown.<p> If <code>snk</code> is an unconnected piped reader and <code>src</code> is an unconnected piped writer, they may be connected by either the call:                      </p><blockquote><pre>
 src.connect(snk)</pre></blockquote> or the call:<blockquote><pre>
 snk.connect(src)</pre></blockquote> The two calls have the same effect.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>snk</code> - the piped reader to connect to.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:connect-java.io.PipedReader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-int-"/><a name="write-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(int c)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes the specified <code>char</code> to the piped output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an <code>IOException</code> is thrown.<p> Implements the <code>write</code> method of <code>Writer</code>.      </p>                                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the <code>char</code> to be written.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="PipedOutputStream.html#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedWriter.html#connect-java.io.PipedReader-"><code>unconnected</code></a>, closed or an I/O error occurs.              </dd>   </dl></li></ul> <a end_ctx_id="method:write-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-char:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-char:A-int-int-"/><a name="write-char:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(char[] cbuf,
                  int off,
                  int len)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes <code>len</code> characters from the specified character array starting at offset <code>off</code> to this piped output stream. This method blocks until all the characters are written to the output stream. If a thread was reading data characters from the connected piped input stream, but the thread is no longer alive, then an <code>IOException</code> is thrown.                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#write-char:A-int-int-">write</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cbuf</code> - the data.    </dd><dd> <code>off</code> - the start offset in the data.        </dd><dd> <code>len</code> - the number of characters to write.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="PipedOutputStream.html#BROKEN"><code>broken</code></a>, <a href="../../java/io/PipedWriter.html#connect-java.io.PipedReader-"><code>unconnected</code></a>, closed or an I/O error occurs.              </dd>   </dl></li></ul> <a end_ctx_id="method:write-char:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Flushes this output stream and forces any buffered output characters to be written out. This will notify any readers that characters are waiting in the pipe.                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Flushable.html#flush--">flush</a></code> in interface <code><a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#flush--">flush</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is closed, or an I/O error occurs.            </dd>   </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this piped output stream and releases any system resources associated with this stream. This stream may no longer be used for writing characters.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Writer.html#close--">close</a></code> in class <code><a href="../../java/io/Writer.html" title="class in java.io">Writer</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>