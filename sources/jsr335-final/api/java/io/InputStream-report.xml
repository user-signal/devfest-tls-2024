<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:InputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:InputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>  </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../javax/sound/sampled/AudioInputStream.html" title="class in javax.sound.sampled">AudioInputStream</a>, <a href="../../java/io/ByteArrayInputStream.html" title="class in java.io">ByteArrayInputStream</a>, <a href="../../java/io/FileInputStream.html" title="class in java.io">FileInputStream</a>, <a href="../../java/io/FilterInputStream.html" title="class in java.io">FilterInputStream</a>, <a href="../../org/omg/CORBA/portable/InputStream.html" title="class in org.omg.CORBA.portable">InputStream</a>, <a href="../../java/io/ObjectInputStream.html" title="class in java.io">ObjectInputStream</a>, <a href="../../java/io/PipedInputStream.html" title="class in java.io">PipedInputStream</a>, <a href="../../java/io/SequenceInputStream.html" title="class in java.io">SequenceInputStream</a>, <a href="../../java/io/StringBufferInputStream.html" title="class in java.io">StringBufferInputStream</a>         </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">InputStream</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></pre><div class="block">This abstract class is the superclass of all classes representing an input stream of bytes.<p> Applications that need to define a subclass of <code>InputStream</code> must always provide a method that returns the next byte of input.                     </p>              </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/BufferedInputStream.html" title="class in java.io"><code>BufferedInputStream</code></a>, <a href="../../java/io/ByteArrayInputStream.html" title="class in java.io"><code>ByteArrayInputStream</code></a>, <a href="../../java/io/DataInputStream.html" title="class in java.io"><code>DataInputStream</code></a>, <a href="../../java/io/FilterInputStream.html" title="class in java.io"><code>FilterInputStream</code></a>, <a href="../../java/io/InputStream.html#read--"><code>read()</code></a>, <a href="../../java/io/OutputStream.html" title="class in java.io"><code>OutputStream</code></a>, <a href="../../java/io/PushbackInputStream.html" title="class in java.io"><code>PushbackInputStream</code></a>       </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:InputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:InputStream-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:InputStream--"/><a name="InputStream--"/><ul class="blockListLast"><li class="blockList"><h4>InputStream</h4><pre>public InputStream()</pre></li></ul> <a end_ctx_id="constructor:InputStream--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read--"/><a name="read--"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public abstract int read()
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads the next byte of data from the input stream. The value byte is returned as an <code>int</code> in the range <code>0</code> to <code>255</code>. If no byte is available because the end of the stream has been reached, the value <code>-1</code> is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.<p> A subclass must provide an implementation of this method.         </p>                                                              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next byte of data, or <code>-1</code> if the end of the stream is reached.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:read--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-"/><a name="read-byte:A-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads some number of bytes from the input stream and stores them into the buffer array <code>b</code>. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown.<p> If the length of <code>b</code> is zero, then no bytes are read and <code>0</code> is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value <code>-1</code> is returned; otherwise, at least one byte is read and stored into <code>b</code>.                                                          </p><p> The first byte read is stored into element <code>b[0]</code>, the next one into <code>b[1]</code>, and so on. The number of bytes read is, at most, equal to the length of <code>b</code>. Let <i>k</i> be the number of bytes actually read; these bytes will be stored in elements <code>b[0]</code> through <code>b[</code><i>k</i><code>-1]</code>, leaving elements <code>b[</code><i>k</i><code>]</code> through <code>b[b.length-1]</code> unaffected.                                                        </p><p> The <code>read(b)</code> method for class <code>InputStream</code> has the same effect as:<pre><code> read(b, 0, b.length) </code></pre>           </p>                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the first byte cannot be read for any reason other than the end of the file, if the input stream has been closed, or if some other I/O error occurs.                                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>b</code> is <code>null</code>.      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#read-byte:A-int-int-"><code>read(byte[], int, int)  </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:read-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:read-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:read-byte:A-int-int-"/><a name="read-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>read</h4><pre>public int read(byte[] b,
                int off,
                int len)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Reads up to <code>len</code> bytes of data from the input stream into an array of bytes. An attempt is made to read as many as <code>len</code> bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer.<p> This method blocks until input data is available, end of file is detected, or an exception is thrown.                  </p><p> If <code>len</code> is zero, then no bytes are read and <code>0</code> is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value <code>-1</code> is returned; otherwise, at least one byte is read and stored into <code>b</code>.                                                     </p><p> The first byte read is stored into element <code>b[off]</code>, the next one into <code>b[off+1]</code>, and so on. The number of bytes read is, at most, equal to <code>len</code>. Let <i>k</i> be the number of bytes actually read; these bytes will be stored in elements <code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>, leaving elements <code>b[off+</code><i>k</i><code>]</code> through <code>b[off+len-1]</code> unaffected.                                                     </p><p> In every case, elements <code>b[0]</code> through <code>b[off]</code> and elements <code>b[off+len]</code> through <code>b[b.length-1]</code> are unaffected.              </p><p> The <code>read(b,</code><code>off,</code><code>len)</code> method for class <code>InputStream</code> simply calls the method <code>read()</code> repeatedly. If the first such call results in an <code>IOException</code>, that exception is returned from the call to the <code>read(b,</code><code>off,</code><code>len)</code> method. If any subsequent call to <code>read()</code> results in a <code>IOException</code>, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into <code>b</code> and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data <code>len</code> has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.                                                                                                                      </p>                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer into which the data is read.          </dd><dd> <code>off</code> - the start offset in array <code>b</code> at which the data is written.              </dd><dd> <code>len</code> - the maximum number of bytes to read.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If the first byte cannot be read for any reason other than end of file, or if the input stream has been closed, or if some other I/O error occurs.                                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - If <code>b</code> is <code>null</code>.      </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off  </code>               </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#read--"><code>read()</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:read-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-long-"/><a name="skip-long-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public long skip(long n)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Skips over and discards <code>n</code> bytes of data from this input stream. The <code>skip</code> method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly <code>0</code>. This may result from any of a number of conditions; reaching end of file before <code>n</code> bytes have been skipped is only one possibility. The actual number of bytes skipped is returned. If <code>n</code> is negative, the <code>skip</code> method for class <code>InputStream</code> always returns 0, and no bytes are skipped. Subclasses may handle the negative value differently.<p> The <code>skip</code> method of this class creates a byte array and then repeatedly reads into it until <code>n</code> bytes have been read or the end of the stream has been reached. Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.                                                      </p>                                                                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - the number of bytes to be skipped.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of bytes skipped.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the stream does not support seek, or if some other I/O error occurs.                </dd>   </dl></li></ul> <a end_ctx_id="method:skip-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:available-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:available--"/><a name="available--"/><ul class="blockList"><li class="blockList"><h4>available</h4><pre>public int available()
              throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.<p> Note that while some implementations of <code>InputStream</code> will return the total number of bytes in the stream, many will not. It is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream.                                            </p><p> A subclass' implementation of this method may choose to throw an <a href="../../java/io/IOException.html" title="class in java.io"><code>IOException</code></a> if this input stream has been closed by invoking the <a href="../../java/io/InputStream.html#close--"><code>close()</code></a> method.                        </p><p> The <code>available</code> method for class <code>InputStream</code> always returns <code>0</code>.         </p><p> This method should be overridden by subclasses.       </p>                                                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking or <code>0</code> when it reaches the end of the input stream.                              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:available--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this input stream and releases any system resources associated with the stream.<p> The <code>close</code> method of <code>InputStream</code> does nothing.       </p>            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:mark-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:mark-int-"/><a name="mark-int-"/><ul class="blockList"><li class="blockList"><h4>mark</h4><pre>public void mark(int readlimit)</pre><div class="block">Marks the current position in this input stream. A subsequent call to the <code>reset</code> method repositions this stream at the last marked position so that subsequent reads re-read the same bytes.<p> The <code>readlimit</code> arguments tells this input stream to allow that many bytes to be read before the mark position gets invalidated.                     </p><p> The general contract of <code>mark</code> is that, if the method <code>markSupported</code> returns <code>true</code>, the stream somehow remembers all the bytes read after the call to <code>mark</code> and stands ready to supply those same bytes again if and whenever the method <code>reset</code> is called. However, the stream is not required to remember any data at all if more than <code>readlimit</code> bytes are read from the stream before <code>reset</code> is called.                                                                     </p><p> Marking a closed stream should not have any effect on the stream.            </p><p> The <code>mark</code> method of <code>InputStream</code> does nothing.       </p>                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>readlimit</code> - the maximum limit of bytes that can be read before the mark position becomes invalid.                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#reset--"><code>reset()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:mark-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>public void reset()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Repositions this stream to the position at the time the <code>mark</code> method was last called on this input stream.<p> The general contract of <code>reset</code> is:<ul><li> If the method <code>markSupported</code> returns <code>true</code>, then:<ul><li> If the method <code>mark</code> has not been called since the stream was created, or the number of bytes read from the stream since <code>mark</code> was last called is larger than the argument to <code>mark</code> at that last call, then an <code>IOException</code> might be thrown.                                            </li><li> If such an <code>IOException</code> is not thrown, then the stream is reset to a state such that all the bytes read since the most recent call to <code>mark</code> (or since the start of the file, if <code>mark</code> has not been called) will be resupplied to subsequent callers of the <code>read</code> method, followed by any bytes that otherwise would have been the next input data as of the time of the call to <code>reset</code>.                                                                         </li></ul>       </li><li> If the method <code>markSupported</code> returns <code>false</code>, then:<ul><li> The call to <code>reset</code> may throw an <code>IOException</code>.        </li><li> If an <code>IOException</code> is not thrown, then the stream is reset to a fixed state that depends on the particular type of the input stream and how it was created. The bytes that will be supplied to subsequent callers of the <code>read</code> method depend on the particular type of the input stream.                                                    </li></ul>       </li></ul>      </p><p>The method <code>reset</code> for class <code>InputStream</code> does nothing except throw an <code>IOException</code>.           </p>                  </div><dl> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if this stream has not been marked or if the mark has been invalidated.                </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#mark-int-"><code>mark(int)</code></a>, <a href="../../java/io/IOException.html" title="class in java.io"><code>IOException</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:markSupported-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:markSupported--"/><a name="markSupported--"/><ul class="blockListLast"><li class="blockList"><h4>markSupported</h4><pre>public boolean markSupported()</pre><div class="block">Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods. Whether or not <code>mark</code> and <code>reset</code> are supported is an invariant property of a particular input stream instance. The <code>markSupported</code> method of <code>InputStream</code> returns <code>false</code>.                                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this stream instance supports the mark and reset methods; <code>false</code> otherwise.             </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/InputStream.html#mark-int-"><code>mark(int)</code></a>, <a href="../../java/io/InputStream.html#reset--"><code>reset()</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:markSupported--"/>  </td></tr></table></td></tr></table></diff></diffreport>