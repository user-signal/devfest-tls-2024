<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:DataOutput [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:DataOutput"/><ul class="blockList"><li class="blockList"><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../javax/imageio/stream/ImageOutputStream.html" title="interface in javax.imageio.stream">ImageOutputStream</a>, <a href="../../java/io/ObjectOutput.html" title="interface in java.io">ObjectOutput</a>  </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../java/io/DataOutputStream.html" title="class in java.io">DataOutputStream</a>, <a href="../../javax/imageio/stream/FileCacheImageOutputStream.html" title="class in javax.imageio.stream">FileCacheImageOutputStream</a>, <a href="../../javax/imageio/stream/FileImageOutputStream.html" title="class in javax.imageio.stream">FileImageOutputStream</a>, <a href="../../javax/imageio/stream/ImageOutputStreamImpl.html" title="class in javax.imageio.stream">ImageOutputStreamImpl</a>, <a href="../../javax/imageio/stream/MemoryCacheImageOutputStream.html" title="class in javax.imageio.stream">MemoryCacheImageOutputStream</a>, <a href="../../java/io/ObjectOutputStream.html" title="class in java.io">ObjectOutputStream</a>, <a href="../../java/io/RandomAccessFile.html" title="class in java.io">RandomAccessFile</a>       </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">DataOutput</span></pre><div class="block">The <code>DataOutput</code> interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream. There is also a facility for converting a <code>String</code> into <a href="DataInput.html#modified-utf-8">modified UTF-8 </a> format and writing the resulting series of bytes.<p> For all the methods in this interface that write bytes, it is generally true that if a byte cannot be written for any reason, an <code>IOException</code> is thrown.                            </p>                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/DataInput.html" title="interface in java.io"><code>DataInput</code></a>, <a href="../../java/io/DataOutputStream.html" title="class in java.io"><code>DataOutputStream</code></a>  </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:DataOutput"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-int-"/><a name="write-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>void write(int b)
    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes to the output stream the eight low-order bits of the argument <code>b</code>. The 24 high-order bits of <code>b</code> are ignored.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the byte to be written.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:write-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-byte:A-"/><a name="write-byte:A-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>void write(byte[] b)
    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes to the output stream all the bytes in array <code>b</code>. If <code>b</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. If <code>b.length</code> is zero, then no bytes are written. Otherwise, the byte <code>b[0]</code> is written first, then <code>b[1]</code>, and so on; the last byte written is <code>b[b.length-1]</code>.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the data.    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:write-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-byte:A-int-int-"/><a name="write-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>void write(byte[] b,
           int off,
           int len)
    throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes <code>len</code> bytes from array <code>b</code>, in order, to the output stream. If <code>b</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. If <code>off</code> is negative, or <code>len</code> is negative, or <code>off+len</code> is greater than the length of the array <code>b</code>, then an <code>IndexOutOfBoundsException</code> is thrown. If <code>len</code> is zero, then no bytes are written. Otherwise, the byte <code>b[off]</code> is written first, then <code>b[off+1]</code>, and so on; the last byte written is <code>b[off+len-1]</code>.                                                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the data.    </dd><dd> <code>off</code> - the start offset in the data.        </dd><dd> <code>len</code> - the number of bytes to write.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:write-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeBoolean-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeBoolean-boolean-"/><a name="writeBoolean-boolean-"/><ul class="blockList"><li class="blockList"><h4>writeBoolean</h4><pre>void writeBoolean(boolean v)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a <code>boolean</code> value to this output stream. If the argument <code>v</code> is <code>true</code>, the value <code>(byte)1</code> is written; if <code>v</code> is <code>false</code>, the value <code>(byte)0</code> is written. The byte written by this method may be read by the <code>readBoolean</code> method of interface <code>DataInput</code>, which will then return a <code>boolean</code> equal to <code>v</code>.                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the boolean to be written.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeBoolean-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeByte-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeByte-int-"/><a name="writeByte-int-"/><ul class="blockList"><li class="blockList"><h4>writeByte</h4><pre>void writeByte(int v)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes to the output stream the eight low- order bits of the argument <code>v</code>. The 24 high-order bits of <code>v</code> are ignored. (This means that <code>writeByte</code> does exactly the same thing as <code>write</code> for an integer argument.) The byte written by this method may be read by the <code>readByte</code> method of interface <code>DataInput</code>, which will then return a <code>byte</code> equal to <code>(byte)v</code>.                                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the byte value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeByte-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeShort-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeShort-int-"/><a name="writeShort-int-"/><ul class="blockList"><li class="blockList"><h4>writeShort</h4><pre>void writeShort(int v)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes two bytes to the output stream to represent the value of the argument. The byte values to be written, in the order shown, are:<pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 8))
 (byte)(0xff &amp; v)
 </code></pre><p> The bytes written by this method may be read by the <code>readShort</code> method of interface <code>DataInput</code> , which will then return a <code>short</code> equal to <code>(short)v</code>.                          </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the <code>short</code> value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeShort-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeChar-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeChar-int-"/><a name="writeChar-int-"/><ul class="blockList"><li class="blockList"><h4>writeChar</h4><pre>void writeChar(int v)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a <code>char</code> value, which is comprised of two bytes, to the output stream. The byte values to be written, in the order shown, are:<pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 8))
 (byte)(0xff &amp; v)
 </code></pre><p> The bytes written by this method may be read by the <code>readChar</code> method of interface <code>DataInput</code> , which will then return a <code>char</code> equal to <code>(char)v</code>.                          </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the <code>char</code> value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeChar-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeInt-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeInt-int-"/><a name="writeInt-int-"/><ul class="blockList"><li class="blockList"><h4>writeInt</h4><pre>void writeInt(int v)
       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes an <code>int</code> value, which is comprised of four bytes, to the output stream. The byte values to be written, in the order shown, are:<pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 24))
 (byte)(0xff &amp; (v &gt;&gt; 16))
 (byte)(0xff &amp; (v &gt;&gt;  8))
 (byte)(0xff &amp; v)
 </code></pre><p> The bytes written by this method may be read by the <code>readInt</code> method of interface <code>DataInput</code> , which will then return an <code>int</code> equal to <code>v</code>.                          </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the <code>int</code> value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeInt-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeLong-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeLong-long-"/><a name="writeLong-long-"/><ul class="blockList"><li class="blockList"><h4>writeLong</h4><pre>void writeLong(long v)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a <code>long</code> value, which is comprised of eight bytes, to the output stream. The byte values to be written, in the order shown, are:<pre><code>
 (byte)(0xff &amp; (v &gt;&gt; 56))
 (byte)(0xff &amp; (v &gt;&gt; 48))
 (byte)(0xff &amp; (v &gt;&gt; 40))
 (byte)(0xff &amp; (v &gt;&gt; 32))
 (byte)(0xff &amp; (v &gt;&gt; 24))
 (byte)(0xff &amp; (v &gt;&gt; 16))
 (byte)(0xff &amp; (v &gt;&gt;  8))
 (byte)(0xff &amp; v)
 </code></pre><p> The bytes written by this method may be read by the <code>readLong</code> method of interface <code>DataInput</code> , which will then return a <code>long</code> equal to <code>v</code>.                          </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the <code>long</code> value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeLong-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeFloat-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeFloat-float-"/><a name="writeFloat-float-"/><ul class="blockList"><li class="blockList"><h4>writeFloat</h4><pre>void writeFloat(float v)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a <code>float</code> value, which is comprised of four bytes, to the output stream. It does this as if it first converts this <code>float</code> value to an <code>int</code> in exactly the manner of the <code>Float.floatToIntBits</code> method and then writes the <code>int</code> value in exactly the manner of the <code>writeInt</code> method. The bytes written by this method may be read by the <code>readFloat</code> method of interface <code>DataInput</code>, which will then return a <code>float</code> equal to <code>v</code>.                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the <code>float</code> value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeFloat-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeDouble-double- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeDouble-double-"/><a name="writeDouble-double-"/><ul class="blockList"><li class="blockList"><h4>writeDouble</h4><pre>void writeDouble(double v)
          throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a <code>double</code> value, which is comprised of eight bytes, to the output stream. It does this as if it first converts this <code>double</code> value to a <code>long</code> in exactly the manner of the <code>Double.doubleToLongBits</code> method and then writes the <code>long</code> value in exactly the manner of the <code>writeLong</code> method. The bytes written by this method may be read by the <code>readDouble</code> method of interface <code>DataInput</code>, which will then return a <code>double</code> equal to <code>v</code>.                                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>v</code> - the <code>double</code> value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeDouble-double-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeBytes-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeBytes-java.lang.String-"/><a name="writeBytes-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>writeBytes</h4><pre>void writeBytes(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes a string to the output stream. For every character in the string <code>s</code>, taken in order, one byte is written to the output stream. If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p> If <code>s.length</code> is zero, then no bytes are written. Otherwise, the character <code>s[0]</code> is written first, then <code>s[1]</code>, and so on; the last character written is <code>s[s.length-1]</code>. For each character, one byte is written, the low-order byte, in exactly the manner of the <code>writeByte</code> method . The high-order eight bits of each character in the string are ignored.                                                          </p>                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string of bytes to be written.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeBytes-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeChars-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeChars-java.lang.String-"/><a name="writeChars-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>writeChars</h4><pre>void writeChars(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
         throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes every character in the string <code>s</code>, to the output stream, in order, two bytes per character. If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. If <code>s.length</code> is zero, then no characters are written. Otherwise, the character <code>s[0]</code> is written first, then <code>s[1]</code>, and so on; the last character written is <code>s[s.length-1]</code>. For each character, two bytes are actually written, high-order byte first, in exactly the manner of the <code>writeChar</code> method.                                                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeChars-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:writeUTF-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:writeUTF-java.lang.String-"/><a name="writeUTF-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>writeUTF</h4><pre>void writeUTF(<a href="../../java/lang/String.html" title="class in java.lang">String</a> s)
       throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes two bytes of length information to the output stream, followed by the <a href="DataInput.html#modified-utf-8">modified UTF-8 </a> representation of every character in the string <code>s</code>. If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. Each character in the string <code>s</code> is converted to a group of one, two, or three bytes, depending on the value of the character.<p> If a character <code>c</code> is in the range <code>\u0001</code> through <code>\u007f</code>, it is represented by one byte:<pre>(byte)c </pre>                 </p><p> If a character <code>c</code> is <code>\u0000</code> or is in the range <code>\u0080</code> through <code>\u07ff</code>, then it is represented by two bytes, to be written in the order shown:<pre><code>
 (byte)(0xc0 | (0x1f &amp; (c &gt;&gt; 6)))
 (byte)(0x80 | (0x3f &amp; c))
 </code></pre>                            </p><p> If a character <code>c</code> is in the range <code>\u0800</code> through <code>uffff</code>, then it is represented by three bytes, to be written in the order shown:<pre><code>
 (byte)(0xe0 | (0x0f &amp; (c &gt;&gt; 12)))
 (byte)(0x80 | (0x3f &amp; (c &gt;&gt;  6)))
 (byte)(0x80 | (0x3f &amp; c))
 </code></pre>                         </p><p> First, the total number of bytes needed to represent all the characters of <code>s</code> is calculated. If this number is larger than <code>65535</code>, then a <code>UTFDataFormatException</code> is thrown. Otherwise, this length is written to the output stream in exactly the manner of the <code>writeShort</code> method; after this, the one-, two-, or three-byte representation of each character in the string <code>s</code> is written.                                                              </p><p> The bytes written by this method may be read by the <code>readUTF</code> method of interface <code>DataInput</code> , which will then return a <code>String</code> equal to <code>s</code>.                          </p>                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the string value to be written.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:writeUTF-java.lang.String-"/>  </td></tr></table></td></tr></table></diff></diffreport>