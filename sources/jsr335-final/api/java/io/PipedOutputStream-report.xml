<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:PipedOutputStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:PipedOutputStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">PipedOutputStream</span>
extends <a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></pre><div class="block">A piped output stream can be connected to a piped input stream to create a communications pipe. The piped output stream is the sending end of the pipe. Typically, data is written to a <code>PipedOutputStream</code> object by one thread and data is read from the connected <code>PipedInputStream</code> by some other thread. Attempting to use both objects from a single thread is not recommended as it may deadlock the thread. The pipe is said to be <a name="BROKEN"><i>broken</i></a> if a thread that was reading data bytes from the connected piped input stream is no longer alive.                                                                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/PipedInputStream.html" title="class in java.io"><code>PipedInputStream</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:PipedOutputStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedOutputStream-java.io.PipedInputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedOutputStream-java.io.PipedInputStream-"/><a name="PipedOutputStream-java.io.PipedInputStream-"/><ul class="blockList"><li class="blockList"><h4>PipedOutputStream</h4><pre>public PipedOutputStream(<a href="../../java/io/PipedInputStream.html" title="class in java.io">PipedInputStream</a> snk)
                  throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Creates a piped output stream connected to the specified piped input stream. Data bytes written to this stream will then be available as input from <code>snk</code>.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>snk</code> - The piped input stream to connect to.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="constructor:PipedOutputStream-java.io.PipedInputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:PipedOutputStream-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:PipedOutputStream--"/><a name="PipedOutputStream--"/><ul class="blockListLast"><li class="blockList"><h4>PipedOutputStream</h4><pre>public PipedOutputStream()</pre><div class="block">Creates a piped output stream that is not yet connected to a piped input stream. It must be connected to a piped input stream, either by the receiver or the sender, before being used.                                 </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/io/PipedInputStream.html#connect-java.io.PipedOutputStream-"><code>PipedInputStream.connect(java.io.PipedOutputStream)</code></a>, <a href="../../java/io/PipedOutputStream.html#connect-java.io.PipedInputStream-"><code>connect(java.io.PipedInputStream)</code></a>  </dd> </dl></li></ul> <a end_ctx_id="constructor:PipedOutputStream--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:connect-java.io.PipedInputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:connect-java.io.PipedInputStream-"/><a name="connect-java.io.PipedInputStream-"/><ul class="blockList"><li class="blockList"><h4>connect</h4><pre>public void connect(<a href="../../java/io/PipedInputStream.html" title="class in java.io">PipedInputStream</a> snk)
             throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Connects this piped output stream to a receiver. If this object is already connected to some other piped input stream, an <code>IOException</code> is thrown.<p> If <code>snk</code> is an unconnected piped input stream and <code>src</code> is an unconnected piped output stream, they may be connected by either the call:                        </p><blockquote><pre>
 src.connect(snk)</pre></blockquote> or the call:<blockquote><pre>
 snk.connect(src)</pre></blockquote> The two calls have the same effect.                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>snk</code> - the piped input stream to connect to.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>  </dl></li></ul> <a end_ctx_id="method:connect-java.io.PipedInputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-int-"/><a name="write-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(int b)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes the specified <code>byte</code> to the piped output stream.<p> Implements the <code>write</code> method of <code>OutputStream</code>.      </p>        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#write-int-">write</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the <code>byte</code> to be written.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="#BROKEN"> broken </a>, <a href="../../java/io/PipedOutputStream.html#connect-java.io.PipedInputStream-"><code>unconnected</code></a>, closed, or if an I/O error occurs.               </dd>   </dl></li></ul> <a end_ctx_id="method:write-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:write-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:write-byte:A-int-int-"/><a name="write-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>write</h4><pre>public void write(byte[] b,
                  int off,
                  int len)
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this piped output stream. This method blocks until all the bytes are written to the output stream.                             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#write-byte:A-int-int-">write</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the data.    </dd><dd> <code>off</code> - the start offset in the data.        </dd><dd> <code>len</code> - the number of bytes to write.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the pipe is <a href="#BROKEN"> broken </a>, <a href="../../java/io/PipedOutputStream.html#connect-java.io.PipedInputStream-"><code>unconnected</code></a>, closed, or if an I/O error occurs.               </dd>   </dl></li></ul> <a end_ctx_id="method:write-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Flushes this output stream and forces any buffered output bytes to be written out. This will notify any readers that bytes are waiting in the pipe.                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Flushable.html#flush--">flush</a></code> in interface <code><a href="../../java/io/Flushable.html" title="interface in java.io">Flushable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#flush--">flush</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>   </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockListLast"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Closes this piped output stream and releases any system resources associated with this stream. This stream may no longer be used for writing bytes.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/io/OutputStream.html#close--">close</a></code> in class <code><a href="../../java/io/OutputStream.html" title="class in java.io">OutputStream</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs.       </dd>    </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table></diff></diffreport>