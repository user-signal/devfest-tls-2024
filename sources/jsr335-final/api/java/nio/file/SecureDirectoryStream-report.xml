<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:SecureDirectoryStream [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:SecureDirectoryStream"/><ul class="blockList"><li class="blockList"><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../../java/nio/file/DirectoryStream.html" title="interface in java.nio.file">DirectoryStream</a>&lt;T&gt;, <a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;T&gt;    </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">SecureDirectoryStream&lt;T&gt;</span>
extends <a href="../../../java/nio/file/DirectoryStream.html" title="interface in java.nio.file">DirectoryStream</a>&lt;T&gt;</pre><div class="block">A <code>DirectoryStream</code> that defines operations on files that are located relative to an open directory. A <code>SecureDirectoryStream</code> is intended for use by sophisticated or security sensitive applications requiring to traverse file trees or otherwise operate on directories in a race-free manner. Race conditions can arise when a sequence of file operations cannot be carried out in isolation. Each of the file operations defined by this interface specify a relative path. All access to the file is relative to the open directory irrespective of if the directory is moved or replaced by an attacker while the directory is open. A <code>SecureDirectoryStream</code> may also be used as a virtual <em>working directory </em>.<p> A <code>SecureDirectoryStream</code> requires corresponding support from the underlying operating system. Where an implementation supports this features then the <code>DirectoryStream</code> returned by the <a href="../../../java/nio/file/Files.html#newDirectoryStream-java.nio.file.Path-"><code>newDirectoryStream</code></a> method will be a <code>SecureDirectoryStream</code> and must be cast to that type in order to invoke the methods defined by this interface.                                             </p><p> In the case of the default <a href="../../../java/nio/file/spi/FileSystemProvider.html" title="class in java.nio.file.spi"><code>provider</code></a>, and a security manager is set, then the permission checks are performed using the path obtained by resolving the given relative path against the <i>original path </i> of the directory (irrespective of if the directory is moved since it was opened).                                              </p>                                                                                                           </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:SecureDirectoryStream"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newDirectoryStream-T-java.nio.file.LinkOption...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:newDirectoryStream-T-java.nio.file.LinkOption...-"/><a name="newDirectoryStream-T-java.nio.file.LinkOption...-"/><ul class="blockList"><li class="blockList"><h4>newDirectoryStream</h4><pre><a href="../../../java/nio/file/SecureDirectoryStream.html" title="interface in java.nio.file">SecureDirectoryStream</a>&lt;<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a>&gt; newDirectoryStream(<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> path,
                                            <a href="../../../java/nio/file/LinkOption.html" title="enum in java.nio.file">LinkOption</a>... options)
                                     throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Opens the directory identified by the given path, returning a <code>SecureDirectoryStream</code> to iterate over the entries in the directory.<p> This method works in exactly the manner specified by the <a href="../../../java/nio/file/Files.html#newDirectoryStream-java.nio.file.Path-"><code>newDirectoryStream</code></a> method for the case that the <code>path</code> parameter is an <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a> path. When the parameter is a relative path then the directory to open is relative to this open directory. The <a href="../../../java/nio/file/LinkOption.html#NOFOLLOW_LINKS"><code>NOFOLLOW_LINKS</code></a> option may be used to ensure that this method fails if the file is a symbolic link.                                                            </p><p> The new directory stream, once created, is not dependent upon the directory stream used to create it. Closing this directory stream has no effect upon newly created directory stream.                             </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>path</code> - the path to the directory to open         </dd><dd> <code>options</code> - options indicating how symbolic links are handled         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a new and open <code>SecureDirectoryStream</code> object     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file">ClosedDirectoryStreamException</a></code> - if the directory stream is closed        </dd><dd> <code><a href="../../../java/nio/file/NotDirectoryException.html" title="class in java.nio.file">NotDirectoryException</a></code> - if the file could not otherwise be opened because it is not a directory <i>(optional specific exception)  </i>                 </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>checkRead</code></a> method is invoked to check read access to the directory.                           </dd>   </dl></li></ul> <a name="newByteChannel-java.lang.Object-java.util.Set-java.nio.file.attribute.FileAttribute:A-"/><a end_ctx_id="method:newDirectoryStream-T-java.nio.file.LinkOption...-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newByteChannel-T-java.util.Set-java.nio.file.attribute.FileAttribute...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newByteChannel-T-java.util.Set-java.nio.file.attribute.FileAttribute...-"/><a name="newByteChannel-T-java.util.Set-java.nio.file.attribute.FileAttribute...-"/><ul class="blockList"><li class="blockList"><h4>newByteChannel</h4><pre><a href="../../../java/nio/channels/SeekableByteChannel.html" title="interface in java.nio.channels">SeekableByteChannel</a> newByteChannel(<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> path,
                                   <a href="../../../java/util/Set.html" title="interface in java.util">Set</a>&lt;? extends <a href="../../../java/nio/file/OpenOption.html" title="interface in java.nio.file">OpenOption</a>&gt; options,
                                   <a href="../../../java/nio/file/attribute/FileAttribute.html" title="interface in java.nio.file.attribute">FileAttribute</a>&lt;?&gt;... attrs)
                            throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Opens or creates a file in this directory, returning a seekable byte channel to access the file.<p> This method works in exactly the manner specified by the <a href="../../../java/nio/file/Files.html#newByteChannel-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-"><code>Files.newByteChannel</code></a> method for the case that the <code>path</code> parameter is an <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a> path. When the parameter is a relative path then the file to open or create is relative to this open directory. In addition to the options defined by the <code>Files.newByteChannel</code> method, the <a href="../../../java/nio/file/LinkOption.html#NOFOLLOW_LINKS"><code>NOFOLLOW_LINKS</code></a> option may be used to ensure that this method fails if the file is a symbolic link.                                                                        </p><p> The channel, once created, is not dependent upon the directory stream used to create it. Closing this directory stream has no effect upon the channel.                         </p>                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>path</code> - the path of the file to open open or create            </dd><dd> <code>options</code> - options specifying how the file is opened         </dd><dd> <code>attrs</code> - an optional list of attributes to set atomically when creating the file              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the seekable byte channel   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file">ClosedDirectoryStreamException</a></code> - if the directory stream is closed        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the set contains an invalid combination of options           </dd><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if an unsupported open option is specified or the array contains attributes that cannot be set atomically when creating the file                       </dd><dd> <code><a href="../../../java/nio/file/FileAlreadyExistsException.html" title="class in java.nio.file">FileAlreadyExistsException</a></code> - if a file of that name already exists and the <a href="../../../java/nio/file/StandardOpenOption.html#CREATE_NEW"><code>CREATE_NEW</code></a> option is specified <i>(optional specific exception)  </i>                 </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>checkRead</code></a> method is invoked to check read access to the path if the file is opened for reading. The <a href="../../../java/lang/SecurityManager.html#checkWrite-java.lang.String-"><code>checkWrite</code></a> method is invoked to check write access to the path if the file is opened for writing.                                                     </dd>   </dl></li></ul> <a name="deleteFile-java.lang.Object-"/><a end_ctx_id="method:newByteChannel-T-java.util.Set-java.nio.file.attribute.FileAttribute...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:deleteFile-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:deleteFile-T-"/><a name="deleteFile-T-"/><ul class="blockList"><li class="blockList"><h4>deleteFile</h4><pre>void deleteFile(<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> path)
         throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Deletes a file.<p> Unlike the <a href="../../../java/nio/file/Files.html#delete-java.nio.file.Path-"><code>delete()</code></a> method, this method does not first examine the file to determine if the file is a directory. Whether a directory is deleted by this method is system dependent and therefore not specified. If the file is a symbolic link, then the link itself, not the final target of the link, is deleted. When the parameter is a relative path then the file to delete is relative to this open directory.                                                                         </p>  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>path</code> - the path of the file to delete         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file">ClosedDirectoryStreamException</a></code> - if the directory stream is closed        </dd><dd> <code><a href="../../../java/nio/file/NoSuchFileException.html" title="class in java.nio.file">NoSuchFileException</a></code> - if the file does not exist <i>(optional specific exception)  </i>         </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkDelete-java.lang.String-"><code>checkDelete</code></a> method is invoked to check delete access to the file                           </dd>  </dl></li></ul> <a name="deleteDirectory-java.lang.Object-"/><a end_ctx_id="method:deleteFile-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:deleteDirectory-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:deleteDirectory-T-"/><a name="deleteDirectory-T-"/><ul class="blockList"><li class="blockList"><h4>deleteDirectory</h4><pre>void deleteDirectory(<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> path)
              throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Deletes a directory.<p> Unlike the <a href="../../../java/nio/file/Files.html#delete-java.nio.file.Path-"><code>delete()</code></a> method, this method does not first examine the file to determine if the file is a directory. Whether non-directories are deleted by this method is system dependent and therefore not specified. When the parameter is a relative path then the directory to delete is relative to this open directory.                                                    </p>  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>path</code> - the path of the directory to delete         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file">ClosedDirectoryStreamException</a></code> - if the directory stream is closed        </dd><dd> <code><a href="../../../java/nio/file/NoSuchFileException.html" title="class in java.nio.file">NoSuchFileException</a></code> - if the directory does not exist <i>(optional specific exception)  </i>         </dd><dd> <code><a href="../../../java/nio/file/DirectoryNotEmptyException.html" title="class in java.nio.file">DirectoryNotEmptyException</a></code> - if the directory could not otherwise be deleted because it is not empty <i>(optional specific exception)  </i>                </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkDelete-java.lang.String-"><code>checkDelete</code></a> method is invoked to check delete access to the directory                           </dd>  </dl></li></ul> <a name="move-java.lang.Object-java.nio.file.SecureDirectoryStream-java.lang.Object-"/><a end_ctx_id="method:deleteDirectory-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:move-T-java.nio.file.SecureDirectoryStream-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:move-T-java.nio.file.SecureDirectoryStream-T-"/><a name="move-T-java.nio.file.SecureDirectoryStream-T-"/><ul class="blockList"><li class="blockList"><h4>move</h4><pre>void move(<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> srcpath,
          <a href="../../../java/nio/file/SecureDirectoryStream.html" title="interface in java.nio.file">SecureDirectoryStream</a>&lt;<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a>&gt; targetdir,
          <a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> targetpath)
   throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Move a file from this directory to another directory.<p> This method works in a similar manner to <a href="../../../java/nio/file/Files.html#move-java.nio.file.Path-java.nio.file.Path-java.nio.file.CopyOption...-"><code>move</code></a> method when the <a href="../../../java/nio/file/StandardCopyOption.html#ATOMIC_MOVE"><code>ATOMIC_MOVE</code></a> option is specified. That is, this method moves a file as an atomic file system operation. If the <code>srcpath</code> parameter is an <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a> path then it locates the source file. If the parameter is a relative path then it is located relative to this open directory. If the <code>targetpath</code> parameter is absolute then it locates the target file (the <code>targetdir</code> parameter is ignored). If the parameter is a relative path it is located relative to the open directory identified by the <code>targetdir</code> parameter. In all cases, if the target file exists then it is implementation specific if it is replaced or this method fails.                                                                                                                     </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>srcpath</code> - the name of the file to move         </dd><dd> <code>targetdir</code> - the destination directory     </dd><dd> <code>targetpath</code> - the name to give the file in the destination directory            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file">ClosedDirectoryStreamException</a></code> - if this or the target directory stream is closed           </dd><dd> <code><a href="../../../java/nio/file/FileAlreadyExistsException.html" title="class in java.nio.file">FileAlreadyExistsException</a></code> - if the file already exists in the target directory and cannot be replaced <i>(optional specific exception)  </i>                </dd><dd> <code><a href="../../../java/nio/file/AtomicMoveNotSupportedException.html" title="class in java.nio.file">AtomicMoveNotSupportedException</a></code> - if the file cannot be moved as an atomic file system operation              </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkWrite-java.lang.String-"><code>checkWrite</code></a> method is invoked to check write access to both the source and target file.                               </dd>  </dl></li></ul> <a end_ctx_id="method:move-T-java.nio.file.SecureDirectoryStream-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFileAttributeView-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFileAttributeView-java.lang.Class-"/><a name="getFileAttributeView-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>getFileAttributeView</h4><pre>&lt;V extends <a href="../../../java/nio/file/attribute/FileAttributeView.html" title="interface in java.nio.file.attribute">FileAttributeView</a>&gt; V getFileAttributeView(<a href="../../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;V&gt; type)</pre><div class="block">Returns a new file attribute view to access the file attributes of this directory.<p> The resulting file attribute view can be used to read or update the attributes of this (open) directory. The <code>type</code> parameter specifies the type of the attribute view and the method returns an instance of that type if supported. Invoking this method to obtain a <a href="../../../java/nio/file/attribute/BasicFileAttributeView.html" title="interface in java.nio.file.attribute"><code>BasicFileAttributeView</code></a> always returns an instance of that class that is bound to this open directory.                                                            </p><p> The state of resulting file attribute view is intimately connected to this directory stream. Once the directory stream is <a href="../../../java/io/Closeable.html#close--"><code>closed</code></a>, then all methods to read or update attributes will throw <a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file"><code>ClosedDirectoryStreamException</code></a>.                               </p>             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>V</code> - The <code>FileAttributeView</code> type     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>type</code> - the <code>Class</code> object corresponding to the file attribute view           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a new file attribute view of the specified type bound to this directory stream, or <code>null</code> if the attribute view type is not available                       </dd>   </dl></li></ul> <a name="getFileAttributeView-java.lang.Object-java.lang.Class-java.nio.file.LinkOption:A-"/><a end_ctx_id="method:getFileAttributeView-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFileAttributeView-T-java.lang.Class-java.nio.file.LinkOption...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFileAttributeView-T-java.lang.Class-java.nio.file.LinkOption...-"/><a name="getFileAttributeView-T-java.lang.Class-java.nio.file.LinkOption...-"/><ul class="blockListLast"><li class="blockList"><h4>getFileAttributeView</h4><pre>&lt;V extends <a href="../../../java/nio/file/attribute/FileAttributeView.html" title="interface in java.nio.file.attribute">FileAttributeView</a>&gt; V getFileAttributeView(<a href="../../../java/nio/file/SecureDirectoryStream.html" title="type parameter in SecureDirectoryStream">T</a> path,
                                                     <a href="../../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;V&gt; type,
                                                     <a href="../../../java/nio/file/LinkOption.html" title="enum in java.nio.file">LinkOption</a>... options)</pre><div class="block">Returns a new file attribute view to access the file attributes of a file in this directory.<p> The resulting file attribute view can be used to read or update the attributes of file in this directory. The <code>type</code> parameter specifies the type of the attribute view and the method returns an instance of that type if supported. Invoking this method to obtain a <a href="../../../java/nio/file/attribute/BasicFileAttributeView.html" title="interface in java.nio.file.attribute"><code>BasicFileAttributeView</code></a> always returns an instance of that class that is bound to the file in the directory.                                                               </p><p> The state of resulting file attribute view is intimately connected to this directory stream. Once the directory stream <a href="../../../java/io/Closeable.html#close--"><code>closed</code></a>, then all methods to read or update attributes will throw <a href="../../../java/nio/file/ClosedDirectoryStreamException.html" title="class in java.nio.file"><code>ClosedDirectoryStreamException</code></a>. The file is not required to exist at the time that the file attribute view is created but methods to read or update attributes of the file will fail when invoked and the file does not exist.                                                                   </p>                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>V</code> - The <code>FileAttributeView</code> type     </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>path</code> - the path of the file       </dd><dd> <code>type</code> - the <code>Class</code> object corresponding to the file attribute view           </dd><dd> <code>options</code> - options indicating how symbolic links are handled         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a new file attribute view of the specified type bound to a this directory stream, or <code>null</code> if the attribute view type is not available                        </dd>   </dl></li></ul> <a end_ctx_id="method:getFileAttributeView-T-java.lang.Class-java.nio.file.LinkOption...-"/>  </td></tr></table></td></tr></table></diff></diffreport>