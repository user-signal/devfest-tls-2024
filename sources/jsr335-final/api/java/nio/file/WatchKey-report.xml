<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:WatchKey [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:WatchKey"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public interface <span class="typeNameLabel">WatchKey</span></pre><div class="block">A token representing the registration of a <a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file"><code>watchable</code></a> object with a <a href="../../../java/nio/file/WatchService.html" title="interface in java.nio.file"><code>WatchService</code></a>.<p> A watch key is created when a watchable object is registered with a watch service. The key remains <a href="../../../java/nio/file/WatchKey.html#isValid--"><code>valid</code></a> until:<ol><li> It is cancelled, explicitly, by invoking its <a href="../../../java/nio/file/WatchKey.html#cancel--"><code>cancel</code></a> method, or          </li><li> Cancelled implicitly, because the object is no longer accessible, or          </li><li> By <a href="../../../java/nio/file/WatchService.html#close--"><code>closing</code></a> the watch service.     </li></ol>                    </p><p> A watch key has a state. When initially created the key is said to be <em>ready</em>. When an event is detected then the key is <em>signalled</em> and queued so that it can be retrieved by invoking the watch service's <a href="../../../java/nio/file/WatchService.html#poll--"><code>poll</code></a> or <a href="../../../java/nio/file/WatchService.html#take--"><code>take</code></a> methods. Once signalled, a key remains in this state until its <a href="../../../java/nio/file/WatchKey.html#reset--"><code>reset</code></a> method is invoked to return the key to the ready state. Events detected while the key is in the signalled state are queued but do not cause the key to be re-queued for retrieval from the watch service. Events are retrieved by invoking the key's <a href="../../../java/nio/file/WatchKey.html#pollEvents--"><code>pollEvents</code></a> method. This method retrieves and removes all events accumulated for the object. When initially created, a watch key has no pending events. Typically events are retrieved when the key is in the signalled state leading to the following idiom:<pre>
     for (;;) {
         // retrieve key
         WatchKey key = watcher.take();

         // process events
         for (WatchEvent&lt;?&gt; event: key.pollEvents()) {
             :
         }

         // reset the key
         boolean valid = key.reset();
         if (!valid) {
             // object no longer registered
         }
     }
 </pre>                                                                                                                                           </p><p> Watch keys are safe for use by multiple concurrent threads. Where there are several threads retrieving signalled keys from a watch service then care should be taken to ensure that the <code>reset</code> method is only invoked after the events for the object have been processed. This ensures that one thread is processing the events for an object at any time.                                                            </p>           </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:WatchKey"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isValid-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isValid--"/><a name="isValid--"/><ul class="blockList"><li class="blockList"><h4>isValid</h4><pre>boolean isValid()</pre><div class="block">Tells whether or not this watch key is valid.<p> A watch key is valid upon creation and remains until it is cancelled, or its watch service is closed.                   </p>        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if, and only if, this watch key is valid          </dd> </dl></li></ul> <a end_ctx_id="method:isValid--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollEvents-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollEvents--"/><a name="pollEvents--"/><ul class="blockList"><li class="blockList"><h4>pollEvents</h4><pre><a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/nio/file/WatchEvent.html" title="interface in java.nio.file">WatchEvent</a>&lt;?&gt;&gt; pollEvents()</pre><div class="block">Retrieves and removes all pending events for this watch key, returning a <code>List</code> of the events that were retrieved.<p> Note that this method does not wait if there are no events pending.             </p>                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the list of the events retrieved; may be empty        </dd> </dl></li></ul> <a end_ctx_id="method:pollEvents--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>boolean reset()</pre><div class="block">Resets this watch key.<p> If this watch key has been cancelled or this watch key is already in the ready state then invoking this method has no effect. Otherwise if there are pending events for the object then this watch key is immediately re-queued to the watch service. If there are no pending events then the watch key is put into the ready state and will remain in that state until an event is detected or the watch key is cancelled.                                                                             </p>   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the watch key is valid and has been reset, and <code>false</code> if the watch key could not be reset because it is no longer <a href="../../../java/nio/file/WatchKey.html#isValid--"><code>valid</code></a>                           </dd> </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cancel-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cancel--"/><a name="cancel--"/><ul class="blockList"><li class="blockList"><h4>cancel</h4><pre>void cancel()</pre><div class="block">Cancels the registration with the watch service. Upon return the watch key will be invalid. If the watch key is enqueued, waiting to be retrieved from the watch service, then it will remain in the queue until it is removed. Pending events, if any, remain pending and may be retrieved by invoking the <a href="../../../java/nio/file/WatchKey.html#pollEvents--"><code>pollEvents</code></a> method after the key is cancelled.<p> If this watch key has already been cancelled then invoking this method has no effect. Once cancelled, a watch key remains forever invalid.                       </p>                                                           </div></li></ul> <a end_ctx_id="method:cancel--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:watchable-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:watchable--"/><a name="watchable--"/><ul class="blockListLast"><li class="blockList"><h4>watchable</h4><pre><a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file">Watchable</a> watchable()</pre><div class="block">Returns the object for which this watch key was created. This method will continue to return the object even after the key is cancelled.<p> As the <code>WatchService</code> is intended to map directly on to the native file event notification facility (where available) then many of details on how registered objects are watched is highly implementation specific. When watching a directory for changes for example, and the directory is moved or renamed in the file system, there is no guarantee that the watch key will be cancelled and so the object returned by this method may no longer be a valid path to the directory.                                                                                </p>                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the object for which this watch key was created        </dd> </dl></li></ul> <a end_ctx_id="method:watchable--"/>  </td></tr></table></td></tr></table></diff></diffreport>