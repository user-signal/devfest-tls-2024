<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Path [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Path"/><ul class="blockList"><li class="blockList"><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt;, <a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt;, <a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file">Watchable</a>   </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">Path</span>
extends <a href="../../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt;, <a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt;, <a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file">Watchable</a></pre><div class="block">An object that may be used to locate a file in a file system. It will typically represent a system dependent file path.<p> A <code>Path</code> represents a path that is hierarchical and composed of a sequence of directory and file name elements separated by a special separator or delimiter. A <em>root component </em>, that identifies a file system hierarchy, may also be present. The name element that is <em>farthest</em> from the root of the directory hierarchy is the name of a file or directory. The other name elements are directory names. A <code>Path</code> can represent a root, a root and a sequence of names, or simply one or more name elements. A <code>Path</code> is considered to be an <i>empty path </i> if it consists solely of one name element that is empty. Accessing a file using an <i>empty path </i> is equivalent to accessing the default directory of the file system. <code>Path</code> defines the <a href="../../../java/nio/file/Path.html#getFileName--"><code>getFileName</code></a>, <a href="../../../java/nio/file/Path.html#getParent--"><code>getParent</code></a>, <a href="../../../java/nio/file/Path.html#getRoot--"><code>getRoot</code></a>, and <a href="../../../java/nio/file/Path.html#subpath-int-int-"><code>subpath</code></a> methods to access the path components or a subsequence of its name elements.                                                                                                                                               </p><p> In addition to accessing the components of a path, a <code>Path</code> also defines the <a href="../../../java/nio/file/Path.html#resolve-java.nio.file.Path-"><code>resolve</code></a> and <a href="../../../java/nio/file/Path.html#resolveSibling-java.nio.file.Path-"><code>resolveSibling</code></a> methods to combine paths. The <a href="../../../java/nio/file/Path.html#relativize-java.nio.file.Path-"><code>relativize</code></a> method that can be used to construct a relative path between two paths. Paths can be <a href="../../../java/nio/file/Path.html#compareTo-java.nio.file.Path-"><code>compared</code></a>, and tested against each other using the <a href="../../../java/nio/file/Path.html#startsWith-java.nio.file.Path-"><code>startsWith</code></a> and <a href="../../../java/nio/file/Path.html#endsWith-java.nio.file.Path-"><code>endsWith</code></a> methods.                                                   </p><p> This interface extends <a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file"><code>Watchable</code></a> interface so that a directory located by a path can be <a href="../../../java/nio/file/Path.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-"><code>registered</code></a> with a <a href="../../../java/nio/file/WatchService.html" title="interface in java.nio.file"><code>WatchService</code></a> and entries in the directory watched.                         </p><p> <b>WARNING:</b> This interface is only intended to be implemented by those developing custom file system implementations. Methods may be added to this interface in future releases.                          </p><h2>Accessing Files </h2><p> Paths may be used with the <a href="../../../java/nio/file/Files.html" title="class in java.nio.file"><code>Files</code></a> class to operate on files, directories, and other types of files. For example, suppose we want a <a href="../../../java/io/BufferedReader.html" title="class in java.io"><code>BufferedReader</code></a> to read text from a file "<code>access.log</code>". The file is located in a directory "<code>logs</code>" relative to the current working directory and is UTF-8 encoded.<pre>
     Path path = FileSystems.getDefault().getPath("logs", "access.log");
     BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
 </pre> <a name="interop"/>                                                   </p><h2>Interoperability</h2><p> Paths associated with the default <a href="../../../java/nio/file/spi/FileSystemProvider.html" title="class in java.nio.file.spi"><code>provider</code></a> are generally interoperable with the <a href="../../../java/io/File.html" title="class in java.io"><code>java.io.File</code></a> class. Paths created by other providers are unlikely to be interoperable with the abstract path names represented by <code>java.io.File</code>. The <a href="../../../java/io/File.html#toPath--"><code>toPath</code></a> method may be used to obtain a <code>Path</code> from the abstract path name represented by a <code>java.io.File</code> object. The resulting <code>Path</code> can be used to operate on the same file as the <code>java.io.File</code> object. In addition, the <a href="../../../java/nio/file/Path.html#toFile--"><code>toFile</code></a> method is useful to construct a <code>File</code> from the <code>String</code> representation of a <code>Path</code>.                                                                                     </p><h2>Concurrency</h2><p> Implementations of this interface are immutable and safe for use by multiple concurrent threads.              </p>                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/Paths.html" title="class in java.nio.file"><code>Paths</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Path"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFileSystem-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFileSystem--"/><a name="getFileSystem--"/><ul class="blockList"><li class="blockList"><h4>getFileSystem</h4><pre><a href="../../../java/nio/file/FileSystem.html" title="class in java.nio.file">FileSystem</a> getFileSystem()</pre><div class="block">Returns the file system that created this object.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the file system that created this object      </dd> </dl></li></ul> <a end_ctx_id="method:getFileSystem--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isAbsolute-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isAbsolute--"/><a name="isAbsolute--"/><ul class="blockList"><li class="blockList"><h4>isAbsolute</h4><pre>boolean isAbsolute()</pre><div class="block">Tells whether or not this path is absolute.<p> An absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file.                       </p>       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if, and only if, this path is absolute         </dd> </dl></li></ul> <a end_ctx_id="method:isAbsolute--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getRoot-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getRoot--"/><a name="getRoot--"/><ul class="blockList"><li class="blockList"><h4>getRoot</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> getRoot()</pre><div class="block">Returns the root component of this path as a <code>Path</code> object, or <code>null</code> if this path does not have a root component.                     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a path representing the root component of this path, or <code>null</code>          </dd> </dl></li></ul> <a end_ctx_id="method:getRoot--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFileName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFileName--"/><a name="getFileName--"/><ul class="blockList"><li class="blockList"><h4>getFileName</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> getFileName()</pre><div class="block">Returns the name of the file or directory denoted by this path as a <code>Path</code> object. The file name is the <em>farthest</em> element from the root in the directory hierarchy.                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a path representing the name of the file or directory, or <code>null</code> if this path has zero elements                 </dd> </dl></li></ul> <a end_ctx_id="method:getFileName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getParent-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getParent--"/><a name="getParent--"/><ul class="blockList"><li class="blockList"><h4>getParent</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> getParent()</pre><div class="block">Returns the <em>parent path </em>, or <code>null</code> if this path does not have a parent.<p> The parent of this path object consists of this path's root component, if any, and each element in the path except for the <em>farthest</em> from the root in the directory hierarchy. This method does not access the file system; the path or its parent may not exist. Furthermore, this method does not eliminate special names such as "." and ".." that may be used in some implementations. On UNIX for example, the parent of "<code>/a/b/c</code>" is "<code>/a/b</code>", and the parent of <code>"x/y/.</code>" is "<code>x/y</code>". This method may be used with the <a href="../../../java/nio/file/Path.html#normalize--"><code>normalize</code></a> method, to eliminate redundant names, for cases where <em>shell-like</em> navigation is required.                                                                                                        </p><p> If this path has one or more elements, and no root component, then this method is equivalent to evaluating the expression:                     </p><blockquote><pre>
 subpath(0, getNameCount()-1);
 </pre></blockquote>            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a path representing the path's parent     </dd> </dl></li></ul> <a end_ctx_id="method:getParent--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getNameCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getNameCount--"/><a name="getNameCount--"/><ul class="blockList"><li class="blockList"><h4>getNameCount</h4><pre>int getNameCount()</pre><div class="block">Returns the number of name elements in the path.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements in the path, or <code>0</code> if this path only represents a root component                </dd> </dl></li></ul> <a end_ctx_id="method:getNameCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getName-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getName-int-"/><a name="getName-int-"/><ul class="blockList"><li class="blockList"><h4>getName</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> getName(int index)</pre><div class="block">Returns a name element of this path as a <code>Path</code> object.<p> The <code>index</code> parameter is the index of the name element to return. The element that is <em>closest</em> to the root in the directory hierarchy has index <code>0</code>. The element that is <em>farthest</em> from the root has index <a href="../../../java/nio/file/Path.html#getNameCount--"><code>count</code></a><code>-1</code>.                                      </p>          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - the index of the element       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the name element  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>index</code> is negative, <code>index</code> is greater than or equal to the number of elements, or this path has zero name elements                        </dd>   </dl></li></ul> <a end_ctx_id="method:getName-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:subpath-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:subpath-int-int-"/><a name="subpath-int-int-"/><ul class="blockList"><li class="blockList"><h4>subpath</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> subpath(int beginIndex,
             int endIndex)</pre><div class="block">Returns a relative <code>Path</code> that is a subsequence of the name elements of this path.<p> The <code>beginIndex</code> and <code>endIndex</code> parameters specify the subsequence of name elements. The name that is <em>closest</em> to the root in the directory hierarchy has index <code>0</code>. The name that is <em>farthest</em> from the root has index <a href="../../../java/nio/file/Path.html#getNameCount--"><code>count</code></a><code>-1</code>. The returned <code>Path</code> object has the name elements that begin at <code>beginIndex</code> and extend to the element at index <code>endIndex-1</code>.                                                         </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>beginIndex</code> - the index of the first element, inclusive         </dd><dd> <code>endIndex</code> - the index of the last element, exclusive         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a new <code>Path</code> object that is a subsequence of the name elements in this <code>Path</code>              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>beginIndex</code> is negative, or greater than or equal to the number of elements. If <code>endIndex</code> is less than or equal to <code>beginIndex</code>, or larger than the number of elements.                                </dd>   </dl></li></ul> <a end_ctx_id="method:subpath-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:startsWith-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:startsWith-java.nio.file.Path-"/><a name="startsWith-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>startsWith</h4><pre>boolean startsWith(<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> other)</pre><div class="block">Tests if this path starts with the given path.<p> This path <em>starts</em> with the given path if this path's root component <em>starts</em> with the root component of the given path, and this path starts with the same name elements as the given path. If the given path has more name elements than this path then <code>false</code> is returned.                                                 </p><p> Whether or not the root component of this path starts with the root component of the given path is file system specific. If this path does not have a root component and the given path has a root component then this path does not start with the given path.                                                 </p><p> If the given path is associated with a different <code>FileSystem</code> to this path then <code>false</code> is returned.                 </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the given path     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this path starts with the given path; otherwise <code>false</code>           </dd>  </dl></li></ul> <a end_ctx_id="method:startsWith-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:startsWith-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:startsWith-java.lang.String-"/><a name="startsWith-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>startsWith</h4><pre>boolean startsWith(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> other)</pre><div class="block">Tests if this path starts with a <code>Path</code>, constructed by converting the given path string, in exactly the manner specified by the <a href="../../../java/nio/file/Path.html#startsWith-java.nio.file.Path-"><code>startsWith(Path)</code></a> method. On UNIX for example, the path "<code>foo/bar</code>" starts with "<code>foo</code>" and "<code>foo/bar</code>". It does not start with "<code>f</code>" or "<code>fo</code>".                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the given path string      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this path starts with the given path; otherwise <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/InvalidPathException.html" title="class in java.nio.file">InvalidPathException</a></code> - If the path string cannot be converted to a Path.            </dd>   </dl></li></ul> <a end_ctx_id="method:startsWith-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:endsWith-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:endsWith-java.nio.file.Path-"/><a name="endsWith-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>endsWith</h4><pre>boolean endsWith(<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> other)</pre><div class="block">Tests if this path ends with the given path.<p> If the given path has <em>N</em> elements, and no root component, and this path has <em>N</em> or more elements, then this path ends with the given path if the last <em>N</em> elements of each path, starting at the element farthest from the root, are equal.                                             </p><p> If the given path has a root component then this path ends with the given path if the root component of this path <em>ends with </em> the root component of the given path, and the corresponding elements of both paths are equal. Whether or not the root component of this path ends with the root component of the given path is file system specific. If this path does not have a root component and the given path has a root component then this path does not end with the given path.                                                                                         </p><p> If the given path is associated with a different <code>FileSystem</code> to this path then <code>false</code> is returned.                 </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the given path     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this path ends with the given path; otherwise <code>false</code>           </dd>  </dl></li></ul> <a end_ctx_id="method:endsWith-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:endsWith-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:endsWith-java.lang.String-"/><a name="endsWith-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>endsWith</h4><pre>boolean endsWith(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> other)</pre><div class="block">Tests if this path ends with a <code>Path</code>, constructed by converting the given path string, in exactly the manner specified by the <a href="../../../java/nio/file/Path.html#endsWith-java.nio.file.Path-"><code>endsWith(Path)</code></a> method. On UNIX for example, the path "<code>foo/bar</code>" ends with "<code>foo/bar</code>" and "<code>bar</code>". It does not end with "<code>r</code>" or "<code>/bar</code>". Note that trailing separators are not taken into account, and so invoking this method on the <code>Path</code>"<code>foo/bar</code>" with the <code>String</code> "<code>bar/</code>" returns <code>true</code>.                                                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the given path string      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this path ends with the given path; otherwise <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/InvalidPathException.html" title="class in java.nio.file">InvalidPathException</a></code> - If the path string cannot be converted to a Path.            </dd>   </dl></li></ul> <a end_ctx_id="method:endsWith-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:normalize-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:normalize--"/><a name="normalize--"/><ul class="blockList"><li class="blockList"><h4>normalize</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> normalize()</pre><div class="block">Returns a path that is this path with redundant name elements eliminated.<p> The precise definition of this method is implementation dependent but in general it derives from this path, a path that does not contain <em>redundant</em> name elements. In many file systems, the "<code>.</code>" and "<code>..</code>" are special names used to indicate the current directory and parent directory. In such file systems all occurrences of "<code>.</code>" are considered redundant. If a "<code>..</code>" is preceded by a non-"<code>..</code>" name then both names are considered redundant (the process to identify such names is repeated until it is no longer applicable).                                                                                      </p><p> This method does not access the file system; the path may not locate a file that exists. Eliminating "<code>..</code>" and a preceding name from a path may result in the path that locates a different file than the original path. This can arise when the preceding name is a symbolic link.                                                   </p>           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting path or this path if it does not contain redundant name elements; an empty path is returned if this path does have a root component and all name elements are redundant                                </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/Path.html#getParent--"><code>getParent()</code></a>, <a href="../../../java/nio/file/Path.html#toRealPath-java.nio.file.LinkOption...-"><code>toRealPath(java.nio.file.LinkOption...)</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:normalize--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolve-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolve-java.nio.file.Path-"/><a name="resolve-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>resolve</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> resolve(<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> other)</pre><div class="block">Resolve the given path against this path.<p> If the <code>other</code> parameter is an <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a> path then this method trivially returns <code>other</code>. If <code>other</code> is an <i>empty path </i> then this method trivially returns this path. Otherwise this method considers this path to be a directory and resolves the given path against this path. In the simplest case, the given path does not have a <a href="../../../java/nio/file/Path.html#getRoot--"><code>root</code></a> component, in which case this method <em>joins</em> the given path to this path and returns a resulting path that <a href="../../../java/nio/file/Path.html#endsWith-java.nio.file.Path-"><code>ends</code></a> with the given path. Where the given path has a root component then resolution is highly implementation dependent and therefore unspecified.                                                                                                 </p>      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the path to resolve against this path         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting path  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/Path.html#relativize-java.nio.file.Path-"><code>relativize(java.nio.file.Path)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:resolve-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolve-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolve-java.lang.String-"/><a name="resolve-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>resolve</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> resolve(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> other)</pre><div class="block">Converts a given path string to a <code>Path</code> and resolves it against this <code>Path</code> in exactly the manner specified by the <a href="../../../java/nio/file/Path.html#resolve-java.nio.file.Path-"><code>resolve</code></a> method. For example, suppose that the name separator is "<code>/</code>" and a path represents "<code>foo/bar</code>", then invoking this method with the path string "<code>gus</code>" will result in the <code>Path</code> "<code>foo/bar/gus</code>".                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the path string to resolve against this path          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting path  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/InvalidPathException.html" title="class in java.nio.file">InvalidPathException</a></code> - if the path string cannot be converted to a Path.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/FileSystem.html#getPath-java.lang.String-java.lang.String...-"><code>FileSystem.getPath(java.lang.String, java.lang.String...) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:resolve-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolveSibling-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolveSibling-java.nio.file.Path-"/><a name="resolveSibling-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>resolveSibling</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> resolveSibling(<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> other)</pre><div class="block">Resolves the given path against this path's <a href="../../../java/nio/file/Path.html#getParent--"><code>parent</code></a> path. This is useful where a file name needs to be <i>replaced</i> with another file name. For example, suppose that the name separator is "<code>/</code>" and a path represents "<code>dir1/dir2/foo</code>", then invoking this method with the <code>Path</code> "<code>bar</code>" will result in the <code>Path</code> "<code>dir1/dir2/bar</code>". If this path does not have a parent path, or <code>other</code> is <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a>, then this method returns <code>other</code>. If <code>other</code> is an empty path then this method returns this path's parent, or where this path doesn't have a parent, the empty path.                                                                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the path to resolve against this path's parent          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting path  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/Path.html#resolve-java.nio.file.Path-"><code>resolve(Path)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:resolveSibling-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:resolveSibling-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:resolveSibling-java.lang.String-"/><a name="resolveSibling-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>resolveSibling</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> resolveSibling(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> other)</pre><div class="block">Converts a given path string to a <code>Path</code> and resolves it against this path's <a href="../../../java/nio/file/Path.html#getParent--"><code>parent</code></a> path in exactly the manner specified by the <a href="../../../java/nio/file/Path.html#resolveSibling-java.nio.file.Path-"><code>resolveSibling</code></a> method.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the path string to resolve against this path's parent           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting path  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/nio/file/InvalidPathException.html" title="class in java.nio.file">InvalidPathException</a></code> - if the path string cannot be converted to a Path.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/nio/file/FileSystem.html#getPath-java.lang.String-java.lang.String...-"><code>FileSystem.getPath(java.lang.String, java.lang.String...) </code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:resolveSibling-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:relativize-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:relativize-java.nio.file.Path-"/><a name="relativize-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>relativize</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> relativize(<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> other)</pre><div class="block">Constructs a relative path between this path and a given path.<p> Relativization is the inverse of <a href="../../../java/nio/file/Path.html#resolve-java.nio.file.Path-"><code>resolution</code></a>. This method attempts to construct a <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>relative</code></a> path that when <a href="../../../java/nio/file/Path.html#resolve-java.nio.file.Path-"><code>resolved</code></a> against this path, yields a path that locates the same file as the given path. For example, on UNIX, if this path is <code>"/a/b"</code> and the given path is <code>"/a/b/c/d"</code> then the resulting relative path would be <code>"c/d"</code>. Where this path and the given path do not have a <a href="../../../java/nio/file/Path.html#getRoot--"><code>root</code></a> component, then a relative path can be constructed. A relative path cannot be constructed if only one of the paths have a root component. Where both paths have a root component then it is implementation dependent if a relative path can be constructed. If this path and the given path are <a href="../../../java/nio/file/Path.html#equals-java.lang.Object-"><code>equal</code></a> then an <i>empty path </i> is returned.                                                                                                                            </p><p> For any two <a href="../../../java/nio/file/Path.html#normalize--"><code>normalized</code></a> paths <i>p</i> and <i>q</i>, where <i>q</i> does not have a root component,                </p><blockquote> <i>p</i><tt>.relativize(</tt><i>p</i><tt>.resolve(</tt><i>q</i><tt>)).equals(</tt><i>q</i><tt>)</tt> </blockquote><p> When symbolic links are supported, then whether the resulting path, when resolved against this path, yields a path that can be used to locate the <a href="../../../java/nio/file/Files.html#isSameFile-java.nio.file.Path-java.nio.file.Path-"><code>same</code></a> file as <code>other</code> is implementation dependent. For example, if this path is <code>"/a/b"</code> and the given path is <code>"/a/x"</code> then the resulting relative path may be <code>"../x"</code>. If <code>"b"</code> is a symbolic link then is implementation dependent if <code>"a/b/../x"</code> would locate the same file as <code>"/a/x"</code>.                                                                        </p>          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the path to relativize against this path         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resulting relative path, or an empty path if both paths are equal            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>other</code> is not a <code>Path</code> that can be relativized against this path               </dd>   </dl></li></ul> <a end_ctx_id="method:relativize-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toUri-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toUri--"/><a name="toUri--"/><ul class="blockList"><li class="blockList"><h4>toUri</h4><pre><a href="../../../java/net/URI.html" title="class in java.net">URI</a> toUri()</pre><div class="block">Returns a URI to represent this path.<p> This method constructs an absolute <a href="../../../java/net/URI.html" title="class in java.net"><code>URI</code></a> with a <a href="../../../java/net/URI.html#getScheme--"><code>scheme</code></a> equal to the URI scheme that identifies the provider. The exact form of the scheme specific part is highly provider dependent.                              </p><p> In the case of the default provider, the URI is hierarchical with a <a href="../../../java/net/URI.html#getPath--"><code>path</code></a> component that is absolute. The query and fragment components are undefined. Whether the authority component is defined or not is implementation dependent. There is no guarantee that the <code>URI</code> may be used to construct a <a href="../../../java/io/File.html" title="class in java.io"><code>java.io.File</code></a>. In particular, if this path represents a Universal Naming Convention (UNC) path, then the UNC server name may be encoded in the authority component of the resulting URI. In the case of the default provider, and the file exists, and it can be determined that the file is a directory, then the resulting <code>URI</code> will end with a slash.                                                                                                             </p><p> The default provider provides a similar <em>round-trip</em> guarantee to the <a href="../../../java/io/File.html" title="class in java.io"><code>File</code></a> class. For a given <code>Path</code><i>p</i> it is guaranteed that                    </p><blockquote> <tt><a href="../../../java/nio/file/Paths.html#get-java.net.URI-"><code>Paths.get</code></a>(</tt><i>p</i><tt>.toUri()).equals(</tt><i>p</i><tt>.<a href="../../../java/nio/file/Path.html#toAbsolutePath--"><code>toAbsolutePath</code></a>())</tt> </blockquote> so long as the original <code>Path</code>, the <code>URI</code>, and the new <code>Path</code> are all created in (possibly different invocations of) the same Java virtual machine. Whether other providers make any guarantees is provider specific and therefore unspecified.<p> When a file system is constructed to access the contents of a file as a file system then it is highly implementation specific if the returned URI represents the given path in the file system or it represents a <em>compound</em> URI that encodes the URI of the enclosing file system. A format for compound URIs is not defined in this release; such a scheme may be added in a future release.                                                                       </p>                                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the URI representing this path    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOError.html" title="class in java.io">IOError</a></code> - if an I/O error occurs obtaining the absolute path, or where a file system is constructed to access the contents of a file as a file system, and the URI of the enclosing file system cannot be obtained                                        </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/nio/file/Path.html#toAbsolutePath--"><code>toAbsolutePath</code></a> method throws a security exception.                      </dd>  </dl></li></ul> <a end_ctx_id="method:toUri--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toAbsolutePath-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toAbsolutePath--"/><a name="toAbsolutePath--"/><ul class="blockList"><li class="blockList"><h4>toAbsolutePath</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> toAbsolutePath()</pre><div class="block">Returns a <code>Path</code> object representing the absolute path of this path.<p> If this path is already <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a> then this method simply returns this path. Otherwise, this method resolves the path in an implementation dependent manner, typically by resolving the path against a file system default directory. Depending on the implementation, this method may throw an I/O error if the file system is not accessible.                                                     </p>          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Path</code> object representing the absolute path      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOError.html" title="class in java.io">IOError</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, a security manager is installed, and this path is not absolute, then the security manager's <a href="../../../java/lang/SecurityManager.html#checkPropertyAccess-java.lang.String-"><code>checkPropertyAccess</code></a> method is invoked to check access to the system property <code>user.dir</code>                                    </dd>  </dl></li></ul> <a end_ctx_id="method:toAbsolutePath--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toRealPath-java.nio.file.LinkOption...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toRealPath-java.nio.file.LinkOption...-"/><a name="toRealPath-java.nio.file.LinkOption...-"/><ul class="blockList"><li class="blockList"><h4>toRealPath</h4><pre><a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> toRealPath(<a href="../../../java/nio/file/LinkOption.html" title="enum in java.nio.file">LinkOption</a>... options)
         throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Returns the <em>real</em> path of an existing file.<p> The precise definition of this method is implementation dependent but in general it derives from this path, an <a href="../../../java/nio/file/Path.html#isAbsolute--"><code>absolute</code></a> path that locates the <a href="../../../java/nio/file/Files.html#isSameFile-java.nio.file.Path-java.nio.file.Path-"><code>same</code></a> file as this path, but with name elements that represent the actual name of the directories and the file. For example, where filename comparisons on a file system are case insensitive then the name elements represent the names in their actual case. Additionally, the resulting path has redundant name elements removed.                                                                           </p><p> If this path is relative then its absolute path is first obtained, as if by invoking the <a href="../../../java/nio/file/Path.html#toAbsolutePath--"><code>toAbsolutePath</code></a> method.                   </p><p> The <code>options</code> array may be used to indicate how symbolic links are handled. By default, symbolic links are resolved to their final target. If the option <a href="../../../java/nio/file/LinkOption.html#NOFOLLOW_LINKS"><code>NOFOLLOW_LINKS</code></a> is present then this method does not resolve symbolic links. Some implementations allow special names such as "<code>..</code>" to refer to the parent directory. When deriving the <em>real path </em>, and a "<code>..</code>" (or equivalent) is preceded by a non-"<code>..</code>" name then an implementation will typically cause both names to be removed. When not resolving symbolic links and the preceding name is a symbolic link then the names are only removed if it guaranteed that the resulting path will locate the same file as this path.                                                                                                               </p>       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>options</code> - options indicating how symbolic links are handled         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an absolute path represent the <em>real</em> path of the file located by this object             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if the file does not exist or an I/O error occurs             </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, its <a href="../../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>checkRead</code></a> method is invoked to check read access to the file, and where this path is not absolute, its <a href="../../../java/lang/SecurityManager.html#checkPropertyAccess-java.lang.String-"><code>checkPropertyAccess</code></a> method is invoked to check access to the system property <code>user.dir</code>                                               </dd>   </dl></li></ul> <a end_ctx_id="method:toRealPath-java.nio.file.LinkOption...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toFile-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toFile--"/><a name="toFile--"/><ul class="blockList"><li class="blockList"><h4>toFile</h4><pre><a href="../../../java/io/File.html" title="class in java.io">File</a> toFile()</pre><div class="block">Returns a <a href="../../../java/io/File.html" title="class in java.io"><code>File</code></a> object representing this path. Where this <code>Path</code> is associated with the default provider, then this method is equivalent to returning a <code>File</code> object constructed with the <code>String</code> representation of this path.<p> If this path was created by invoking the <code>File</code><a href="../../../java/io/File.html#toPath--"><code>toPath</code></a> method then there is no guarantee that the <code>File</code> object returned by this method is <a href="../../../java/nio/file/Path.html#equals-java.lang.Object-"><code>equal</code></a> to the original <code>File</code>.                             </p>                                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>File</code> object representing this path     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if this <code>Path</code> is not associated with the default provider            </dd>  </dl></li></ul> <a end_ctx_id="method:toFile--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-"/><a name="register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-"/><ul class="blockList"><li class="blockList"><h4>register</h4><pre><a href="../../../java/nio/file/WatchKey.html" title="interface in java.nio.file">WatchKey</a> register(<a href="../../../java/nio/file/WatchService.html" title="interface in java.nio.file">WatchService</a> watcher,
                  <a href="../../../java/nio/file/WatchEvent.Kind.html" title="interface in java.nio.file">WatchEvent.Kind</a>&lt;?&gt;[] events,
                  <a href="../../../java/nio/file/WatchEvent.Modifier.html" title="interface in java.nio.file">WatchEvent.Modifier</a>... modifiers)
           throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Registers the file located by this path with a watch service.<p> In this release, this path locates a directory that exists. The directory is registered with the watch service so that entries in the directory can be watched. The <code>events</code> parameter is the events to register and may contain the following events:<ul><li> <a href="../../../java/nio/file/StandardWatchEventKinds.html#ENTRY_CREATE"><code>ENTRY_CREATE</code></a> - entry created or moved into the directory         </li><li> <a href="../../../java/nio/file/StandardWatchEventKinds.html#ENTRY_DELETE"><code>ENTRY_DELETE</code></a> - entry deleted or moved out of the directory          </li><li> <a href="../../../java/nio/file/StandardWatchEventKinds.html#ENTRY_MODIFY"><code>ENTRY_MODIFY</code></a> - entry in directory was modified       </li></ul>                                         </p><p> The <a href="../../../java/nio/file/WatchEvent.html#context--"><code>context</code></a> for these events is the relative path between the directory located by this path, and the path that locates the directory entry that is created, deleted, or modified.                              </p><p> The set of events may include additional implementation specific event that are not defined by the enum <a href="../../../java/nio/file/StandardWatchEventKinds.html" title="class in java.nio.file"><code>StandardWatchEventKinds</code></a>                  </p><p> The <code>modifiers</code> parameter specifies <em>modifiers</em> that qualify how the directory is registered. This release does not define any <em>standard</em> modifiers. It may contain implementation specific modifiers.                          </p><p> Where a file is registered with a watch service by means of a symbolic link then it is implementation specific if the watch continues to depend on the existence of the symbolic link after it is registered.                                     </p>          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/nio/file/Watchable.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-">register</a></code> in interface <code><a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file">Watchable</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>watcher</code> - the watch service to which this object is to be registered             </dd><dd> <code>events</code> - the events for which this object should be registered           </dd><dd> <code>modifiers</code> - the modifiers, if any, that modify how the object is registered             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a key representing the registration of this object with the given watch service            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if unsupported events or modifiers are specified         </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if an invalid combination of events or modifiers is specified            </dd><dd> <code><a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file">ClosedWatchServiceException</a></code> - if the watch service is closed        </dd><dd> <code><a href="../../../java/nio/file/NotDirectoryException.html" title="class in java.nio.file">NotDirectoryException</a></code> - if the file is registered to watch the entries in a directory and the file is not a directory <i>(optional specific exception)  </i>                      </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>checkRead</code></a> method is invoked to check read access to the file.                           </dd>    </dl></li></ul> <a end_ctx_id="method:register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind...-"/><a name="register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind...-"/><ul class="blockList"><li class="blockList"><h4>register</h4><pre><a href="../../../java/nio/file/WatchKey.html" title="interface in java.nio.file">WatchKey</a> register(<a href="../../../java/nio/file/WatchService.html" title="interface in java.nio.file">WatchService</a> watcher,
                  <a href="../../../java/nio/file/WatchEvent.Kind.html" title="interface in java.nio.file">WatchEvent.Kind</a>&lt;?&gt;... events)
           throws <a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Registers the file located by this path with a watch service.<p> An invocation of this method behaves in exactly the same way as the invocation<pre>
     watchable.<a href="../../../java/nio/file/Path.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-"><code>register</code></a>(watcher, events, new WatchEvent.Modifier[0]);
 </pre>              </p><p> <b>Usage Example: </b> Suppose we wish to register a directory for entry create, delete, and modify events:<pre>
     Path dir = ...
     WatchService watcher = ...

     WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
 </pre>               </p>          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/nio/file/Watchable.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind...-">register</a></code> in interface <code><a href="../../../java/nio/file/Watchable.html" title="interface in java.nio.file">Watchable</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>watcher</code> - The watch service to which this object is to be registered             </dd><dd> <code>events</code> - The events for which this object should be registered           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A key representing the registration of this object with the given watch service            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - If unsupported events are specified       </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - If an invalid combination of events is specified          </dd><dd> <code><a href="../../../java/nio/file/ClosedWatchServiceException.html" title="class in java.nio.file">ClosedWatchServiceException</a></code> - If the watch service is closed        </dd><dd> <code><a href="../../../java/nio/file/NotDirectoryException.html" title="class in java.nio.file">NotDirectoryException</a></code> - If the file is registered to watch the entries in a directory and the file is not a directory <i>(optional specific exception)  </i>                      </dd><dd> <code><a href="../../../java/io/IOException.html" title="class in java.io">IOException</a></code> - If an I/O error occurs       </dd><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - In the case of the default provider, and a security manager is installed, the <a href="../../../java/lang/SecurityManager.html#checkRead-java.lang.String-"><code>checkRead</code></a> method is invoked to check read access to the file.                           </dd>    </dl></li></ul> <a end_ctx_id="method:register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre><a href="../../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt; iterator()</pre><div class="block">Returns an iterator over the name elements of this path.<p> The first element returned by the iterator represents the name element that is closest to the root in the directory hierarchy, the second element is the next closest, and so on. The last element returned is the name of the file or directory denoted by this path. The <a href="../../../java/nio/file/Path.html#getRoot--"><code>root</code></a> component, if present, is not returned by the iterator.                                                          </p>         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the name elements of this path.        </dd>  </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compareTo-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compareTo-java.nio.file.Path-"/><a name="compareTo-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>compareTo</h4><pre>int compareTo(<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> other)</pre><div class="block">Compares two abstract paths lexicographically. The ordering defined by this method is provider specific, and in the case of the default provider, platform specific. This method does not access the file system and neither file is required to exist.<p> This method may not be used to compare paths that are associated with different file system providers.                 </p>                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/lang/Comparable.html#compareTo-T-">compareTo</a></code> in interface <code><a href="../../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="../../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the path compared to this path.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>zero if the argument is <a href="../../../java/nio/file/Path.html#equals-java.lang.Object-"><code>equal</code></a> to this path, a value less than zero if this path is lexicographically less than the argument, or a value greater than zero if this path is lexicographically greater than the argument                                     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the paths are associated with different providers          </dd>    </dl></li></ul> <a end_ctx_id="method:compareTo-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>boolean equals(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> other)</pre><div class="block">Tests this path for equality with the given object.<p> If the given object is not a Path, or is a Path associated with a different <code>FileSystem</code>, then this method returns <code>false</code>.                      </p><p> Whether or not two path are equal depends on the file system implementation. In some cases the paths are compared without regard to case, and others are case sensitive. This method does not access the file system and the file is not required to exist. Where required, the <a href="../../../java/nio/file/Files.html#isSameFile-java.nio.file.Path-java.nio.file.Path-"><code>isSameFile</code></a> method may be used to check if two paths locate the same file.                                                              </p><p> This method satisfies the general contract of the <a href="../../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals</code></a> method.          </p>        </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the object to which this object is to be compared            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if, and only if, the given object is a <code>Path</code> that is identical to this <code>Path</code>                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>int hashCode()</pre><div class="block">Computes a hash code for this path.<p> The hash code is based upon the components of the path, and satisfies the general contract of the <a href="../../../java/lang/Object.html#hashCode--"><code>Object.hashCode</code></a> method.                    </p>      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the hash-code value for this path     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre><a href="../../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns the string representation of this path.<p> If this path was created by converting a path string using the <a href="../../../java/nio/file/FileSystem.html#getPath-java.lang.String-java.lang.String...-"><code>getPath</code></a> method then the path string returned by this method may differ from the original String used to create the path.                                 </p><p> The returned path string uses the default name <a href="../../../java/nio/file/FileSystem.html#getSeparator--"><code>separator</code></a> to separate names in the path.               </p>      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of this path     </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>