<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Base64.Decoder [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Base64.Decoder"/><ul class="blockList"><li class="blockList"><dl> <dt>Enclosing class: </dt><dd> <a href="../../java/util/Base64.html" title="class in java.util">Base64</a> </dd> </dl> <hr/> <br/><pre>public static class <span class="typeNameLabel">Base64.Decoder</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class implements a decoder for decoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.<p> The Base64 padding character <code>'='</code> is accepted and interpreted as the end of the encoded byte data, but is not required. So if the final unit of the encoded byte data only has two or three Base64 characters (without the corresponding padding character(s) padded), they are decoded as if followed by padding character(s). If there is a padding character present in the final unit, the correct number of padding character(s) must be present, otherwise <code>IllegalArgumentException</code> ( <code>IOException</code> when reading from a Base64 stream) is thrown during decoding.                                                                                       </p><p> Instances of <a href="../../java/util/Base64.Decoder.html" title="class in java.util"><code>Base64.Decoder</code></a> class are safe for use by multiple concurrent threads.            </p><p> Unless otherwise noted, passing a <code>null</code> argument to a method of this class will cause a <a href="../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> to be thrown.                    </p>                     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Base64.Encoder.html" title="class in java.util"><code>Base64.Encoder</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Base64.Decoder"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decode-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decode-byte:A-"/><a name="decode-byte:A-"/><ul class="blockList"><li class="blockList"><h4>decode</h4><pre>public byte[] decode(byte[] src)</pre><div class="block">Decodes all bytes from the input byte array using the <a href="../../java/util/Base64.html" title="class in java.util"><code>Base64</code></a> encoding scheme, writing the results into a newly-allocated output byte array. The returned byte array is of the length of the resulting bytes.                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the byte array to decode       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A newly-allocated byte array containing the decoded bytes.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>src</code> is not in valid Base64 scheme          </dd>   </dl></li></ul> <a end_ctx_id="method:decode-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decode-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decode-java.lang.String-"/><a name="decode-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>decode</h4><pre>public byte[] decode(<a href="../../java/lang/String.html" title="class in java.lang">String</a> src)</pre><div class="block">Decodes a Base64 encoded String into a newly-allocated byte array using the <a href="../../java/util/Base64.html" title="class in java.util"><code>Base64</code></a> encoding scheme.<p> An invocation of this method has exactly the same effect as invoking <code>decode(src.getBytes(StandardCharsets.ISO_8859_1))</code>             </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the string to decode      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A newly-allocated byte array containing the decoded bytes.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>src</code> is not in valid Base64 scheme          </dd>   </dl></li></ul> <a end_ctx_id="method:decode-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decode-byte:A-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decode-byte:A-byte:A-"/><a name="decode-byte:A-byte:A-"/><ul class="blockList"><li class="blockList"><h4>decode</h4><pre>public int decode(byte[] src,
                  byte[] dst)</pre><div class="block">Decodes all bytes from the input byte array using the <a href="../../java/util/Base64.html" title="class in java.util"><code>Base64</code></a> encoding scheme, writing the results into the given output byte array, starting at offset 0.<p> It is the responsibility of the invoker of this method to make sure the output byte array <code>dst</code> has enough space for decoding all bytes from the input byte array. No bytes will be be written to the output byte array if the output byte array is not big enough.                                                  </p><p> If the input byte array is not in valid Base64 encoding scheme then some bytes may have been written to the output byte array before IllegalargumentException is thrown.                            </p>                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>src</code> - the byte array to decode       </dd><dd> <code>dst</code> - the output byte array      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The number of bytes written to the output byte array         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>src</code> is not in valid Base64 scheme, or <code>dst</code> does not have enough space for decoding all input bytes.                      </dd>   </dl></li></ul> <a end_ctx_id="method:decode-byte:A-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:decode-java.nio.ByteBuffer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:decode-java.nio.ByteBuffer-"/><a name="decode-java.nio.ByteBuffer-"/><ul class="blockList"><li class="blockList"><h4>decode</h4><pre>public <a href="../../java/nio/ByteBuffer.html" title="class in java.nio">ByteBuffer</a> decode(<a href="../../java/nio/ByteBuffer.html" title="class in java.nio">ByteBuffer</a> buffer)</pre><div class="block">Decodes all bytes from the input byte buffer using the <a href="../../java/util/Base64.html" title="class in java.util"><code>Base64</code></a> encoding scheme, writing the results into a newly-allocated ByteBuffer.<p> Upon return, the source buffer's position will be updated to its limit; its limit will not have been changed. The returned output buffer's position will be zero and its limit will be the number of resulting decoded bytes                                      </p><p> <code>IllegalArgumentException</code> is thrown if the input buffer is not in valid Base64 encoding scheme. The position of the input buffer will not be advanced in this case.                           </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>buffer</code> - the ByteBuffer to decode      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A newly-allocated byte buffer containing the decoded bytes       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>src</code> is not in valid Base64 scheme.          </dd>   </dl></li></ul> <a end_ctx_id="method:decode-java.nio.ByteBuffer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:wrap-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:wrap-java.io.InputStream-"/><a name="wrap-java.io.InputStream-"/><ul class="blockListLast"><li class="blockList"><h4>wrap</h4><pre>public <a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> wrap(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> is)</pre><div class="block">Returns an input stream for decoding <a href="../../java/util/Base64.html" title="class in java.util"><code>Base64</code></a> encoded byte stream.<p> The <code>read</code> methods of the returned <code>InputStream</code> will throw <code>IOException</code> when reading bytes that cannot be decoded.                 </p><p> Closing the returned input stream will close the underlying input stream.           </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>is</code> - the input stream     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the input stream for decoding the specified Base64 encoded byte stream          </dd>  </dl></li></ul> <a end_ctx_id="method:wrap-java.io.InputStream-"/>  </td></tr></table></td></tr></table></diff></diffreport>