<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Formattable [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Formattable"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public interface <span class="typeNameLabel">Formattable</span></pre><div class="block">The <tt>Formattable</tt> interface must be implemented by any class that needs to perform custom formatting using the <tt>'s'</tt> conversion specifier of <a href="../../java/util/Formatter.html" title="class in java.util"><code>Formatter</code></a>. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: <code>import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f &amp; ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 &amp;&amp; precision &lt; 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() &lt; precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len &lt; width) for (int i = 0; i &lt; width - len; i++) if ((f &amp; LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format("%s - %s", symbol, companyName); } }                                                                                                                                                                        </code><p> When used in conjunction with the <a href="../../java/util/Formatter.html" title="class in java.util"><code>Formatter</code></a>, the above class produces the following output for various format strings. <code>Formatter fmt = new Formatter(); StockName sn = new StockName("HUGE", "Huge Fruit, Inc.", "Fruit Titanesque, Inc."); fmt.format("%s", sn); // -&gt; "Huge Fruit, Inc." fmt.format("%s", sn.toString()); // -&gt; "HUGE - Huge Fruit, Inc." fmt.format("%#s", sn); // -&gt; "HUGE" fmt.format("%-10.8s", sn); // -&gt; "HUGE " fmt.format("%.12s", sn); // -&gt; "Huge Fruit,*" fmt.format(Locale.FRANCE, "%25s", sn); // -&gt; " Fruit Titanesque, Inc."                                                           </code>                   </p><p> Formattables are not necessarily safe for multithreaded access. Thread safety is optional and may be enforced by classes that extend and implement this interface.                        </p><p> Unless otherwise specified, passing a <tt>null</tt> argument to any method in this interface will cause a <a href="../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> to be thrown.                    </p>                                                   </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Formattable"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:formatTo-java.util.Formatter-int-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:formatTo-java.util.Formatter-int-int-int-"/><a name="formatTo-java.util.Formatter-int-int-int-"/><ul class="blockListLast"><li class="blockList"><h4>formatTo</h4><pre>void formatTo(<a href="../../java/util/Formatter.html" title="class in java.util">Formatter</a> formatter,
              int flags,
              int width,
              int precision)</pre><div class="block">Formats the object using the provided <a href="../../java/util/Formatter.html" title="class in java.util"><code>formatter</code></a>.      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>formatter</code> - The <a href="../../java/util/Formatter.html" title="class in java.util"><code>formatter</code></a>. Implementing classes may call <a href="../../java/util/Formatter.html#out--"><code>formatter.out()</code></a> or <a href="../../java/util/Formatter.html#locale--"><code>formatter.locale()</code></a> to obtain the <a href="../../java/lang/Appendable.html" title="interface in java.lang"><code>Appendable</code></a> or <a href="../../java/util/Locale.html" title="class in java.util"><code>Locale</code></a> used by this <tt>formatter</tt> respectively.                      </dd><dd> <code>flags</code> - The flags modify the output format. The value is interpreted as a bitmask. Any combination of the following flags may be set: <a href="../../java/util/FormattableFlags.html#LEFT_JUSTIFY"><code>FormattableFlags.LEFT_JUSTIFY</code></a>, <a href="../../java/util/FormattableFlags.html#UPPERCASE"><code>FormattableFlags.UPPERCASE</code></a>, and <a href="../../java/util/FormattableFlags.html#ALTERNATE"><code>FormattableFlags.ALTERNATE</code></a>. If no flags are set, the default formatting of the implementing class will apply.                                          </dd><dd> <code>width</code> - The minimum number of characters to be written to the output. If the length of the converted value is less than the <tt>width</tt> then the output will be padded by <tt>'  '</tt> until the total number of characters equals width. The padding is at the beginning by default. If the <a href="../../java/util/FormattableFlags.html#LEFT_JUSTIFY"><code>FormattableFlags.LEFT_JUSTIFY</code></a> flag is set then the padding will be at the end. If <tt>width</tt> is <tt>-1</tt> then there is no minimum.                                                                        </dd><dd> <code>precision</code> - The maximum number of characters to be written to the output. The precision is applied before the width, thus the output will be truncated to <tt>precision</tt> characters even if the <tt>width</tt> is greater than the <tt>precision</tt>. If <tt>precision</tt> is <tt>-1</tt> then there is no explicit limit on the number of characters.                                                     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/IllegalFormatException.html" title="class in java.util">IllegalFormatException</a></code> - If any of the parameters are invalid. For specification of all possible formatting errors, see the <a href="../util/Formatter.html#detail">Details</a> section of the formatter class specification.                         </dd>  </dl></li></ul> <a end_ctx_id="method:formatTo-java.util.Formatter-int-int-int-"/>  </td></tr></table></td></tr></table></diff></diffreport>