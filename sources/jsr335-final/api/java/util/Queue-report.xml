<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Queue [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Queue"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements held in this collection          </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;  </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/concurrent/BlockingDeque.html" title="interface in java.util.concurrent">BlockingDeque</a>&lt;E&gt;, <a href="../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;E&gt;, <a href="../../java/util/Deque.html" title="interface in java.util">Deque</a>&lt;E&gt;, <a href="../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;E&gt;    </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../java/util/AbstractQueue.html" title="class in java.util">AbstractQueue</a>, <a href="../../java/util/concurrent/ArrayBlockingQueue.html" title="class in java.util.concurrent">ArrayBlockingQueue</a>, <a href="../../java/util/ArrayDeque.html" title="class in java.util">ArrayDeque</a>, <a href="../../java/util/concurrent/ConcurrentLinkedDeque.html" title="class in java.util.concurrent">ConcurrentLinkedDeque</a>, <a href="../../java/util/concurrent/ConcurrentLinkedQueue.html" title="class in java.util.concurrent">ConcurrentLinkedQueue</a>, <a href="../../java/util/concurrent/DelayQueue.html" title="class in java.util.concurrent">DelayQueue</a>, <a href="../../java/util/concurrent/LinkedBlockingDeque.html" title="class in java.util.concurrent">LinkedBlockingDeque</a>, <a href="../../java/util/concurrent/LinkedBlockingQueue.html" title="class in java.util.concurrent">LinkedBlockingQueue</a>, <a href="../../java/util/LinkedList.html" title="class in java.util">LinkedList</a>, <a href="../../java/util/concurrent/LinkedTransferQueue.html" title="class in java.util.concurrent">LinkedTransferQueue</a>, <a href="../../java/util/concurrent/PriorityBlockingQueue.html" title="class in java.util.concurrent">PriorityBlockingQueue</a>, <a href="../../java/util/PriorityQueue.html" title="class in java.util">PriorityQueue</a>, <a href="../../java/util/concurrent/SynchronousQueue.html" title="class in java.util.concurrent">SynchronousQueue</a>             </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">Queue&lt;E&gt;</span>
extends <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;</pre><div class="block">A collection designed for holding elements prior to processing. Besides basic <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Queue</code> implementations; in most implementations, insert operations cannot fail.<table border="" cellpadding="3" cellspacing="1"> <caption>Summary of Queue methods   </caption><tbody><tr><td/><td align="CENTER"><em>Throws exception </em></td><td align="CENTER"><em>Returns special value  </em></td></tr><tr><td><b>Insert</b></td><td><a href="../../java/util/Queue.html#add-E-"><code>add(e)</code></a></td><td><a href="../../java/util/Queue.html#offer-E-"><code>offer(e)</code></a></td></tr><tr><td><b>Remove</b></td><td><a href="../../java/util/Queue.html#remove--"><code>remove()</code></a></td><td><a href="../../java/util/Queue.html#poll--"><code>poll()</code></a></td></tr><tr><td><b>Examine</b></td><td><a href="../../java/util/Queue.html#element--"><code>element()</code></a></td><td><a href="../../java/util/Queue.html#peek--"><code>peek()</code></a></td></tr></tbody> </table><p>Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the <em>head</em> of the queue is that element which would be removed by a call to <a href="../../java/util/Queue.html#remove--"><code>remove()</code></a> or <a href="../../java/util/Queue.html#poll--"><code>poll()</code></a>. In a FIFO queue, all new elements are inserted at the <em>tail</em> of the queue. Other kinds of queues may use different placement rules. Every <code>Queue</code> implementation must specify its ordering properties.                                                                                                 </p><p>The <a href="../../java/util/Queue.html#offer-E-"><code>offer</code></a> method inserts an element if possible, otherwise returning <code>false</code>. This differs from the <a href="../../java/util/Collection.html#add-E-"><code>Collection.add</code></a> method, which can fail to add an element only by throwing an unchecked exception. The <code>offer</code> method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or "bounded") queues.                                                    </p><p>The <a href="../../java/util/Queue.html#remove--"><code>remove()</code></a> and <a href="../../java/util/Queue.html#poll--"><code>poll()</code></a> methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation. The <code>remove()</code> and <code>poll()</code> methods differ only in their behavior when the queue is empty: the <code>remove()</code> method throws an exception, while the <code>poll()</code> method returns <code>null</code>.                                                             </p><p>The <a href="../../java/util/Queue.html#element--"><code>element()</code></a> and <a href="../../java/util/Queue.html#peek--"><code>peek()</code></a> methods return, but do not remove, the head of the queue.              </p><p>The <code>Queue</code> interface does not define the <i>blocking queue methods  </i>, which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the <a href="../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent"><code>BlockingQueue</code></a> interface, which extends this interface.                                     </p><p> <code>Queue</code> implementations generally do not allow insertion of <code>null</code> elements, although some implementations, such as <a href="../../java/util/LinkedList.html" title="class in java.util"><code>LinkedList</code></a>, do not prohibit insertion of <code>null</code>. Even in the implementations that permit it, <code>null</code> should not be inserted into a <code>Queue</code>, as <code>null</code> is also used as a special return value by the <code>poll</code> method to indicate that the queue contains no elements.                                                           </p><p> <code>Queue</code> implementations generally do not define element-based versions of methods <code>equals</code> and <code>hashCode</code> but instead inherit the identity based versions from class <code>Object</code>, because element-based equality is not always well-defined for queues with the same elements but different ordering properties.                                        </p><p>This interface is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                                                         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/LinkedList.html" title="class in java.util"><code>LinkedList</code></a>, <a href="../../java/util/PriorityQueue.html" title="class in java.util"><code>PriorityQueue</code></a>, <a href="../../java/util/concurrent/LinkedBlockingQueue.html" title="class in java.util.concurrent"><code>LinkedBlockingQueue</code></a>, <a href="../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent"><code>BlockingQueue</code></a>, <a href="../../java/util/concurrent/ArrayBlockingQueue.html" title="class in java.util.concurrent"><code>ArrayBlockingQueue</code></a>, <a href="../../java/util/concurrent/LinkedBlockingQueue.html" title="class in java.util.concurrent"><code>LinkedBlockingQueue</code></a>, <a href="../../java/util/concurrent/PriorityBlockingQueue.html" title="class in java.util.concurrent"><code>PriorityBlockingQueue</code></a>        </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Queue"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>boolean add(<a href="../../java/util/Queue.html" title="type parameter in Queue">E</a> e)</pre><div class="block">Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning <code>true</code> upon success and throwing an <code>IllegalStateException</code> if no space is currently available.                                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Queue.html" title="type parameter in Queue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../java/util/Collection.html#add-E-"><code>Collection.add(E)</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to capacity restrictions               </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this queue does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of this element prevents it from being added to this queue                </dd>    </dl></li></ul> <a name="offer-java.lang.Object-"/><a end_ctx_id="method:add-E-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offer-E-"/><a name="offer-E-"/><ul class="blockList"><li class="blockList"><h4>offer</h4><pre>boolean offer(<a href="../../java/util/Queue.html" title="type parameter in Queue">E</a> e)</pre><div class="block">Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted queue, this method is generally preferable to <a href="../../java/util/Queue.html#add-E-"><code>add(E)</code></a>, which can fail to insert an element only by throwing an exception.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was added to this queue, else <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this queue does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of this element prevents it from being added to this queue                </dd>   </dl></li></ul> <a end_ctx_id="method:offer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove--"/><a name="remove--"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre><a href="../../java/util/Queue.html" title="type parameter in Queue">E</a> remove()</pre><div class="block">Retrieves and removes the head of this queue. This method differs from <a href="../../java/util/Queue.html#poll--"><code>poll</code></a> only in that it throws an exception if this queue is empty.                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this queue is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:remove--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll--"/><a name="poll--"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre><a href="../../java/util/Queue.html" title="type parameter in Queue">E</a> poll()</pre><div class="block">Retrieves and removes the head of this queue, or returns <code>null</code> if this queue is empty.               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue, or <code>null</code> if this queue is empty           </dd> </dl></li></ul> <a end_ctx_id="method:poll--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:element-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:element--"/><a name="element--"/><ul class="blockList"><li class="blockList"><h4>element</h4><pre><a href="../../java/util/Queue.html" title="type parameter in Queue">E</a> element()</pre><div class="block">Retrieves, but does not remove, the head of this queue. This method differs from <a href="../../java/util/Queue.html#peek--"><code>peek</code></a> only in that it throws an exception if this queue is empty.                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this queue is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:element--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peek-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peek--"/><a name="peek--"/><ul class="blockListLast"><li class="blockList"><h4>peek</h4><pre><a href="../../java/util/Queue.html" title="type parameter in Queue">E</a> peek()</pre><div class="block">Retrieves, but does not remove, the head of this queue, or returns <code>null</code> if this queue is empty.                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue, or <code>null</code> if this queue is empty           </dd> </dl></li></ul> <a end_ctx_id="method:peek--"/>  </td></tr></table></td></tr></table></diff></diffreport>