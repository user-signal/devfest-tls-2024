<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:OptionalLong [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:OptionalLong"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public final class <span class="typeNameLabel">OptionalLong</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">A container object which may or may not contain a <code>long</code> value. If a value is present, <code>isPresent()</code> will return <code>true</code> and <code>getAsLong()</code> will return the value.<p>Additional methods that depend on the presence or absence of a contained value are provided, such as <a href="../../java/util/OptionalLong.html#orElse-long-"><code>orElse()</code></a> (return a default value if value not present) and <a href="../../java/util/OptionalLong.html#ifPresent-java.util.function.LongConsumer-"><code>ifPresent()</code></a> (execute a block of code if the value is present).                                     </p><p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a> class; use of identity-sensitive operations (including reference equality (<code>==</code>), identity hash code, or synchronization) on instances of <code>OptionalLong</code> may have unpredictable results and should be avoided.                             </p>                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:OptionalLong"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:empty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:empty--"/><a name="empty--"/><ul class="blockList"><li class="blockList"><h4>empty</h4><pre>public static <a href="../../java/util/OptionalLong.html" title="class in java.util">OptionalLong</a> empty()</pre><div class="block">Returns an empty <code>OptionalLong</code> instance. No value is present for this OptionalLong.           </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>Though it may be tempting to do so, avoid testing if an object is empty by comparing with <code>==</code> against instances returned by <code>Option.empty()</code>. There is no guarantee that it is a singleton. Instead, use <a href="../../java/util/OptionalLong.html#isPresent--"><code>isPresent()</code></a>.                                   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty <code>OptionalLong</code>.  </dd>  </dl></li></ul> <a end_ctx_id="method:empty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:of-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:of-long-"/><a name="of-long-"/><ul class="blockList"><li class="blockList"><h4>of</h4><pre>public static <a href="../../java/util/OptionalLong.html" title="class in java.util">OptionalLong</a> of(long value)</pre><div class="block">Return an <code>OptionalLong</code> with the specified value present.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to be present       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>OptionalLong</code> with the value present     </dd>  </dl></li></ul> <a end_ctx_id="method:of-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getAsLong-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getAsLong--"/><a name="getAsLong--"/><ul class="blockList"><li class="blockList"><h4>getAsLong</h4><pre>public long getAsLong()</pre><div class="block">If a value is present in this <code>OptionalLong</code>, returns the value, otherwise throws <code>NoSuchElementException</code>.             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value held by this <code>OptionalLong</code>     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if there is no value present        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/OptionalLong.html#isPresent--"><code>isPresent()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:getAsLong--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isPresent-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isPresent--"/><a name="isPresent--"/><ul class="blockList"><li class="blockList"><h4>isPresent</h4><pre>public boolean isPresent()</pre><div class="block">Return <code>true</code> if there is a value present, otherwise <code>false</code>.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if there is a value present, otherwise <code>false</code>         </dd> </dl></li></ul> <a end_ctx_id="method:isPresent--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ifPresent-java.util.function.LongConsumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ifPresent-java.util.function.LongConsumer-"/><a name="ifPresent-java.util.function.LongConsumer-"/><ul class="blockList"><li class="blockList"><h4>ifPresent</h4><pre>public void ifPresent(<a href="../../java/util/function/LongConsumer.html" title="interface in java.util.function">LongConsumer</a> consumer)</pre><div class="block">Have the specified consumer accept the value if a value is present, otherwise do nothing.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>consumer</code> - block to be executed if a value is present           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if value is present and <code>consumer</code> is null          </dd>  </dl></li></ul> <a end_ctx_id="method:ifPresent-java.util.function.LongConsumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:orElse-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:orElse-long-"/><a name="orElse-long-"/><ul class="blockList"><li class="blockList"><h4>orElse</h4><pre>public long orElse(long other)</pre><div class="block">Return the value if present, otherwise return <code>other</code>.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the value to be returned if there is no value present             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value, if present, otherwise <code>other</code>     </dd>  </dl></li></ul> <a end_ctx_id="method:orElse-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:orElseGet-java.util.function.LongSupplier- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:orElseGet-java.util.function.LongSupplier-"/><a name="orElseGet-java.util.function.LongSupplier-"/><ul class="blockList"><li class="blockList"><h4>orElseGet</h4><pre>public long orElseGet(<a href="../../java/util/function/LongSupplier.html" title="interface in java.util.function">LongSupplier</a> other)</pre><div class="block">Return the value if present, otherwise invoke <code>other</code> and return the result of that invocation.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - a <code>LongSupplier</code> whose result is returned if no value is present             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value if present otherwise the result of <code>other.getAsLong()</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if value is not present and <code>other</code> is null           </dd>   </dl></li></ul> <a end_ctx_id="method:orElseGet-java.util.function.LongSupplier-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:orElseThrow-java.util.function.Supplier- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:orElseThrow-java.util.function.Supplier-"/><a name="orElseThrow-java.util.function.Supplier-"/><ul class="blockList"><li class="blockList"><h4>orElseThrow</h4><pre>public &lt;X extends <a href="../../java/lang/Throwable.html" title="class in java.lang">Throwable</a>&gt; long orElseThrow(<a href="../../java/util/function/Supplier.html" title="interface in java.util.function">Supplier</a>&lt;X&gt; exceptionSupplier)
                                       throws X extends <a href="../../java/lang/Throwable.html" title="class in java.lang">Throwable</a></pre><div class="block">Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.                </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>A method reference to the exception constructor with an empty argument list can be used as the supplier. For example, <code>IllegalStateException::new</code>                    </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>X</code> - Type of the exception to be thrown         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>exceptionSupplier</code> - The supplier which will return the exception to be thrown            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the present value  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code>X</code> - if there is no value present        </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if no value is present and <code>exceptionSupplier</code> is null           </dd><dd> <code>X extends <a href="../../java/lang/Throwable.html" title="class in java.lang">Throwable</a>  </code> </dd>     </dl></li></ul> <a end_ctx_id="method:orElseThrow-java.util.function.Supplier-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Indicates whether some other object is "equal to" this OptionalLong. The other object is considered equal if:<ul><li>it is also an <code>OptionalLong</code> and;     </li><li>both instances have no value present or;      </li><li>the present values are "equal to" each other via <code>==</code>.         </li></ul>                </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - an object to be tested for equality         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>{code true} if the other object is "equal to" this object otherwise <code>false</code>            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value of the present value, if any, or 0 (zero) if no value is present.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>hash code value of the present value or 0 if no value is present             </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of the object. In general, the <code>toString</code> method returns a string that "textually represents" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method.<p> The <code>toString</code> method for class <code>Object</code> returns a string consisting of the name of the class of which the object is an instance, the at-sign character `<code>@</code>', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:                                                    </p><blockquote><pre>
 getClass().getName() + '@' + Integer.toHexString(hashCode())
 </pre></blockquote> Returns a non-empty string representation of this object suitable for debugging. The exact presentation format is unspecified and may vary between implementations and versions.                                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>If a value is present the result must include its string representation in the result. Empty and present instances must be unambiguously differentiable.                      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of this instance     </dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>