<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ConcurrentHashMap [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ConcurrentHashMap"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the type of keys maintained by this map          </dd><dd> <code>V</code> - the type of mapped values       </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;K,V&gt;, <a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt;   </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">ConcurrentHashMap&lt;K,V&gt;</span>
extends <a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;K,V&gt;
implements <a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;K,V&gt;, <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">A hash table supporting full concurrency of retrievals and high expected concurrency for updates. This class obeys the same functional specification as <a href="../../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, and includes versions of methods corresponding to each method of <code>Hashtable</code>. However, even though all operations are thread-safe, retrieval operations do <em>not</em> entail locking, and there is <em>not</em> any support for locking the entire table in a way that prevents all access. This class is fully interoperable with <code>Hashtable</code> in programs that rely on its thread safety but not on its synchronization details.<p>Retrieval operations (including <code>get</code>) generally do not block, so may overlap with update operations (including <code>put</code> and <code>remove</code>). Retrievals reflect the results of the most recently <em>completed</em> update operations holding upon their onset. (More formally, an update operation for a given key bears a <em>happens-before</em> relation with any (non-null) retrieval for that key reporting the updated value.) For aggregate operations such as <code>putAll</code> and <code>clear</code>, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators, Spliterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They do <em>not</em> throw <a href="../../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. However, iterators are designed to be used by only one thread at a time. Bear in mind that the results of aggregate status methods including <code>size</code>, <code>isEmpty</code>, and <code>containsValue</code> are typically useful only when a map is not undergoing concurrent updates in other threads. Otherwise the results of these methods reflect transient states that may be adequate for monitoring or estimation purposes, but not for program control.                                                                                                                                                                            </p><p>The table is dynamically expanded when there are too many collisions (i.e., keys that have distinct hash codes but fall into the same slot modulo the table size), with the expected average effect of maintaining roughly two bins per mapping (corresponding to a 0.75 load factor threshold for resizing). There may be much variance around this average as mappings are added and removed, but overall, this maintains a commonly accepted time/space tradeoff for hash tables. However, resizing this or any other kind of hash table may be a relatively slow operation. When possible, it is a good idea to provide a size estimate as an optional <code>initialCapacity</code> constructor argument. An additional optional <code>loadFactor</code> constructor argument provides a further means of customizing initial table capacity by specifying the table density to be used in calculating the amount of space to allocate for the given number of elements. Also, for compatibility with previous versions of this class, constructors may optionally specify an expected <code>concurrencyLevel</code> as an additional hint for internal sizing. Note that using many keys with exactly the same <code>hashCode()</code> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <a href="../../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, this class may use comparison order among keys to help break ties.                                                                                                                                                                                                                 </p><p>A <a href="../../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> projection of a ConcurrentHashMap may be created (using <a href="../../../java/util/concurrent/ConcurrentHashMap.html#newKeySet--"><code>newKeySet()</code></a> or <a href="../../../java/util/concurrent/ConcurrentHashMap.html#newKeySet-int-"><code>newKeySet(int)</code></a>), or viewed (using <a href="../../../java/util/concurrent/ConcurrentHashMap.html#keySet-V-"><code>keySet(Object)</code></a> when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.                                      </p><p>A ConcurrentHashMap can be used as scalable frequency map (a form of histogram or multiset) by using <a href="../../../java/util/concurrent/atomic/LongAdder.html" title="class in java.util.concurrent.atomic"><code>LongAdder</code></a> values and initializing via <a href="../../../java/util/concurrent/ConcurrentHashMap.html#computeIfAbsent-K-java.util.function.Function-"><code>computeIfAbsent</code></a>. For example, to add a count to a <code>ConcurrentHashMap&lt;String,LongAdder&gt; freqs </code>, you can use <code>freqs.computeIfAbsent(k -&gt; new LongAdder()).increment();   </code>                                   </p><p>This class and its views and iterators implement all of the <em>optional</em> methods of the <a href="../../../java/util/Map.html" title="interface in java.util"><code>Map</code></a> and <a href="../../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a> interfaces.                  </p><p>Like <a href="../../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a> but unlike <a href="../../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>, this class does <em>not</em> allow <code>null</code> to be used as a key or value.                  </p><p>ConcurrentHashMaps support a set of sequential and parallel bulk operations that, unlike most <a href="../../../java/util/stream/Stream.html" title="interface in java.util.stream"><code>Stream</code></a> methods, are designed to be safely, and often sensibly, applied even with maps that are being concurrently updated by other threads; for example, when computing a snapshot summary of the values in a shared registry. There are three kinds of operation, each with four forms, accepting functions with Keys, Values, Entries, and (Key, Value) arguments and/or return values. Because the elements of a ConcurrentHashMap are not ordered in any particular way, and may be processed in different orders in different parallel executions, the correctness of supplied functions should not depend on any ordering, or on any other objects or values that may transiently change while computation is in progress; and except for forEach actions, should ideally be side-effect-free. Bulk operations on <a href="../../../java/util/Map.Entry.html" title="interface in java.util"><code>Map.Entry</code></a> objects do not support method <code>setValue</code>.<ul><li> forEach: Perform a given action on each element. A variant form applies a given transformation on each element before performing the action.                      </li><li> search: Return the first available non-null result of applying a given function on each element; skipping further search when a result is found.                       </li><li> reduce: Accumulate each element. The supplied reduction function cannot rely on ordering (more formally, it should be both associative and commutative). There are five variants:<ul><li> Plain reductions. (There is not a form of this method for (key, value) function arguments since there is no corresponding return type.)                      </li><li> Mapped reductions that accumulate the results of a given function applied to each element.              </li><li> Reductions to scalar doubles, longs, and ints, using a given basis value.            </li></ul>                         </li></ul>                                                                                                                                             </p><p>These bulk operations accept a <code>parallelismThreshold</code> argument. Methods proceed sequentially if the current map size is estimated to be less than the given threshold. Using a value of <code>Long.MAX_VALUE</code> suppresses all parallelism. Using a value of <code>1</code> results in maximal parallelism by partitioning into enough subtasks to fully utilize the <a href="../../../java/util/concurrent/ForkJoinPool.html#commonPool--"><code>ForkJoinPool.commonPool()</code></a> that is used for all parallel computations. Normally, you would initially choose one of these extreme values, and then measure performance of using in-between values that trade off overhead versus throughput.                                                                                 </p><p>The concurrency properties of bulk operations follow from those of ConcurrentHashMap: Any non-null result returned from <code>get(key)</code> and related access methods bears a happens-before relation with the associated insertion or update. The result of any bulk operation reflects the composition of these per-element relations (but is not necessarily atomic with respect to the map as a whole unless it is somehow known to be quiescent). Conversely, because keys and values in the map are never null, null serves as a reliable atomic indicator of the current lack of any result. To maintain this property, null serves as an implicit basis for all non-scalar reduction operations. For the double, long, and int versions, the basis should be one that, when combined with any other value, returns that other value (more formally, it should be the identity element for the reduction). Most common reductions have these properties; for example, computing a sum with basis 0 or a minimum with basis MAX_VALUE.                                                                                                                                                              </p><p>Search and transformation functions provided as arguments should similarly return null to indicate the lack of any result (in which case it is not used). In the case of mapped reductions, this also enables transformations to serve as filters, returning null (or, in the case of primitive specializations, the identity basis) if the element should not be combined. You can create compound transformations and filterings by composing them yourself under this "null means there is nothing there now" rule before using them in search or reduce operations.                                                                                      </p><p>Methods accepting and/or returning Entry arguments maintain key-value associations. They may be useful for example when finding the key for the greatest value. Note that "plain" Entry arguments can be supplied using <code>new AbstractMap.SimpleEntry(k,v) </code>.                                </p><p>Bulk operations may complete abruptly, throwing an exception encountered in the application of a supplied function. Bear in mind when handling such exceptions that other concurrently executing functions could also have thrown exceptions, or would have done so if the first exception had not occurred.                                            </p><p>Speedups for parallel compared to sequential forms are common but not guaranteed. Parallel operations involving brief functions on small maps may execute more slowly than sequential forms if the underlying work to parallelize the computation is more expensive than the computation itself. Similarly, parallelization may not lead to much actual parallelism if all processors are busy performing unrelated tasks.                                                          </p><p>All arguments to all task methods must be non-null.        </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                                                                     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../serialized-form.html#java.util.concurrent.ConcurrentHashMap">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:ConcurrentHashMap"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ConcurrentHashMap-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ConcurrentHashMap--"/><a name="ConcurrentHashMap--"/><ul class="blockList"><li class="blockList"><h4>ConcurrentHashMap</h4><pre>public ConcurrentHashMap()</pre><div class="block">Creates a new, empty map with the default initial table size (16).           </div></li></ul> <a end_ctx_id="constructor:ConcurrentHashMap--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ConcurrentHashMap-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ConcurrentHashMap-int-"/><a name="ConcurrentHashMap-int-"/><ul class="blockList"><li class="blockList"><h4>ConcurrentHashMap</h4><pre>public ConcurrentHashMap(int initialCapacity)</pre><div class="block">Creates a new, empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize.                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - The implementation performs internal sizing to accommodate this many elements.            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity of elements is negative          </dd>  </dl></li></ul> <a end_ctx_id="constructor:ConcurrentHashMap-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ConcurrentHashMap-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ConcurrentHashMap-java.util.Map-"/><a name="ConcurrentHashMap-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>ConcurrentHashMap</h4><pre>public ConcurrentHashMap(<a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; m)</pre><div class="block">Creates a new map with the same mappings as the given map.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map    </dd> </dl></li></ul> <a end_ctx_id="constructor:ConcurrentHashMap-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ConcurrentHashMap-int-float- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ConcurrentHashMap-int-float-"/><a name="ConcurrentHashMap-int-float-"/><ul class="blockList"><li class="blockList"><h4>ConcurrentHashMap</h4><pre>public ConcurrentHashMap(int initialCapacity,
                         float loadFactor)</pre><div class="block">Creates a new, empty map with an initial table size based on the given number of elements (<code>initialCapacity</code>) and initial table density (<code>loadFactor</code>).                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor.                    </dd><dd> <code>loadFactor</code> - the load factor (table density) for establishing the initial table size             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity of elements is negative or the load factor is nonpositive                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="constructor:ConcurrentHashMap-int-float-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ConcurrentHashMap-int-float-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ConcurrentHashMap-int-float-int-"/><a name="ConcurrentHashMap-int-float-int-"/><ul class="blockListLast"><li class="blockList"><h4>ConcurrentHashMap</h4><pre>public ConcurrentHashMap(int initialCapacity,
                         float loadFactor,
                         int concurrencyLevel)</pre><div class="block">Creates a new, empty map with an initial table size based on the given number of elements (<code>initialCapacity</code>), table density (<code>loadFactor</code>), and number of concurrently updating threads (<code>concurrencyLevel</code>).                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor.                    </dd><dd> <code>loadFactor</code> - the load factor (table density) for establishing the initial table size             </dd><dd> <code>concurrencyLevel</code> - the estimated number of concurrently updating threads. The implementation may use this value as a sizing hint.                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity is negative or the load factor or concurrencyLevel are nonpositive                </dd>  </dl></li></ul> <a end_ctx_id="constructor:ConcurrentHashMap-int-float-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>public int size()</pre><div class="block">Returns the number of key-value mappings in this map. If the map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#size--">size</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#size--">size</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of key-value mappings in this map       </dd>   </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isEmpty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isEmpty--"/><a name="isEmpty--"/><ul class="blockList"><li class="blockList"><h4>isEmpty</h4><pre>public boolean isEmpty()</pre><div class="block">Returns <tt>true</tt> if this map contains no key-value mappings.        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#isEmpty--">isEmpty</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#isEmpty--">isEmpty</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this map contains no key-value mappings        </dd>   </dl></li></ul> <a end_ctx_id="method:isEmpty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-java.lang.Object-"/><a name="get-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> get(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.<p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>key.equals(k)</code>, then this method returns <code>v</code>; otherwise it returns <code>null</code>. (There can be at most one such mapping.)                                   </p>                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#get-java.lang.Object-">get</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#get-java.lang.Object-">get</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key whose associated value is to be returned           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a end_ctx_id="method:get-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:containsKey-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:containsKey-java.lang.Object-"/><a name="containsKey-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>containsKey</h4><pre>public boolean containsKey(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Tests if the specified object is a key in this table.          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#containsKey-java.lang.Object-">containsKey</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#containsKey-java.lang.Object-">containsKey</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - possible key    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if and only if the specified object is a key in this table, as determined by the <code>equals</code> method; <code>false</code> otherwise                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a end_ctx_id="method:containsKey-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:containsValue-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:containsValue-java.lang.Object-"/><a name="containsValue-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>containsValue</h4><pre>public boolean containsValue(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Returns <code>true</code> if this map maps one or more keys to the specified value. Note: This method may require a full traversal of the map, and is much slower than method <code>containsKey</code>.                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#containsValue-java.lang.Object-">containsValue</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#containsValue-java.lang.Object-">containsValue</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - value whose presence in this map is to be tested            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this map maps one or more keys to the specified value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified value is null        </dd>     </dl></li></ul> <a name="put-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:containsValue-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:put-K-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:put-K-V-"/><a name="put-K-V-"/><ul class="blockList"><li class="blockList"><h4>put</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> put(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
             <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">Maps the specified key to the specified value in this table. Neither the key nor the value can be null.<p>The value can be retrieved by calling the <code>get</code> method with a key that is equal to the original key.                   </p>                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#put-K-V-">put</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#put-K-V-">put</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with <code>key</code>, or <code>null</code> if there was no mapping for <code>key</code>              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>     </dl></li></ul> <a end_ctx_id="method:put-K-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:putAll-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:putAll-java.util.Map-"/><a name="putAll-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>putAll</h4><pre>public void putAll(<a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; m)</pre><div class="block">Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.                              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#putAll-java.util.Map-">putAll</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#putAll-java.util.Map-">putAll</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - mappings to be stored in this map         </dd>   </dl></li></ul> <a end_ctx_id="method:putAll-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> remove(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key)</pre><div class="block">Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#remove-java.lang.Object-">remove</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key that needs to be removed         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with <code>key</code>, or <code>null</code> if there was no mapping for <code>key</code>              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Removes all of the mappings from this map.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#clear--">clear</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#clear--">clear</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd>  </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:keySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:keySet--"/><a name="keySet--"/><ul class="blockList"><li class="blockList"><h4>keySet</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.KeySetView.html" title="class in java.util.concurrent">ConcurrentHashMap.KeySetView</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; keySet()</pre><div class="block">Returns a <a href="../../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from this map, via the <code>Iterator.remove</code>, <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code> operations. It does not support the <code>add</code> or <code>addAll</code> operations.<p>The view's iterators and spliterators are <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.      </p><p>The view's <code>spliterator</code> reports <a href="../../../java/util/Spliterator.html#CONCURRENT"><code>Spliterator.CONCURRENT</code></a>, <a href="../../../java/util/Spliterator.html#DISTINCT"><code>Spliterator.DISTINCT</code></a>, and <a href="../../../java/util/Spliterator.html#NONNULL"><code>Spliterator.NONNULL</code></a>.       </p>                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#keySet--">keySet</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#keySet--">keySet</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the set view  </dd>   </dl></li></ul> <a end_ctx_id="method:keySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:values-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:values--"/><a name="values--"/><ul class="blockList"><li class="blockList"><h4>values</h4><pre>public <a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; values()</pre><div class="block">Returns a <a href="../../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from this map, via the <code>Iterator.remove</code>, <code>Collection.remove</code>, <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code> operations. It does not support the <code>add</code> or <code>addAll</code> operations.<p>The view's iterators and spliterators are <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.      </p><p>The view's <code>spliterator</code> reports <a href="../../../java/util/Spliterator.html#CONCURRENT"><code>Spliterator.CONCURRENT</code></a> and <a href="../../../java/util/Spliterator.html#NONNULL"><code>Spliterator.NONNULL</code></a>.      </p>                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#values--">values</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#values--">values</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the collection view  </dd>   </dl></li></ul> <a end_ctx_id="method:values--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:entrySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:entrySet--"/><a name="entrySet--"/><ul class="blockList"><li class="blockList"><h4>entrySet</h4><pre>public <a href="../../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;&gt; entrySet()</pre><div class="block">Returns a <a href="../../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the <code>Iterator.remove</code>, <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code> operations.<p>The view's iterators and spliterators are <a href="package-summary.html#Weakly"><i>weakly consistent </i></a>.      </p><p>The view's <code>spliterator</code> reports <a href="../../../java/util/Spliterator.html#CONCURRENT"><code>Spliterator.CONCURRENT</code></a>, <a href="../../../java/util/Spliterator.html#DISTINCT"><code>Spliterator.DISTINCT</code></a>, and <a href="../../../java/util/Spliterator.html#NONNULL"><code>Spliterator.NONNULL</code></a>.       </p>                                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#entrySet--">entrySet</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#entrySet--">entrySet</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the set view  </dd>   </dl></li></ul> <a end_ctx_id="method:entrySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value for this <a href="../../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>, i.e., the sum of, for each key-value pair in the map, <code>key.hashCode() ^ value.hashCode()  </code>.                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#hashCode--">hashCode</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#hashCode--">hashCode</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the hash code value for this map      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/Map.Entry.html#hashCode--"><code>Map.Entry.hashCode()</code></a>, <a href="../../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(Object)</code></a>, <a href="../../../java/util/Set.html#equals-java.lang.Object-"><code>Set.equals(Object)</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this map. The string representation consists of a list of key-value mappings (in no particular order) enclosed in braces ("<code>{}</code>"). Adjacent mappings are separated by the characters <code>", " </code> (comma and space). Each key-value mapping is rendered as the key followed by an equals sign ("<code>=</code>") followed by the associated value.                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#toString--">toString</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of this map     </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Compares the specified object with this map for equality. Returns <code>true</code> if the given object is a map with the same mappings as this map. This operation may return misleading results if either map is concurrently modified during execution of this method.                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#equals-java.lang.Object-">equals</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/AbstractMap.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../../java/util/AbstractMap.html" title="class in java.util">AbstractMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - object to be compared for equality with this map           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the specified object is equal to this map          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>     </dl></li></ul> <a name="putIfAbsent-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:putIfAbsent-K-V- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:putIfAbsent-K-V-"/><a name="putIfAbsent-K-V-"/><ul class="blockList"><li class="blockList"><h4>putIfAbsent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> putIfAbsent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                     <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">If the specified key is not already associated with a value, associate it with the given value. This is equivalent to<pre> 
<code>
 if (!map.containsKey(key))
   return map.put(key, value);
 else
   return map.get(key);
 </code></pre> except that the action is performed atomically.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#putIfAbsent-K-V-">putIfAbsent</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#putIfAbsent-K-V-"><span class="diff-html-added">putIfAbsent</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>     </dl></li></ul> <a end_ctx_id="method:putIfAbsent-K-V-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:putIfAbsent-K-V-"/><a name="putIfAbsent-K-V-"/><ul class="blockList"><li class="blockList"><h4>putIfAbsent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> putIfAbsent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                     <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">If the specified key is not already associated with a value, associate it with the given value. This is equivalent to<pre> 
<code>
 if (!map.containsKey(key))
   return map.put(key, value);
 else
   return map.get(key);
 </code></pre> except that the action is performed atomically.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#putIfAbsent-K-V-">putIfAbsent</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>    </dl></li></ul> <a end_ctx_id="method:putIfAbsent-K-V-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:putIfAbsent-K-V-"/><a name="putIfAbsent-K-V-"/><ul class="blockList"><li class="blockList"><h4>putIfAbsent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> putIfAbsent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                     <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">If the specified key is not already associated with a value, associate it with the given value. This is equivalent to<pre> 
<code>
 if (!map.containsKey(key))
   return map.put(key, value);
 else
   return map.get(key);
 </code></pre> except that the action is performed atomically.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#putIfAbsent-K-V-">putIfAbsent</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#putIfAbsent-K-V-">putIfAbsent</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>     </dl></li></ul> <a end_ctx_id="method:putIfAbsent-K-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object-java.lang.Object- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:remove-java.lang.Object-java.lang.Object-"/><a name="remove-java.lang.Object-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public boolean remove(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key,
                      <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Removes the entry for a key only if currently mapped to a given value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), value)) {
   map.remove(key);
   return true;
 } else
   return false;
 </code></pre> except that the action is performed atomically.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-"><span class="diff-html-added">remove</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>value</code> - value expected to be associated with the specified key           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value was removed      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:remove-java.lang.Object-java.lang.Object-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-java.lang.Object-"/><a name="remove-java.lang.Object-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public boolean remove(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key,
                      <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Removes the entry for a key only if currently mapped to a given value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), value)) {
   map.remove(key);
   return true;
 } else
   return false;
 </code></pre> except that the action is performed atomically.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>value</code> - value expected to be associated with the specified key           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value was removed      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>    </dl></li></ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:remove-java.lang.Object-java.lang.Object-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-java.lang.Object-"/><a name="remove-java.lang.Object-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public boolean remove(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key,
                      <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Removes the entry for a key only if currently mapped to a given value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), value)) {
   map.remove(key);
   return true;
 } else
   return false;
 </code></pre> except that the action is performed atomically.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#remove-java.lang.Object-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#remove-java.lang.Object-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>value</code> - value expected to be associated with the specified key           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value was removed      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a name="replace-java.lang.Object-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:remove-java.lang.Object-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:replace-K-V-V- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:replace-K-V-V-"/><a name="replace-K-V-V-"/><ul class="blockList"><li class="blockList"><h4>replace</h4><pre>public boolean replace(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                       <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> oldValue,
                       <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> newValue)</pre><div class="block">Replaces the entry for a key only if currently mapped to a given value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), oldValue)) {
   map.put(key, newValue);
   return true;
 } else
   return false;
 </code></pre> except that the action is performed atomically.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replace-K-V-V-">replace</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#replace-K-V-V-"><span class="diff-html-added">replace</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>oldValue</code> - value expected to be associated with the specified key           </dd><dd> <code>newValue</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value was replaced      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if any of the arguments are null         </dd>     </dl></li></ul> <a name="replace-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:replace-K-V-V-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:replace-K-V-V-"/><a name="replace-K-V-V-"/><ul class="blockList"><li class="blockList"><h4>replace</h4><pre>public boolean replace(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                       <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> oldValue,
                       <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> newValue)</pre><div class="block">Replaces the entry for a key only if currently mapped to a given value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), oldValue)) {
   map.put(key, newValue);
   return true;
 } else
   return false;
 </code></pre> except that the action is performed atomically.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replace-K-V-V-">replace</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>oldValue</code> - value expected to be associated with the specified key           </dd><dd> <code>newValue</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value was replaced      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if any of the arguments are null         </dd>    </dl></li></ul> <a name="replace-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:replace-K-V-V-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:replace-K-V-V-"/><a name="replace-K-V-V-"/><ul class="blockList"><li class="blockList"><h4>replace</h4><pre>public boolean replace(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                       <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> oldValue,
                       <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> newValue)</pre><div class="block">Replaces the entry for a key only if currently mapped to a given value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), oldValue)) {
   map.put(key, newValue);
   return true;
 } else
   return false;
 </code></pre> except that the action is performed atomically.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replace-K-V-V-">replace</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#replace-K-V-V-">replace</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>oldValue</code> - value expected to be associated with the specified key           </dd><dd> <code>newValue</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the value was replaced      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if any of the arguments are null         </dd>     </dl></li></ul> <a name="replace-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:replace-K-V-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:replace-K-V- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:replace-K-V-"/><a name="replace-K-V-"/><ul class="blockList"><li class="blockList"><h4>replace</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> replace(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                 <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">Replaces the entry for a key only if currently mapped to some value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key)) {
   return map.put(key, value);
 } else
   return null;
 </code></pre> except that the action is performed atomically.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replace-K-V-">replace</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#replace-K-V-"><span class="diff-html-added">replace</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>     </dl></li></ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:replace-K-V-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:replace-K-V-"/><a name="replace-K-V-"/><ul class="blockList"><li class="blockList"><h4>replace</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> replace(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                 <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">Replaces the entry for a key only if currently mapped to some value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key)) {
   return map.put(key, value);
 } else
   return null;
 </code></pre> except that the action is performed atomically.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replace-K-V-">replace</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>    </dl></li></ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:replace-K-V-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:replace-K-V-"/><a name="replace-K-V-"/><ul class="blockList"><li class="blockList"><h4>replace</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> replace(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                 <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value)</pre><div class="block">Replaces the entry for a key only if currently mapped to some value. This is equivalent to<pre> 
<code>
 if (map.containsKey(key)) {
   return map.put(key, value);
 } else
   return null;
 </code></pre> except that the action is performed atomically.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replace-K-V-">replace</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#replace-K-V-">replace</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is associated          </dd><dd> <code>value</code> - value to be associated with the specified key          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the previous value associated with the specified key, or <code>null</code> if there was no mapping for the key                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or value is null          </dd>     </dl></li></ul> <a name="getOrDefault-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:replace-K-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getOrDefault-java.lang.Object-V- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:getOrDefault-java.lang.Object-V-"/><a name="getOrDefault-java.lang.Object-V-"/><ul class="blockList"><li class="blockList"><h4>getOrDefault</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> getOrDefault(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key,
                      <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> defaultValue)</pre><div class="block">Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.                       </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#getOrDefault-java.lang.Object-V-"><span class="diff-html-added">getOrDefault</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#getOrDefault-java.lang.Object-V-"><span class="diff-html-added">getOrDefault</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key whose associated value is to be returned           </dd><dd> <code>defaultValue</code> - the value to return if this map contains no mapping for the given key                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the mapping for the key, if present; else the default value          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a end_ctx_id="method:getOrDefault-java.lang.Object-V-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:getOrDefault-java.lang.Object-V-"/><a name="getOrDefault-java.lang.Object-V-"/><ul class="blockList"><li class="blockList"><h4>getOrDefault</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> getOrDefault(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key,
                      <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> defaultValue)</pre><div class="block">Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key whose associated value is to be returned           </dd><dd> <code>defaultValue</code> - the value to return if this map contains no mapping for the given key                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the mapping for the key, if present; else the default value          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>   </dl></li></ul> <a end_ctx_id="method:getOrDefault-java.lang.Object-V-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getOrDefault-java.lang.Object-V-"/><a name="getOrDefault-java.lang.Object-V-"/><ul class="blockList"><li class="blockList"><h4>getOrDefault</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> getOrDefault(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> key,
                      <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> defaultValue)</pre><div class="block">Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#getOrDefault-java.lang.Object-V-">getOrDefault</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the key whose associated value is to be returned           </dd><dd> <code>defaultValue</code> - the value to return if this map contains no mapping for the given key                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the mapping for the key, if present; else the default value          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key is null        </dd>     </dl></li></ul> <a end_ctx_id="method:getOrDefault-java.lang.Object-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEach-java.util.function.BiConsumer- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:forEach-java.util.function.BiConsumer-"/><a name="forEach-java.util.function.BiConsumer-"/><ul class="blockList"><li class="blockList"><h4>forEach</h4><pre>public void forEach(<a href="../../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; action)</pre><div class="block"> <span class="descfrmTypeLabel"><span class="diff-html-added">Description</span> <span class="diff-html-added">copied</span> <span class="diff-html-added">from</span> <span class="diff-html-added">interface:</span> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#forEach-java.util.function.BiConsumer-"><span class="diff-html-added">ConcurrentMap</span></a></code>   </span> </div><div class="block"><span class="diff-html-added">Performs</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">action</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">in</span> <span class="diff-html-added">this</span> <span class="diff-html-added">map</span> <span class="diff-html-added">until</span> <span class="diff-html-added">all</span> <span class="diff-html-added">entries</span> <span class="diff-html-added">have</span> <span class="diff-html-added">been</span> <span class="diff-html-added">processed</span> <span class="diff-html-added">or</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception.</span> <span class="diff-html-added">Unless</span> <span class="diff-html-added">otherwise</span> <span class="diff-html-added">specified</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">implementing</span> <span class="diff-html-added">class,</span> <span class="diff-html-added">actions</span> <span class="diff-html-added">are</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">order</span> <span class="diff-html-added">of</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">set</span> <span class="diff-html-added">iteration</span> <span class="diff-html-added">(if</span> <span class="diff-html-added">an</span> <span class="diff-html-added">iteration</span> <span class="diff-html-added">order</span> <span class="diff-html-added">is</span> <span class="diff-html-added">specified.)</span> <span class="diff-html-added">Exceptions</span> <span class="diff-html-added">thrown</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">action</span> <span class="diff-html-added">are</span> <span class="diff-html-added">relayed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">caller.</span>                                                      </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#forEach-java.util.function.BiConsumer-"><span class="diff-html-added">forEach</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#forEach-java.util.function.BiConsumer-"><span class="diff-html-added">forEach</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">action</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">The</span> <span class="diff-html-added">action</span> <span class="diff-html-added">to</span> <span class="diff-html-added">be</span> <span class="diff-html-added">performed</span> <span class="diff-html-added">for</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry</span>          </dd>   </dl></li></ul> <a end_ctx_id="method:forEach-java.util.function.BiConsumer-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:forEach-java.util.function.BiConsumer-"/><a name="forEach-java.util.function.BiConsumer-"/><ul class="blockList"><li class="blockList"><h4>forEach</h4><pre>public void forEach(<a href="../../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; action)</pre></li></ul> <a end_ctx_id="method:forEach-java.util.function.BiConsumer-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEach-java.util.function.BiConsumer-"/><a name="forEach-java.util.function.BiConsumer-"/><ul class="blockList"><li class="blockList"><h4>forEach</h4><pre>public void forEach(<a href="../../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; action)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ConcurrentMap.html#forEach-java.util.function.BiConsumer-">ConcurrentMap</a></code>   </span> </div><div class="block">Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#forEach-java.util.function.BiConsumer-">forEach</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#forEach-java.util.function.BiConsumer-">forEach</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>action</code> - The action to be performed for each entry          </dd>   </dl></li></ul> <a end_ctx_id="method:forEach-java.util.function.BiConsumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:replaceAll-java.util.function.BiFunction- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:replaceAll-java.util.function.BiFunction-"/><a name="replaceAll-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>replaceAll</h4><pre>public void replaceAll(<a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; function)</pre><div class="block"> <span class="descfrmTypeLabel"><span class="diff-html-added">Description</span> <span class="diff-html-added">copied</span> <span class="diff-html-added">from</span> <span class="diff-html-added">interface:</span> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replaceAll-java.util.function.BiFunction-"><span class="diff-html-added">ConcurrentMap</span></a></code>   </span> </div><div class="block"><span class="diff-html-added">Replaces</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry's</span> <span class="diff-html-added">value</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">result</span> <span class="diff-html-added">of</span> <span class="diff-html-added">invoking</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">function</span> <span class="diff-html-added">on</span> <span class="diff-html-added">that</span> <span class="diff-html-added">entry</span> <span class="diff-html-added">until</span> <span class="diff-html-added">all</span> <span class="diff-html-added">entries</span> <span class="diff-html-added">have</span> <span class="diff-html-added">been</span> <span class="diff-html-added">processed</span> <span class="diff-html-added">or</span> <span class="diff-html-added">the</span> <span class="diff-html-added">function</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception.</span> <span class="diff-html-added">Exceptions</span> <span class="diff-html-added">thrown</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">function</span> <span class="diff-html-added">are</span> <span class="diff-html-added">relayed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">caller.</span>                                    </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replaceAll-java.util.function.BiFunction-"><span class="diff-html-added">replaceAll</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#replaceAll-java.util.function.BiFunction-"><span class="diff-html-added">replaceAll</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel"><span class="diff-html-added">Parameters:</span></span>   </dt><dd> <code><span class="diff-html-added">function</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">function</span> <span class="diff-html-added">to</span> <span class="diff-html-added">apply</span> <span class="diff-html-added">to</span> <span class="diff-html-added">each</span> <span class="diff-html-added">entry</span>         </dd>   </dl></li></ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"/><a end_ctx_id="method:replaceAll-java.util.function.BiFunction-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:replaceAll-java.util.function.BiFunction-"/><a name="replaceAll-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>replaceAll</h4><pre>public void replaceAll(<a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; function)</pre></li></ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"/><a end_ctx_id="method:replaceAll-java.util.function.BiFunction-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:replaceAll-java.util.function.BiFunction-"/><a name="replaceAll-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>replaceAll</h4><pre>public void replaceAll(<a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; function)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replaceAll-java.util.function.BiFunction-">ConcurrentMap</a></code>   </span> </div><div class="block">Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#replaceAll-java.util.function.BiFunction-">replaceAll</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>function</code> - the function to apply to each entry         </dd>   </dl></li></ul> <a name="computeIfAbsent-java.lang.Object-java.util.function.Function-"/><a end_ctx_id="method:replaceAll-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:computeIfAbsent-K-java.util.function.Function- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:computeIfAbsent-K-java.util.function.Function-"/><a name="computeIfAbsent-K-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>computeIfAbsent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> computeIfAbsent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                         <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; mappingFunction)</pre><div class="block">If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.                                                                                   </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#computeIfAbsent-K-java.util.function.Function-"><span class="diff-html-added">computeIfAbsent</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-"><span class="diff-html-added">computeIfAbsent</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>mappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or mappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the mappingFunction does so, in which case the mapping is left unestablished                 </dd>     </dl></li></ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:computeIfAbsent-K-java.util.function.Function-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:computeIfAbsent-K-java.util.function.Function-"/><a name="computeIfAbsent-K-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>computeIfAbsent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> computeIfAbsent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                         <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; mappingFunction)</pre><div class="block">If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.                                                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>mappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or mappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the mappingFunction does so, in which case the mapping is left unestablished                 </dd>   </dl></li></ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:computeIfAbsent-K-java.util.function.Function-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:computeIfAbsent-K-java.util.function.Function-"/><a name="computeIfAbsent-K-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>computeIfAbsent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> computeIfAbsent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                         <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; mappingFunction)</pre><div class="block">If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless <code>null</code>. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.                                                                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>mappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the current (existing or computed) value associated with the specified key, or null if the computed value is null                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or mappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the mappingFunction does so, in which case the mapping is left unestablished                 </dd>     </dl></li></ul> <a name="computeIfPresent-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:computeIfAbsent-K-java.util.function.Function-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:computeIfPresent-K-java.util.function.BiFunction- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:computeIfPresent-K-java.util.function.BiFunction-"/><a name="computeIfPresent-K-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>computeIfPresent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> computeIfPresent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                          <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.                                                                   </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#computeIfPresent-K-java.util.function.BiFunction-"><span class="diff-html-added">computeIfPresent</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-"><span class="diff-html-added">computeIfPresent</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which a value may be associated          </dd><dd> <code>remappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or remappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>     </dl></li></ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:computeIfPresent-K-java.util.function.BiFunction-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:computeIfPresent-K-java.util.function.BiFunction-"/><a name="computeIfPresent-K-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>computeIfPresent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> computeIfPresent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                          <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.                                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which a value may be associated          </dd><dd> <code>remappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or remappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>   </dl></li></ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:computeIfPresent-K-java.util.function.BiFunction-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:computeIfPresent-K-java.util.function.BiFunction-"/><a name="computeIfPresent-K-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>computeIfPresent</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> computeIfPresent(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                          <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.                                                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which a value may be associated          </dd><dd> <code>remappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or remappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>     </dl></li></ul> <a name="compute-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:computeIfPresent-K-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compute-K-java.util.function.BiFunction- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:compute-K-java.util.function.BiFunction-"/><a name="compute-K-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>compute</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> compute(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                 <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.                                                                  </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#compute-K-java.util.function.BiFunction-"><span class="diff-html-added">compute</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#compute-K-java.util.function.BiFunction-"><span class="diff-html-added">compute</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>remappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or remappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>     </dl></li></ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:compute-K-java.util.function.BiFunction-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:compute-K-java.util.function.BiFunction-"/><a name="compute-K-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>compute</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> compute(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                 <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.                                                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>remappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or remappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>   </dl></li></ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:compute-K-java.util.function.BiFunction-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compute-K-java.util.function.BiFunction-"/><a name="compute-K-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>compute</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> compute(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
                 <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">Attempts to compute a mapping for the specified key and its current mapped value (or <code>null</code> if there is no current mapping). The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.                                                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#compute-K-java.util.function.BiFunction-">compute</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#compute-K-java.util.function.BiFunction-">compute</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>remappingFunction</code> - the function to compute a value        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or remappingFunction is null          </dd><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the computation detectably attempts a recursive update to this map that would otherwise never complete                  </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>     </dl></li></ul> <a name="merge-java.lang.Object-java.lang.Object-java.util.function.BiFunction-"/><a end_ctx_id="method:compute-K-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:merge-K-V-java.util.function.BiFunction- [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:merge-K-V-java.util.function.BiFunction-"/><a name="merge-K-V-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>merge</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> merge(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
               <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value,
               <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if <code>null</code>. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.                                                                              </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#merge-K-V-java.util.function.BiFunction-"><span class="diff-html-added">merge</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent"><span class="diff-html-added">ConcurrentMap</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><span class="diff-html-added">merge</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../../java/util/Map.html" title="interface in java.util"><span class="diff-html-added">Map</span></a><span class="diff-html-added">&lt;</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">K</span></a><span class="diff-html-added">,</span><a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap"><span class="diff-html-added">V</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - the value to use if absent        </dd><dd> <code>remappingFunction</code> - the function to recompute a value if present          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or the remappingFunction is null           </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>     </dl></li></ul> <a end_ctx_id="method:merge-K-V-java.util.function.BiFunction-"/>  </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:merge-K-V-java.util.function.BiFunction-"/><a name="merge-K-V-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>merge</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> merge(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
               <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value,
               <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if <code>null</code>. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.                                                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - the value to use if absent        </dd><dd> <code>remappingFunction</code> - the function to recompute a value if present          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or the remappingFunction is null           </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>   </dl></li></ul> <a end_ctx_id="method:merge-K-V-java.util.function.BiFunction-"/>  </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:merge-K-V-java.util.function.BiFunction-"/><a name="merge-K-V-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>merge</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> merge(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> key,
               <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> value,
               <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; remappingFunction)</pre><div class="block">If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if <code>null</code>. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.                                                                              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ConcurrentMap.html#merge-K-V-java.util.function.BiFunction-">merge</a></code> in interface <code><a href="../../../java/util/concurrent/ConcurrentMap.html" title="interface in java.util.concurrent">ConcurrentMap</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Map.html#merge-K-V-java.util.function.BiFunction-">merge</a></code> in interface <code><a href="../../../java/util/Map.html" title="interface in java.util">Map</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - key with which the specified value is to be associated            </dd><dd> <code>value</code> - the value to use if absent        </dd><dd> <code>remappingFunction</code> - the function to recompute a value if present          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new value associated with the specified key, or null if none           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified key or the remappingFunction is null           </dd><dd> <code><a href="../../../java/lang/RuntimeException.html" title="class in java.lang">RuntimeException</a></code> - or Error if the remappingFunction does so, in which case the mapping is unchanged                </dd>     </dl></li></ul> <a end_ctx_id="method:merge-K-V-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:contains-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:contains-java.lang.Object-"/><a name="contains-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>contains</h4><pre>public boolean contains(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> value)</pre><div class="block">Legacy method testing if some key maps into the specified value in this table. This method is identical in functionality to <a href="../../../java/util/concurrent/ConcurrentHashMap.html#containsValue-java.lang.Object-"><code>containsValue(Object)</code></a>, and exists solely to ensure full compatibility with class <a href="../../../java/util/Hashtable.html" title="class in java.util"><code>Hashtable</code></a>, which supported this method prior to introduction of the Java Collections framework.                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - a value to search for       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if and only if some key maps to the <code>value</code> argument in this table as determined by the <code>equals</code> method; <code>false</code> otherwise                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified value is null        </dd>   </dl></li></ul> <a end_ctx_id="method:contains-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:keys-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:keys--"/><a name="keys--"/><ul class="blockList"><li class="blockList"><h4>keys</h4><pre>public <a href="../../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>&gt; keys()</pre><div class="block">Returns an enumeration of the keys in this table.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an enumeration of the keys in this table       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/concurrent/ConcurrentHashMap.html#keySet--"><code>keySet()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:keys--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:elements-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:elements--"/><a name="elements--"/><ul class="blockList"><li class="blockList"><h4>elements</h4><pre>public <a href="../../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; elements()</pre><div class="block">Returns an enumeration of the values in this table.        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an enumeration of the values in this table       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/concurrent/ConcurrentHashMap.html#values--"><code>values()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:elements--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:mappingCount-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:mappingCount--"/><a name="mappingCount--"/><ul class="blockList"><li class="blockList"><h4>mappingCount</h4><pre>public long mappingCount()</pre><div class="block">Returns the number of mappings. This method should be used instead of <a href="../../../java/util/concurrent/ConcurrentHashMap.html#size--"><code>size()</code></a> because a ConcurrentHashMap may contain more mappings than can be represented as an int. The value returned is an estimate; the actual count may differ if there are concurrent insertions or removals.                                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of mappings   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:mappingCount--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newKeySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newKeySet--"/><a name="newKeySet--"/><ul class="blockList"><li class="blockList"><h4>newKeySet</h4><pre>public static &lt;K&gt; <a href="../../../java/util/concurrent/ConcurrentHashMap.KeySetView.html" title="class in java.util.concurrent">ConcurrentHashMap.KeySetView</a>&lt;K,<a href="../../../java/lang/Boolean.html" title="class in java.lang">Boolean</a>&gt; newKeySet()</pre><div class="block">Creates a new <a href="../../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> backed by a ConcurrentHashMap from the given type to <code>Boolean.TRUE</code>.             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the element type of the returned set         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new set  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:newKeySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newKeySet-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newKeySet-int-"/><a name="newKeySet-int-"/><ul class="blockList"><li class="blockList"><h4>newKeySet</h4><pre>public static &lt;K&gt; <a href="../../../java/util/concurrent/ConcurrentHashMap.KeySetView.html" title="class in java.util.concurrent">ConcurrentHashMap.KeySetView</a>&lt;K,<a href="../../../java/lang/Boolean.html" title="class in java.lang">Boolean</a>&gt; newKeySet(int initialCapacity)</pre><div class="block">Creates a new <a href="../../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> backed by a ConcurrentHashMap from the given type to <code>Boolean.TRUE</code>.             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the element type of the returned set         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>initialCapacity</code> - The implementation performs internal sizing to accommodate this many elements.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the new set  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the initial capacity of elements is negative          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>     </dl></li></ul> <a name="keySet-java.lang.Object-"/><a end_ctx_id="method:newKeySet-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:keySet-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:keySet-V-"/><a name="keySet-V-"/><ul class="blockList"><li class="blockList"><h4>keySet</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.KeySetView.html" title="class in java.util.concurrent">ConcurrentHashMap.KeySetView</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; keySet(<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> mappedValue)</pre><div class="block">Returns a <a href="../../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> view of the keys in this map, using the given common mapped value for any additions (i.e., <a href="../../../java/util/Collection.html#add-E-"><code>Collection.add(E)</code></a> and <a href="../../../java/util/Collection.html#addAll-java.util.Collection-"><code>Collection.addAll(Collection)</code></a>). This is of course only appropriate if it is acceptable to use the same value for all additions from this view.                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>mappedValue</code> - the mapped value to use for any additions          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the set view  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the mappedValue is null       </dd>   </dl></li></ul> <a end_ctx_id="method:keySet-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEach-long-java.util.function.BiConsumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEach-long-java.util.function.BiConsumer-"/><a name="forEach-long-java.util.function.BiConsumer-"/><ul class="blockList"><li class="blockList"><h4>forEach</h4><pre>public void forEach(long parallelismThreshold,
                    <a href="../../../java/util/function/BiConsumer.html" title="interface in java.util.function">BiConsumer</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; action)</pre><div class="block">Performs the given action for each (key, value).       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:forEach-long-java.util.function.BiConsumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEach-long-java.util.function.BiFunction-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEach-long-java.util.function.BiFunction-java.util.function.Consumer-"/><a name="forEach-long-java.util.function.BiFunction-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEach</h4><pre>public &lt;U&gt; void forEach(long parallelismThreshold,
                        <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends U&gt; transformer,
                        <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super U&gt; action)</pre><div class="block">Performs the given action for each non-null transformation of each (key, value).           </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)                         </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:forEach-long-java.util.function.BiFunction-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:search-long-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:search-long-java.util.function.BiFunction-"/><a name="search-long-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>search</h4><pre>public &lt;U&gt; U search(long parallelismThreshold,
                    <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends U&gt; searchFunction)</pre><div class="block">Returns a non-null result from applying the given search function on each (key, value), or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.                                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the search function         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>searchFunction</code> - a function returning a non-null result on success, else null            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a non-null result from applying the given search function on each (key, value), or null if none                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:search-long-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduce-long-java.util.function.BiFunction-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduce-long-java.util.function.BiFunction-java.util.function.BiFunction-"/><a name="reduce-long-java.util.function.BiFunction-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduce</h4><pre>public &lt;U&gt; U reduce(long parallelismThreshold,
                    <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends U&gt; transformer,
                    <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super U,? super U,? extends U&gt; reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.                       </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)                        </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all (key, value) pairs           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:reduce-long-java.util.function.BiFunction-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceToDouble-long-java.util.function.ToDoubleBiFunction-double-java.util.function.DoubleBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceToDouble-long-java.util.function.ToDoubleBiFunction-double-java.util.function.DoubleBinaryOperator-"/><a name="reduceToDouble-long-java.util.function.ToDoubleBiFunction-double-java.util.function.DoubleBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceToDouble</h4><pre>public double reduceToDouble(long parallelismThreshold,
                             <a href="../../../java/util/function/ToDoubleBiFunction.html" title="interface in java.util.function">ToDoubleBiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; transformer,
                             double basis,
                             <a href="../../../java/util/function/DoubleBinaryOperator.html" title="interface in java.util.function">DoubleBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all (key, value) pairs           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceToDouble-long-java.util.function.ToDoubleBiFunction-double-java.util.function.DoubleBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceToLong-long-java.util.function.ToLongBiFunction-long-java.util.function.LongBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceToLong-long-java.util.function.ToLongBiFunction-long-java.util.function.LongBinaryOperator-"/><a name="reduceToLong-long-java.util.function.ToLongBiFunction-long-java.util.function.LongBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceToLong</h4><pre>public long reduceToLong(long parallelismThreshold,
                         <a href="../../../java/util/function/ToLongBiFunction.html" title="interface in java.util.function">ToLongBiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; transformer,
                         long basis,
                         <a href="../../../java/util/function/LongBinaryOperator.html" title="interface in java.util.function">LongBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all (key, value) pairs           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceToLong-long-java.util.function.ToLongBiFunction-long-java.util.function.LongBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceToInt-long-java.util.function.ToIntBiFunction-int-java.util.function.IntBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceToInt-long-java.util.function.ToIntBiFunction-int-java.util.function.IntBinaryOperator-"/><a name="reduceToInt-long-java.util.function.ToIntBiFunction-int-java.util.function.IntBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceToInt</h4><pre>public int reduceToInt(long parallelismThreshold,
                       <a href="../../../java/util/function/ToIntBiFunction.html" title="interface in java.util.function">ToIntBiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; transformer,
                       int basis,
                       <a href="../../../java/util/function/IntBinaryOperator.html" title="interface in java.util.function">IntBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all (key, value) pairs           </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceToInt-long-java.util.function.ToIntBiFunction-int-java.util.function.IntBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachKey-long-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachKey-long-java.util.function.Consumer-"/><a name="forEachKey-long-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEachKey</h4><pre>public void forEachKey(long parallelismThreshold,
                       <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>&gt; action)</pre><div class="block">Performs the given action for each key.      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:forEachKey-long-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachKey-long-java.util.function.Function-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachKey-long-java.util.function.Function-java.util.function.Consumer-"/><a name="forEachKey-long-java.util.function.Function-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEachKey</h4><pre>public &lt;U&gt; void forEachKey(long parallelismThreshold,
                           <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends U&gt; transformer,
                           <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super U&gt; action)</pre><div class="block">Performs the given action for each non-null transformation of each key.          </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)                         </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:forEachKey-long-java.util.function.Function-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:searchKeys-long-java.util.function.Function- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:searchKeys-long-java.util.function.Function-"/><a name="searchKeys-long-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>searchKeys</h4><pre>public &lt;U&gt; U searchKeys(long parallelismThreshold,
                        <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends U&gt; searchFunction)</pre><div class="block">Returns a non-null result from applying the given search function on each key, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.                                     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the search function         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>searchFunction</code> - a function returning a non-null result on success, else null            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a non-null result from applying the given search function on each key, or null if none               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:searchKeys-long-java.util.function.Function-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceKeys-long-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceKeys-long-java.util.function.BiFunction-"/><a name="reduceKeys-long-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduceKeys</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a> reduceKeys(long parallelismThreshold,
                    <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>&gt; reducer)</pre><div class="block">Returns the result of accumulating all keys using the given reducer to combine values, or null if none.                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating all keys using the given reducer to combine values, or null if none                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceKeys-long-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceKeys-long-java.util.function.Function-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceKeys-long-java.util.function.Function-java.util.function.BiFunction-"/><a name="reduceKeys-long-java.util.function.Function-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduceKeys</h4><pre>public &lt;U&gt; U reduceKeys(long parallelismThreshold,
                        <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,? extends U&gt; transformer,
                        <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super U,? super U,? extends U&gt; reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.                     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)                        </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all keys         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:reduceKeys-long-java.util.function.Function-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceKeysToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceKeysToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/><a name="reduceKeysToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceKeysToDouble</h4><pre>public double reduceKeysToDouble(long parallelismThreshold,
                                 <a href="../../../java/util/function/ToDoubleFunction.html" title="interface in java.util.function">ToDoubleFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>&gt; transformer,
                                 double basis,
                                 <a href="../../../java/util/function/DoubleBinaryOperator.html" title="interface in java.util.function">DoubleBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all keys         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceKeysToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceKeysToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceKeysToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/><a name="reduceKeysToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceKeysToLong</h4><pre>public long reduceKeysToLong(long parallelismThreshold,
                             <a href="../../../java/util/function/ToLongFunction.html" title="interface in java.util.function">ToLongFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>&gt; transformer,
                             long basis,
                             <a href="../../../java/util/function/LongBinaryOperator.html" title="interface in java.util.function">LongBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all keys         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceKeysToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceKeysToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceKeysToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/><a name="reduceKeysToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceKeysToInt</h4><pre>public int reduceKeysToInt(long parallelismThreshold,
                           <a href="../../../java/util/function/ToIntFunction.html" title="interface in java.util.function">ToIntFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>&gt; transformer,
                           int basis,
                           <a href="../../../java/util/function/IntBinaryOperator.html" title="interface in java.util.function">IntBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all keys         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceKeysToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachValue-long-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachValue-long-java.util.function.Consumer-"/><a name="forEachValue-long-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEachValue</h4><pre>public void forEachValue(long parallelismThreshold,
                         <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; action)</pre><div class="block">Performs the given action for each value.      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:forEachValue-long-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachValue-long-java.util.function.Function-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachValue-long-java.util.function.Function-java.util.function.Consumer-"/><a name="forEachValue-long-java.util.function.Function-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEachValue</h4><pre>public &lt;U&gt; void forEachValue(long parallelismThreshold,
                             <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends U&gt; transformer,
                             <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super U&gt; action)</pre><div class="block">Performs the given action for each non-null transformation of each value.          </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)                         </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:forEachValue-long-java.util.function.Function-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:searchValues-long-java.util.function.Function- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:searchValues-long-java.util.function.Function-"/><a name="searchValues-long-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>searchValues</h4><pre>public &lt;U&gt; U searchValues(long parallelismThreshold,
                          <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends U&gt; searchFunction)</pre><div class="block">Returns a non-null result from applying the given search function on each value, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.                                     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the search function         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>searchFunction</code> - a function returning a non-null result on success, else null            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a non-null result from applying the given search function on each value, or null if none               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:searchValues-long-java.util.function.Function-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceValues-long-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceValues-long-java.util.function.BiFunction-"/><a name="reduceValues-long-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduceValues</h4><pre>public <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a> reduceValues(long parallelismThreshold,
                      <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; reducer)</pre><div class="block">Returns the result of accumulating all values using the given reducer to combine values, or null if none.                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating all values     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceValues-long-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceValues-long-java.util.function.Function-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceValues-long-java.util.function.Function-java.util.function.BiFunction-"/><a name="reduceValues-long-java.util.function.Function-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduceValues</h4><pre>public &lt;U&gt; U reduceValues(long parallelismThreshold,
                          <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>,? extends U&gt; transformer,
                          <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super U,? super U,? extends U&gt; reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.                     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)                        </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all values         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:reduceValues-long-java.util.function.Function-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceValuesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceValuesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/><a name="reduceValuesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceValuesToDouble</h4><pre>public double reduceValuesToDouble(long parallelismThreshold,
                                   <a href="../../../java/util/function/ToDoubleFunction.html" title="interface in java.util.function">ToDoubleFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; transformer,
                                   double basis,
                                   <a href="../../../java/util/function/DoubleBinaryOperator.html" title="interface in java.util.function">DoubleBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all values         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceValuesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceValuesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceValuesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/><a name="reduceValuesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceValuesToLong</h4><pre>public long reduceValuesToLong(long parallelismThreshold,
                               <a href="../../../java/util/function/ToLongFunction.html" title="interface in java.util.function">ToLongFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; transformer,
                               long basis,
                               <a href="../../../java/util/function/LongBinaryOperator.html" title="interface in java.util.function">LongBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all values         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceValuesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceValuesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceValuesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/><a name="reduceValuesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceValuesToInt</h4><pre>public int reduceValuesToInt(long parallelismThreshold,
                             <a href="../../../java/util/function/ToIntFunction.html" title="interface in java.util.function">ToIntFunction</a>&lt;? super <a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; transformer,
                             int basis,
                             <a href="../../../java/util/function/IntBinaryOperator.html" title="interface in java.util.function">IntBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all values         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceValuesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachEntry-long-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachEntry-long-java.util.function.Consumer-"/><a name="forEachEntry-long-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEachEntry</h4><pre>public void forEachEntry(long parallelismThreshold,
                         <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super <a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;&gt; action)</pre><div class="block">Performs the given action for each entry.      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:forEachEntry-long-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachEntry-long-java.util.function.Function-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachEntry-long-java.util.function.Function-java.util.function.Consumer-"/><a name="forEachEntry-long-java.util.function.Function-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>forEachEntry</h4><pre>public &lt;U&gt; void forEachEntry(long parallelismThreshold,
                             <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;,? extends U&gt; transformer,
                             <a href="../../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super U&gt; action)</pre><div class="block">Performs the given action for each non-null transformation of each entry.          </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)                         </dd><dd> <code>action</code> - the action    </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:forEachEntry-long-java.util.function.Function-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:searchEntries-long-java.util.function.Function- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:searchEntries-long-java.util.function.Function-"/><a name="searchEntries-long-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>searchEntries</h4><pre>public &lt;U&gt; U searchEntries(long parallelismThreshold,
                           <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;,? extends U&gt; searchFunction)</pre><div class="block">Returns a non-null result from applying the given search function on each entry, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.                                     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the search function         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>searchFunction</code> - a function returning a non-null result on success, else null            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a non-null result from applying the given search function on each entry, or null if none               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:searchEntries-long-java.util.function.Function-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceEntries-long-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceEntries-long-java.util.function.BiFunction-"/><a name="reduceEntries-long-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduceEntries</h4><pre>public <a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt; reduceEntries(long parallelismThreshold,
                                    <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;,<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;,? extends <a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;&gt; reducer)</pre><div class="block">Returns the result of accumulating all entries using the given reducer to combine values, or null if none.                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating all entries     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceEntries-long-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceEntries-long-java.util.function.Function-java.util.function.BiFunction- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceEntries-long-java.util.function.Function-java.util.function.BiFunction-"/><a name="reduceEntries-long-java.util.function.Function-java.util.function.BiFunction-"/><ul class="blockList"><li class="blockList"><h4>reduceEntries</h4><pre>public &lt;U&gt; U reduceEntries(long parallelismThreshold,
                           <a href="../../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;,? extends U&gt; transformer,
                           <a href="../../../java/util/function/BiFunction.html" title="interface in java.util.function">BiFunction</a>&lt;? super U,? super U,? extends U&gt; reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.                     </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - the return type of the transformer        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)                        </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all entries         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:reduceEntries-long-java.util.function.Function-java.util.function.BiFunction-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceEntriesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceEntriesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/><a name="reduceEntriesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceEntriesToDouble</h4><pre>public double reduceEntriesToDouble(long parallelismThreshold,
                                    <a href="../../../java/util/function/ToDoubleFunction.html" title="interface in java.util.function">ToDoubleFunction</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;&gt; transformer,
                                    double basis,
                                    <a href="../../../java/util/function/DoubleBinaryOperator.html" title="interface in java.util.function">DoubleBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all entries         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceEntriesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceEntriesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceEntriesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/><a name="reduceEntriesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/><ul class="blockList"><li class="blockList"><h4>reduceEntriesToLong</h4><pre>public long reduceEntriesToLong(long parallelismThreshold,
                                <a href="../../../java/util/function/ToLongFunction.html" title="interface in java.util.function">ToLongFunction</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;&gt; transformer,
                                long basis,
                                <a href="../../../java/util/function/LongBinaryOperator.html" title="interface in java.util.function">LongBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all entries         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceEntriesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reduceEntriesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reduceEntriesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/><a name="reduceEntriesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/><ul class="blockListLast"><li class="blockList"><h4>reduceEntriesToInt</h4><pre>public int reduceEntriesToInt(long parallelismThreshold,
                              <a href="../../../java/util/function/ToIntFunction.html" title="interface in java.util.function">ToIntFunction</a>&lt;<a href="../../../java/util/Map.Entry.html" title="interface in java.util">Map.Entry</a>&lt;<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">K</a>,<a href="../../../java/util/concurrent/ConcurrentHashMap.html" title="type parameter in ConcurrentHashMap">V</a>&gt;&gt; transformer,
                              int basis,
                              <a href="../../../java/util/function/IntBinaryOperator.html" title="interface in java.util.function">IntBinaryOperator</a> reducer)</pre><div class="block">Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>parallelismThreshold</code> - the (estimated) number of elements needed for this operation to be executed in parallel                </dd><dd> <code>transformer</code> - a function returning the transformation for an element          </dd><dd> <code>basis</code> - the identity (initial default value) for the reduction          </dd><dd> <code>reducer</code> - a commutative associative combining function       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of accumulating the given transformation of all entries         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>   </dl></li></ul> <a end_ctx_id="method:reduceEntriesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-"/>  </td></tr></table></td></tr></table></diff></diffreport>