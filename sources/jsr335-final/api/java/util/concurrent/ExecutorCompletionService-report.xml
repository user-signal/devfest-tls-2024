<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ExecutorCompletionService [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ExecutorCompletionService"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;V&gt; </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">ExecutorCompletionService&lt;V&gt;</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;V&gt;</pre><div class="block">A <a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent"><code>CompletionService</code></a> that uses a supplied <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent"><code>Executor</code></a> to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using <code>take</code>. The class is lightweight enough to be suitable for transient use when processing groups of tasks.<p> <b>Usage Examples. </b> Suppose you have a set of solvers for a certain problem, each returning a value of some type <code>Result</code>, and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method <code>use(Result r) </code>. You could write this as:<pre> 
<code>
 void solve(Executor e,
            Collection&lt;Callable&lt;Result&gt;&gt; solvers)
     throws InterruptedException, ExecutionException {
     CompletionService&lt;Result&gt; ecs
         = new ExecutorCompletionService&lt;Result&gt;(e);
     for (Callable&lt;Result&gt; s : solvers)
         ecs.submit(s);
     int n = solvers.size();
     for (int i = 0; i &lt; n; ++i) {
         Result r = ecs.take().get();
         if (r != null)
             use(r);
     }
 }</code></pre> Suppose instead that you would like to use the first non-null result of the set of tasks, ignoring any that encounter exceptions, and cancelling all other tasks when the first one is ready:<pre> 
<code>
 void solve(Executor e,
            Collection&lt;Callable&lt;Result&gt;&gt; solvers)
     throws InterruptedException {
     CompletionService&lt;Result&gt; ecs
         = new ExecutorCompletionService&lt;Result&gt;(e);
     int n = solvers.size();
     List&lt;Future&lt;Result&gt;&gt; futures
         = new ArrayList&lt;Future&lt;Result&gt;&gt;(n);
     Result result = null;
     try {
         for (Callable&lt;Result&gt; s : solvers)
             futures.add(ecs.submit(s));
         for (int i = 0; i &lt; n; ++i) {
             try {
                 Result r = ecs.take().get();
                 if (r != null) {
                     result = r;
                     break;
                 }
             } catch (ExecutionException ignore) {}
         }
     }
     finally {
         for (Future&lt;Result&gt; f : futures)
             f.cancel(true);
     }

     if (result != null)
         use(result);
 }</code></pre>                                                                                 </p>                                         </div>  </li></ul> </div> <a end_ctx_id="class:ExecutorCompletionService"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ExecutorCompletionService-java.util.concurrent.Executor- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ExecutorCompletionService-java.util.concurrent.Executor-"/><a name="ExecutorCompletionService-java.util.concurrent.Executor-"/><ul class="blockList"><li class="blockList"><h4>ExecutorCompletionService</h4><pre>public ExecutorCompletionService(<a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent">Executor</a> executor)</pre><div class="block">Creates an ExecutorCompletionService using the supplied executor for base task execution and a <a href="../../../java/util/concurrent/LinkedBlockingQueue.html" title="class in java.util.concurrent"><code>LinkedBlockingQueue</code></a> as a completion queue.                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>executor</code> - the executor to use      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if executor is <code>null</code>      </dd>  </dl></li></ul> <a end_ctx_id="constructor:ExecutorCompletionService-java.util.concurrent.Executor-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:ExecutorCompletionService-java.util.concurrent.Executor-java.util.concurrent.BlockingQueue- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:ExecutorCompletionService-java.util.concurrent.Executor-java.util.concurrent.BlockingQueue-"/><a name="ExecutorCompletionService-java.util.concurrent.Executor-java.util.concurrent.BlockingQueue-"/><ul class="blockListLast"><li class="blockList"><h4>ExecutorCompletionService</h4><pre>public ExecutorCompletionService(<a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent">Executor</a> executor,
                                 <a href="../../../java/util/concurrent/BlockingQueue.html" title="interface in java.util.concurrent">BlockingQueue</a>&lt;<a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt;&gt; completionQueue)</pre><div class="block">Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>executor</code> - the executor to use      </dd><dd> <code>completionQueue</code> - the queue to use as the completion queue normally one dedicated for use by this service. This queue is treated as unbounded -- failed attempted <code>Queue.add</code> operations for completed tasks cause them not to be retrievable.                                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if executor or completionQueue are <code>null</code>        </dd>  </dl></li></ul> <a end_ctx_id="constructor:ExecutorCompletionService-java.util.concurrent.Executor-java.util.concurrent.BlockingQueue-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.util.concurrent.Callable-"/><a name="submit-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>public <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt; submit(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt; task)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/CompletionService.html#submit-java.util.concurrent.Callable-">CompletionService</a></code>   </span> </div><div class="block">Submits a value-returning task for execution and returns a Future representing the pending results of the task. Upon completion, this task may be taken or polled.                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/CompletionService.html#submit-java.util.concurrent.Callable-">submit</a></code> in interface <code><a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd>   </dl></li></ul> <a name="submit-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:submit-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-V-"/><a name="submit-java.lang.Runnable-V-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>public <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt; submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> task,
                        <a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a> result)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/CompletionService.html#submit-java.lang.Runnable-V-">CompletionService</a></code>   </span> </div><div class="block">Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled.                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/CompletionService.html#submit-java.lang.Runnable-V-">submit</a></code> in interface <code><a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd><dd> <code>result</code> - the result to return upon successful completion         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task, and whose <code>get()</code> method will return the given result value upon completion                   </dd>   </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:take-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:take--"/><a name="take--"/><ul class="blockList"><li class="blockList"><h4>take</h4><pre>public <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt; take()
               throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/CompletionService.html#take--">CompletionService</a></code>   </span> </div><div class="block">Retrieves and removes the Future representing the next completed task, waiting if none are yet present.               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/CompletionService.html#take--">take</a></code> in interface <code><a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Future representing the next completed task      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:take--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll--"/><a name="poll--"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre>public <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt; poll()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/CompletionService.html#poll--">CompletionService</a></code>   </span> </div><div class="block">Retrieves and removes the Future representing the next completed task, or <code>null</code> if none are present.               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/CompletionService.html#poll--">poll</a></code> in interface <code><a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Future representing the next completed task, or <code>null</code> if none are present            </dd>  </dl></li></ul> <a end_ctx_id="method:poll--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/><a name="poll-long-java.util.concurrent.TimeUnit-"/><ul class="blockListLast"><li class="blockList"><h4>poll</h4><pre>public <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt; poll(long timeout,
                      <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
               throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/CompletionService.html#poll-long-java.util.concurrent.TimeUnit-">CompletionService</a></code>   </span> </div><div class="block">Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/CompletionService.html#poll-long-java.util.concurrent.TimeUnit-">poll</a></code> in interface <code><a href="../../../java/util/concurrent/CompletionService.html" title="interface in java.util.concurrent">CompletionService</a>&lt;<a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="type parameter in ExecutorCompletionService">V</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Future representing the next completed task or <code>null</code> if the specified waiting time elapses before one is present                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>    </dl></li></ul> <a end_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table></diff></diffreport>