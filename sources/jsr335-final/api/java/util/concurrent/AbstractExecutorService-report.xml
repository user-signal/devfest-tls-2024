<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:AbstractExecutorService [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:AbstractExecutorService"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent">Executor</a>, <a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a>  </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../../java/util/concurrent/ForkJoinPool.html" title="class in java.util.concurrent">ForkJoinPool</a>, <a href="../../../java/util/concurrent/ThreadPoolExecutor.html" title="class in java.util.concurrent">ThreadPoolExecutor</a>  </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">AbstractExecutorService</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></pre><div class="block">Provides default implementations of <a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent"><code>ExecutorService</code></a> execution methods. This class implements the <code>submit</code>, <code>invokeAny</code> and <code>invokeAll</code> methods using a <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent"><code>RunnableFuture</code></a> returned by <code>newTaskFor</code>, which defaults to the <a href="../../../java/util/concurrent/FutureTask.html" title="class in java.util.concurrent"><code>FutureTask</code></a> class provided in this package. For example, the implementation of <code>submit(Runnable)</code> creates an associated <code>RunnableFuture</code> that is executed and returned. Subclasses may override the <code>newTaskFor</code> methods to return <code>RunnableFuture</code> implementations other than <code>FutureTask</code>.<p> <b>Extension example </b>. Here is a sketch of a class that customizes <a href="../../../java/util/concurrent/ThreadPoolExecutor.html" title="class in java.util.concurrent"><code>ThreadPoolExecutor</code></a> to use a <code>CustomTask</code> class instead of the default <code>FutureTask</code>:<pre> 
<code>
 public class CustomThreadPoolExecutor extends ThreadPoolExecutor {

   static class CustomTask&lt;V&gt; implements RunnableFuture&lt;V&gt; {...}

   protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Callable&lt;V&gt; c) {
       return new CustomTask&lt;V&gt;(c);
   }
   protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Runnable r, V v) {
       return new CustomTask&lt;V&gt;(r, v);
   }
   // ... add constructors, etc.
 }</code></pre>                     </p>                                                           </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:AbstractExecutorService"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:AbstractExecutorService-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:AbstractExecutorService--"/><a name="AbstractExecutorService--"/><ul class="blockListLast"><li class="blockList"><h4>AbstractExecutorService</h4><pre>public AbstractExecutorService()</pre></li></ul> <a end_ctx_id="constructor:AbstractExecutorService--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newTaskFor-java.lang.Runnable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:newTaskFor-java.lang.Runnable-T-"/><a name="newTaskFor-java.lang.Runnable-T-"/><ul class="blockList"><li class="blockList"><h4>newTaskFor</h4><pre>protected &lt;T&gt; <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;T&gt; newTaskFor(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> runnable,
                                           T value)</pre><div class="block">Returns a <code>RunnableFuture</code> for the given runnable and default value.         </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the given value        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>runnable</code> - the runnable task being wrapped       </dd><dd> <code>value</code> - the default value for the returned future         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>RunnableFuture</code> which, when run, will run the underlying runnable and which, as a <code>Future</code>, will yield the given value as its result and provide for cancellation of the underlying task                              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>    </dl></li></ul> <a end_ctx_id="method:newTaskFor-java.lang.Runnable-T-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newTaskFor-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newTaskFor-java.util.concurrent.Callable-"/><a name="newTaskFor-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>newTaskFor</h4><pre>protected &lt;T&gt; <a href="../../../java/util/concurrent/RunnableFuture.html" title="interface in java.util.concurrent">RunnableFuture</a>&lt;T&gt; newTaskFor(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt; callable)</pre><div class="block">Returns a <code>RunnableFuture</code> for the given callable task.       </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the callable's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>callable</code> - the callable task being wrapped       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>RunnableFuture</code> which, when run, will call the underlying callable and which, as a <code>Future</code>, will yield the callable's result as its result and provide for cancellation of the underlying task                              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>    </dl></li></ul> <a end_ctx_id="method:newTaskFor-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-"/><a name="submit-java.lang.Runnable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>public <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;?&gt; submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> task)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-">ExecutorService</a></code>   </span> </div><div class="block">Submits a Runnable task for execution and returns a Future representing that task. The Future's <code>get</code> method will return <code>null</code> upon <em>successful</em> completion.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-">submit</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>    </dl></li></ul> <a name="submit-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:submit-java.lang.Runnable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-T-"/><a name="submit-java.lang.Runnable-T-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>public &lt;T&gt; <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt; submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> task,
                            T result)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-T-">ExecutorService</a></code>   </span> </div><div class="block">Submits a Runnable task for execution and returns a Future representing that task. The Future's <code>get</code> method will return the given result upon successful completion.                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-T-">submit</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the result       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd><dd> <code>result</code> - the result to return      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>     </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.util.concurrent.Callable-"/><a name="submit-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre>public &lt;T&gt; <a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt; submit(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt; task)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.util.concurrent.Callable-">ExecutorService</a></code>   </span> </div><div class="block">Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future's <code>get</code> method will return the task's result upon successful completion.<p> If you would like to immediately block waiting for a task, you can use constructions of the form <code>result = exec.submit(aCallable).get();  </code>                   </p><p>Note: The <a href="../../../java/util/concurrent/Executors.html" title="class in java.util.concurrent"><code>Executors</code></a> class includes a set of methods that can convert some other common closure-like objects, for example, <a href="../../../java/security/PrivilegedAction.html" title="interface in java.security"><code>PrivilegedAction</code></a> to <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent"><code>Callable</code></a> form so they can be submitted.                           </p>                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#submit-java.util.concurrent.Callable-">submit</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the task's result        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>     </dl></li></ul> <a end_ctx_id="method:submit-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAny-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAny-java.util.Collection-"/><a name="invokeAny-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>invokeAny</h4><pre>public &lt;T&gt; T invokeAny(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks)
                throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                       <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAny-java.util.Collection-">ExecutorService</a></code>   </span> </div><div class="block">Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                   </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAny-java.util.Collection-">invokeAny</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result returned by one of the tasks       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if no task successfully completes       </dd>     </dl></li></ul> <a end_ctx_id="method:invokeAny-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><a name="invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>invokeAny</h4><pre>public &lt;T&gt; T invokeAny(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks,
                       long timeout,
                       <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
                throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a>,
                       <a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a>,
                       <a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-">ExecutorService</a></code>   </span> </div><div class="block">Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-">invokeAny</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result returned by one of the tasks       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd><dd> <code><a href="../../../java/util/concurrent/ExecutionException.html" title="class in java.util.concurrent">ExecutionException</a></code> - if no task successfully completes       </dd><dd> <code><a href="../../../java/util/concurrent/TimeoutException.html" title="class in java.util.concurrent">TimeoutException</a></code> - if the given timeout elapses before any task successfully completes            </dd>     </dl></li></ul> <a end_ctx_id="method:invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.Collection-"/><a name="invokeAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>invokeAll</h4><pre>public &lt;T&gt; <a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt;&gt; invokeAll(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks)
                              throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-">ExecutorService</a></code>   </span> </div><div class="block">Executes the given tasks, returning a list of Futures holding their status and results when all complete. <a href="../../../java/util/concurrent/Future.html#isDone--"><code>Future.isDone()</code></a> is <code>true</code> for each element of the returned list. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-">invokeAll</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case unfinished tasks are cancelled             </dd>     </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><a name="invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-"/><ul class="blockListLast"><li class="blockList"><h4>invokeAll</h4><pre>public &lt;T&gt; <a href="../../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;T&gt;&gt; invokeAll(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;T&gt;&gt; tasks,
                                     long timeout,
                                     <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
                              throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-">ExecutorService</a></code>   </span> </div><div class="block">Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first. <a href="../../../java/util/concurrent/Future.html#isDone--"><code>Future.isDone()</code></a> is <code>true</code> for each element of the returned list. Upon return, tasks that have not completed are cancelled. Note that a <em>completed</em> task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.                                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-">invokeAll</a></code> in interface <code><a href="../../../java/util/concurrent/ExecutorService.html" title="interface in java.util.concurrent">ExecutorService</a></code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the values returned from the tasks           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>tasks</code> - the collection of tasks      </dd><dd> <code>timeout</code> - the maximum time to wait       </dd><dd> <code>unit</code> - the time unit of the timeout argument         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed.                                              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting, in which case unfinished tasks are cancelled             </dd>     </dl></li></ul> <a end_ctx_id="method:invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table></diff></diffreport>