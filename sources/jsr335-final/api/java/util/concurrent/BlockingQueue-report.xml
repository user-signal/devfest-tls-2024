<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:BlockingQueue [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:BlockingQueue"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements held in this collection          </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt;   </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../../java/util/concurrent/BlockingDeque.html" title="interface in java.util.concurrent">BlockingDeque</a>&lt;E&gt;, <a href="../../../java/util/concurrent/TransferQueue.html" title="interface in java.util.concurrent">TransferQueue</a>&lt;E&gt;  </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../../java/util/concurrent/ArrayBlockingQueue.html" title="class in java.util.concurrent">ArrayBlockingQueue</a>, <a href="../../../java/util/concurrent/DelayQueue.html" title="class in java.util.concurrent">DelayQueue</a>, <a href="../../../java/util/concurrent/LinkedBlockingDeque.html" title="class in java.util.concurrent">LinkedBlockingDeque</a>, <a href="../../../java/util/concurrent/LinkedBlockingQueue.html" title="class in java.util.concurrent">LinkedBlockingQueue</a>, <a href="../../../java/util/concurrent/LinkedTransferQueue.html" title="class in java.util.concurrent">LinkedTransferQueue</a>, <a href="../../../java/util/concurrent/PriorityBlockingQueue.html" title="class in java.util.concurrent">PriorityBlockingQueue</a>, <a href="../../../java/util/concurrent/SynchronousQueue.html" title="class in java.util.concurrent">SynchronousQueue</a>       </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">BlockingQueue&lt;E&gt;</span>
extends <a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt;</pre><div class="block">A <a href="../../../java/util/Queue.html" title="interface in java.util"><code>Queue</code></a> that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.<p> <code>BlockingQueue</code> methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either <code>null</code> or <code>false</code>, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table:<table border="" cellpadding="3" cellspacing="1"> <caption>Summary of BlockingQueue methods   </caption><tbody><tr><td/><td align="CENTER"><em>Throws exception </em></td><td align="CENTER"><em>Special value </em></td><td align="CENTER"><em>Blocks</em></td><td align="CENTER"><em>Times out </em></td></tr><tr><td><b>Insert</b></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#add-E-"><code>add(e)</code></a></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#offer-E-"><code>offer(e)</code></a></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#put-E-"><code>put(e)</code></a></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-"><code>offer(e, time, unit)  </code></a></td></tr><tr><td><b>Remove</b></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#remove-java.lang.Object-"><code>remove()</code></a></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll()</code></a></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#take--"><code>take()</code></a></td><td><a href="../../../java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-"><code>poll(time, unit) </code></a></td></tr><tr><td><b>Examine</b></td><td><a href="../../../java/util/Queue.html#element--"><code>element()</code></a></td><td><a href="../../../java/util/Queue.html#peek--"><code>peek()</code></a></td><td><em>not applicable </em></td><td><em>not applicable </em></td></tr></tbody> </table>                                                                               </p><p>A <code>BlockingQueue</code> does not accept <code>null</code> elements. Implementations throw <code>NullPointerException</code> on attempts to <code>add</code>, <code>put</code> or <code>offer</code> a <code>null</code>. A <code>null</code> is used as a sentinel value to indicate failure of <code>poll</code> operations.                                </p><p>A <code>BlockingQueue</code> may be capacity bounded. At any given time it may have a <code>remainingCapacity</code> beyond which no additional elements can be <code>put</code> without blocking. A <code>BlockingQueue</code> without any intrinsic capacity constraints always reports a remaining capacity of <code>Integer.MAX_VALUE</code>.                                      </p><p> <code>BlockingQueue</code> implementations are designed to be used primarily for producer-consumer queues, but additionally support the <a href="../../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> interface. So, for example, it is possible to remove an arbitrary element from a queue using <code>remove(x)</code>. However, such operations are in general <em>not</em> performed very efficiently, and are intended for only occasional use, such as when a queued message is cancelled.                                                          </p><p> <code>BlockingQueue</code> implementations are thread-safe. All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the <em>bulk</em> Collection operations <code>addAll</code>, <code>containsAll</code>, <code>retainAll</code> and <code>removeAll</code> are <em>not</em> necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for <code>addAll(c)</code> to fail (throwing an exception) after adding only some of the elements in <code>c</code>.                                                               </p><p>A <code>BlockingQueue</code> does <em>not</em> intrinsically support any kind of "close" or "shutdown" operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special <em>end-of-stream</em> or <em>poison</em> objects, that are interpreted accordingly when taken by consumers.                                                       </p><p> Usage example, based on a typical producer-consumer scenario. Note that a <code>BlockingQueue</code> can safely be used with multiple producers and multiple consumers.<pre> 
<code>
 class Producer implements Runnable {
   private final BlockingQueue queue;
   Producer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { queue.put(produce()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   Object produce() { ... }
 }

 class Consumer implements Runnable {
   private final BlockingQueue queue;
   Consumer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { consume(queue.take()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   void consume(Object x) { ... }
 }

 class Setup {
   void main() {
     BlockingQueue q = new SomeQueueImplementation();
     Producer p = new Producer(q);
     Consumer c1 = new Consumer(q);
     Consumer c2 = new Consumer(q);
     new Thread(p).start();
     new Thread(c1).start();
     new Thread(c2).start();
   }
 }</code></pre>                      </p><p>Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a <code>BlockingQueue</code><a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> actions subsequent to the access or removal of that element from the <code>BlockingQueue</code> in another thread.                                   </p><p>This interface is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                               </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:BlockingQueue"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>boolean add(<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a> e)</pre><div class="block">Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning <code>true</code> upon success and throwing an <code>IllegalStateException</code> if no space is currently available. When using a capacity-restricted queue, it is generally preferable to use <a href="../../../java/util/concurrent/BlockingQueue.html#offer-E-"><code>offer</code></a>.                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Queue.html#add-E-">add</a></code> in interface <code><a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../../java/util/Collection.html#add-E-"><code>Collection.add(E)</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to capacity restrictions               </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>     </dl></li></ul> <a name="offer-java.lang.Object-"/><a end_ctx_id="method:add-E-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offer-E-"/><a name="offer-E-"/><ul class="blockList"><li class="blockList"><h4>offer</h4><pre>boolean offer(<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a> e)</pre><div class="block">Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning <code>true</code> upon success and <code>false</code> if no space is currently available. When using a capacity-restricted queue, this method is generally preferable to <a href="../../../java/util/concurrent/BlockingQueue.html#add-E-"><code>add(E)</code></a>, which can fail to insert an element only by throwing an exception.                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Queue.html#offer-E-">offer</a></code> in interface <code><a href="../../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was added to this queue, else <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>    </dl></li></ul> <a name="put-java.lang.Object-"/><a end_ctx_id="method:offer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:put-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:put-E-"/><a name="put-E-"/><ul class="blockList"><li class="blockList"><h4>put</h4><pre>void put(<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a> e)
  throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Inserts the specified element into this queue, waiting if necessary for space to become available.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>  </dl></li></ul> <a name="offer-java.lang.Object-long-java.util.concurrent.TimeUnit-"/><a end_ctx_id="method:put-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offer-E-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offer-E-long-java.util.concurrent.TimeUnit-"/><a name="offer-E-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>offer</h4><pre>boolean offer(<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a> e,
              long timeout,
              <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
       throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if successful, or <code>false</code> if the specified waiting time elapses before space is available               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this queue                 </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this queue                 </dd>   </dl></li></ul> <a end_ctx_id="method:offer-E-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:take-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:take--"/><a name="take--"/><ul class="blockList"><li class="blockList"><h4>take</h4><pre><a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a> take()
throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>  </dl></li></ul> <a end_ctx_id="method:take--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/><a name="poll-long-java.util.concurrent.TimeUnit-"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre><a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a> poll(long timeout,
       <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this queue, or <code>null</code> if the specified waiting time elapses before an element is available                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remainingCapacity-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remainingCapacity--"/><a name="remainingCapacity--"/><ul class="blockList"><li class="blockList"><h4>remainingCapacity</h4><pre>int remainingCapacity()</pre><div class="block">Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or <code>Integer.MAX_VALUE</code> if there is no intrinsic limit.<p>Note that you <em>cannot</em> always tell if an attempt to insert an element will succeed by inspecting <code>remainingCapacity</code> because it may be the case that another thread is about to insert or remove an element.                                  </p>                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the remaining capacity  </dd> </dl></li></ul> <a end_ctx_id="method:remainingCapacity--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>boolean remove(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element <code>e</code> such that <code>o.equals(e)</code>, if this queue contains one or more such elements. Returns <code>true</code> if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to be removed from this queue, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this queue changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element is incompatible with this queue (<a href="../Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null (<a href="../Collection.html#optional-restrictions">optional</a>)         </dd>    </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:contains-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:contains-java.lang.Object-"/><a name="contains-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>contains</h4><pre>boolean contains(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns <code>true</code> if this queue contains the specified element. More formally, returns <code>true</code> if and only if this queue contains at least one element <code>e</code> such that <code>o.equals(e)</code>.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/Collection.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - object to be checked for containment in this queue           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this queue contains the specified element        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element is incompatible with this queue (<a href="../Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null (<a href="../Collection.html#optional-restrictions">optional</a>)         </dd>    </dl></li></ul> <a end_ctx_id="method:contains-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:drainTo-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:drainTo-java.util.Collection-"/><a name="drainTo-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>drainTo</h4><pre>int drainTo(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? super <a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt; c)</pre><div class="block">Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection <code>c</code> may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in <code>IllegalArgumentException</code>. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.                                                                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection to transfer elements into        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements transferred    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if addition of elements is not supported by the specified collection             </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of an element of this queue prevents it from being added to the specified collection                    </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection                           </dd>   </dl></li></ul> <a end_ctx_id="method:drainTo-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:drainTo-java.util.Collection-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:drainTo-java.util.Collection-int-"/><a name="drainTo-java.util.Collection-int-"/><ul class="blockListLast"><li class="blockList"><h4>drainTo</h4><pre>int drainTo(<a href="../../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? super <a href="../../../java/util/concurrent/BlockingQueue.html" title="type parameter in BlockingQueue">E</a>&gt; c,
            int maxElements)</pre><div class="block">Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection <code>c</code> may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in <code>IllegalArgumentException</code>. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.                                                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection to transfer elements into        </dd><dd> <code>maxElements</code> - the maximum number of elements to transfer         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements transferred    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if addition of elements is not supported by the specified collection             </dd><dd> <code><a href="../../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of an element of this queue prevents it from being added to the specified collection                    </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection is null        </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection                           </dd>   </dl></li></ul> <a end_ctx_id="method:drainTo-java.util.Collection-int-"/>  </td></tr></table></td></tr></table></diff></diffreport>