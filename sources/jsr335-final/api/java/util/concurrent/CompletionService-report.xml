<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:CompletionService [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:CompletionService"/><ul class="blockList"><li class="blockList"><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="class in java.util.concurrent">ExecutorCompletionService</a> </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">CompletionService&lt;V&gt;</span></pre><div class="block">A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks. Producers <code>submit</code> tasks for execution. Consumers <code>take</code> completed tasks and process their results in the order they complete. A <code>CompletionService</code> can for example be used to manage asynchronous I/O, in which tasks that perform reads are submitted in one part of a program or system, and then acted upon in a different part of the program when the reads complete, possibly in a different order than they were requested.<p>Typically, a <code>CompletionService</code> relies on a separate <a href="../../../java/util/concurrent/Executor.html" title="interface in java.util.concurrent"><code>Executor</code></a> to actually execute the tasks, in which case the <code>CompletionService</code> only manages an internal completion queue. The <a href="../../../java/util/concurrent/ExecutorCompletionService.html" title="class in java.util.concurrent"><code>ExecutorCompletionService</code></a> class provides an implementation of this approach.                                </p><p>Memory consistency effects: Actions in a thread prior to submitting a task to a <code>CompletionService</code><a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a> actions taken by that task, which in turn <i>happen-before</i> actions following a successful return from the corresponding <code>take()</code>.                                </p>                                                                                       </div>  </li></ul> </div> <a end_ctx_id="class:CompletionService"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.util.concurrent.Callable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.util.concurrent.Callable-"/><a name="submit-java.util.concurrent.Callable-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a>&gt; submit(<a href="../../../java/util/concurrent/Callable.html" title="interface in java.util.concurrent">Callable</a>&lt;<a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a>&gt; task)</pre><div class="block">Submits a value-returning task for execution and returns a Future representing the pending results of the task. Upon completion, this task may be taken or polled.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>   </dl></li></ul> <a name="submit-java.lang.Runnable-java.lang.Object-"/><a end_ctx_id="method:submit-java.util.concurrent.Callable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:submit-java.lang.Runnable-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:submit-java.lang.Runnable-V-"/><a name="submit-java.lang.Runnable-V-"/><ul class="blockList"><li class="blockList"><h4>submit</h4><pre><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a>&gt; submit(<a href="../../../java/lang/Runnable.html" title="interface in java.lang">Runnable</a> task,
                 <a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a> result)</pre><div class="block">Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled.                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>task</code> - the task to submit      </dd><dd> <code>result</code> - the result to return upon successful completion         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a Future representing pending completion of the task, and whose <code>get()</code> method will return the given result value upon completion                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/concurrent/RejectedExecutionException.html" title="class in java.util.concurrent">RejectedExecutionException</a></code> - if the task cannot be scheduled for execution          </dd><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the task is null       </dd>   </dl></li></ul> <a end_ctx_id="method:submit-java.lang.Runnable-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:take-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:take--"/><a name="take--"/><ul class="blockList"><li class="blockList"><h4>take</h4><pre><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a>&gt; take()
        throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Retrieves and removes the Future representing the next completed task, waiting if none are yet present.               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Future representing the next completed task      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>  </dl></li></ul> <a end_ctx_id="method:take--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll--"/><a name="poll--"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a>&gt; poll()</pre><div class="block">Retrieves and removes the Future representing the next completed task, or <code>null</code> if none are present.               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Future representing the next completed task, or <code>null</code> if none are present            </dd> </dl></li></ul> <a end_ctx_id="method:poll--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-long-java.util.concurrent.TimeUnit- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/><a name="poll-long-java.util.concurrent.TimeUnit-"/><ul class="blockListLast"><li class="blockList"><h4>poll</h4><pre><a href="../../../java/util/concurrent/Future.html" title="interface in java.util.concurrent">Future</a>&lt;<a href="../../../java/util/concurrent/CompletionService.html" title="type parameter in CompletionService">V</a>&gt; poll(long timeout,
               <a href="../../../java/util/concurrent/TimeUnit.html" title="enum in java.util.concurrent">TimeUnit</a> unit)
        throws <a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></pre><div class="block">Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>timeout</code> - how long to wait before giving up, in units of <code>unit</code>             </dd><dd> <code>unit</code> - a <code>TimeUnit</code> determining how to interpret the <code>timeout</code> parameter           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the Future representing the next completed task or <code>null</code> if the specified waiting time elapses before one is present                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/InterruptedException.html" title="class in java.lang">InterruptedException</a></code> - if interrupted while waiting      </dd>   </dl></li></ul> <a end_ctx_id="method:poll-long-java.util.concurrent.TimeUnit-"/>  </td></tr></table></td></tr></table></diff></diffreport>