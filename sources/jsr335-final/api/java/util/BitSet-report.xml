<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:BitSet [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:BitSet"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>  </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">BitSet</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">This class implements a vector of bits that grows as needed. Each component of the bit set has a <code>boolean</code> value. The bits of a <code>BitSet</code> are indexed by nonnegative integers. Individual indexed bits can be examined, set, or cleared. One <code>BitSet</code> may be used to modify the contents of another <code>BitSet</code> through logical AND, logical inclusive OR, and logical exclusive OR operations.<p>By default, all bits in the set initially have the value <code>false</code>.           </p><p>Every bit set has a current size, which is the number of bits of space currently in use by the bit set. Note that the size is related to the implementation of a bit set, so it may change with implementation. The length of a bit set relates to logical length of a bit set and is defined independently of implementation.                                                            </p><p>Unless otherwise noted, passing a null parameter to any of the methods in a <code>BitSet</code> will result in a <code>NullPointerException</code>.                   </p><p>A <code>BitSet</code> is not safe for multithreaded use without external synchronization.          </p>                                                              </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../serialized-form.html#java.util.BitSet">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:BitSet"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:BitSet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:BitSet--"/><a name="BitSet--"/><ul class="blockList"><li class="blockList"><h4>BitSet</h4><pre>public BitSet()</pre><div class="block">Creates a new bit set. All bits are initially <code>false</code>.         </div></li></ul> <a end_ctx_id="constructor:BitSet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:BitSet-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:BitSet-int-"/><a name="BitSet-int-"/><ul class="blockListLast"><li class="blockList"><h4>BitSet</h4><pre>public BitSet(int nbits)</pre><div class="block">Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range <code>0</code> through <code>nbits-1</code>. All bits are initially <code>false</code>.                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nbits</code> - the initial size of the bit set         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NegativeArraySizeException.html" title="class in java.lang">NegativeArraySizeException</a></code> - if the specified initial size is negative         </dd>  </dl></li></ul> <a end_ctx_id="constructor:BitSet-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-long:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-long:A-"/><a name="valueOf-long:A-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> valueOf(long[] longs)</pre><div class="block">Returns a new bit set containing all the bits in the given long array.<p>More precisely, <br/> <code>BitSet.valueOf(longs).get(n) == ((longs[n/64] &amp; (1L&lt;&lt;(n%64))) != 0)      </code> <br/>for all <code>n &lt; 64 * longs.length    </code>.      </p><p>This method is equivalent to <code>BitSet.valueOf(LongBuffer.wrap(longs))</code>.     </p>             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>longs</code> - a long array containing a little-endian representation of a sequence of bits to be used as the initial bits of the new bit set                          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>BitSet</code> containing all the bits in the long array         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-long:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.nio.LongBuffer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.nio.LongBuffer-"/><a name="valueOf-java.nio.LongBuffer-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> valueOf(<a href="../../java/nio/LongBuffer.html" title="class in java.nio">LongBuffer</a> lb)</pre><div class="block">Returns a new bit set containing all the bits in the given long buffer between its position and limit.<p>More precisely, <br/> <code>BitSet.valueOf(lb).get(n) == ((lb.get(lb.position()+n/64) &amp; (1L&lt;&lt;(n%64))) != 0)      </code> <br/>for all <code>n &lt; 64 * lb.remaining()    </code>.      </p><p>The long buffer is not modified by this method, and no reference to the buffer is retained by the bit set.                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>lb</code> - a long buffer containing a little-endian representation of a sequence of bits between its position and limit, to be used as the initial bits of the new bit set                               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>BitSet</code> containing all the bits in the buffer in the specified range            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.nio.LongBuffer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-byte:A-"/><a name="valueOf-byte:A-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> valueOf(byte[] bytes)</pre><div class="block">Returns a new bit set containing all the bits in the given byte array.<p>More precisely, <br/> <code>BitSet.valueOf(bytes).get(n) == ((bytes[n/8] &amp; (1&lt;&lt;(n%8))) != 0)      </code> <br/>for all <code>n &lt; 8 * bytes.length    </code>.      </p><p>This method is equivalent to <code>BitSet.valueOf(ByteBuffer.wrap(bytes))</code>.     </p>             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bytes</code> - a byte array containing a little-endian representation of a sequence of bits to be used as the initial bits of the new bit set                          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>BitSet</code> containing all the bits in the byte array         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:valueOf-java.nio.ByteBuffer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:valueOf-java.nio.ByteBuffer-"/><a name="valueOf-java.nio.ByteBuffer-"/><ul class="blockList"><li class="blockList"><h4>valueOf</h4><pre>public static <a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> valueOf(<a href="../../java/nio/ByteBuffer.html" title="class in java.nio">ByteBuffer</a> bb)</pre><div class="block">Returns a new bit set containing all the bits in the given byte buffer between its position and limit.<p>More precisely, <br/> <code>BitSet.valueOf(bb).get(n) == ((bb.get(bb.position()+n/8) &amp; (1&lt;&lt;(n%8))) != 0)      </code> <br/>for all <code>n &lt; 8 * bb.remaining()    </code>.      </p><p>The byte buffer is not modified by this method, and no reference to the buffer is retained by the bit set.                    </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bb</code> - a byte buffer containing a little-endian representation of a sequence of bits between its position and limit, to be used as the initial bits of the new bit set                               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>BitSet</code> containing all the bits in the buffer in the specified range            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:valueOf-java.nio.ByteBuffer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toByteArray-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toByteArray--"/><a name="toByteArray--"/><ul class="blockList"><li class="blockList"><h4>toByteArray</h4><pre>public byte[] toByteArray()</pre><div class="block">Returns a new byte array containing all the bits in this bit set.<p>More precisely, if <br/> <code>byte[] bytes = s.toByteArray();   </code> <br/>then <code>bytes.length == (s.length()+7)/8  </code> and <br/> <code>s.get(n) == ((bytes[n/8] &amp; (1&lt;&lt;(n%8))) != 0)      </code> <br/>for all <code>n &lt; 8 * bytes.length    </code>.            </p>            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a byte array containing a little-endian representation of all the bits in this bit set              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:toByteArray--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toLongArray-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toLongArray--"/><a name="toLongArray--"/><ul class="blockList"><li class="blockList"><h4>toLongArray</h4><pre>public long[] toLongArray()</pre><div class="block">Returns a new long array containing all the bits in this bit set.<p>More precisely, if <br/> <code>long[] longs = s.toLongArray();   </code> <br/>then <code>longs.length == (s.length()+63)/64  </code> and <br/> <code>s.get(n) == ((longs[n/64] &amp; (1L&lt;&lt;(n%64))) != 0)      </code> <br/>for all <code>n &lt; 64 * longs.length    </code>.            </p>            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a long array containing a little-endian representation of all the bits in this bit set              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:toLongArray--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flip-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flip-int-"/><a name="flip-int-"/><ul class="blockList"><li class="blockList"><h4>flip</h4><pre>public void flip(int bitIndex)</pre><div class="block">Sets the bit at the specified index to the complement of its current value.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bitIndex</code> - the index of the bit to flip         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:flip-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flip-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flip-int-int-"/><a name="flip-int-int-"/><ul class="blockList"><li class="blockList"><h4>flip</h4><pre>public void flip(int fromIndex,
                 int toIndex)</pre><div class="block">Sets each bit from the specified <code>fromIndex</code> (inclusive) to the specified <code>toIndex</code> (exclusive) to the complement of its current value.                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - index of the first bit to flip         </dd><dd> <code>toIndex</code> - index after the last bit to flip         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, or <code>toIndex</code> is negative, or <code>fromIndex</code> is larger than <code>toIndex</code>                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:flip-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-int-"/><a name="set-int-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>public void set(int bitIndex)</pre><div class="block">Sets the bit at the specified index to <code>true</code>.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bitIndex</code> - a bit index     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd>   </dl></li></ul> <a end_ctx_id="method:set-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-int-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-int-boolean-"/><a name="set-int-boolean-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>public void set(int bitIndex,
                boolean value)</pre><div class="block">Sets the bit at the specified index to the specified value.          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bitIndex</code> - a bit index     </dd><dd> <code>value</code> - a boolean value to set       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:set-int-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-int-int-"/><a name="set-int-int-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>public void set(int fromIndex,
                int toIndex)</pre><div class="block">Sets the bits from the specified <code>fromIndex</code> (inclusive) to the specified <code>toIndex</code> (exclusive) to <code>true</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - index of the first bit to be set          </dd><dd> <code>toIndex</code> - index after the last bit to be set          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, or <code>toIndex</code> is negative, or <code>fromIndex</code> is larger than <code>toIndex</code>                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:set-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-int-int-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-int-int-boolean-"/><a name="set-int-int-boolean-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>public void set(int fromIndex,
                int toIndex,
                boolean value)</pre><div class="block">Sets the bits from the specified <code>fromIndex</code> (inclusive) to the specified <code>toIndex</code> (exclusive) to the specified value.                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - index of the first bit to be set          </dd><dd> <code>toIndex</code> - index after the last bit to be set          </dd><dd> <code>value</code> - value to set the selected bits to         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, or <code>toIndex</code> is negative, or <code>fromIndex</code> is larger than <code>toIndex</code>                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:set-int-int-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear-int-"/><a name="clear-int-"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear(int bitIndex)</pre><div class="block">Sets the bit specified by the index to <code>false</code>.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bitIndex</code> - the index of the bit to be cleared          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>JDK1.0</dd>   </dl></li></ul> <a end_ctx_id="method:clear-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear-int-int-"/><a name="clear-int-int-"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear(int fromIndex,
                  int toIndex)</pre><div class="block">Sets the bits from the specified <code>fromIndex</code> (inclusive) to the specified <code>toIndex</code> (exclusive) to <code>false</code>.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - index of the first bit to be cleared          </dd><dd> <code>toIndex</code> - index after the last bit to be cleared          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, or <code>toIndex</code> is negative, or <code>fromIndex</code> is larger than <code>toIndex</code>                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:clear-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Sets all of the bits in this BitSet to <code>false</code>.         </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-int-"/><a name="get-int-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public boolean get(int bitIndex)</pre><div class="block">Returns the value of the bit with the specified index. The value is <code>true</code> if the bit with the index <code>bitIndex</code> is currently set in this <code>BitSet</code>; otherwise, the result is <code>false</code>.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bitIndex</code> - the bit index     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the bit with the specified index        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd>   </dl></li></ul> <a end_ctx_id="method:get-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-int-int-"/><a name="get-int-int-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> get(int fromIndex,
                  int toIndex)</pre><div class="block">Returns a new <code>BitSet</code> composed of bits from this <code>BitSet</code> from <code>fromIndex</code> (inclusive) to <code>toIndex</code> (exclusive).               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - index of the first bit to include         </dd><dd> <code>toIndex</code> - index after the last bit to include         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a new <code>BitSet</code> from a range of this <code>BitSet</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if <code>fromIndex</code> is negative, or <code>toIndex</code> is negative, or <code>fromIndex</code> is larger than <code>toIndex</code>                </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>    </dl></li></ul> <a end_ctx_id="method:get-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextSetBit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextSetBit-int-"/><a name="nextSetBit-int-"/><ul class="blockList"><li class="blockList"><h4>nextSetBit</h4><pre>public int nextSetBit(int fromIndex)</pre><div class="block">Returns the index of the first bit that is set to <code>true</code> that occurs on or after the specified starting index. If no such bit exists then <code>-1</code> is returned.<p>To iterate over the <code>true</code> bits in a <code>BitSet</code>, use the following loop:<pre> 
<code>
 for (int i = bs.nextSetBit(0); i &gt;= 0; i = bs.nextSetBit(i+1)) {
     // operate on index i here
 }</code></pre>            </p>                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - the index to start checking from (inclusive)         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the next set bit, or <code>-1</code> if there is no such bit              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>    </dl></li></ul> <a end_ctx_id="method:nextSetBit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextClearBit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextClearBit-int-"/><a name="nextClearBit-int-"/><ul class="blockList"><li class="blockList"><h4>nextClearBit</h4><pre>public int nextClearBit(int fromIndex)</pre><div class="block">Returns the index of the first bit that is set to <code>false</code> that occurs on or after the specified starting index.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - the index to start checking from (inclusive)         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the next clear bit      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is negative        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>    </dl></li></ul> <a end_ctx_id="method:nextClearBit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:previousSetBit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:previousSetBit-int-"/><a name="previousSetBit-int-"/><ul class="blockList"><li class="blockList"><h4>previousSetBit</h4><pre>public int previousSetBit(int fromIndex)</pre><div class="block">Returns the index of the nearest bit that is set to <code>true</code> that occurs on or before the specified starting index. If no such bit exists, or if <code>-1</code> is given as the starting index, then <code>-1</code> is returned.<p>To iterate over the <code>true</code> bits in a <code>BitSet</code>, use the following loop:<pre> 
<code>
 for (int i = bs.length(); (i = bs.previousSetBit(i-1)) &gt;= 0; ) {
     // operate on index i here
 }</code></pre>            </p>                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - the index to start checking from (inclusive)         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the previous set bit, or <code>-1</code> if there is no such bit              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is less than <code>-1</code>          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>    </dl></li></ul> <a end_ctx_id="method:previousSetBit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:previousClearBit-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:previousClearBit-int-"/><a name="previousClearBit-int-"/><ul class="blockList"><li class="blockList"><h4>previousClearBit</h4><pre>public int previousClearBit(int fromIndex)</pre><div class="block">Returns the index of the nearest bit that is set to <code>false</code> that occurs on or before the specified starting index. If no such bit exists, or if <code>-1</code> is given as the starting index, then <code>-1</code> is returned.                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - the index to start checking from (inclusive)         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the previous clear bit, or <code>-1</code> if there is no such bit              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the specified index is less than <code>-1</code>          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>    </dl></li></ul> <a end_ctx_id="method:previousClearBit-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:length-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:length--"/><a name="length--"/><ul class="blockList"><li class="blockList"><h4>length</h4><pre>public int length()</pre><div class="block">Returns the "logical size" of this <code>BitSet</code>: the index of the highest set bit in the <code>BitSet</code> plus one. Returns zero if the <code>BitSet</code> contains no set bits.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the logical size of this <code>BitSet</code>     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>  </dl></li></ul> <a end_ctx_id="method:length--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isEmpty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isEmpty--"/><a name="isEmpty--"/><ul class="blockList"><li class="blockList"><h4>isEmpty</h4><pre>public boolean isEmpty()</pre><div class="block">Returns true if this <code>BitSet</code> contains no bits that are set to <code>true</code>.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>boolean indicating whether this <code>BitSet</code> is empty      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:isEmpty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:intersects-java.util.BitSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:intersects-java.util.BitSet-"/><a name="intersects-java.util.BitSet-"/><ul class="blockList"><li class="blockList"><h4>intersects</h4><pre>public boolean intersects(<a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> set)</pre><div class="block">Returns true if the specified <code>BitSet</code> has any bits set to <code>true</code> that are also set to <code>true</code> in this <code>BitSet</code>.                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>set</code> - <code>BitSet</code> to intersect with      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>boolean indicating whether this <code>BitSet</code> intersects the specified <code>BitSet</code>        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:intersects-java.util.BitSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:cardinality-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:cardinality--"/><a name="cardinality--"/><ul class="blockList"><li class="blockList"><h4>cardinality</h4><pre>public int cardinality()</pre><div class="block">Returns the number of bits set to <code>true</code> in this <code>BitSet</code>.          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of bits set to <code>true</code> in this <code>BitSet</code>         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>  </dl></li></ul> <a end_ctx_id="method:cardinality--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:and-java.util.BitSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:and-java.util.BitSet-"/><a name="and-java.util.BitSet-"/><ul class="blockList"><li class="blockList"><h4>and</h4><pre>public void and(<a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> set)</pre><div class="block">Performs a logical <b>AND</b> of this target bit set with the argument bit set. This bit set is modified so that each bit in it has the value <code>true</code> if and only if it both initially had the value <code>true</code> and the corresponding bit in the bit set argument also had the value <code>true</code>.                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>set</code> - a bit set     </dd> </dl></li></ul> <a end_ctx_id="method:and-java.util.BitSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:or-java.util.BitSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:or-java.util.BitSet-"/><a name="or-java.util.BitSet-"/><ul class="blockList"><li class="blockList"><h4>or</h4><pre>public void or(<a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> set)</pre><div class="block">Performs a logical <b>OR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value <code>true</code> if and only if it either already had the value <code>true</code> or the corresponding bit in the bit set argument has the value <code>true</code>.                                                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>set</code> - a bit set     </dd> </dl></li></ul> <a end_ctx_id="method:or-java.util.BitSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:xor-java.util.BitSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:xor-java.util.BitSet-"/><a name="xor-java.util.BitSet-"/><ul class="blockList"><li class="blockList"><h4>xor</h4><pre>public void xor(<a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> set)</pre><div class="block">Performs a logical <b>XOR</b> of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value <code>true</code> if and only if one of the following statements holds:<ul><li>The bit initially has the value <code>true</code>, and the corresponding bit in the argument has the value <code>false</code>.                 </li><li>The bit initially has the value <code>false</code>, and the corresponding bit in the argument has the value <code>true</code>.                 </li></ul>                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>set</code> - a bit set     </dd> </dl></li></ul> <a end_ctx_id="method:xor-java.util.BitSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:andNot-java.util.BitSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:andNot-java.util.BitSet-"/><a name="andNot-java.util.BitSet-"/><ul class="blockList"><li class="blockList"><h4>andNot</h4><pre>public void andNot(<a href="../../java/util/BitSet.html" title="class in java.util">BitSet</a> set)</pre><div class="block">Clears all of the bits in this <code>BitSet</code> whose corresponding bit is set in the specified <code>BitSet</code>.                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>set</code> - the <code>BitSet</code> with which to mask this <code>BitSet</code>          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd>  </dl></li></ul> <a end_ctx_id="method:andNot-java.util.BitSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value for this bit set. The hash code depends only on which bits are set within this <code>BitSet</code>.<p>The hash code is defined to be the result of the following calculation:<pre> 
<code>
 public int hashCode() {
     long h = 1234;
     long[] words = toLongArray();
     for (int i = words.length; --i &gt;= 0; )
         h ^= words[i] * (i + 1);
     return (int)((h &gt;&gt; 32) ^ h);
 }</code></pre> Note that the hash code changes if the set of bits is altered.                         </p>                     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the hash code value for this bit set       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>public int size()</pre><div class="block">Returns the number of bits of space actually in use by this <code>BitSet</code> to represent bit values. The maximum element in the set is the size - 1st element.                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of bits currently in this bit set        </dd> </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Bitset</code> object that has exactly the same set of bits set to <code>true</code> as this bit set. That is, for every nonnegative <code>int</code> index <code>k</code>,<pre>((BitSet)obj).get(k) == this.get(k)</pre> must be true. The current sizes of the two bit sets are not compared.                                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object to compare with       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the objects are the same; <code>false</code> otherwise         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/BitSet.html#size--"><code>size()</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clone--"/><a name="clone--"/><ul class="blockList"><li class="blockList"><h4>clone</h4><pre>public <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> clone()</pre><div class="block">Cloning this <code>BitSet</code> produces a new <code>BitSet</code> that is equal to it. The clone of the bit set is another bit set that has exactly the same bits set to <code>true</code> as this bit set.                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#clone--">clone</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a clone of this bit set     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/BitSet.html#size--"><code>size()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:clone--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this bit set. For every index for which this <code>BitSet</code> contains a bit in the set state, the decimal representation of that index is included in the result. Such indices are listed in order from lowest to highest, separated by ", " (a comma and a space) and surrounded by braces, resulting in the usual mathematical notation for a set of integers.<p>Example:<pre>
 BitSet drPepper = new BitSet();</pre> Now <code>drPepper.toString()</code> returns "<code>{}</code>".<pre>
 drPepper.set(2);</pre> Now <code>drPepper.toString()</code> returns "<code>{2}</code>".<pre>
 drPepper.set(4);
 drPepper.set(10);</pre> Now <code>drPepper.toString()</code> returns "<code>{2, 4, 10}  </code>".            </p>                                                                 </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of this bit set      </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:stream-- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:stream--"><span class="diff-html-added"/></a><a name="stream--"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">stream</span></h4><pre><span class="diff-html-added">public </span><a href="../../java/util/stream/IntStream.html" title="interface in java.util.stream"><span class="diff-html-added">IntStream</span></a><span class="diff-html-added"> stream()</span></pre><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">a</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">of</span> <span class="diff-html-added">indices</span> <span class="diff-html-added">for</span> <span class="diff-html-added">which</span> <span class="diff-html-added">this</span> <code><span class="diff-html-added">BitSet</span></code> <span class="diff-html-added">contains</span> <span class="diff-html-added">a</span> <span class="diff-html-added">bit</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">set</span> <span class="diff-html-added">state.</span> <span class="diff-html-added">The</span> <span class="diff-html-added">indices</span> <span class="diff-html-added">are</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">in</span> <span class="diff-html-added">order,</span> <span class="diff-html-added">from</span> <span class="diff-html-added">lowest</span> <span class="diff-html-added">to</span> <span class="diff-html-added">highest.</span> <span class="diff-html-added">The</span> <span class="diff-html-added">size</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">is</span> <span class="diff-html-added">the</span> <span class="diff-html-added">number</span> <span class="diff-html-added">of</span> <span class="diff-html-added">bits</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">set</span> <span class="diff-html-added">state,</span> <span class="diff-html-added">equal</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">value</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <a href="../../java/util/BitSet.html#cardinality--"><code><span class="diff-html-added">cardinality()</span></code></a> <span class="diff-html-added">method.</span><p><span class="diff-html-added">The</span> <span class="diff-html-added">bit</span> <span class="diff-html-added">set</span> <span class="diff-html-added">must</span> <span class="diff-html-added">remain</span> <span class="diff-html-added">constant</span> <span class="diff-html-added">during</span> <span class="diff-html-added">the</span> <span class="diff-html-added">execution</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">terminal</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">operation.</span> <span class="diff-html-added">Otherwise,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">result</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">terminal</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">operation</span> <span class="diff-html-added">is</span> <span class="diff-html-added">undefined.</span>                       </p>                                                </div><dl> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">a</span> <span class="diff-html-added">stream</span> <span class="diff-html-added">of</span> <span class="diff-html-added">integers</span> <span class="diff-html-added">representing</span> <span class="diff-html-added">set</span> <span class="diff-html-added">indices</span>      </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd>  </dl></li></ul> <a end_ctx_id="method:stream--"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>