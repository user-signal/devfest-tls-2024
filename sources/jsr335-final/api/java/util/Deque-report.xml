<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Deque [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Deque"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements held in this collection          </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt;   </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/concurrent/BlockingDeque.html" title="interface in java.util.concurrent">BlockingDeque</a>&lt;E&gt; </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../java/util/ArrayDeque.html" title="class in java.util">ArrayDeque</a>, <a href="../../java/util/concurrent/ConcurrentLinkedDeque.html" title="class in java.util.concurrent">ConcurrentLinkedDeque</a>, <a href="../../java/util/concurrent/LinkedBlockingDeque.html" title="class in java.util.concurrent">LinkedBlockingDeque</a>, <a href="../../java/util/LinkedList.html" title="class in java.util">LinkedList</a>    </dd> </dl> <hr/> <br/><pre>public interface <span class="typeNameLabel">Deque&lt;E&gt;</span>
extends <a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt;</pre><div class="block">A linear collection that supports element insertion and removal at both ends. The name <i>deque</i> is short for "double ended queue" and is usually pronounced "deck". Most <code>Deque</code> implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit.<p>This interface defines methods to access the elements at both ends of the deque. Methods are provided to insert, remove, and examine the element. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Deque</code> implementations; in most implementations, insert operations cannot fail.                                                                            </p><p>The twelve methods described above are summarized in the following table:<table border="" cellpadding="3" cellspacing="1"> <caption>Summary of Deque methods   </caption><tbody><tr><td/><td align="CENTER" colspan="2"><b>First Element (Head)  </b></td><td align="CENTER" colspan="2"><b>Last Element (Tail)  </b></td></tr><tr><td/><td align="CENTER"><em>Throws exception </em></td><td align="CENTER"><em>Special value </em></td><td align="CENTER"><em>Throws exception </em></td><td align="CENTER"><em>Special value </em></td></tr><tr><td><b>Insert</b></td><td><a href="../../java/util/Deque.html#addFirst-E-"><code>addFirst(e)</code></a></td><td><a href="../../java/util/Deque.html#offerFirst-E-"><code>offerFirst(e)</code></a></td><td><a href="../../java/util/Deque.html#addLast-E-"><code>addLast(e)</code></a></td><td><a href="../../java/util/Deque.html#offerLast-E-"><code>offerLast(e)</code></a></td></tr><tr><td><b>Remove</b></td><td><a href="../../java/util/Deque.html#removeFirst--"><code>removeFirst()</code></a></td><td><a href="../../java/util/Deque.html#pollFirst--"><code>pollFirst()</code></a></td><td><a href="../../java/util/Deque.html#removeLast--"><code>removeLast()</code></a></td><td><a href="../../java/util/Deque.html#pollLast--"><code>pollLast()</code></a></td></tr><tr><td><b>Examine</b></td><td><a href="../../java/util/Deque.html#getFirst--"><code>getFirst()</code></a></td><td><a href="../../java/util/Deque.html#peekFirst--"><code>peekFirst()</code></a></td><td><a href="../../java/util/Deque.html#getLast--"><code>getLast()</code></a></td><td><a href="../../java/util/Deque.html#peekLast--"><code>peekLast()</code></a></td></tr></tbody> </table>          </p><p>This interface extends the <a href="../../java/util/Queue.html" title="interface in java.util"><code>Queue</code></a> interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results. Elements are added at the end of the deque and removed from the beginning. The methods inherited from the <code>Queue</code> interface are precisely equivalent to <code>Deque</code> methods as indicated in the following table:<table border="" cellpadding="3" cellspacing="1"> <caption>Comparison of Queue and Deque methods     </caption><tbody><tr><td align="CENTER"><b><code>Queue</code> Method </b></td><td align="CENTER"><b>Equivalent <code>Deque</code> Method  </b></td></tr><tr><td><a href="../../java/util/Queue.html#add-E-"><code>add(e)</code></a></td><td><a href="../../java/util/Deque.html#addLast-E-"><code>addLast(e)</code></a></td></tr><tr><td><a href="../../java/util/Queue.html#offer-E-"><code>offer(e)</code></a></td><td><a href="../../java/util/Deque.html#offerLast-E-"><code>offerLast(e)</code></a></td></tr><tr><td><a href="../../java/util/Queue.html#remove--"><code>remove()</code></a></td><td><a href="../../java/util/Deque.html#removeFirst--"><code>removeFirst()</code></a></td></tr><tr><td><a href="../../java/util/Queue.html#poll--"><code>poll()</code></a></td><td><a href="../../java/util/Deque.html#pollFirst--"><code>pollFirst()</code></a></td></tr><tr><td><a href="../../java/util/Queue.html#element--"><code>element()</code></a></td><td><a href="../../java/util/Deque.html#getFirst--"><code>getFirst()</code></a></td></tr><tr><td><a href="../../java/util/Queue.html#peek--"><code>peek()</code></a></td><td><a href="../../java/util/Deque.html#peek--"><code>peekFirst()</code></a></td></tr></tbody> </table>                                                  </p><p>Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy <a href="../../java/util/Stack.html" title="class in java.util"><code>Stack</code></a> class. When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent to <code>Deque</code> methods as indicated in the table below:<table border="" cellpadding="3" cellspacing="1"> <caption>Comparison of Stack and Deque methods     </caption><tbody><tr><td align="CENTER"><b>Stack Method </b></td><td align="CENTER"><b>Equivalent <code>Deque</code> Method  </b></td></tr><tr><td><a href="../../java/util/Deque.html#push-E-"><code>push(e)</code></a></td><td><a href="../../java/util/Deque.html#addFirst-E-"><code>addFirst(e)</code></a></td></tr><tr><td><a href="../../java/util/Deque.html#pop--"><code>pop()</code></a></td><td><a href="../../java/util/Deque.html#removeFirst--"><code>removeFirst()</code></a></td></tr><tr><td><a href="../../java/util/Deque.html#peek--"><code>peek()</code></a></td><td><a href="../../java/util/Deque.html#peekFirst--"><code>peekFirst()</code></a></td></tr></tbody> </table>                                                     </p><p>Note that the <a href="../../java/util/Deque.html#peek--"><code>peek</code></a> method works equally well when a deque is used as a queue or a stack; in either case, elements are drawn from the beginning of the deque.                              </p><p>This interface provides two methods to remove interior elements, <a href="../../java/util/Deque.html#removeFirstOccurrence-java.lang.Object-"><code>removeFirstOccurrence</code></a> and <a href="../../java/util/Deque.html#removeLastOccurrence-java.lang.Object-"><code>removeLastOccurrence</code></a>.           </p><p>Unlike the <a href="../../java/util/List.html" title="interface in java.util"><code>List</code></a> interface, this interface does not provide support for indexed access to elements.              </p><p>While <code>Deque</code> implementations are not strictly required to prohibit the insertion of null elements, they are strongly encouraged to do so. Users of any <code>Deque</code> implementations that do allow null elements are strongly encouraged <i>not</i> to take advantage of the ability to insert nulls. This is so because <code>null</code> is used as a special return value by various methods to indicated that the deque is empty.                                                                 </p><p> <code>Deque</code> implementations generally do not define element-based versions of the <code>equals</code> and <code>hashCode</code> methods, but instead inherit the identity-based versions from class <code>Object</code>.                       </p><p>This interface is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                                       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Deque"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addFirst-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:addFirst-E-"/><a name="addFirst-E-"/><ul class="blockList"><li class="blockList"><h4>addFirst</h4><pre>void addFirst(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an <code>IllegalStateException</code> if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method <a href="../../java/util/Deque.html#offerFirst-E-"><code>offerFirst(E)</code></a>.                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to capacity restrictions               </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>  </dl></li></ul> <a name="addLast-java.lang.Object-"/><a end_ctx_id="method:addFirst-E-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addLast-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addLast-E-"/><a name="addLast-E-"/><ul class="blockList"><li class="blockList"><h4>addLast</h4><pre>void addLast(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an <code>IllegalStateException</code> if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method <a href="../../java/util/Deque.html#offerLast-E-"><code>offerLast(E)</code></a>.<p>This method is equivalent to <a href="../../java/util/Deque.html#add-E-"><code>add(E)</code></a>.     </p>                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to capacity restrictions               </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>  </dl></li></ul> <a name="offerFirst-java.lang.Object-"/><a end_ctx_id="method:addLast-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offerFirst-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offerFirst-E-"/><a name="offerFirst-E-"/><ul class="blockList"><li class="blockList"><h4>offerFirst</h4><pre>boolean offerFirst(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Inserts the specified element at the front of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, this method is generally preferable to the <a href="../../java/util/Deque.html#addFirst-E-"><code>addFirst(E)</code></a> method, which can fail to insert an element only by throwing an exception.                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was added to this deque, else <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>   </dl></li></ul> <a name="offerLast-java.lang.Object-"/><a end_ctx_id="method:offerFirst-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offerLast-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offerLast-E-"/><a name="offerLast-E-"/><ul class="blockList"><li class="blockList"><h4>offerLast</h4><pre>boolean offerLast(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, this method is generally preferable to the <a href="../../java/util/Deque.html#addLast-E-"><code>addLast(E)</code></a> method, which can fail to insert an element only by throwing an exception.                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was added to this deque, else <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>   </dl></li></ul> <a end_ctx_id="method:offerLast-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeFirst-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeFirst--"/><a name="removeFirst--"/><ul class="blockList"><li class="blockList"><h4>removeFirst</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> removeFirst()</pre><div class="block">Retrieves and removes the first element of this deque. This method differs from <a href="../../java/util/Deque.html#pollFirst--"><code>pollFirst</code></a> only in that it throws an exception if this deque is empty.                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this deque    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:removeFirst--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeLast-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeLast--"/><a name="removeLast--"/><ul class="blockList"><li class="blockList"><h4>removeLast</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> removeLast()</pre><div class="block">Retrieves and removes the last element of this deque. This method differs from <a href="../../java/util/Deque.html#pollLast--"><code>pollLast</code></a> only in that it throws an exception if this deque is empty.                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tail of this deque    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:removeLast--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollFirst-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollFirst--"/><a name="pollFirst--"/><ul class="blockList"><li class="blockList"><h4>pollFirst</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> pollFirst()</pre><div class="block">Retrieves and removes the first element of this deque, or returns <code>null</code> if this deque is empty.                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this deque, or <code>null</code> if this deque is empty           </dd> </dl></li></ul> <a end_ctx_id="method:pollFirst--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollLast-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollLast--"/><a name="pollLast--"/><ul class="blockList"><li class="blockList"><h4>pollLast</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> pollLast()</pre><div class="block">Retrieves and removes the last element of this deque, or returns <code>null</code> if this deque is empty.                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tail of this deque, or <code>null</code> if this deque is empty           </dd> </dl></li></ul> <a end_ctx_id="method:pollLast--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFirst-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFirst--"/><a name="getFirst--"/><ul class="blockList"><li class="blockList"><h4>getFirst</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> getFirst()</pre><div class="block">Retrieves, but does not remove, the first element of this deque. This method differs from <a href="../../java/util/Deque.html#peekFirst--"><code>peekFirst</code></a> only in that it throws an exception if this deque is empty.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this deque    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:getFirst--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLast-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLast--"/><a name="getLast--"/><ul class="blockList"><li class="blockList"><h4>getLast</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> getLast()</pre><div class="block">Retrieves, but does not remove, the last element of this deque. This method differs from <a href="../../java/util/Deque.html#peekLast--"><code>peekLast</code></a> only in that it throws an exception if this deque is empty.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tail of this deque    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:getLast--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peekFirst-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peekFirst--"/><a name="peekFirst--"/><ul class="blockList"><li class="blockList"><h4>peekFirst</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> peekFirst()</pre><div class="block">Retrieves, but does not remove, the first element of this deque, or returns <code>null</code> if this deque is empty.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of this deque, or <code>null</code> if this deque is empty           </dd> </dl></li></ul> <a end_ctx_id="method:peekFirst--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peekLast-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peekLast--"/><a name="peekLast--"/><ul class="blockList"><li class="blockList"><h4>peekLast</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> peekLast()</pre><div class="block">Retrieves, but does not remove, the last element of this deque, or returns <code>null</code> if this deque is empty.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the tail of this deque, or <code>null</code> if this deque is empty           </dd> </dl></li></ul> <a end_ctx_id="method:peekLast--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeFirstOccurrence-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeFirstOccurrence-java.lang.Object-"/><a name="removeFirstOccurrence-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>removeFirstOccurrence</h4><pre>boolean removeFirstOccurrence(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <code>e</code> such that <tt>(o==null ? e==null : o.equals(e))</tt> (if such an element exists). Returns <code>true</code> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to be removed from this deque, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if an element was removed as a result of this call            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element is incompatible with this deque (<a href="Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>   </dl></li></ul> <a end_ctx_id="method:removeFirstOccurrence-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeLastOccurrence-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeLastOccurrence-java.lang.Object-"/><a name="removeLastOccurrence-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>removeLastOccurrence</h4><pre>boolean removeLastOccurrence(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element <code>e</code> such that <tt>(o==null ? e==null : o.equals(e))</tt> (if such an element exists). Returns <code>true</code> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to be removed from this deque, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if an element was removed as a result of this call            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element is incompatible with this deque (<a href="Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>   </dl></li></ul> <a name="add-java.lang.Object-"/><a end_ctx_id="method:removeLastOccurrence-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>boolean add(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <code>true</code> upon success and throwing an <code>IllegalStateException</code> if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use <a href="../../java/util/Deque.html#offer-E-"><code>offer</code></a>.<p>This method is equivalent to <a href="../../java/util/Deque.html#addLast-E-"><code>addLast(E)</code></a>.     </p>                                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Queue.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../java/util/Collection.html#add-E-"><code>Collection.add(E)</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to capacity restrictions               </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>     </dl></li></ul> <a name="offer-java.lang.Object-"/><a end_ctx_id="method:add-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:offer-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:offer-E-"/><a name="offer-E-"/><ul class="blockList"><li class="blockList"><h4>offer</h4><pre>boolean offer(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning <code>true</code> upon success and <code>false</code> if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the <a href="../../java/util/Deque.html#add-E-"><code>add(E)</code></a> method, which can fail to insert an element only by throwing an exception.<p>This method is equivalent to <a href="../../java/util/Deque.html#offerLast-E-"><code>offerLast(E)</code></a>.     </p>                                                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Queue.html#offer-E-">offer</a></code> in interface <code><a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to add      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the element was added to this deque, else <code>false</code>           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>    </dl></li></ul> <a end_ctx_id="method:offer-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove--"/><a name="remove--"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> remove()</pre><div class="block">Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from <a href="../../java/util/Deque.html#poll--"><code>poll</code></a> only in that it throws an exception if this deque is empty.<p>This method is equivalent to <a href="../../java/util/Deque.html#removeFirst--"><code>removeFirst()</code></a>.     </p>                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Queue.html#remove--">remove</a></code> in interface <code><a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of the queue represented by this deque        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>   </dl></li></ul> <a end_ctx_id="method:remove--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:poll-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:poll--"/><a name="poll--"/><ul class="blockList"><li class="blockList"><h4>poll</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> poll()</pre><div class="block">Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns <code>null</code> if this deque is empty.<p>This method is equivalent to <a href="../../java/util/Deque.html#pollFirst--"><code>pollFirst()</code></a>.     </p>                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Queue.html#poll--">poll</a></code> in interface <code><a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the first element of this deque, or <code>null</code> if this deque is empty            </dd>  </dl></li></ul> <a end_ctx_id="method:poll--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:element-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:element--"/><a name="element--"/><ul class="blockList"><li class="blockList"><h4>element</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> element()</pre><div class="block">Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from <a href="../../java/util/Deque.html#peek--"><code>peek</code></a> only in that it throws an exception if this deque is empty.<p>This method is equivalent to <a href="../../java/util/Deque.html#getFirst--"><code>getFirst()</code></a>.     </p>                                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Queue.html#element--">element</a></code> in interface <code><a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of the queue represented by this deque        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>   </dl></li></ul> <a end_ctx_id="method:element--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:peek-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:peek--"/><a name="peek--"/><ul class="blockList"><li class="blockList"><h4>peek</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> peek()</pre><div class="block">Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns <code>null</code> if this deque is empty.<p>This method is equivalent to <a href="../../java/util/Deque.html#peekFirst--"><code>peekFirst()</code></a>.     </p>                              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Queue.html#peek--">peek</a></code> in interface <code><a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the head of the queue represented by this deque, or <code>null</code> if this deque is empty               </dd>  </dl></li></ul> <a name="push-java.lang.Object-"/><a end_ctx_id="method:peek--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:push-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:push-E-"/><a name="push-E-"/><ul class="blockList"><li class="blockList"><h4>push</h4><pre>void push(<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> e)</pre><div class="block">Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an <code>IllegalStateException</code> if no space is currently available.<p>This method is equivalent to <a href="../../java/util/Deque.html#addFirst-E-"><code>addFirst(E)</code></a>.     </p>                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the element to push      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to capacity restrictions               </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this deque                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this deque                 </dd>  </dl></li></ul> <a end_ctx_id="method:push-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pop-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pop--"/><a name="pop--"/><ul class="blockList"><li class="blockList"><h4>pop</h4><pre><a href="../../java/util/Deque.html" title="type parameter in Deque">E</a> pop()</pre><div class="block">Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque.<p>This method is equivalent to <a href="../../java/util/Deque.html#removeFirst--"><code>removeFirst()</code></a>.     </p>                     </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the element at the front of this deque (which is the top of the stack represented by this deque)                  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this deque is empty       </dd>  </dl></li></ul> <a end_ctx_id="method:pop--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>boolean remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element <code>e</code> such that <tt>(o==null ? e==null : o.equals(e))</tt> (if such an element exists). Returns <code>true</code> if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).<p>This method is equivalent to <a href="../../java/util/Deque.html#removeFirstOccurrence-java.lang.Object-"><code>removeFirstOccurrence(Object)</code></a>.     </p>                                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to be removed from this deque, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if an element was removed as a result of this call            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element is incompatible with this deque (<a href="Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>    </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:contains-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:contains-java.lang.Object-"/><a name="contains-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>contains</h4><pre>boolean contains(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns <code>true</code> if this deque contains the specified element. More formally, returns <code>true</code> if and only if this deque contains at least one element <code>e</code> such that <tt>(o==null ? e==null : o.equals(e))</tt>.                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element whose presence in this deque is to be tested            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this deque contains the specified element        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the type of the specified element is incompatible with this deque (<a href="Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this deque does not permit null elements (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>    </dl></li></ul> <a end_ctx_id="method:contains-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>int size()</pre><div class="block">Returns the number of elements in this deque.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#size--">size</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements in this deque      </dd>  </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt; iterator()</pre><div class="block">Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail).                        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements in this deque in proper sequence          </dd>   </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:descendingIterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:descendingIterator--"/><a name="descendingIterator--"/><ul class="blockListLast"><li class="blockList"><h4>descendingIterator</h4><pre><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/Deque.html" title="type parameter in Deque">E</a>&gt; descendingIterator()</pre><div class="block">Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head).                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements in this deque in reverse sequence          </dd> </dl></li></ul> <a end_ctx_id="method:descendingIterator--"/>  </td></tr></table></td></tr></table></diff></diffreport>