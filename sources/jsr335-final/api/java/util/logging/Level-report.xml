<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Level [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Level"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a> </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">Level</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. Enabling logging at a given level also enables logging at all higher levels.<p> Clients should normally use the predefined Level constants such as Level.SEVERE.           </p><p> The levels in descending order are:<ul><li>SEVERE (highest value)  </li><li>WARNING</li><li>INFO</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST (lowest value)  </li></ul> In addition there is a level OFF that can be used to turn off logging, and a level ALL that can be used to enable logging of all messages.                                   </p><p> It is possible for third parties to define additional logging levels by subclassing Level. In such cases subclasses should take care to chose unique integer level values and to ensure that they maintain the Object uniqueness property across serialization by defining a suitable readResolve method.                                             </p>                                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../serialized-form.html#java.util.logging.Level">Serialized Form </a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Level"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:OFF [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:OFF"/><a name="OFF"/><ul class="blockList"><li class="blockList"><h4>OFF</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> OFF</pre><div class="block">OFF is a special level that can be used to turn off logging. This level is initialized to <code>Integer.MAX_VALUE</code>.                  </div></li></ul> <a end_ctx_id="field:OFF"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:SEVERE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:SEVERE"/><a name="SEVERE"/><ul class="blockList"><li class="blockList"><h4>SEVERE</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> SEVERE</pre><div class="block">SEVERE is a message level indicating a serious failure.<p> In general SEVERE messages should describe events that are of considerable importance and which will prevent normal program execution. They should be reasonably intelligible to end users and to system administrators. This level is initialized to <code>1000</code>.                                     </p>        </div></li></ul> <a end_ctx_id="field:SEVERE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:WARNING [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:WARNING"/><a name="WARNING"/><ul class="blockList"><li class="blockList"><h4>WARNING</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> WARNING</pre><div class="block">WARNING is a message level indicating a potential problem.<p> In general WARNING messages should describe events that will be of interest to end users or system managers, or which indicate potential problems. This level is initialized to <code>900</code>.                             </p>        </div></li></ul> <a end_ctx_id="field:WARNING"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:INFO [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:INFO"/><a name="INFO"/><ul class="blockList"><li class="blockList"><h4>INFO</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> INFO</pre><div class="block">INFO is a message level for informational messages.<p> Typically INFO messages will be written to the console or its equivalent. So the INFO level should only be used for reasonably significant messages that will make sense to end users and system administrators. This level is initialized to <code>800</code>.                                        </p>       </div></li></ul> <a end_ctx_id="field:INFO"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CONFIG [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CONFIG"/><a name="CONFIG"/><ul class="blockList"><li class="blockList"><h4>CONFIG</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> CONFIG</pre><div class="block">CONFIG is a message level for static configuration messages.<p> CONFIG messages are intended to provide a variety of static configuration information, to assist in debugging problems that may be associated with particular configurations. For example, CONFIG message might include the CPU type, the graphics depth, the GUI look-and-feel, etc. This level is initialized to <code>700</code>.                                              </p>        </div></li></ul> <a end_ctx_id="field:CONFIG"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FINE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FINE"/><a name="FINE"/><ul class="blockList"><li class="blockList"><h4>FINE</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> FINE</pre><div class="block">FINE is a message level providing tracing information.<p> All of FINE, FINER, and FINEST are intended for relatively detailed tracing. The exact meaning of the three levels will vary between subsystems, but in general, FINEST should be used for the most voluminous detailed output, FINER for somewhat less detailed output, and FINE for the lowest volume (and most important) messages.                                                    </p><p> In general the FINE level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem.                            </p><p> FINE messages might include things like minor (recoverable) failures. Issues indicating potential performance problems are also worth logging as FINE. This level is initialized to <code>500</code>.                          </p>       </div></li></ul> <a end_ctx_id="field:FINE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FINER [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FINER"/><a name="FINER"/><ul class="blockList"><li class="blockList"><h4>FINER</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> FINER</pre><div class="block">FINER indicates a fairly detailed tracing message. By default logging calls for entering, returning, or throwing an exception are traced at this level. This level is initialized to <code>400</code>.                            </div></li></ul> <a end_ctx_id="field:FINER"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FINEST [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FINEST"/><a name="FINEST"/><ul class="blockList"><li class="blockList"><h4>FINEST</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> FINEST</pre><div class="block">FINEST indicates a highly detailed tracing message. This level is initialized to <code>300</code>.            </div></li></ul> <a end_ctx_id="field:FINEST"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:ALL [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:ALL"/><a name="ALL"/><ul class="blockListLast"><li class="blockList"><h4>ALL</h4><pre>public static final <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> ALL</pre><div class="block">ALL indicates that all messages should be logged. This level is initialized to <code>Integer.MIN_VALUE</code>.             </div></li></ul> <a end_ctx_id="field:ALL"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Level-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Level-java.lang.String-int-"/><a name="Level-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>Level</h4><pre>protected Level(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> name,
                int value)</pre><div class="block">Create a named Level with a given integer value.<p> Note that this constructor is "protected" to allow subclassing. In general clients of logging should use one of the constant Level objects such as SEVERE or FINEST. However, if clients need to add new logging levels, they may subclass Level and define new constants.                                            </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the Level, for example "SEVERE".          </dd><dd> <code>value</code> - an integer value for the level.        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the name is null       </dd>  </dl></li></ul> <a end_ctx_id="constructor:Level-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Level-java.lang.String-int-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Level-java.lang.String-int-java.lang.String-"/><a name="Level-java.lang.String-int-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>Level</h4><pre>protected Level(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> name,
                int value,
                <a href="../../../java/lang/String.html" title="class in java.lang">String</a> resourceBundleName)</pre><div class="block">Create a named Level with a given integer value and a given localization resource name.<p/>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - the name of the Level, for example "SEVERE".          </dd><dd> <code>value</code> - an integer value for the level.        </dd><dd> <code>resourceBundleName</code> - name of a resource bundle to use in localizing the given name. If the resourceBundleName is null or an empty string, it is ignored.                          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the name is null       </dd>  </dl></li></ul> <a end_ctx_id="constructor:Level-java.lang.String-int-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getResourceBundleName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getResourceBundleName--"/><a name="getResourceBundleName--"/><ul class="blockList"><li class="blockList"><h4>getResourceBundleName</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> getResourceBundleName()</pre><div class="block">Return the level's localization resource bundle name, or null if no localization bundle is defined.              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>localization resource bundle name   </dd> </dl></li></ul> <a end_ctx_id="method:getResourceBundleName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getName--"/><a name="getName--"/><ul class="blockList"><li class="blockList"><h4>getName</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> getName()</pre><div class="block">Return the non-localized string name of the Level.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>non-localized name </dd> </dl></li></ul> <a end_ctx_id="method:getName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLocalizedName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLocalizedName--"/><a name="getLocalizedName--"/><ul class="blockList"><li class="blockList"><h4>getLocalizedName</h4><pre>public <a href="../../../java/lang/String.html" title="class in java.lang">String</a> getLocalizedName()</pre><div class="block">Return the localized string name of the Level, for the current default locale.<p> If no localization information is available, the non-localized name is returned.           </p>            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>localized name </dd> </dl></li></ul> <a end_ctx_id="method:getLocalizedName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public final <a href="../../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this Level.      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the non-localized name of the Level, for example "INFO".        </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:intValue-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:intValue--"/><a name="intValue--"/><ul class="blockList"><li class="blockList"><h4>intValue</h4><pre>public final int intValue()</pre><div class="block">Get the integer value for this level. This integer value can be used for efficient ordering comparisons between Level objects.                   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the integer value for this level.     </dd> </dl></li></ul> <a end_ctx_id="method:intValue--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:parse-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:parse-java.lang.String-"/><a name="parse-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>parse</h4><pre>public static <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> parse(<a href="../../../java/lang/String.html" title="class in java.lang">String</a> name)
                   throws <a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></pre><div class="block">Parse a level name string into a Level.<p> The argument string may consist of either a level name or an integer value.              </p><p> For example:<ul><li> "SEVERE" </li><li> "1000" </li></ul>  </p>       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>name</code> - string to be parsed      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The parsed value. Passing an integer that corresponds to a known name (e.g., 700) will return the associated name (e.g., <code>CONFIG</code>). Passing an integer that does not (e.g., 1) will return a new level name initialized to that value.                                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the name is null       </dd><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the value is not valid. Valid values are integers between <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code>, and all known level names. Known names are the levels defined by this class (e.g., <code>FINE</code>, <code>FINER</code>, <code>FINEST</code>), or created by this class with appropriate package access, or new levels defined or created by subclasses.                                                   </dd>   </dl></li></ul> <a end_ctx_id="method:parse-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../../java/lang/Object.html" title="class in java.lang">Object</a> ox)</pre><div class="block">Compare two objects for value equality.     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>ox</code> - the reference object with which to compare.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if the two objects have the same level value.            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockListLast"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Generate a hashcode.  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hashcode based on the level value      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table></diff></diffreport>