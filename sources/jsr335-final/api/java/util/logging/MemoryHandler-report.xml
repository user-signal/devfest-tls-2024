<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:MemoryHandler [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:MemoryHandler"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">MemoryHandler</span>
extends <a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></pre><div class="block"> <tt>Handler</tt> that buffers requests in a circular buffer in memory.<p> Normally this <tt>Handler</tt> simply stores incoming <tt>LogRecords</tt> into its memory buffer and discards earlier records. This buffering is very cheap and avoids formatting costs. On certain trigger conditions, the <tt>MemoryHandler</tt> will push out its current buffer contents to a target <tt>Handler</tt>, which will typically publish them to the outside world.                                                  </p><p> There are three main models for triggering a push of the buffer:<ul><li> An incoming <tt>LogRecord</tt> has a type that is greater than a pre-defined level, the <tt>pushLevel</tt>.               </li><li> An external class calls the <tt>push</tt> method explicitly.        </li><li> A subclass overrides the <tt>log</tt> method and scans each incoming <tt>LogRecord</tt> and calls <tt>push</tt> if a record matches some desired criteria.                     </li></ul>            </p><p> <b>Configuration:</b> By default each <tt>MemoryHandler</tt> is initialized using the following <tt>LogManager</tt> configuration properties where <tt>&lt;handler-name&gt;</tt> refers to the fully-qualified class name of the handler. If properties are not defined (or have invalid values) then the specified default values are used. If no default value is defined then a RuntimeException is thrown.<ul><li> &lt;handler-name&gt;.level specifies the level for the <tt>Handler</tt> (defaults to <tt>Level.ALL</tt>).          </li><li> &lt;handler-name&gt;.filter specifies the name of a <tt>Filter</tt> class to use (defaults to no <tt>Filter</tt>).              </li><li> &lt;handler-name&gt;.size defines the buffer size (defaults to 1000).        </li><li> &lt;handler-name&gt;.push defines the <tt>pushLevel</tt> (defaults to <tt>level.SEVERE</tt>).       </li><li> &lt;handler-name&gt;.target specifies the name of the target <tt>Handler  </tt> class. (no default).           </li></ul>                                                   </p><p> For example, the properties for <code>MemoryHandler</code> would be:<ul><li> java.util.logging.MemoryHandler.level=INFO </li><li> java.util.logging.MemoryHandler.formatter=java.util.logging.SimpleFormatter </li></ul>        </p><p> For a custom handler, e.g. com.foo.MyHandler, the properties would be:<ul><li> com.foo.MyHandler.level=INFO </li><li> com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li></ul>          </p><p/>          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:MemoryHandler"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:MemoryHandler-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:MemoryHandler--"/><a name="MemoryHandler--"/><ul class="blockList"><li class="blockList"><h4>MemoryHandler</h4><pre>public MemoryHandler()</pre><div class="block">Create a <tt>MemoryHandler</tt> and configure it based on <tt>LogManager</tt> configuration properties.          </div></li></ul> <a end_ctx_id="constructor:MemoryHandler--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:MemoryHandler-java.util.logging.Handler-int-java.util.logging.Level- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:MemoryHandler-java.util.logging.Handler-int-java.util.logging.Level-"/><a name="MemoryHandler-java.util.logging.Handler-int-java.util.logging.Level-"/><ul class="blockListLast"><li class="blockList"><h4>MemoryHandler</h4><pre>public MemoryHandler(<a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a> target,
                     int size,
                     <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> pushLevel)</pre><div class="block">Create a <tt>MemoryHandler</tt>.<p> The <tt>MemoryHandler</tt> is configured based on <tt>LogManager</tt> properties (or their default values) except that the given <tt>pushLevel</tt> argument and buffer size argument are used.                        </p>  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>target</code> - the Handler to which to publish output.         </dd><dd> <code>size</code> - the number of log records to buffer (must be greater than zero)              </dd><dd> <code>pushLevel</code> - message level to push on       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>size is &lt;= 0   </code>    </dd>  </dl></li></ul> <a end_ctx_id="constructor:MemoryHandler-java.util.logging.Handler-int-java.util.logging.Level-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:publish-java.util.logging.LogRecord- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:publish-java.util.logging.LogRecord-"/><a name="publish-java.util.logging.LogRecord-"/><ul class="blockList"><li class="blockList"><h4>publish</h4><pre>public void publish(<a href="../../../java/util/logging/LogRecord.html" title="class in java.util.logging">LogRecord</a> record)</pre><div class="block">Store a <tt>LogRecord</tt> in an internal buffer.<p> If there is a <tt>Filter</tt>, its <tt>isLoggable</tt> method is called to check if the given log record is loggable. If not we return. Otherwise the given record is copied into an internal circular buffer. Then the record's level property is compared with the <tt>pushLevel</tt>. If the given level is greater than or equal to the <tt>pushLevel</tt> then <tt>push</tt> is called to write all buffered records to the target output <tt>Handler</tt>.                                                                      </p>      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#publish-java.util.logging.LogRecord-">publish</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>record</code> - description of the log event. A null record is silently ignored and is not published                 </dd>  </dl></li></ul> <a end_ctx_id="method:publish-java.util.logging.LogRecord-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:push-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:push--"/><a name="push--"/><ul class="blockList"><li class="blockList"><h4>push</h4><pre>public void push()</pre><div class="block">Push any buffered output to the target <tt>Handler</tt>.<p> The buffer is then cleared.     </p>       </div></li></ul> <a end_ctx_id="method:push--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flush-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flush--"/><a name="flush--"/><ul class="blockList"><li class="blockList"><h4>flush</h4><pre>public void flush()</pre><div class="block">Causes a flush on the target <tt>Handler</tt>.<p> Note that the current contents of the <tt>MemoryHandler</tt> buffer are <b>not</b> written out. That requires a "push".                 </p>      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#flush--">flush</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> </dl></li></ul> <a end_ctx_id="method:flush--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()
           throws <a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Close the <tt>Handler</tt> and free all associated resources. This will also close the target <tt>Handler</tt>.              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#close--">close</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and if the caller does not have <tt>LoggingPermission("control")</tt>.               </dd>  </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setPushLevel-java.util.logging.Level- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setPushLevel-java.util.logging.Level-"/><a name="setPushLevel-java.util.logging.Level-"/><ul class="blockList"><li class="blockList"><h4>setPushLevel</h4><pre>public void setPushLevel(<a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> newLevel)
                  throws <a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></pre><div class="block">Set the <tt>pushLevel</tt>. After a <tt>LogRecord</tt> is copied into our internal buffer, if its level is greater than or equal to the <tt>pushLevel</tt>, then <tt>push</tt> will be called.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>newLevel</code> - the new value of the <tt>pushLevel</tt>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and if the caller does not have <tt>LoggingPermission("control")</tt>.               </dd>  </dl></li></ul> <a end_ctx_id="method:setPushLevel-java.util.logging.Level-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getPushLevel-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getPushLevel--"/><a name="getPushLevel--"/><ul class="blockList"><li class="blockList"><h4>getPushLevel</h4><pre>public <a href="../../../java/util/logging/Level.html" title="class in java.util.logging">Level</a> getPushLevel()</pre><div class="block">Get the <tt>pushLevel</tt>.  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value of the <tt>pushLevel</tt>    </dd> </dl></li></ul> <a end_ctx_id="method:getPushLevel--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isLoggable-java.util.logging.LogRecord- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isLoggable-java.util.logging.LogRecord-"/><a name="isLoggable-java.util.logging.LogRecord-"/><ul class="blockListLast"><li class="blockList"><h4>isLoggable</h4><pre>public boolean isLoggable(<a href="../../../java/util/logging/LogRecord.html" title="class in java.util.logging">LogRecord</a> record)</pre><div class="block">Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt> into its internal buffer.<p> This method checks if the <tt>LogRecord</tt> has an appropriate level and whether it satisfies any <tt>Filter</tt>. However it does <b>not</b> check whether the <tt>LogRecord</tt> would result in a "push" of the buffer contents. It will return false if the <tt>LogRecord</tt> is null.                                          </p><p/>             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/util/logging/Handler.html#isLoggable-java.util.logging.LogRecord-">isLoggable</a></code> in class <code><a href="../../../java/util/logging/Handler.html" title="class in java.util.logging">Handler</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>record</code> - a <tt>LogRecord</tt>    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if the <tt>LogRecord</tt> would be logged.      </dd>   </dl></li></ul> <a end_ctx_id="method:isLoggable-java.util.logging.LogRecord-"/>  </td></tr></table></td></tr></table></diff></diffreport>