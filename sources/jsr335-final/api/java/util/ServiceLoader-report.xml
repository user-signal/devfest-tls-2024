<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ServiceLoader [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ServiceLoader"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>S</code> - The type of the service to be loaded by this loader             </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;S&gt; </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">ServiceLoader&lt;S&gt;</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;S&gt;</pre><div class="block">A simple service-provider loading facility.<p> A <i>service</i> is a well-known set of interfaces and (usually abstract) classes. A <i>service provider </i> is a specific implementation of a service. The classes in a provider typically implement the interfaces and subclass the classes defined in the service itself. Service providers can be installed in an implementation of the Java platform in the form of extensions, that is, jar files placed into any of the usual extension directories. Providers can also be made available by adding them to the application's class path or by some other platform-specific means.                                                                                        </p><p> For the purpose of loading, a service is represented by a single type, that is, a single interface or abstract class. (A concrete class can be used, but this is not recommended.) A provider of a given service contains one or more concrete classes that extend this <i>service type </i> with data and code specific to the provider. The <i>provider class </i> is typically not the entire provider itself but rather a proxy which contains enough information to decide whether the provider is able to satisfy a particular request together with code that can create the actual provider on demand. The details of provider classes tend to be highly service-specific; no single class or interface could possibly unify them, so no such type is defined here. The only requirement enforced by this facility is that provider classes must have a zero-argument constructor so that they can be instantiated during loading.                                                                                                                                                  </p><p> <a name="format"> A service provider is identified by placing a <i>provider-configuration file </i> in the resource directory <tt>META-INF/services</tt>.              </a> The file's name is the fully-qualified <a href="../lang/ClassLoader.html#name">binary name </a> of the service's type. The file contains a list of fully-qualified binary names of concrete provider classes, one per line. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is <tt>'#'</tt> (<tt>'\u0023'</tt>, <font style="font-size:smaller;">NUMBER SIGN </font>); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.                                                                    </p><p> If a particular concrete provider class is named in more than one configuration file, or is named in the same configuration file more than once, then the duplicates are ignored. The configuration file naming a particular provider need not be in the same jar file or other distribution unit as the provider itself. The provider must be accessible from the same class loader that was initially queried to locate the configuration file; note that this is not necessarily the class loader from which the file was actually loaded.                                                                                        </p><p> Providers are located and instantiated lazily, that is, on demand. A service loader maintains a cache of the providers that have been loaded so far. Each invocation of the <a href="../../java/util/ServiceLoader.html#iterator--"><code>iterator</code></a> method returns an iterator that first yields all of the elements of the cache, in instantiation order, and then lazily locates and instantiates any remaining providers, adding each one to the cache in turn. The cache can be cleared via the <a href="../../java/util/ServiceLoader.html#reload--"><code>reload</code></a> method.                                                                         </p><p> Service loaders always execute in the security context of the caller. Trusted system code should typically invoke the methods in this class, and the methods of the iterators which they return, from within a privileged security context.                                     </p><p> Instances of this class are not safe for use by multiple concurrent threads.             </p><p> Unless otherwise specified, passing a <tt>null</tt> argument to any method in this class will cause a <a href="../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> to be thrown.                    </p><p> <span style="font-weight: bold; padding-right: 1em">Example</span> Suppose we have a service type <tt>com.example.CodecSet</tt> which is intended to represent sets of encoder/decoder pairs for some protocol. In this case it is an abstract class with two abstract methods:                                </p><blockquote><pre>
 public abstract Encoder getEncoder(String encodingName);
 public abstract Decoder getDecoder(String encodingName);</pre></blockquote> Each method returns an appropriate object or <tt>null</tt> if the provider does not support the given encoding. Typical providers support more than one encoding.<p> If <tt>com.example.impl.StandardCodecs</tt> is an implementation of the <tt>CodecSet</tt> service then its jar file also contains a file named                  </p><blockquote><pre>
 META-INF/services/com.example.CodecSet</pre></blockquote><p> This file contains the single line:      </p><blockquote><pre>
 com.example.impl.StandardCodecs    # Standard codecs</pre></blockquote><p> The <tt>CodecSet</tt> class creates and saves a single service instance at initialization:            </p><blockquote><pre>
 private static ServiceLoader&lt;CodecSet&gt; codecSetLoader
     = ServiceLoader.load(CodecSet.class);</pre></blockquote><p> To locate an encoder for a given encoding name it defines a static factory method which iterates through the known and available providers, returning only when it has located a suitable encoder or has run out of providers.                                      </p><blockquote><pre>
 public static Encoder getEncoder(String encodingName) {
     for (CodecSet cp : codecSetLoader) {
         Encoder enc = cp.getEncoder(encodingName);
         if (enc != null)
             return enc;
     }
     return null;
 }</pre></blockquote><p> A <tt>getDecoder</tt> method is defined similarly.      </p><p> <span style="font-weight: bold; padding-right: 1em">Usage Note </span> If the class path of a class loader that is used for provider loading includes remote network URLs then those URLs will be dereferenced in the process of searching for provider-configuration files.                                 </p><p> This activity is normal, although it may cause puzzling entries to be created in web-server logs. If a web server is not configured correctly, however, then this activity may cause the provider-loading algorithm to fail spuriously.                                    </p><p> A web server should return an HTTP 404 (Not Found) response when a requested resource does not exist. Sometimes, however, web servers are erroneously configured to return an HTTP 200 (OK) response along with a helpful HTML error page in such cases. This will cause a <a href="../../java/util/ServiceConfigurationError.html" title="class in java.util"><code>ServiceConfigurationError</code></a> to be thrown when this class attempts to parse the HTML page as a provider-configuration file. The best solution to this problem is to fix the misconfigured web server to return the correct response code (HTTP 404) along with the HTML error page.                                                                                          </p>                            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:ServiceLoader"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reload-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reload--"/><a name="reload--"/><ul class="blockList"><li class="blockList"><h4>reload</h4><pre>public void reload()</pre><div class="block">Clear this loader's provider cache so that all providers will be reloaded.<p> After invoking this method, subsequent invocations of the <a href="../../java/util/ServiceLoader.html#iterator--"><code>iterator</code></a> method will lazily look up and instantiate providers from scratch, just as is done by a newly-created loader.                           </p><p> This method is intended for use in situations in which new providers can be installed into a running Java virtual machine.                     </p>           </div></li></ul> <a end_ctx_id="method:reload--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/ServiceLoader.html" title="type parameter in ServiceLoader">S</a>&gt; iterator()</pre><div class="block">Lazily loads the available providers of this loader's service.<p> The iterator returned by this method first yields all of the elements of the provider cache, in instantiation order. It then lazily loads and instantiates any remaining providers, adding each one to the cache in turn.                                    </p><p> To achieve laziness the actual work of parsing the available provider-configuration files and instantiating providers must be done by the iterator itself. Its <a href="../../java/util/Iterator.html#hasNext--"><code>hasNext</code></a> and <a href="../../java/util/Iterator.html#next--"><code>next</code></a> methods can therefore throw a <a href="../../java/util/ServiceConfigurationError.html" title="class in java.util"><code>ServiceConfigurationError</code></a> if a provider-configuration file violates the specified format, or if it names a provider class that cannot be found and instantiated, or if the result of instantiating the class is not assignable to the service type, or if any other kind of exception or error is thrown as the next provider is located and instantiated. To write robust code it is only necessary to catch <a href="../../java/util/ServiceConfigurationError.html" title="class in java.util"><code>ServiceConfigurationError</code></a> when using a service iterator.                                                                                                       </p><p> If such an error is thrown then subsequent invocations of the iterator will make a best effort to locate and instantiate the next available provider, but in general such recovery cannot be guaranteed.                                 </p><blockquote style="font-size: smaller; line-height: 1.2"> <span style="padding-right: 1em; font-weight: bold">Design Note </span> Throwing an error in these cases may seem extreme. The rationale for this behavior is that a malformed provider-configuration file, like a malformed class file, indicates a serious problem with the way the Java virtual machine is configured or is being used. As such it is preferable to throw an error rather than try to recover or, even worse, fail silently.                                                              </blockquote><p> The iterator returned by this method does not support removal. Invoking its <a href="../../java/util/Iterator.html#remove--"><code>remove</code></a> method will cause an <a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang"><code>UnsupportedOperationException</code></a> to be thrown.                     </p>        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../java/util/ServiceLoader.html" title="type parameter in ServiceLoader">S</a>&gt;</code>  </dd> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>When adding providers to the cache, the <a href="../../java/util/ServiceLoader.html#iterator--"><code>Iterator</code></a> processes resources in the order that the <a href="../../java/lang/ClassLoader.html#getResources-java.lang.String-"><code>ClassLoader.getResources(String)</code></a> method finds the service configuration files.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An iterator that lazily loads providers for this loader's service         </dd>   </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:load-java.lang.Class-java.lang.ClassLoader- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:load-java.lang.Class-java.lang.ClassLoader-"/><a name="load-java.lang.Class-java.lang.ClassLoader-"/><ul class="blockList"><li class="blockList"><h4>load</h4><pre>public static &lt;S&gt; <a href="../../java/util/ServiceLoader.html" title="class in java.util">ServiceLoader</a>&lt;S&gt; load(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;S&gt; service,
                                        <a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> loader)</pre><div class="block">Creates a new service loader for the given service type and class loader.            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>S</code> - the class of the service type        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>service</code> - The interface or abstract class representing the service          </dd><dd> <code>loader</code> - The class loader to be used to load provider-configuration files and provider classes, or <tt>null</tt> if the system class loader (or, failing that, the bootstrap class loader) is to be used                                 </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new service loader   </dd>   </dl></li></ul> <a end_ctx_id="method:load-java.lang.Class-java.lang.ClassLoader-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:load-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:load-java.lang.Class-"/><a name="load-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>load</h4><pre>public static &lt;S&gt; <a href="../../java/util/ServiceLoader.html" title="class in java.util">ServiceLoader</a>&lt;S&gt; load(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;S&gt; service)</pre><div class="block">Creates a new service loader for the given service type, using the current thread's <a href="../../java/lang/Thread.html#getContextClassLoader--">context class loader  </a>.<p> An invocation of this convenience method of the form         </p><blockquote><pre>
 ServiceLoader.load(<i>service</i>)</pre></blockquote> is equivalent to<blockquote><pre>
 ServiceLoader.load(<i>service</i>,
                    Thread.currentThread().getContextClassLoader())</pre></blockquote>                 </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>S</code> - the class of the service type        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>service</code> - The interface or abstract class representing the service          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new service loader   </dd>   </dl></li></ul> <a end_ctx_id="method:load-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:loadInstalled-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:loadInstalled-java.lang.Class-"/><a name="loadInstalled-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>loadInstalled</h4><pre>public static &lt;S&gt; <a href="../../java/util/ServiceLoader.html" title="class in java.util">ServiceLoader</a>&lt;S&gt; loadInstalled(<a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;S&gt; service)</pre><div class="block">Creates a new service loader for the given service type, using the extension class loader.<p> This convenience method simply locates the extension class loader, call it <tt><i>extClassLoader</i></tt>, and then returns               </p><blockquote><pre>
 ServiceLoader.load(<i>service</i>, <i>extClassLoader</i>)</pre></blockquote><p> If the extension class loader cannot be found then the system class loader is used; if there is no system class loader then the bootstrap class loader is used.                             </p><p> This method is intended for use when only installed providers are desired. The resulting service will only find and load providers that have been installed into the current Java virtual machine; providers on the application's class path will be ignored.                                        </p>              </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>S</code> - the class of the service type        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>service</code> - The interface or abstract class representing the service          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A new service loader   </dd>   </dl></li></ul> <a end_ctx_id="method:loadInstalled-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string describing this service.     </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A descriptive string  </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>