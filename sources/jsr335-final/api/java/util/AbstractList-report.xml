<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:AbstractList [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:AbstractList"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;E&gt;   </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/util/AbstractSequentialList.html" title="class in java.util">AbstractSequentialList</a>, <a href="../../java/util/ArrayList.html" title="class in java.util">ArrayList</a>, <a href="../../java/util/Vector.html" title="class in java.util">Vector</a>   </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">AbstractList&lt;E&gt;</span>
extends <a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;E&gt;
implements <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;E&gt;</pre><div class="block">This class provides a skeletal implementation of the <a href="../../java/util/List.html" title="interface in java.util"><code>List</code></a> interface to minimize the effort required to implement this interface backed by a "random access" data store (such as an array). For sequential access data (such as a linked list), <a href="../../java/util/AbstractSequentialList.html" title="class in java.util"><code>AbstractSequentialList</code></a> should be used in preference to this class.<p>To implement an unmodifiable list, the programmer needs only to extend this class and provide implementations for the <a href="../../java/util/AbstractList.html#get-int-"><code>get(int)</code></a> and <a href="../../java/util/List.html#size--"><code>size()</code></a> methods.                     </p><p>To implement a modifiable list, the programmer must additionally override the <a href="../../java/util/AbstractList.html#set-int-E-"><code>set(int, E) </code></a> method (which otherwise throws an <code>UnsupportedOperationException</code>). If the list is variable-size the programmer must additionally override the <a href="../../java/util/AbstractList.html#add-int-E-"><code>add(int, E) </code></a> and <a href="../../java/util/AbstractList.html#remove-int-"><code>remove(int)</code></a> methods.                                </p><p>The programmer should generally provide a void (no argument) and collection constructor, as per the recommendation in the <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> interface specification.                    </p><p>Unlike the other abstract collection implementations, the programmer does <i>not</i> have to provide an iterator implementation; the iterator and list iterator are implemented by this class, on top of the "random access" methods: <a href="../../java/util/AbstractList.html#get-int-"><code>get(int)</code></a>, <a href="../../java/util/AbstractList.html#set-int-E-"><code>set(int, E) </code></a>, <a href="../../java/util/AbstractList.html#add-int-E-"><code>add(int, E) </code></a> and <a href="../../java/util/AbstractList.html#remove-int-"><code>remove(int)</code></a>.                                     </p><p>The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation.                              </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                               </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:AbstractList"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:modCount [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:modCount"/><a name="modCount"/><ul class="blockListLast"><li class="blockList"><h4>modCount</h4><pre>protected transient int modCount</pre><div class="block">The number of times this list has been <i>structurally modified </i>. Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.<p>This field is used by the iterator and list iterator implementation returned by the <code>iterator</code> and <code>listIterator</code> methods. If the value of this field changes unexpectedly, the iterator (or list iterator) will throw a <code>ConcurrentModificationException</code> in response to the <code>next</code>, <code>remove</code>, <code>previous</code>, <code>set</code> or <code>add</code> operations. This provides <i>fail-fast</i> behavior, rather than non-deterministic behavior in the face of concurrent modification during iteration.                                                             </p><p> <b>Use of this field by subclasses is optional.       </b> If a subclass wishes to provide fail-fast iterators (and list iterators), then it merely has to increment this field in its <code>add(int, E) </code> and <code>remove(int)</code> methods (and any other methods that it overrides that result in structural modifications to the list). A single call to <code>add(int, E) </code> or <code>remove(int)</code> must add no more than one to this field, or the iterators (and list iterators) will throw bogus <code>ConcurrentModificationExceptions</code>. If an implementation does not wish to provide fail-fast iterators, this field may be ignored.                                                                                  </p>                                   </div></li></ul> <a end_ctx_id="field:modCount"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:AbstractList-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:AbstractList--"/><a name="AbstractList--"/><ul class="blockListLast"><li class="blockList"><h4>AbstractList</h4><pre>protected AbstractList()</pre><div class="block">Sole constructor. (For invocation by subclass constructors, typically implicit.)        </div></li></ul> <a end_ctx_id="constructor:AbstractList--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>public boolean add(<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a> e)</pre><div class="block">Appends the specified element to the end of this list (optional operation).<p>Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added.                                                        </p><p>This implementation calls <code>add(size(), e) </code>.   </p><p>Note that this implementation throws an <code>UnsupportedOperationException</code> unless <a href="../../java/util/AbstractList.html#add-int-E-"><code>add(int, E) </code></a> is overridden.          </p>           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#add-E-">add</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#add-E-">add</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - element to be appended to this list         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> (as specified by <a href="../../java/util/Collection.html#add-E-"><code>Collection.add(E)</code></a>)     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <code>add</code> operation is not supported by this list            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this list does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of this element prevents it from being added to this list                </dd>      </dl></li></ul> <a end_ctx_id="method:add-E-"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get-int-"/><a name="get-int-"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public abstract <a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a> get(int index)</pre><div class="block">Returns the element at the specified position in this list.         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#get-int-">get</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - index of the element to return        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the element at the specified position in this list        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the index is out of range (<tt>index &lt; 0 || index &gt;= size()      </tt>)          </dd>    </dl></li></ul> <a name="set-int-java.lang.Object-"/><a end_ctx_id="method:get-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:set-int-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:set-int-E-"/><a name="set-int-E-"/><ul class="blockList"><li class="blockList"><h4>set</h4><pre>public <a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a> set(int index,
             <a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a> element)</pre><div class="block">Replaces the element at the specified position in this list with the specified element (optional operation).<p>This implementation always throws an <code>UnsupportedOperationException</code>.     </p>               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#set-int-E-">set</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - index of the element to replace        </dd><dd> <code>element</code> - element to be stored at the specified position          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the element previously at the specified position      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>set</tt> operation is not supported by this list            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this list does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the index is out of range (<tt>index &lt; 0 || index &gt;= size()      </tt>)          </dd>    </dl></li></ul> <a name="add-int-java.lang.Object-"/><a end_ctx_id="method:set-int-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-int-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:add-int-E-"/><a name="add-int-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>public void add(int index,
                <a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a> element)</pre><div class="block">Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).<p>This implementation always throws an <code>UnsupportedOperationException</code>.     </p>                                 </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#add-int-E-">add</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - index at which the specified element is to be inserted            </dd><dd> <code>element</code> - element to be inserted      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>add</tt> operation is not supported by this list            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this list does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the specified element prevents it from being added to this list                 </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the index is out of range (<tt>index &lt; 0 || index &gt; size()      </tt>)          </dd>   </dl></li></ul> <a end_ctx_id="method:add-int-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-int-"/><a name="remove-int-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public <a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a> remove(int index)</pre><div class="block">Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.<p>This implementation always throws an <code>UnsupportedOperationException</code>.     </p>                                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#remove-int-">remove</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - the index of the element to be removed          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the element previously at the specified position      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>remove</tt> operation is not supported by this list            </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the index is out of range (<tt>index &lt; 0 || index &gt;= size()      </tt>)          </dd>    </dl></li></ul> <a end_ctx_id="method:remove-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:indexOf-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:indexOf-java.lang.Object-"/><a name="indexOf-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>indexOf</h4><pre>public int indexOf(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index <tt>i</tt> such that <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if there is no such index.<p>This implementation first gets a list iterator (with <code>listIterator()</code>). Then, it iterates over the list until the specified element is found or the end of the list is reached.                            </p>                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#indexOf-java.lang.Object-">indexOf</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to search for      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the type of the specified element is incompatible with this list (<a href="Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this list does not permit null elements (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>    </dl></li></ul> <a end_ctx_id="method:indexOf-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lastIndexOf-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lastIndexOf-java.lang.Object-"/><a name="lastIndexOf-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>lastIndexOf</h4><pre>public int lastIndexOf(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index <tt>i</tt> such that <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if there is no such index.<p>This implementation first gets a list iterator that points to the end of the list (with <code>listIterator(size())</code>). Then, it iterates backwards over the list until the specified element is found, or the beginning of the list is reached.                                     </p>                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#lastIndexOf-java.lang.Object-">lastIndexOf</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to search for      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the type of the specified element is incompatible with this list (<a href="Collection.html#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this list does not permit null elements (<a href="Collection.html#optional-restrictions">optional</a>)                 </dd>    </dl></li></ul> <a end_ctx_id="method:lastIndexOf-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Removes all of the elements from this list (optional operation). The list will be empty after this call returns.<p>This implementation calls <code>removeRange(0, size()) </code>.   </p><p>Note that this implementation throws an <code>UnsupportedOperationException</code> unless <code>remove(int index) </code> or <code>removeRange(int fromIndex, int toIndex)   </code> is overridden.            </p>                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#clear--">clear</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#clear--">clear</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#clear--">clear</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <code>clear</code> operation is not supported by this list            </dd>    </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addAll-int-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addAll-int-java.util.Collection-"/><a name="addAll-int-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>addAll</h4><pre>public boolean addAll(int index,
                      <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt; c)</pre><div class="block">Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)<p>This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using <code>add(int, E) </code>. Many implementations will override this method for efficiency.                                        </p><p>Note that this implementation throws an <code>UnsupportedOperationException</code> unless <a href="../../java/util/AbstractList.html#add-int-E-"><code>add(int, E) </code></a> is overridden.          </p>                                                                                          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#addAll-int-java.util.Collection-">addAll</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - index at which to insert the first element from the specified collection              </dd><dd> <code>c</code> - collection containing elements to be added to this list           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this list changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>addAll</tt> operation is not supported by this list            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of an element of the specified collection prevents it from being added to this list                    </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null                           </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of an element of the specified collection prevents it from being added to this list                    </dd><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the index is out of range (<tt>index &lt; 0 || index &gt; size()      </tt>)          </dd>    </dl></li></ul> <a end_ctx_id="method:addAll-int-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt; iterator()</pre><div class="block">Returns an iterator over the elements in this list in proper sequence.<p>This implementation returns a straightforward implementation of the iterator interface, relying on the backing list's <code>size()</code>, <code>get(int)</code>, and <code>remove(int)</code> methods.                   </p><p>Note that the iterator returned by this method will throw an <a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang"><code>UnsupportedOperationException</code></a> in response to its <code>remove</code> method unless the list's <code>remove(int)</code> method is overridden.                        </p><p>This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) <a href="../../java/util/AbstractList.html#modCount"><code>modCount</code></a> field.                        </p>           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#iterator--">iterator</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements in this list in proper sequence          </dd>     </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:listIterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:listIterator--"/><a name="listIterator--"/><ul class="blockList"><li class="blockList"><h4>listIterator</h4><pre>public <a href="../../java/util/ListIterator.html" title="interface in java.util">ListIterator</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt; listIterator()</pre><div class="block">Returns a list iterator over the elements in this list (in proper sequence).<p>This implementation returns <code>listIterator(0)</code>.   </p>            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#listIterator--">listIterator</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list iterator over the elements in this list (in proper sequence)           </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/AbstractList.html#listIterator-int-"><code>listIterator(int)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:listIterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:listIterator-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:listIterator-int-"/><a name="listIterator-int-"/><ul class="blockList"><li class="blockList"><h4>listIterator</h4><pre>public <a href="../../java/util/ListIterator.html" title="interface in java.util">ListIterator</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt; listIterator(int index)</pre><div class="block">Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to <a href="../../java/util/ListIterator.html#next--"><code>next</code></a>. An initial call to <a href="../../java/util/ListIterator.html#previous--"><code>previous</code></a> would return the element with the specified index minus one.<p>This implementation returns a straightforward implementation of the <code>ListIterator</code> interface that extends the implementation of the <code>Iterator</code> interface returned by the <code>iterator()</code> method. The <code>ListIterator</code> implementation relies on the backing list's <code>get(int)</code>, <code>set(int, E) </code>, <code>add(int, E) </code> and <code>remove(int)</code> methods.                                    </p><p>Note that the list iterator returned by this implementation will throw an <a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang"><code>UnsupportedOperationException</code></a> in response to its <code>remove</code>, <code>set</code> and <code>add</code> methods unless the list's <code>remove(int)</code>, <code>set(int, E) </code>, and <code>add(int, E) </code> methods are overridden.                               </p><p>This implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) <a href="../../java/util/AbstractList.html#modCount"><code>modCount</code></a> field.                        </p>                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#listIterator-int-">listIterator</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>index</code> - index of the first element to be returned from the list iterator (by a call to <a href="../../java/util/ListIterator.html#next--"><code>next</code></a>)                   </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list                   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the index is out of range (<code>index &lt; 0 || index &gt; size()      </code>)          </dd>    </dl></li></ul> <a end_ctx_id="method:listIterator-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:subList-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:subList-int-int-"/><a name="subList-int-int-"/><ul class="blockList"><li class="blockList"><h4>subList</h4><pre>public <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt; subList(int fromIndex,
                       int toIndex)</pre><div class="block">Returns a view of the portion of this list between the specified <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive. (If <tt>fromIndex</tt> and <tt>toIndex</tt> are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list.<p> This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list:<pre><code>
      list.subList(from, to).clear();
 </code></pre> Similar idioms may be constructed for <tt>indexOf</tt> and <tt>lastIndexOf</tt>, and all of the algorithms in the <tt>Collections</tt> class can be applied to a subList.                                                                             </p><p> The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is <i>structurally modified </i> in any way other than via the returned list. (Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)                                                        </p><p>This implementation returns a list that subclasses <code>AbstractList</code>. The subclass stores, in private fields, the offset of the subList within the backing list, the size of the subList (which can change over its lifetime), and the expected <code>modCount</code> value of the backing list. There are two variants of the subclass, one of which implements <code>RandomAccess</code>. If this list implements <code>RandomAccess</code> the returned list will be an instance of the subclass that implements <code>RandomAccess</code>.                                                                        </p><p>The subclass's <code>set(int, E) </code>, <code>get(int)</code>, <code>add(int, E) </code>, <code>remove(int)</code>, <code>addAll(int, Collection) </code> and <code>removeRange(int, int) </code> methods all delegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset. The <code>addAll(Collection c) </code> method merely returns <code>addAll(size, c) </code>.                                   </p><p>The <code>listIterator(int)</code> method returns a "wrapper object" over a list iterator on the backing list, which is created with the corresponding method on the backing list. The <code>iterator</code> method merely returns <code>listIterator()</code>, and the <code>size</code> method merely returns the subclass's <code>size</code> field.                                         </p><p>All methods first check to see if the actual <code>modCount</code> of the backing list is equal to its expected value, and throw a <code>ConcurrentModificationException</code> if it is not.                           </p>                                                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#subList-int-int-">subList</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - low endpoint (inclusive) of the subList        </dd><dd> <code>toIndex</code> - high endpoint (exclusive) of the subList        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the specified range within this list        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if an endpoint index value is out of range <code>(fromIndex &lt; 0 || toIndex &gt; size)      </code>            </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the endpoint indices are out of order <code>(fromIndex &gt; toIndex)  </code>           </dd>    </dl></li></ul> <a end_ctx_id="method:subList-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Compares the specified object with this list for equality. Returns <code>true</code> if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are <i>equal</i>. (Two elements <code>e1</code> and <code>e2</code> are <i>equal</i> if <code>(e1==null ? e2==null : e1.equals(e2))    </code>.) In other words, two lists are defined to be equal if they contain the same elements in the same order.<p> This implementation first checks if the specified object is this list. If so, it returns <code>true</code>; if not, it checks if the specified object is a list. If not, it returns <code>false</code>; if so, it iterates over both lists, comparing corresponding pairs of elements. If any comparison returns <code>false</code>, this method returns <code>false</code>. If either iterator runs out of elements before the other it returns <code>false</code> (as the lists are of unequal length); otherwise it returns <code>true</code> when the iterations complete.                                                                                 </p>                                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#equals-java.lang.Object-">equals</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#equals-java.lang.Object-">equals</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - the object to be compared for equality with this list            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the specified object is equal to this list          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>      </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value for this list.<p>This implementation uses exactly the code that is used to define the list hash function in the documentation for the <a href="../../java/util/List.html#hashCode--"><code>List.hashCode()</code></a> method.                     </p>       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#hashCode--">hashCode</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/List.html#hashCode--">hashCode</a></code> in interface <code><a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/AbstractList.html" title="type parameter in AbstractList">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the hash code value for this list      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeRange-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeRange-int-int-"/><a name="removeRange-int-int-"/><ul class="blockListLast"><li class="blockList"><h4>removeRange</h4><pre>protected void removeRange(int fromIndex,
                           int toIndex)</pre><div class="block">Removes from this list all of the elements whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by <code>(toIndex - fromIndex)  </code> elements. (If <code>toIndex==fromIndex</code>, this operation has no effect.)<p>This method is called by the <code>clear</code> operation on this list and its subLists. Overriding this method to take advantage of the internals of the list implementation can <i>substantially</i> improve the performance of the <code>clear</code> operation on this list and its subLists.                                         </p><p>This implementation gets a list iterator positioned before <code>fromIndex</code>, and repeatedly calls <code>ListIterator.next</code> followed by <code>ListIterator.remove</code> until the entire range has been removed. <b>Note: if <code>ListIterator.remove</code> requires linear time, this implementation requires quadratic time.          </b>                       </p>                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromIndex</code> - index of first element to be removed         </dd><dd> <code>toIndex</code> - index after last element to be removed         </dd> </dl></li></ul> <a end_ctx_id="method:removeRange-int-int-"/>  </td></tr></table></td></tr></table></diff></diffreport>