<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Scanner [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Scanner"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a>, <a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>, <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;   </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Scanner</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;, <a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></pre><div class="block">A simple text scanner which can parse primitive types and strings using regular expressions.<p>A <code>Scanner</code> breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various <tt>next</tt> methods.                                </p><p>For example, this code allows a user to read a number from <tt>System.in</tt>:            </p><blockquote><pre><code>
     Scanner sc = new Scanner(System.in);
     int i = sc.nextInt();
 </code></pre></blockquote><p>As another example, this code allows <code>long</code> types to be assigned from entries in a file <code>myNumbers</code>:                </p><blockquote><pre><code>
      Scanner sc = new Scanner(new File("myNumbers"));
      while (sc.hasNextLong()) {
          long aLong = sc.nextLong();
      }
 </code></pre></blockquote><p>The scanner can also use delimiters other than whitespace. This example reads several items in from a string:                 </p><blockquote><pre><code>
     String input = "1 fish 2 fish red fish blue fish";
     Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*");
     System.out.println(s.nextInt());
     System.out.println(s.nextInt());
     System.out.println(s.next());
     System.out.println(s.next());
     s.close();
 </code></pre></blockquote><p> prints the following output:    </p><blockquote><pre><code>
     1
     2
     red
     blue
 </code></pre></blockquote><p>The same output can be generated with this code, which uses a regular expression to parse all four tokens at once:                    </p><blockquote><pre><code>
     String input = "1 fish 2 fish red fish blue fish";
     Scanner s = new Scanner(input);
     s.findInLine("(\\d+) fish (\\d+) fish (\\w+) fish (\\w+)");
     MatchResult result = s.match();
     for (int i=1; i&lt;=result.groupCount(); i++)
         System.out.println(result.group(i));
     s.close();
 </code></pre></blockquote><p>The <a name="default-delimiter">default whitespace delimiter  </a> used by a scanner is as recognized by <a href="../../java/lang/Character.html" title="class in java.lang"><code>Character</code></a>.<a href="../../java/lang/Character.html#isWhitespace-char-"><code>isWhitespace</code></a>. The <a href="../../java/util/Scanner.html#reset--"><code>reset()</code></a> method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed.                                 </p><p>A scanning operation may block waiting for input.       </p><p>The <a href="../../java/util/Scanner.html#next--"><code>next()</code></a> and <a href="../../java/util/Scanner.html#hasNext--"><code>hasNext()</code></a> methods and their primitive-type companion methods (such as <a href="../../java/util/Scanner.html#nextInt--"><code>nextInt()</code></a> and <a href="../../java/util/Scanner.html#hasNextInt--"><code>hasNextInt()</code></a>) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both <tt>hasNext</tt> and <tt>next</tt> methods may block waiting for further input. Whether a <tt>hasNext</tt> method blocks has no connection to whether or not its associated <tt>next</tt> method will block.                                                            </p><p> The <a href="../../java/util/Scanner.html#findInLine-java.lang.String-"><code>findInLine(java.lang.String)</code></a>, <a href="../../java/util/Scanner.html#findWithinHorizon-java.lang.String-int-"><code>findWithinHorizon(java.lang.String, int) </code></a>, and <a href="../../java/util/Scanner.html#skip-java.util.regex.Pattern-"><code>skip(java.util.regex.Pattern)</code></a> methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input.                                                  </p><p>When a scanner throws an <a href="../../java/util/InputMismatchException.html" title="class in java.util"><code>InputMismatchException</code></a>, the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method.                            </p><p>Depending upon the type of delimiting pattern, empty tokens may be returned. For example, the pattern <tt>"\\s+"</tt> will return no empty tokens since it matches multiple instances of the delimiter. The delimiting pattern <tt>"\\s"</tt> could return empty tokens since it only passes one space at a time.                                              </p><p> A scanner can read text from any object which implements the <a href="../../java/lang/Readable.html" title="interface in java.lang"><code>Readable</code></a> interface. If an invocation of the underlying readable's <a href="../../java/lang/Readable.html#read-java.nio.CharBuffer-"><code>Readable.read(java.nio.CharBuffer)</code></a> method throws an <a href="../../java/io/IOException.html" title="class in java.io"><code>IOException</code></a> then the scanner assumes that the end of the input has been reached. The most recent <tt>IOException</tt> thrown by the underlying readable can be retrieved via the <a href="../../java/util/Scanner.html#ioException--"><code>ioException()</code></a> method.                                                      </p><p>When a <code>Scanner</code> is closed, it will close its input source if the source implements the <a href="../../java/io/Closeable.html" title="interface in java.io"><code>Closeable</code></a> interface.                 </p><p>A <code>Scanner</code> is not safe for multithreaded use without external synchronization.          </p><p>Unless otherwise mentioned, passing a <code>null</code> parameter into any method of a <code>Scanner</code> will cause a <code>NullPointerException</code> to be thrown.                   </p><p>A scanner will default to interpreting numbers as decimal unless a different radix has been set by using the <a href="../../java/util/Scanner.html#useRadix-int-"><code>useRadix(int)</code></a> method. The <a href="../../java/util/Scanner.html#reset--"><code>reset()</code></a> method will reset the value of the scanner's radix to <code>10</code> regardless of whether it was previously changed.                                        </p><h3> <a name="localized-numbers">Localized numbers </a> </h3><p> An instance of this class is capable of scanning numbers in the standard formats as well as in the formats of the scanner's locale. A scanner's <a name="initial-locale">initial locale   </a>is the value returned by the <a href="../../java/util/Locale.html#getDefault-java.util.Locale.Category-"><code>Locale.getDefault(Locale.Category.FORMAT)</code></a> method; it may be changed via the <a href="../../java/util/Scanner.html#useLocale-java.util.Locale-"><code>useLocale(java.util.Locale)</code></a> method. The <a href="../../java/util/Scanner.html#reset--"><code>reset()</code></a> method will reset the value of the scanner's locale to the initial locale regardless of whether it was previously changed.                                                                </p><p>The localized formats are defined in terms of the following parameters, which for a particular locale are taken from that locale's <a href="../../java/text/DecimalFormat.html" title="class in java.text"><code>DecimalFormat</code></a> object, <tt>df</tt>, and its and <a href="../../java/text/DecimalFormatSymbols.html" title="class in java.text"><code>DecimalFormatSymbols</code></a> object, <tt>dfs</tt>.                             </p><blockquote><dl> <dt> <i>LocalGroupSeparator  </i>   </dt><dd>The character used to separate thousands groups, <i>i.e.,</i> <tt>dfs.</tt><a href="../../java/text/DecimalFormatSymbols.html#getGroupingSeparator--"><code>getGroupingSeparator()</code></a>       </dd> <dt> <i>LocalDecimalSeparator  </i>   </dt><dd>The character used for the decimal point, <i>i.e.,</i> <tt>dfs.</tt><a href="../../java/text/DecimalFormatSymbols.html#getDecimalSeparator--"><code>getDecimalSeparator()</code></a>       </dd> <dt> <i>LocalPositivePrefix  </i>   </dt><dd>The string that appears before a positive number (may be empty), <i>i.e.,</i> <tt>df.</tt><a href="../../java/text/DecimalFormat.html#getPositivePrefix--"><code>getPositivePrefix()</code></a>           </dd> <dt> <i>LocalPositiveSuffix  </i>   </dt><dd>The string that appears after a positive number (may be empty), <i>i.e.,</i> <tt>df.</tt><a href="../../java/text/DecimalFormat.html#getPositiveSuffix--"><code>getPositiveSuffix()</code></a>           </dd> <dt> <i>LocalNegativePrefix  </i>   </dt><dd>The string that appears before a negative number (may be empty), <i>i.e.,</i> <tt>df.</tt><a href="../../java/text/DecimalFormat.html#getNegativePrefix--"><code>getNegativePrefix()</code></a>           </dd> <dt> <i>LocalNegativeSuffix  </i>   </dt><dd>The string that appears after a negative number (may be empty), <i>i.e.,</i> <tt>df.</tt><a href="../../java/text/DecimalFormat.html#getNegativeSuffix--"><code>getNegativeSuffix()</code></a>           </dd> <dt> <i>LocalNaN  </i>   </dt><dd>The string that represents not-a-number for floating-point values, <i>i.e.,</i> <tt>dfs.</tt><a href="../../java/text/DecimalFormatSymbols.html#getNaN--"><code>getNaN()</code></a>        </dd> <dt> <i>LocalInfinity  </i>   </dt><dd>The string that represents infinity for floating-point values, <i>i.e.,</i> <tt>dfs.</tt><a href="../../java/text/DecimalFormatSymbols.html#getInfinity--"><code>getInfinity()</code></a>        </dd>        </dl></blockquote><h4> <a name="number-syntax">Number syntax </a> </h4><p> The strings that can be parsed as numbers by an instance of this class are specified in terms of the following regular-expression grammar, where Rmax is the highest digit in the radix being used (for example, Rmax is 9 in base 10).<dl> <dt> <i>NonAsciiDigit</i>:   </dt><dd>A non-ASCII character c for which <a href="../../java/lang/Character.html#isDigit-char-"><code>Character.isDigit</code></a><tt>(c)</tt> returns true       </dd> <dt> <i>Non0Digit</i>:   </dt><dd> <tt>[1-</tt><i>Rmax</i><tt>] |   </tt><i>NonASCIIDigit</i> </dd> <dt> <i>Digit</i>:   </dt><dd> <tt>[0-</tt><i>Rmax</i><tt>] |   </tt><i>NonASCIIDigit</i> </dd> <dt> <i>GroupedNumeral</i>:   </dt><dd> <tt>( </tt><i>Non0Digit</i><i>Digit</i><tt>?  </tt><i>Digit</i><tt>?</tt> </dd><dd>    <tt>( </tt><i>LocalGroupSeparator</i><i>Digit</i><i>Digit</i><i>Digit</i><tt> )+ )  </tt></dd> <dt> <i>Numeral</i>:   </dt><dd> <tt>( (   </tt><i>Digit</i><tt>+ ) |    </tt><i>GroupedNumeral</i><tt> ) </tt> </dd> <dt> <a name="Integer-regex"><i>Integer</i>:</a>   </dt><dd> <tt>( [-+]? (    </tt><i>Numeral</i><tt> ) )  </tt> </dd><dd> <tt>|  </tt><i>LocalPositivePrefix</i><i>Numeral</i><i>LocalPositiveSuffix</i> </dd><dd> <tt>|  </tt><i>LocalNegativePrefix</i><i>Numeral</i><i>LocalNegativeSuffix</i> </dd> <dt> <i>DecimalNumeral</i>:   </dt><dd> <i>Numeral</i> </dd><dd> <tt>|  </tt><i>Numeral</i><i>LocalDecimalSeparator</i><i>Digit</i><tt>*</tt> </dd><dd> <tt>|  </tt><i>LocalDecimalSeparator</i><i>Digit</i><tt>+</tt> </dd> <dt> <i>Exponent</i>:   </dt><dd> <tt>( [eE] [+-]?    </tt><i>Digit</i><tt>+ ) </tt> </dd> <dt> <a name="Decimal-regex"><i>Decimal</i>:</a>   </dt><dd> <tt>( [-+]?   </tt><i>DecimalNumeral</i><i>Exponent</i><tt>? ) </tt> </dd><dd> <tt>|  </tt><i>LocalPositivePrefix</i><i>DecimalNumeral</i><i>LocalPositiveSuffix</i><i>Exponent</i><tt>?</tt> </dd><dd> <tt>|  </tt><i>LocalNegativePrefix</i><i>DecimalNumeral</i><i>LocalNegativeSuffix</i><i>Exponent</i><tt>?</tt> </dd> <dt> <i>HexFloat</i>:   </dt><dd> <tt>[-+]? 0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+ ([pP][-+]?[0-9]+)?  </tt> </dd> <dt> <i>NonNumber</i>:   </dt><dd> <tt>NaN |   </tt><i>LocalNan</i><tt> | Infinity |     </tt><i>LocalInfinity</i> </dd> <dt> <i>SignedNonNumber</i>:   </dt><dd> <tt>( [-+]?   </tt><i>NonNumber</i><tt> ) </tt> </dd><dd> <tt>|  </tt><i>LocalPositivePrefix</i><i>NonNumber</i><i>LocalPositiveSuffix</i> </dd><dd> <tt>|  </tt><i>LocalNegativePrefix</i><i>NonNumber</i><i>LocalNegativeSuffix</i> </dd> <dt> <a name="Float-regex"><i>Float</i></a>:   </dt><dd> <i>Decimal</i><tt>|  </tt><i>HexFloat</i><tt>|  </tt><i>SignedNonNumber</i> </dd>             </dl>                                          </p><p>Whitespace is not significant in the above regular expressions.        </p>             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Scanner"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.lang.Readable- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.lang.Readable-"/><a name="Scanner-java.lang.Readable-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/lang/Readable.html" title="interface in java.lang">Readable</a> source)</pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified source.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - A character source implementing the <a href="../../java/lang/Readable.html" title="interface in java.lang"><code>Readable</code></a> interface         </dd> </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.lang.Readable-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.io.InputStream- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.io.InputStream-"/><a name="Scanner-java.io.InputStream-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> source)</pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the underlying platform's <a href="../../java/nio/charset/Charset.html#defaultCharset--">default charset </a>.                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - An input stream to be scanned        </dd> </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.io.InputStream-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.io.InputStream-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.io.InputStream-java.lang.String-"/><a name="Scanner-java.io.InputStream-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/io/InputStream.html" title="class in java.io">InputStream</a> source,
               <a href="../../java/lang/String.html" title="class in java.lang">String</a> charsetName)</pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the specified charset.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - An input stream to be scanned        </dd><dd> <code>charsetName</code> - The encoding type used to convert bytes from the stream into characters to be scanned                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified character set does not exist          </dd>  </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.io.InputStream-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.io.File- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.io.File-"/><a name="Scanner-java.io.File-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/io/File.html" title="class in java.io">File</a> source)
        throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's <a href="../../java/nio/charset/Charset.html#defaultCharset--">default charset </a>.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - A file to be scanned       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - if source is not found       </dd>  </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.io.File-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.io.File-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.io.File-java.lang.String-"/><a name="Scanner-java.io.File-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/io/File.html" title="class in java.io">File</a> source,
               <a href="../../java/lang/String.html" title="class in java.lang">String</a> charsetName)
        throws <a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - A file to be scanned       </dd><dd> <code>charsetName</code> - The encoding type used to convert bytes from the file into characters to be scanned                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/FileNotFoundException.html" title="class in java.io">FileNotFoundException</a></code> - if source is not found       </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified encoding is not found         </dd>  </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.io.File-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.nio.file.Path- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.nio.file.Path-"/><a name="Scanner-java.nio.file.Path-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> source)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's <a href="../../java/nio/charset/Charset.html#defaultCharset--">default charset </a>.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - the path to the file to be scanned          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs opening source         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.nio.file.Path-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.nio.file.Path-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.nio.file.Path-java.lang.String-"/><a name="Scanner-java.nio.file.Path-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/nio/file/Path.html" title="interface in java.nio.file">Path</a> source,
               <a href="../../java/lang/String.html" title="class in java.lang">String</a> charsetName)
        throws <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - the path to the file to be scanned          </dd><dd> <code>charsetName</code> - The encoding type used to convert bytes from the file into characters to be scanned                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an I/O error occurs opening source         </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified encoding is not found         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.nio.file.Path-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.lang.String-"/><a name="Scanner-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/lang/String.html" title="class in java.lang">String</a> source)</pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified string.           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - A string to scan      </dd> </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.nio.channels.ReadableByteChannel- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.nio.channels.ReadableByteChannel-"/><a name="Scanner-java.nio.channels.ReadableByteChannel-"/><ul class="blockList"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/nio/channels/ReadableByteChannel.html" title="interface in java.nio.channels">ReadableByteChannel</a> source)</pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified channel. Bytes from the source are converted into characters using the underlying platform's <a href="../../java/nio/charset/Charset.html#defaultCharset--">default charset </a>.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - A channel to scan      </dd> </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.nio.channels.ReadableByteChannel-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Scanner-java.nio.channels.ReadableByteChannel-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Scanner-java.nio.channels.ReadableByteChannel-java.lang.String-"/><a name="Scanner-java.nio.channels.ReadableByteChannel-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>Scanner</h4><pre>public Scanner(<a href="../../java/nio/channels/ReadableByteChannel.html" title="interface in java.nio.channels">ReadableByteChannel</a> source,
               <a href="../../java/lang/String.html" title="class in java.lang">String</a> charsetName)</pre><div class="block">Constructs a new <code>Scanner</code> that produces values scanned from the specified channel. Bytes from the source are converted into characters using the specified charset.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - A channel to scan      </dd><dd> <code>charsetName</code> - The encoding type used to convert bytes from the channel into characters to be scanned                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the specified character set does not exist          </dd>  </dl></li></ul> <a end_ctx_id="constructor:Scanner-java.nio.channels.ReadableByteChannel-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close--"/><a name="close--"/><ul class="blockList"><li class="blockList"><h4>close</h4><pre>public void close()</pre><div class="block">Closes this scanner.<p> If this scanner has not yet been closed then if its underlying <a href="../../java/lang/Readable.html" title="interface in java.lang">readable</a> also implements the <a href="../../java/io/Closeable.html" title="interface in java.io"><code>Closeable</code></a> interface then the readable's <tt>close</tt> method will be invoked. If this scanner is already closed then invoking this method will have no effect.                                        </p><p>Attempting to perform search operations after a scanner has been closed will result in an <a href="../../java/lang/IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>.               </p>  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/io/Closeable.html#close--">close</a></code> in interface <code><a href="../../java/io/Closeable.html" title="interface in java.io">Closeable</a></code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/AutoCloseable.html#close--">close</a></code> in interface <code><a href="../../java/lang/AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd>  </dl></li></ul> <a end_ctx_id="method:close--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ioException-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ioException--"/><a name="ioException--"/><ul class="blockList"><li class="blockList"><h4>ioException</h4><pre>public <a href="../../java/io/IOException.html" title="class in java.io">IOException</a> ioException()</pre><div class="block">Returns the <code>IOException</code> last thrown by this <code>Scanner</code>'s underlying <code>Readable</code>. This method returns <code>null</code> if no such exception exists.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the last exception thrown by this scanner's readable       </dd> </dl></li></ul> <a end_ctx_id="method:ioException--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:delimiter-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:delimiter--"/><a name="delimiter--"/><ul class="blockList"><li class="blockList"><h4>delimiter</h4><pre>public <a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> delimiter()</pre><div class="block">Returns the <code>Pattern</code> this <code>Scanner</code> is currently using to match delimiters.          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner's delimiting pattern.   </dd> </dl></li></ul> <a end_ctx_id="method:delimiter--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:useDelimiter-java.util.regex.Pattern- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:useDelimiter-java.util.regex.Pattern-"/><a name="useDelimiter-java.util.regex.Pattern-"/><ul class="blockList"><li class="blockList"><h4>useDelimiter</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> useDelimiter(<a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> pattern)</pre><div class="block">Sets this scanner's delimiting pattern to the specified pattern.        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - A delimiting pattern     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd>  </dl></li></ul> <a end_ctx_id="method:useDelimiter-java.util.regex.Pattern-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:useDelimiter-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:useDelimiter-java.lang.String-"/><a name="useDelimiter-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>useDelimiter</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> useDelimiter(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pattern)</pre><div class="block">Sets this scanner's delimiting pattern to a pattern constructed from the specified <code>String</code>.<p> An invocation of this method of the form <tt>useDelimiter(pattern)</tt> behaves in exactly the same way as the invocation <tt>useDelimiter(Pattern.compile(pattern))</tt>.                   </p><p> Invoking the <a href="../../java/util/Scanner.html#reset--"><code>reset()</code></a> method will set the scanner's delimiter to the <a href="#default-delimiter">default</a>.            </p>            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - A string specifying a delimiting pattern        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd>  </dl></li></ul> <a end_ctx_id="method:useDelimiter-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:locale-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:locale--"/><a name="locale--"/><ul class="blockList"><li class="blockList"><h4>locale</h4><pre>public <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale()</pre><div class="block">Returns this scanner's locale.<p>A scanner's locale affects many elements of its default primitive matching regular expressions; see <a href="#localized-numbers">localized numbers </a> above.               </p>   </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner's locale  </dd> </dl></li></ul> <a end_ctx_id="method:locale--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:useLocale-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:useLocale-java.util.Locale-"/><a name="useLocale-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>useLocale</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> useLocale(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale)</pre><div class="block">Sets this scanner's locale to the specified locale.<p>A scanner's locale affects many elements of its default primitive matching regular expressions; see <a href="#localized-numbers">localized numbers </a> above.               </p><p>Invoking the <a href="../../java/util/Scanner.html#reset--"><code>reset()</code></a> method will set the scanner's locale to the <a href="#initial-locale">initial locale </a>.           </p>       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>locale</code> - A string specifying the locale to use         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd>  </dl></li></ul> <a end_ctx_id="method:useLocale-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:radix-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:radix--"/><a name="radix--"/><ul class="blockList"><li class="blockList"><h4>radix</h4><pre>public int radix()</pre><div class="block">Returns this scanner's default radix.<p>A scanner's radix affects elements of its default number matching regular expressions; see <a href="#localized-numbers">localized numbers </a> above.              </p>    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the default radix of this scanner     </dd> </dl></li></ul> <a end_ctx_id="method:radix--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:useRadix-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:useRadix-int-"/><a name="useRadix-int-"/><ul class="blockList"><li class="blockList"><h4>useRadix</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> useRadix(int radix)</pre><div class="block">Sets this scanner's default radix to the specified radix.<p>A scanner's radix affects elements of its default number matching regular expressions; see <a href="#localized-numbers">localized numbers </a> above.              </p><p>If the radix is less than <code>Character.MIN_RADIX</code> or greater than <code>Character.MAX_RADIX</code>, then an <code>IllegalArgumentException</code> is thrown.               </p><p>Invoking the <a href="../../java/util/Scanner.html#reset--"><code>reset()</code></a> method will set the scanner's radix to <code>10</code>.          </p>        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - The radix to use when scanning numbers         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if radix is out of range        </dd>   </dl></li></ul> <a end_ctx_id="method:useRadix-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:match-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:match--"/><a name="match--"/><ul class="blockList"><li class="blockList"><h4>match</h4><pre>public <a href="../../java/util/regex/MatchResult.html" title="interface in java.util.regex">MatchResult</a> match()</pre><div class="block">Returns the match result of the last scanning operation performed by this scanner. This method throws <code>IllegalStateException</code> if no match has been performed, or if the last match was not successful.<p>The various <code>next</code>methods of <code>Scanner</code> make a match result available if they complete without throwing an exception. For instance, after an invocation of the <a href="../../java/util/Scanner.html#nextInt--"><code>nextInt()</code></a> method that returned an int, this method returns a <code>MatchResult</code> for the search of the <a href="#Integer-regex"><i>Integer</i></a> regular expression defined above. Similarly the <a href="../../java/util/Scanner.html#findInLine-java.lang.String-"><code>findInLine(java.lang.String)</code></a>, <a href="../../java/util/Scanner.html#findWithinHorizon-java.lang.String-int-"><code>findWithinHorizon(java.lang.String, int) </code></a>, and <a href="../../java/util/Scanner.html#skip-java.util.regex.Pattern-"><code>skip(java.util.regex.Pattern)</code></a> methods will make a match available if they succeed.                                                           </p>                              </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a match result for the last match operation       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - If no match result is available        </dd>  </dl></li></ul> <a end_ctx_id="method:match--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block"><p>Returns the string representation of this <code>Scanner</code>. The string representation of a <code>Scanner</code> contains information that may be useful for debugging. The exact format is unspecified.                         </p></div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The string representation of this scanner     </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNext-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNext--"/><a name="hasNext--"/><ul class="blockList"><li class="blockList"><h4>hasNext</h4><pre>public boolean hasNext()</pre><div class="block">Returns true if this scanner has another token in its input. This method may block while waiting for input to scan. The scanner does not advance past any input.                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Iterator.html#hasNext--">hasNext</a></code> in interface <code><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner has another token         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:hasNext--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:next-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:next--"/><a name="next--"/><ul class="blockList"><li class="blockList"><h4>next</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> next()</pre><div class="block">Finds and returns the next complete token from this scanner. A complete token is preceded and followed by input that matches the delimiter pattern. This method may block while waiting for input to scan, even if a previous invocation of <a href="../../java/util/Scanner.html#hasNext--"><code>hasNext()</code></a> returned <code>true</code>.                                          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Iterator.html#next--">next</a></code> in interface <code><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next token  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if no more tokens are available        </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:next--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove--"/><a name="remove--"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public void remove()</pre><div class="block">The remove operation is not supported by this implementation of <code>Iterator</code>.          </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Iterator.html#remove--">remove</a></code> in interface <code><a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;</code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if this method is invoked.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:remove--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNext-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNext-java.lang.String-"/><a name="hasNext-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>hasNext</h4><pre>public boolean hasNext(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pattern)</pre><div class="block">Returns true if the next token matches the pattern constructed from the specified string. The scanner does not advance past any input.<p> An invocation of this method of the form <tt>hasNext(pattern)</tt> behaves in exactly the same way as the invocation <tt>hasNext(Pattern.compile(pattern))</tt>.                   </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - a string specifying the pattern to scan         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner has another token matching the specified pattern             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNext-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:next-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:next-java.lang.String-"/><a name="next-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>next</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> next(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pattern)</pre><div class="block">Returns the next token if it matches the pattern constructed from the specified string. If the match is successful, the scanner advances past the input that matched the pattern.<p> An invocation of this method of the form <tt>next(pattern)</tt> behaves in exactly the same way as the invocation <tt>next(Pattern.compile(pattern))</tt>.                   </p>                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - a string specifying the pattern to scan         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next token  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if no such tokens are available        </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:next-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNext-java.util.regex.Pattern- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNext-java.util.regex.Pattern-"/><a name="hasNext-java.util.regex.Pattern-"/><ul class="blockList"><li class="blockList"><h4>hasNext</h4><pre>public boolean hasNext(<a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> pattern)</pre><div class="block">Returns true if the next complete token matches the specified pattern. A complete token is prefixed and postfixed by input that matches the delimiter pattern. This method may block while waiting for input. The scanner does not advance past any input.                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - the pattern to scan for       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner has another token matching the specified pattern             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNext-java.util.regex.Pattern-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:next-java.util.regex.Pattern- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:next-java.util.regex.Pattern-"/><a name="next-java.util.regex.Pattern-"/><ul class="blockList"><li class="blockList"><h4>next</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> next(<a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> pattern)</pre><div class="block">Returns the next token if it matches the specified pattern. This method may block while waiting for input to scan, even if a previous invocation of <a href="../../java/util/Scanner.html#hasNext-java.util.regex.Pattern-"><code>hasNext(Pattern)</code></a> returned <code>true</code>. If the match is successful, the scanner advances past the input that matched the pattern.                                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - the pattern to scan for       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the next token  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if no more tokens are available        </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:next-java.util.regex.Pattern-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextLine-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextLine--"/><a name="hasNextLine--"/><ul class="blockList"><li class="blockList"><h4>hasNextLine</h4><pre>public boolean hasNextLine()</pre><div class="block">Returns true if there is another line in the input of this scanner. This method may block while waiting for input. The scanner does not advance past any input.                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner has another line of input           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextLine--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextLine-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextLine--"/><a name="nextLine--"/><ul class="blockList"><li class="blockList"><h4>nextLine</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> nextLine()</pre><div class="block">Advances this scanner past the current line and returns the input that was skipped. This method returns the rest of the current line, excluding any line separator at the end. The position is set to the beginning of the next line.<p>Since this method continues to search through the input looking for a line separator, it may buffer all of the input searching for the line to skip if no line separators are present.                                </p>                                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the line that was skipped    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if no line was found       </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextLine--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findInLine-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findInLine-java.lang.String-"/><a name="findInLine-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>findInLine</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> findInLine(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pattern)</pre><div class="block">Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters.<p>An invocation of this method of the form <tt>findInLine(pattern)</tt> behaves in exactly the same way as the invocation <tt>findInLine(Pattern.compile(pattern))</tt>.                  </p>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - a string specifying the pattern to search for          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the text that matched the specified pattern      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:findInLine-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findInLine-java.util.regex.Pattern- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findInLine-java.util.regex.Pattern-"/><a name="findInLine-java.util.regex.Pattern-"/><ul class="blockList"><li class="blockList"><h4>findInLine</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> findInLine(<a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> pattern)</pre><div class="block">Attempts to find the next occurrence of the specified pattern ignoring delimiters. If the pattern is found before the next line separator, the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected in the input up to the next line separator, then <code>null</code> is returned and the scanner's position is unchanged. This method may block waiting for input that matches the pattern.<p>Since this method continues to search through the input looking for the specified pattern, it may buffer all of the input searching for the desired token if no line separators are present.                               </p>                                                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - the pattern to scan for       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the text that matched the specified pattern      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:findInLine-java.util.regex.Pattern-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findWithinHorizon-java.lang.String-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findWithinHorizon-java.lang.String-int-"/><a name="findWithinHorizon-java.lang.String-int-"/><ul class="blockList"><li class="blockList"><h4>findWithinHorizon</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> findWithinHorizon(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pattern,
                                int horizon)</pre><div class="block">Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters.<p>An invocation of this method of the form <tt>findWithinHorizon(pattern)</tt> behaves in exactly the same way as the invocation <tt>findWithinHorizon(Pattern.compile(pattern, horizon)) </tt>.                  </p>               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - a string specifying the pattern to search for          </dd><dd> <code>horizon</code> - the search horizon     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the text that matched the specified pattern      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if horizon is negative      </dd>   </dl></li></ul> <a end_ctx_id="method:findWithinHorizon-java.lang.String-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:findWithinHorizon-java.util.regex.Pattern-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:findWithinHorizon-java.util.regex.Pattern-int-"/><a name="findWithinHorizon-java.util.regex.Pattern-int-"/><ul class="blockList"><li class="blockList"><h4>findWithinHorizon</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> findWithinHorizon(<a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> pattern,
                                int horizon)</pre><div class="block">Attempts to find the next occurrence of the specified pattern.<p>This method searches through the input up to the specified search horizon, ignoring delimiters. If the pattern is found the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected then the null is returned and the scanner's position remains unchanged. This method may block waiting for input that matches the pattern.                                                              </p><p>A scanner will never search more than <code>horizon</code> code points beyond its current position. Note that a match may be clipped by the horizon; that is, an arbitrary match result may have been different if the horizon had been larger. The scanner treats the horizon as a transparent, non-anchoring bound (see <a href="../../java/util/regex/Matcher.html#useTransparentBounds-boolean-"><code>Matcher.useTransparentBounds(boolean)</code></a> and <a href="../../java/util/regex/Matcher.html#useAnchoringBounds-boolean-"><code>Matcher.useAnchoringBounds(boolean)</code></a>).                                                     </p><p>If horizon is <code>0</code>, then the horizon is ignored and this method continues to search through the input looking for the specified pattern without bound. In this case it may buffer all of the input searching for the pattern.                                      </p><p>If horizon is negative, then an IllegalArgumentException is thrown.        </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - the pattern to scan for       </dd><dd> <code>horizon</code> - the search horizon     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the text that matched the specified pattern      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if horizon is negative      </dd>   </dl></li></ul> <a end_ctx_id="method:findWithinHorizon-java.util.regex.Pattern-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-java.util.regex.Pattern- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-java.util.regex.Pattern-"/><a name="skip-java.util.regex.Pattern-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> skip(<a href="../../java/util/regex/Pattern.html" title="class in java.util.regex">Pattern</a> pattern)</pre><div class="block">Skips input that matches the specified pattern, ignoring delimiters. This method will skip input if an anchored match of the specified pattern succeeds.<p>If a match to the specified pattern is not found at the current position, then no input is skipped and a <tt>NoSuchElementException</tt> is thrown.                       </p><p>Since this method seeks to match the specified pattern starting at the scanner's current position, patterns that can match a lot of input (".*", for example) may cause the scanner to buffer a large amount of input.                                    </p><p>Note that it is possible to skip something without risking a <code>NoSuchElementException</code> by using a pattern that can match nothing, e.g., <code>sc.skip("[ \t]*") </code>.                     </p>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - a string specifying the pattern to skip over          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the specified pattern is not found         </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:skip-java.util.regex.Pattern-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:skip-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:skip-java.lang.String-"/><a name="skip-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>skip</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> skip(<a href="../../java/lang/String.html" title="class in java.lang">String</a> pattern)</pre><div class="block">Skips input that matches a pattern constructed from the specified string.<p> An invocation of this method of the form <tt>skip(pattern)</tt> behaves in exactly the same way as the invocation <tt>skip(Pattern.compile(pattern))</tt>.                   </p>          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>pattern</code> - a string specifying the pattern to skip over          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:skip-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextBoolean-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextBoolean--"/><a name="hasNextBoolean--"/><ul class="blockList"><li class="blockList"><h4>hasNextBoolean</h4><pre>public boolean hasNextBoolean()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false". The scanner does not advance past the input that matched.                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid boolean value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextBoolean--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextBoolean-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextBoolean--"/><a name="nextBoolean--"/><ul class="blockList"><li class="blockList"><h4>nextBoolean</h4><pre>public boolean nextBoolean()</pre><div class="block">Scans the next token of the input into a boolean value and returns that value. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid boolean value. If the match is successful, the scanner advances past the input that matched.                                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the boolean scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token is not a valid boolean           </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextBoolean--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextByte-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextByte--"/><a name="hasNextByte--"/><ul class="blockList"><li class="blockList"><h4>hasNextByte</h4><pre>public boolean hasNextByte()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the <a href="../../java/util/Scanner.html#nextByte--"><code>nextByte()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid byte value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextByte--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextByte-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextByte-int-"/><a name="hasNextByte-int-"/><ul class="blockList"><li class="blockList"><h4>hasNextByte</h4><pre>public boolean hasNextByte(int radix)</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the <a href="../../java/util/Scanner.html#nextByte--"><code>nextByte()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as a byte value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid byte value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNextByte-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextByte-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextByte--"/><a name="nextByte--"/><ul class="blockList"><li class="blockList"><h4>nextByte</h4><pre>public byte nextByte()</pre><div class="block">Scans the next token of the input as a <tt>byte</tt>.<p> An invocation of this method of the form <tt>nextByte()</tt> behaves in exactly the same way as the invocation <tt>nextByte(radix)</tt>, where <code>radix</code> is the default radix of this scanner.                            </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>byte</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextByte--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextByte-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextByte-int-"/><a name="nextByte-int-"/><ul class="blockList"><li class="blockList"><h4>nextByte</h4><pre>public byte nextByte(int radix)</pre><div class="block">Scans the next token of the input as a <tt>byte</tt>. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid byte value as described below. If the translation is successful, the scanner advances past the input that matched.<p> If the next token matches the <a href="#Integer-regex"><i>Integer</i></a> regular expression defined above then the token is converted into a <tt>byte</tt> value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to <a href="../../java/lang/Byte.html#parseByte-java.lang.String-int-"><code>Byte.parseByte</code></a> with the specified radix.                                                                     </p>                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as a byte value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>byte</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:nextByte-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextShort-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextShort--"/><a name="hasNextShort--"/><ul class="blockList"><li class="blockList"><h4>hasNextShort</h4><pre>public boolean hasNextShort()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the <a href="../../java/util/Scanner.html#nextShort--"><code>nextShort()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid short value in the default radix                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextShort--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextShort-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextShort-int-"/><a name="hasNextShort-int-"/><ul class="blockList"><li class="blockList"><h4>hasNextShort</h4><pre>public boolean hasNextShort(int radix)</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the <a href="../../java/util/Scanner.html#nextShort--"><code>nextShort()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as a short value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid short value in the specified radix                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNextShort-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextShort-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextShort--"/><a name="nextShort--"/><ul class="blockList"><li class="blockList"><h4>nextShort</h4><pre>public short nextShort()</pre><div class="block">Scans the next token of the input as a <tt>short</tt>.<p> An invocation of this method of the form <tt>nextShort()</tt> behaves in exactly the same way as the invocation <tt>nextShort(radix)</tt>, where <code>radix</code> is the default radix of this scanner.                            </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>short</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextShort--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextShort-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextShort-int-"/><a name="nextShort-int-"/><ul class="blockList"><li class="blockList"><h4>nextShort</h4><pre>public short nextShort(int radix)</pre><div class="block">Scans the next token of the input as a <tt>short</tt>. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid short value as described below. If the translation is successful, the scanner advances past the input that matched.<p> If the next token matches the <a href="#Integer-regex"><i>Integer</i></a> regular expression defined above then the token is converted into a <tt>short</tt> value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to <a href="../../java/lang/Short.html#parseShort-java.lang.String-int-"><code>Short.parseShort</code></a> with the specified radix.                                                                     </p>                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as a short value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>short</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:nextShort-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextInt-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextInt--"/><a name="hasNextInt--"/><ul class="blockList"><li class="blockList"><h4>hasNextInt</h4><pre>public boolean hasNextInt()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the <a href="../../java/util/Scanner.html#nextInt--"><code>nextInt()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid int value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextInt--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextInt-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextInt-int-"/><a name="hasNextInt-int-"/><ul class="blockList"><li class="blockList"><h4>hasNextInt</h4><pre>public boolean hasNextInt(int radix)</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the <a href="../../java/util/Scanner.html#nextInt--"><code>nextInt()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as an int value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid int value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNextInt-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextInt-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextInt--"/><a name="nextInt--"/><ul class="blockList"><li class="blockList"><h4>nextInt</h4><pre>public int nextInt()</pre><div class="block">Scans the next token of the input as an <tt>int</tt>.<p> An invocation of this method of the form <tt>nextInt()</tt> behaves in exactly the same way as the invocation <tt>nextInt(radix)</tt>, where <code>radix</code> is the default radix of this scanner.                            </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>int</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextInt--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextInt-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextInt-int-"/><a name="nextInt-int-"/><ul class="blockList"><li class="blockList"><h4>nextInt</h4><pre>public int nextInt(int radix)</pre><div class="block">Scans the next token of the input as an <tt>int</tt>. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid int value as described below. If the translation is successful, the scanner advances past the input that matched.<p> If the next token matches the <a href="#Integer-regex"><i>Integer</i></a> regular expression defined above then the token is converted into an <tt>int</tt> value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to <a href="../../java/lang/Integer.html#parseInt-java.lang.String-int-"><code>Integer.parseInt</code></a> with the specified radix.                                                                     </p>                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as an int value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>int</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:nextInt-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextLong-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextLong--"/><a name="hasNextLong--"/><ul class="blockList"><li class="blockList"><h4>hasNextLong</h4><pre>public boolean hasNextLong()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the <a href="../../java/util/Scanner.html#nextLong--"><code>nextLong()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid long value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextLong--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextLong-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextLong-int-"/><a name="hasNextLong-int-"/><ul class="blockList"><li class="blockList"><h4>hasNextLong</h4><pre>public boolean hasNextLong(int radix)</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the <a href="../../java/util/Scanner.html#nextLong--"><code>nextLong()</code></a> method. The scanner does not advance past any input.                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as a long value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid long value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNextLong-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextLong-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextLong--"/><a name="nextLong--"/><ul class="blockList"><li class="blockList"><h4>nextLong</h4><pre>public long nextLong()</pre><div class="block">Scans the next token of the input as a <tt>long</tt>.<p> An invocation of this method of the form <tt>nextLong()</tt> behaves in exactly the same way as the invocation <tt>nextLong(radix)</tt>, where <code>radix</code> is the default radix of this scanner.                            </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>long</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextLong--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextLong-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextLong-int-"/><a name="nextLong-int-"/><ul class="blockList"><li class="blockList"><h4>nextLong</h4><pre>public long nextLong(int radix)</pre><div class="block">Scans the next token of the input as a <tt>long</tt>. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid long value as described below. If the translation is successful, the scanner advances past the input that matched.<p> If the next token matches the <a href="#Integer-regex"><i>Integer</i></a> regular expression defined above then the token is converted into a <tt>long</tt> value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to <a href="../../java/lang/Long.html#parseLong-java.lang.String-int-"><code>Long.parseLong</code></a> with the specified radix.                                                                     </p>                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as an int value             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>long</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:nextLong-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextFloat-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextFloat--"/><a name="hasNextFloat--"/><ul class="blockList"><li class="blockList"><h4>hasNextFloat</h4><pre>public boolean hasNextFloat()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a float value using the <a href="../../java/util/Scanner.html#nextFloat--"><code>nextFloat()</code></a> method. The scanner does not advance past any input.                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid float value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextFloat--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextFloat-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextFloat--"/><a name="nextFloat--"/><ul class="blockList"><li class="blockList"><h4>nextFloat</h4><pre>public float nextFloat()</pre><div class="block">Scans the next token of the input as a <tt>float</tt>. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid float value as described below. If the translation is successful, the scanner advances past the input that matched.<p> If the next token matches the <a href="#Float-regex"><i>Float</i></a> regular expression defined above then the token is converted into a <tt>float</tt> value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to <a href="../../java/lang/Float.html#parseFloat-java.lang.String-"><code>Float.parseFloat</code></a>. If the token matches the localized NaN or infinity strings, then either "Nan" or "Infinity" is passed to <a href="../../java/lang/Float.html#parseFloat-java.lang.String-"><code>Float.parseFloat</code></a> as appropriate.                                                                                      </p>                                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>float</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Float</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if input is exhausted      </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextFloat--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextDouble-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextDouble--"/><a name="hasNextDouble--"/><ul class="blockList"><li class="blockList"><h4>hasNextDouble</h4><pre>public boolean hasNextDouble()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a double value using the <a href="../../java/util/Scanner.html#nextDouble--"><code>nextDouble()</code></a> method. The scanner does not advance past any input.                            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid double value             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextDouble--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextDouble-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextDouble--"/><a name="nextDouble--"/><ul class="blockList"><li class="blockList"><h4>nextDouble</h4><pre>public double nextDouble()</pre><div class="block">Scans the next token of the input as a <tt>double</tt>. This method will throw <code>InputMismatchException</code> if the next token cannot be translated into a valid double value. If the translation is successful, the scanner advances past the input that matched.<p> If the next token matches the <a href="#Float-regex"><i>Float</i></a> regular expression defined above then the token is converted into a <tt>double</tt> value as if by removing all locale specific prefixes, group separators, and locale specific suffixes, then mapping non-ASCII digits into ASCII digits via <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to <a href="../../java/lang/Double.html#parseDouble-java.lang.String-"><code>Double.parseDouble</code></a>. If the token matches the localized NaN or infinity strings, then either "Nan" or "Infinity" is passed to <a href="../../java/lang/Double.html#parseDouble-java.lang.String-"><code>Double.parseDouble</code></a> as appropriate.                                                                                      </p>                                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>double</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Float</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the input is exhausted       </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextDouble--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextBigInteger-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextBigInteger--"/><a name="hasNextBigInteger--"/><ul class="blockList"><li class="blockList"><h4>hasNextBigInteger</h4><pre>public boolean hasNextBigInteger()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a <code>BigInteger</code> in the default radix using the <a href="../../java/util/Scanner.html#nextBigInteger--"><code>nextBigInteger()</code></a> method. The scanner does not advance past any input.                               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid <code>BigInteger</code>            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextBigInteger--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextBigInteger-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextBigInteger-int-"/><a name="hasNextBigInteger-int-"/><ul class="blockList"><li class="blockList"><h4>hasNextBigInteger</h4><pre>public boolean hasNextBigInteger(int radix)</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a <code>BigInteger</code> in the specified radix using the <a href="../../java/util/Scanner.html#nextBigInteger--"><code>nextBigInteger()</code></a> method. The scanner does not advance past any input.                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token as an integer            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid <code>BigInteger</code>            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:hasNextBigInteger-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextBigInteger-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextBigInteger--"/><a name="nextBigInteger--"/><ul class="blockList"><li class="blockList"><h4>nextBigInteger</h4><pre>public <a href="../../java/math/BigInteger.html" title="class in java.math">BigInteger</a> nextBigInteger()</pre><div class="block">Scans the next token of the input as a <a href="../../java/math/BigInteger.html" title="class in java.math"><code>BigInteger</code></a>.<p> An invocation of this method of the form <tt>nextBigInteger()</tt> behaves in exactly the same way as the invocation <tt>nextBigInteger(radix)</tt>, where <code>radix</code> is the default radix of this scanner.                            </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>BigInteger</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the input is exhausted       </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextBigInteger--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextBigInteger-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextBigInteger-int-"/><a name="nextBigInteger-int-"/><ul class="blockList"><li class="blockList"><h4>nextBigInteger</h4><pre>public <a href="../../java/math/BigInteger.html" title="class in java.math">BigInteger</a> nextBigInteger(int radix)</pre><div class="block">Scans the next token of the input as a <a href="../../java/math/BigInteger.html" title="class in java.math"><code>BigInteger</code></a>.<p> If the next token matches the <a href="#Integer-regex"><i>Integer</i></a> regular expression defined above then the token is converted into a <tt>BigInteger</tt> value as if by removing all group separators, mapping non-ASCII digits into ASCII digits via the <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, and passing the resulting string to the <a href="../../java/math/BigInteger.html#BigInteger-java.lang.String-"><code>BigInteger(String, int) </code></a> constructor with the specified radix.                                                 </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>radix</code> - the radix used to interpret the token         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>BigInteger</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Integer</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the input is exhausted       </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>   </dl></li></ul> <a end_ctx_id="method:nextBigInteger-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasNextBigDecimal-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasNextBigDecimal--"/><a name="hasNextBigDecimal--"/><ul class="blockList"><li class="blockList"><h4>hasNextBigDecimal</h4><pre>public boolean hasNextBigDecimal()</pre><div class="block">Returns true if the next token in this scanner's input can be interpreted as a <code>BigDecimal</code> using the <a href="../../java/util/Scanner.html#nextBigDecimal--"><code>nextBigDecimal()</code></a> method. The scanner does not advance past any input.                           </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if and only if this scanner's next token is a valid <code>BigDecimal</code>            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:hasNextBigDecimal--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nextBigDecimal-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nextBigDecimal--"/><a name="nextBigDecimal--"/><ul class="blockList"><li class="blockList"><h4>nextBigDecimal</h4><pre>public <a href="../../java/math/BigDecimal.html" title="class in java.math">BigDecimal</a> nextBigDecimal()</pre><div class="block">Scans the next token of the input as a <a href="../../java/math/BigDecimal.html" title="class in java.math"><code>BigDecimal</code></a>.<p> If the next token matches the <a href="#Decimal-regex"><i>Decimal</i></a> regular expression defined above then the token is converted into a <tt>BigDecimal</tt> value as if by removing all group separators, mapping non-ASCII digits into ASCII digits via the <a href="../../java/lang/Character.html#digit-char-int-"><code>Character.digit</code></a>, and passing the resulting string to the <a href="../../java/math/BigDecimal.html#BigDecimal-java.lang.String-"><code>BigDecimal(String)</code></a> constructor.                                             </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the <tt>BigDecimal</tt> scanned from the input     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/InputMismatchException.html" title="class in java.util">InputMismatchException</a></code> - if the next token does not match the <i>Decimal</i> regular expression, or is out of range                  </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the input is exhausted       </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scanner is closed       </dd>  </dl></li></ul> <a end_ctx_id="method:nextBigDecimal--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockListLast"><li class="blockList"><h4>reset</h4><pre>public <a href="../../java/util/Scanner.html" title="class in java.util">Scanner</a> reset()</pre><div class="block">Resets this scanner.<p> Resetting a scanner discards all of its explicit state information which may have been changed by invocations of <a href="../../java/util/Scanner.html#useDelimiter-java.util.regex.Pattern-"><code>useDelimiter(java.util.regex.Pattern)</code></a>, <a href="../../java/util/Scanner.html#useLocale-java.util.Locale-"><code>useLocale(java.util.Locale)</code></a>, or <a href="../../java/util/Scanner.html#useRadix-int-"><code>useRadix(int)</code></a>.                      </p><p> An invocation of this method of the form <tt>scanner.reset()</tt> behaves in exactly the same way as the invocation                  </p><blockquote><pre><code>
   scanner.useDelimiter("\\p{javaWhitespace}+")
          .useLocale(Locale.getDefault(Locale.Category.FORMAT))
          .useRadix(10);
 </code></pre></blockquote>  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>this scanner </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>  </dl></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table></diff></diffreport>