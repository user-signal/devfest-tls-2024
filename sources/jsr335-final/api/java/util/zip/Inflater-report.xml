<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Inflater [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Inflater"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">Inflater</span>
extends <a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class provides support for general purpose decompression using the popular ZLIB compression library. The ZLIB compression library was initially developed as part of the PNG graphics standard and is not protected by patents. It is fully described in the specifications at the <a href="package-summary.html#package_description">java.util.zip package description  </a>.<p>The following code fragment demonstrates a trivial compression and decompression of a string using <tt>Deflater</tt> and <tt>Inflater</tt>.                </p><blockquote><pre>
 try {
     // Encode a String into bytes
     String inputString = "blahblahblah??";
     byte[] input = inputString.getBytes("UTF-8");

     // Compress the bytes
     byte[] output = new byte[100];
     Deflater compresser = new Deflater();
     compresser.setInput(input);
     compresser.finish();
     int compressedDataLength = compresser.deflate(output);

     // Decompress the bytes
     Inflater decompresser = new Inflater();
     decompresser.setInput(output, 0, compressedDataLength);
     byte[] result = new byte[100];
     int resultLength = decompresser.inflate(result);
     decompresser.end();

     // Decode the bytes into a String
     String outputString = new String(result, 0, resultLength, "UTF-8");
 } catch(java.io.UnsupportedEncodingException ex) {
     // handle
 } catch (java.util.zip.DataFormatException ex) {
     // handle
 }
 </pre></blockquote>                                           </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Deflater.html" title="class in java.util.zip"><code>Deflater</code></a> </dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Inflater"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Inflater-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Inflater-boolean-"/><a name="Inflater-boolean-"/><ul class="blockList"><li class="blockList"><h4>Inflater</h4><pre>public Inflater(boolean nowrap)</pre><div class="block">Creates a new decompressor. If the parameter 'nowrap' is true then the ZLIB header and checksum fields will not be used. This provides compatibility with the compression format used by both GZIP and PKZIP.<p> Note: When using the 'nowrap' option it is also necessary to provide an extra "dummy" byte as input. This is required by the ZLIB native library in order to support certain optimizations.                                </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>nowrap</code> - if true then support GZIP compatible compression         </dd> </dl></li></ul> <a end_ctx_id="constructor:Inflater-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Inflater-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Inflater--"/><a name="Inflater--"/><ul class="blockListLast"><li class="blockList"><h4>Inflater</h4><pre>public Inflater()</pre><div class="block">Creates a new decompressor.   </div></li></ul> <a end_ctx_id="constructor:Inflater--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setInput-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setInput-byte:A-int-int-"/><a name="setInput-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>setInput</h4><pre>public void setInput(byte[] b,
                     int off,
                     int len)</pre><div class="block">Sets input data for decompression. Should be called whenever needsInput() returns true indicating that more input data is required.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the input data bytes      </dd><dd> <code>off</code> - the start offset of the input data         </dd><dd> <code>len</code> - the length of the input data        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#needsInput--"><code>needsInput()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:setInput-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setInput-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setInput-byte:A-"/><a name="setInput-byte:A-"/><ul class="blockList"><li class="blockList"><h4>setInput</h4><pre>public void setInput(byte[] b)</pre><div class="block">Sets input data for decompression. Should be called whenever needsInput() returns true indicating that more input data is required.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the input data bytes      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#needsInput--"><code>needsInput()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:setInput-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setDictionary-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setDictionary-byte:A-int-int-"/><a name="setDictionary-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>setDictionary</h4><pre>public void setDictionary(byte[] b,
                          int off,
                          int len)</pre><div class="block">Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the dictionary data bytes      </dd><dd> <code>off</code> - the start offset of the data        </dd><dd> <code>len</code> - the length of the data       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#needsDictionary--"><code>needsDictionary()</code></a>, <a href="../../../java/util/zip/Inflater.html#getAdler--"><code>getAdler()</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:setDictionary-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setDictionary-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setDictionary-byte:A-"/><a name="setDictionary-byte:A-"/><ul class="blockList"><li class="blockList"><h4>setDictionary</h4><pre>public void setDictionary(byte[] b)</pre><div class="block">Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the dictionary data bytes      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#needsDictionary--"><code>needsDictionary()</code></a>, <a href="../../../java/util/zip/Inflater.html#getAdler--"><code>getAdler()</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:setDictionary-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getRemaining-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getRemaining--"/><a name="getRemaining--"/><ul class="blockList"><li class="blockList"><h4>getRemaining</h4><pre>public int getRemaining()</pre><div class="block">Returns the total number of bytes remaining in the input buffer. This can be used to find out what bytes still remain in the input buffer after decompression has finished.                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of bytes remaining in the input buffer         </dd> </dl></li></ul> <a end_ctx_id="method:getRemaining--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:needsInput-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:needsInput--"/><a name="needsInput--"/><ul class="blockList"><li class="blockList"><h4>needsInput</h4><pre>public boolean needsInput()</pre><div class="block">Returns true if no data remains in the input buffer. This can be used to determine if #setInput should be called in order to provide more input.                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if no data remains in the input buffer        </dd> </dl></li></ul> <a end_ctx_id="method:needsInput--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:needsDictionary-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:needsDictionary--"/><a name="needsDictionary--"/><ul class="blockList"><li class="blockList"><h4>needsDictionary</h4><pre>public boolean needsDictionary()</pre><div class="block">Returns true if a preset dictionary is needed for decompression.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if a preset dictionary is needed for decompression        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#setDictionary-byte:A-int-int-"><code>setDictionary(byte[], int, int)  </code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:needsDictionary--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:finished-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:finished--"/><a name="finished--"/><ul class="blockList"><li class="blockList"><h4>finished</h4><pre>public boolean finished()</pre><div class="block">Returns true if the end of the compressed data stream has been reached.            </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if the end of the compressed data stream has been reached           </dd> </dl></li></ul> <a end_ctx_id="method:finished--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:inflate-byte:A-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:inflate-byte:A-int-int-"/><a name="inflate-byte:A-int-int-"/><ul class="blockList"><li class="blockList"><h4>inflate</h4><pre>public int inflate(byte[] b,
                   int off,
                   int len)
            throws <a href="../../../java/util/zip/DataFormatException.html" title="class in java.util.zip">DataFormatException</a></pre><div class="block">Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required.                                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer for the uncompressed data        </dd><dd> <code>off</code> - the start offset of the data        </dd><dd> <code>len</code> - the maximum number of uncompressed bytes        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of uncompressed bytes     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/zip/DataFormatException.html" title="class in java.util.zip">DataFormatException</a></code> - if the compressed data format is invalid         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#needsInput--"><code>needsInput()</code></a>, <a href="../../../java/util/zip/Inflater.html#needsDictionary--"><code>needsDictionary()</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:inflate-byte:A-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:inflate-byte:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:inflate-byte:A-"/><a name="inflate-byte:A-"/><ul class="blockList"><li class="blockList"><h4>inflate</h4><pre>public int inflate(byte[] b)
            throws <a href="../../../java/util/zip/DataFormatException.html" title="class in java.util.zip">DataFormatException</a></pre><div class="block">Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required.                                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>b</code> - the buffer for the uncompressed data        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the actual number of uncompressed bytes     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../../java/util/zip/DataFormatException.html" title="class in java.util.zip">DataFormatException</a></code> - if the compressed data format is invalid         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/util/zip/Inflater.html#needsInput--"><code>needsInput()</code></a>, <a href="../../../java/util/zip/Inflater.html#needsDictionary--"><code>needsDictionary()</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:inflate-byte:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getAdler-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getAdler--"/><a name="getAdler--"/><ul class="blockList"><li class="blockList"><h4>getAdler</h4><pre>public int getAdler()</pre><div class="block">Returns the ADLER-32 value of the uncompressed data.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the ADLER-32 value of the uncompressed data      </dd> </dl></li></ul> <a end_ctx_id="method:getAdler--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getTotalIn-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getTotalIn--"/><a name="getTotalIn--"/><ul class="blockList"><li class="blockList"><h4>getTotalIn</h4><pre>public int getTotalIn()</pre><div class="block">Returns the total number of compressed bytes input so far.<p>Since the number of bytes may be greater than Integer.MAX_VALUE, the <a href="../../../java/util/zip/Inflater.html#getBytesRead--"><code>getBytesRead()</code></a> method is now the preferred means of obtaining this information.                     </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of compressed bytes input so far        </dd> </dl></li></ul> <a end_ctx_id="method:getTotalIn--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getBytesRead-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getBytesRead--"/><a name="getBytesRead--"/><ul class="blockList"><li class="blockList"><h4>getBytesRead</h4><pre>public long getBytesRead()</pre><div class="block">Returns the total number of compressed bytes input so far.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total (non-negative) number of compressed bytes input so far         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>  </dl></li></ul> <a end_ctx_id="method:getBytesRead--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getTotalOut-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getTotalOut--"/><a name="getTotalOut--"/><ul class="blockList"><li class="blockList"><h4>getTotalOut</h4><pre>public int getTotalOut()</pre><div class="block">Returns the total number of uncompressed bytes output so far.<p>Since the number of bytes may be greater than Integer.MAX_VALUE, the <a href="../../../java/util/zip/Inflater.html#getBytesWritten--"><code>getBytesWritten()</code></a> method is now the preferred means of obtaining this information.                     </p>         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total number of uncompressed bytes output so far        </dd> </dl></li></ul> <a end_ctx_id="method:getTotalOut--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getBytesWritten-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getBytesWritten--"/><a name="getBytesWritten--"/><ul class="blockList"><li class="blockList"><h4>getBytesWritten</h4><pre>public long getBytesWritten()</pre><div class="block">Returns the total number of uncompressed bytes output so far.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the total (non-negative) number of uncompressed bytes output so far         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>  </dl></li></ul> <a end_ctx_id="method:getBytesWritten--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reset-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reset--"/><a name="reset--"/><ul class="blockList"><li class="blockList"><h4>reset</h4><pre>public void reset()</pre><div class="block">Resets inflater so that a new set of input data can be processed.            </div></li></ul> <a end_ctx_id="method:reset--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:end-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:end--"/><a name="end--"/><ul class="blockList"><li class="blockList"><h4>end</h4><pre>public void end()</pre><div class="block">Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined.                                           </div></li></ul> <a end_ctx_id="method:end--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:finalize-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:finalize--"/><a name="finalize--"/><ul class="blockListLast"><li class="blockList"><h4>finalize</h4><pre>protected void finalize()</pre><div class="block">Closes the decompressor when garbage is collected.      </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../../java/lang/Object.html#finalize--">finalize</a></code> in class <code><a href="../../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../../java/lang/ref/WeakReference.html" title="class in java.lang.ref"><code>WeakReference</code></a>, <a href="../../../java/lang/ref/PhantomReference.html" title="class in java.lang.ref"><code>PhantomReference</code></a>  </dd>  </dl></li></ul> <a end_ctx_id="method:finalize--"/>  </td></tr></table></td></tr></table></diff></diffreport>