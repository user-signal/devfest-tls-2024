<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Optional [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Optional"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public final class <span class="typeNameLabel">Optional&lt;T&gt;</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">A container object which may or may not contain a non-null value. If a value is present, <code>isPresent()</code> will return <code>true</code> and <code>get()</code> will return the value.<p>Additional methods that depend on the presence or absence of a contained value are provided, such as <a href="../../java/util/Optional.html#orElse-T-"><code>orElse()</code></a> (return a default value if value not present) and <a href="../../java/util/Optional.html#ifPresent-java.util.function.Consumer-"><code>ifPresent()</code></a> (execute a block of code if the value is present).                                     </p><p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a> class; use of identity-sensitive operations (including reference equality (<code>==</code>), identity hash code, or synchronization) on instances of <code>Optional</code> may have unpredictable results and should be avoided.                             </p>                          </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Optional"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:empty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:empty--"/><a name="empty--"/><ul class="blockList"><li class="blockList"><h4>empty</h4><pre>public static &lt;T&gt; <a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;T&gt; empty()</pre><div class="block">Returns an empty <code>Optional</code> instance. No value is present for this Optional.           </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>Though it may be tempting to do so, avoid testing if an object is empty by comparing with <code>==</code> against instances returned by <code>Option.empty()</code>. There is no guarantee that it is a singleton. Instead, use <a href="../../java/util/Optional.html#isPresent--"><code>isPresent()</code></a>.                                   </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - Type of the non-existent value       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty <code>Optional</code>  </dd>   </dl></li></ul> <a name="of-java.lang.Object-"/><a end_ctx_id="method:empty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:of-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:of-T-"/><a name="of-T-"/><ul class="blockList"><li class="blockList"><h4>of</h4><pre>public static &lt;T&gt; <a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;T&gt; of(T value)</pre><div class="block">Returns an <code>Optional</code> with the specified present non-null value.        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the value       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the value to be present, which must be non-null           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Optional</code> with the value present     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if value is null      </dd>    </dl></li></ul> <a name="ofNullable-java.lang.Object-"/><a end_ctx_id="method:of-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ofNullable-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ofNullable-T-"/><a name="ofNullable-T-"/><ul class="blockList"><li class="blockList"><h4>ofNullable</h4><pre>public static &lt;T&gt; <a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;T&gt; ofNullable(T value)</pre><div class="block">Returns an <code>Optional</code> describing the specified value, if non-null, otherwise returns an empty <code>Optional</code>.             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the value       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>value</code> - the possibly-null value to describe       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Optional</code> with a present value if the specified value is non-null, otherwise an empty <code>Optional</code>               </dd>   </dl></li></ul> <a end_ctx_id="method:ofNullable-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:get-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:get--"/><a name="get--"/><ul class="blockList"><li class="blockList"><h4>get</h4><pre>public <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a> get()</pre><div class="block">If a value is present in this <code>Optional</code>, returns the value, otherwise throws <code>NoSuchElementException</code>.             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the non-null value held by this <code>Optional</code>      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if there is no value present        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Optional.html#isPresent--"><code>isPresent()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:get--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isPresent-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isPresent--"/><a name="isPresent--"/><ul class="blockList"><li class="blockList"><h4>isPresent</h4><pre>public boolean isPresent()</pre><div class="block">Return <code>true</code> if there is a value present, otherwise <code>false</code>.         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if there is a value present, otherwise <code>false</code>         </dd> </dl></li></ul> <a end_ctx_id="method:isPresent--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ifPresent-java.util.function.Consumer- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ifPresent-java.util.function.Consumer-"/><a name="ifPresent-java.util.function.Consumer-"/><ul class="blockList"><li class="blockList"><h4>ifPresent</h4><pre>public void ifPresent(<a href="../../java/util/function/Consumer.html" title="interface in java.util.function">Consumer</a>&lt;? super <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a>&gt; consumer)</pre><div class="block">If a value is present, invoke the specified consumer with the value, otherwise do nothing.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>consumer</code> - block to be executed if a value is present           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if value is present and <code>consumer</code> is null          </dd>  </dl></li></ul> <a end_ctx_id="method:ifPresent-java.util.function.Consumer-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:filter-java.util.function.Predicate- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:filter-java.util.function.Predicate-"/><a name="filter-java.util.function.Predicate-"/><ul class="blockList"><li class="blockList"><h4>filter</h4><pre>public <a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;<a href="../../java/util/Optional.html" title="type parameter in Optional">T</a>&gt; filter(<a href="../../java/util/function/Predicate.html" title="interface in java.util.function">Predicate</a>&lt;? super <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a>&gt; predicate)</pre><div class="block">If a value is present, and the value matches the given predicate, return an <code>Optional</code> describing the value, otherwise return an empty <code>Optional</code>.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>predicate</code> - a predicate to apply to the value, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Optional</code> describing the value of this <code>Optional</code> if a value is present and the value matches the given predicate, otherwise an empty <code>Optional</code>                       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the predicate is null       </dd>   </dl></li></ul> <a end_ctx_id="method:filter-java.util.function.Predicate-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:map-java.util.function.Function- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:map-java.util.function.Function-"/><a name="map-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>map</h4><pre>public &lt;U&gt; <a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;U&gt; map(<a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a>,? extends U&gt; mapper)</pre><div class="block">If a value is present, apply the provided mapping function to it, and if the result is non-null, return an <code>Optional</code> describing the result. Otherwise return an empty <code>Optional</code>.                            </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>This method supports post-processing on optional values, without the need to explicitly check for a return status. For example, the following code traverses a stream of file names, selects one that has not yet been processed, and then opens that file, returning an <code>Optional&lt;FileInputStream&gt;</code>:<pre><code>
     Optional&lt;FileInputStream&gt; fis =
         names.stream().filter(name -&gt; !isProcessedYet(name))
                       .findFirst()
                       .map(name -&gt; new FileInputStream(name));
 </code></pre> Here, <code>findFirst</code> returns an <code>Optional&lt;String&gt;</code>, and then <code>map</code> returns an <code>Optional&lt;FileInputStream&gt;</code> for the desired file if one exists.                                                             </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - The type of the result of the mapping function           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>mapper</code> - a mapping function to apply to the value, if present            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an <code>Optional</code> describing the result of applying a mapping function to the value of this <code>Optional</code>, if a value is present, otherwise an empty <code>Optional</code>                        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the mapping function is null        </dd>     </dl></li></ul> <a end_ctx_id="method:map-java.util.function.Function-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:flatMap-java.util.function.Function- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:flatMap-java.util.function.Function-"/><a name="flatMap-java.util.function.Function-"/><ul class="blockList"><li class="blockList"><h4>flatMap</h4><pre>public &lt;U&gt; <a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;U&gt; flatMap(<a href="../../java/util/function/Function.html" title="interface in java.util.function">Function</a>&lt;? super <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a>,<a href="../../java/util/Optional.html" title="class in java.util">Optional</a>&lt;U&gt;&gt; mapper)</pre><div class="block">If a value is present, apply the provided <code>Optional</code>-bearing mapping function to it, return that result, otherwise return an empty <code>Optional</code>. This method is similar to <a href="../../java/util/Optional.html#map-java.util.function.Function-"><code>map(Function)</code></a>, but the provided mapper is one whose result is already an <code>Optional</code>, and if invoked, <code>flatMap</code> does not wrap it with an additional <code>Optional</code>.                                                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>U</code> - The type parameter to the <code>Optional</code> returned by          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>mapper</code> - a mapping function to apply to the value, if present the mapping function               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of applying an <code>Optional</code>-bearing mapping function to the value of this <code>Optional</code>, if a value is present, otherwise an empty <code>Optional</code>                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the mapping function is null or returns a null result             </dd>    </dl></li></ul> <a name="orElse-java.lang.Object-"/><a end_ctx_id="method:flatMap-java.util.function.Function-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:orElse-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:orElse-T-"/><a name="orElse-T-"/><ul class="blockList"><li class="blockList"><h4>orElse</h4><pre>public <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a> orElse(<a href="../../java/util/Optional.html" title="type parameter in Optional">T</a> other)</pre><div class="block">Return the value if present, otherwise return <code>other</code>.       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - the value to be returned if there is no value present, may be null                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value, if present, otherwise <code>other</code>     </dd>  </dl></li></ul> <a end_ctx_id="method:orElse-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:orElseGet-java.util.function.Supplier- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:orElseGet-java.util.function.Supplier-"/><a name="orElseGet-java.util.function.Supplier-"/><ul class="blockList"><li class="blockList"><h4>orElseGet</h4><pre>public <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a> orElseGet(<a href="../../java/util/function/Supplier.html" title="interface in java.util.function">Supplier</a>&lt;? extends <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a>&gt; other)</pre><div class="block">Return the value if present, otherwise invoke <code>other</code> and return the result of that invocation.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>other</code> - a <code>Supplier</code> whose result is returned if no value is present             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the value if present otherwise the result of <code>other.get()</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if value is not present and <code>other</code> is null           </dd>   </dl></li></ul> <a end_ctx_id="method:orElseGet-java.util.function.Supplier-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:orElseThrow-java.util.function.Supplier- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:orElseThrow-java.util.function.Supplier-"/><a name="orElseThrow-java.util.function.Supplier-"/><ul class="blockList"><li class="blockList"><h4>orElseThrow</h4><pre>public &lt;X extends <a href="../../java/lang/Throwable.html" title="class in java.lang">Throwable</a>&gt; <a href="../../java/util/Optional.html" title="type parameter in Optional">T</a> orElseThrow(<a href="../../java/util/function/Supplier.html" title="interface in java.util.function">Supplier</a>&lt;? extends X&gt; exceptionSupplier)
                                    throws X extends <a href="../../java/lang/Throwable.html" title="class in java.lang">Throwable</a></pre><div class="block">Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.                </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>A method reference to the exception constructor with an empty argument list can be used as the supplier. For example, <code>IllegalStateException::new</code>                    </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>X</code> - Type of the exception to be thrown         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>exceptionSupplier</code> - The supplier which will return the exception to be thrown            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the present value  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code>X</code> - if there is no value present        </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if no value is present and <code>exceptionSupplier</code> is null           </dd><dd> <code>X extends <a href="../../java/lang/Throwable.html" title="class in java.lang">Throwable</a>  </code> </dd>     </dl></li></ul> <a end_ctx_id="method:orElseThrow-java.util.function.Supplier-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Indicates whether some other object is "equal to" this Optional. The other object is considered equal if:<ul><li>it is also an <code>Optional</code> and;     </li><li>both instances have no value present or;      </li><li>the present values are "equal to" each other via <code>equals()</code>.         </li></ul>                </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - an object to be tested for equality         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>{code true} if the other object is "equal to" this object otherwise <code>false</code>            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public int hashCode()</pre><div class="block">Returns the hash code value of the present value, if any, or 0 (zero) if no value is present.                  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>hash code value of the present value or 0 if no value is present             </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a non-empty string representation of this Optional suitable for debugging. The exact presentation format is unspecified and may vary between implementations and versions.                       </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>If a value is present the result must include its string representation in the result. Empty and present Optionals must be unambiguously differentiable.                      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the string representation of this instance     </dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>