<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:ResourceBundle.Control [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:ResourceBundle.Control"/><ul class="blockList"><li class="blockList"><dl> <dt>Enclosing class: </dt><dd> <a href="../../java/util/ResourceBundle.html" title="class in java.util">ResourceBundle</a> </dd> </dl> <hr/> <br/><pre>public static class <span class="typeNameLabel">ResourceBundle.Control</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block"> <code>ResourceBundle.Control</code> defines a set of callback methods that are invoked by the <a href="../../java/util/ResourceBundle.html#getBundle-java.lang.String-java.util.Locale-java.lang.ClassLoader-java.util.ResourceBundle.Control-"><code>ResourceBundle.getBundle</code></a> factory methods during the bundle loading process. In other words, a <code>ResourceBundle.Control</code> collaborates with the factory methods for loading resource bundles. The default implementation of the callback methods provides the information necessary for the factory methods to perform the <a href="./ResourceBundle.html#default_behavior">default behavior </a>.<p>In addition to the callback methods, the <a href="../../java/util/ResourceBundle.Control.html#toBundleName-java.lang.String-java.util.Locale-"><code>toBundleName</code></a> and <a href="../../java/util/ResourceBundle.Control.html#toResourceName-java.lang.String-java.lang.String-"><code>toResourceName</code></a> methods are defined primarily for convenience in implementing the callback methods. However, the <code>toBundleName</code> method could be overridden to provide different conventions in the organization and packaging of localized resources. The <code>toResourceName</code> method is <code>final</code> to avoid use of wrong resource and class name separators.                                                      </p><p>Two factory methods, <a href="../../java/util/ResourceBundle.Control.html#getControl-java.util.List-"><code>getControl(List)</code></a> and <a href="../../java/util/ResourceBundle.Control.html#getNoFallbackControl-java.util.List-"><code>getNoFallbackControl(List)</code></a>, provide <code>ResourceBundle.Control</code> instances that implement common variations of the default bundle loading process.                  </p><p>The formats returned by the <a href="../../java/util/ResourceBundle.Control.html#getFormats-java.lang.String-"><code>getFormats</code></a> method and candidate locales returned by the <a href="../../java/util/ResourceBundle.Control.html#getCandidateLocales-java.lang.String-java.util.Locale-"><code>getCandidateLocales</code></a> method must be consistent in all <code>ResourceBundle.getBundle</code> invocations for the same base bundle. Otherwise, the <code>ResourceBundle.getBundle</code> methods may return unintended bundles. For example, if only <code>"java.class"</code> is returned by the <code>getFormats</code> method for the first call to <code>ResourceBundle.getBundle</code> and only <code>"java.properties"</code> for the second call, then the second call will return the class-based one that has been cached during the first call.                                                                           </p><p>A <code>ResourceBundle.Control</code> instance must be thread-safe if it's simultaneously used by multiple threads. <code>ResourceBundle.getBundle</code> does not synchronize to call the <code>ResourceBundle.Control</code> methods. The default implementations of the methods are thread-safe.                             </p><p>Applications can specify <code>ResourceBundle.Control</code> instances returned by the <code>getControl</code> factory methods or created from a subclass of <code>ResourceBundle.Control</code> to customize the bundle loading process. The following are examples of changing the default bundle loading process.                                  </p><p> <b>Example 1 </b> </p><p>The following code lets <code>ResourceBundle.getBundle</code> look up only properties-based resources.<pre>
 import java.util.*;
 import static java.util.ResourceBundle.Control.*;
 ...
 ResourceBundle bundle =
   ResourceBundle.getBundle("MyResources", new Locale("fr", "CH"),
                            ResourceBundle.Control.getControl(FORMAT_PROPERTIES));
 </pre> Given the resource bundles in the <a href="./ResourceBundle.html#default_behavior_example">example</a> in the <code>ResourceBundle.getBundle</code> description, this <code>ResourceBundle.getBundle</code> call loads <code>MyResources_fr_CH.properties</code> whose parent is <code>MyResources_fr.properties</code> whose parent is <code>MyResources.properties</code>. (<code>MyResources_fr_CH.properties</code> is not hidden, but <code>MyResources_fr_CH.class</code> is.)                                        </p><p> <b>Example 2 </b> </p><p>The following is an example of loading XML-based bundles using <a href="../../java/util/Properties.html#loadFromXML-java.io.InputStream-"><code>Properties.loadFromXML</code></a>.<pre>
 ResourceBundle rb = ResourceBundle.getBundle("Messages",
     new ResourceBundle.Control() {
         public List&lt;String&gt; getFormats(String baseName) {
             if (baseName == null)
                 throw new NullPointerException();
             return Arrays.asList("xml");
         }
         public ResourceBundle newBundle(String baseName,
                                         Locale locale,
                                         String format,
                                         ClassLoader loader,
                                         boolean reload)
                          throws IllegalAccessException,
                                 InstantiationException,
                                 IOException {
             if (baseName == null || locale == null
                   || format == null || loader == null)
                 throw new NullPointerException();
             ResourceBundle bundle = null;
             if (format.equals("xml")) {
                 String bundleName = toBundleName(baseName, locale);
                 String resourceName = toResourceName(bundleName, format);
                 InputStream stream = null;
                 if (reload) {
                     URL url = loader.getResource(resourceName);
                     if (url != null) {
                         URLConnection connection = url.openConnection();
                         if (connection != null) {
                             // Disable caches to get fresh data for
                             // reloading.
                             connection.setUseCaches(false);
                             stream = connection.getInputStream();
                         }
                     }
                 } else {
                     stream = loader.getResourceAsStream(resourceName);
                 }
                 if (stream != null) {
                     BufferedInputStream bis = new BufferedInputStream(stream);
                     bundle = new XMLResourceBundle(bis);
                     bis.close();
                 }
             }
             return bundle;
         }
     });

 ...

 private static class XMLResourceBundle extends ResourceBundle {
     private Properties props;
     XMLResourceBundle(InputStream stream) throws IOException {
         props = new Properties();
         props.loadFromXML(stream);
     }
     protected Object handleGetObject(String key) {
         return props.getProperty(key);
     }
     public Enumeration&lt;String&gt; getKeys() {
         ...
     }
 }
 </pre>          </p>                                                     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:ResourceBundle.Control"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FORMAT_DEFAULT [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FORMAT_DEFAULT"/><a name="FORMAT_DEFAULT"/><ul class="blockList"><li class="blockList"><h4>FORMAT_DEFAULT</h4><pre>public static final <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; FORMAT_DEFAULT</pre><div class="block">The default format <code>List</code>, which contains the strings <code>"java.class"</code> and <code>"java.properties"</code>, in this order. This <code>List</code> is <a href="../../java/util/Collections.html#unmodifiableList-java.util.List-">unmodifiable</a>.                 </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/ResourceBundle.Control.html#getFormats-java.lang.String-"><code>getFormats(String)</code></a> </dd> </dl></li></ul> <a end_ctx_id="field:FORMAT_DEFAULT"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FORMAT_CLASS [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FORMAT_CLASS"/><a name="FORMAT_CLASS"/><ul class="blockList"><li class="blockList"><h4>FORMAT_CLASS</h4><pre>public static final <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; FORMAT_CLASS</pre><div class="block">The class-only format <code>List</code> containing <code>"java.class"</code>. This <code>List</code> is <a href="../../java/util/Collections.html#unmodifiableList-java.util.List-">unmodifiable</a>.         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/ResourceBundle.Control.html#getFormats-java.lang.String-"><code>getFormats(String)</code></a> </dd> </dl></li></ul> <a end_ctx_id="field:FORMAT_CLASS"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FORMAT_PROPERTIES [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FORMAT_PROPERTIES"/><a name="FORMAT_PROPERTIES"/><ul class="blockList"><li class="blockList"><h4>FORMAT_PROPERTIES</h4><pre>public static final <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; FORMAT_PROPERTIES</pre><div class="block">The properties-only format <code>List</code> containing <code>"java.properties"</code>. This <code>List</code> is <a href="../../java/util/Collections.html#unmodifiableList-java.util.List-">unmodifiable</a>.         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/ResourceBundle.Control.html#getFormats-java.lang.String-"><code>getFormats(String)</code></a> </dd> </dl></li></ul> <a end_ctx_id="field:FORMAT_PROPERTIES"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TTL_DONT_CACHE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TTL_DONT_CACHE"/><a name="TTL_DONT_CACHE"/><ul class="blockList"><li class="blockList"><h4>TTL_DONT_CACHE</h4><pre>public static final long TTL_DONT_CACHE</pre><div class="block">The time-to-live constant for not caching loaded resource bundle instances.         </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/ResourceBundle.Control.html#getTimeToLive-java.lang.String-java.util.Locale-"><code>getTimeToLive(String, Locale) </code></a>, <a href="../../constant-values.html#java.util.ResourceBundle.Control.TTL_DONT_CACHE">Constant Field Values  </a>  </dd> </dl></li></ul> <a end_ctx_id="field:TTL_DONT_CACHE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TTL_NO_EXPIRATION_CONTROL [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TTL_NO_EXPIRATION_CONTROL"/><a name="TTL_NO_EXPIRATION_CONTROL"/><ul class="blockListLast"><li class="blockList"><h4>TTL_NO_EXPIRATION_CONTROL</h4><pre>public static final long TTL_NO_EXPIRATION_CONTROL</pre><div class="block">The time-to-live constant for disabling the expiration control for loaded resource bundle instances in the cache.               </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/ResourceBundle.Control.html#getTimeToLive-java.lang.String-java.util.Locale-"><code>getTimeToLive(String, Locale) </code></a>, <a href="../../constant-values.html#java.util.ResourceBundle.Control.TTL_NO_EXPIRATION_CONTROL">Constant Field Values  </a>  </dd> </dl></li></ul> <a end_ctx_id="field:TTL_NO_EXPIRATION_CONTROL"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Control-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Control--"/><a name="Control--"/><ul class="blockListLast"><li class="blockList"><h4>Control</h4><pre>protected Control()</pre><div class="block">Sole constructor. (For invocation by subclass constructors, typically implicit.)        </div></li></ul> <a end_ctx_id="constructor:Control--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getControl-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getControl-java.util.List-"/><a name="getControl-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>getControl</h4><pre>public static final <a href="../../java/util/ResourceBundle.Control.html" title="class in java.util">ResourceBundle.Control</a> getControl(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; formats)</pre><div class="block">Returns a <code>ResourceBundle.Control</code> in which the <a href="../../java/util/ResourceBundle.Control.html#getFormats-java.lang.String-"><code>getFormats</code></a> method returns the specified <code>formats</code>. The <code>formats</code> must be equal to one of <a href="../../java/util/ResourceBundle.Control.html#FORMAT_PROPERTIES"><code>FORMAT_PROPERTIES</code></a>, <a href="../../java/util/ResourceBundle.Control.html#FORMAT_CLASS"><code>FORMAT_CLASS</code></a> or <a href="../../java/util/ResourceBundle.Control.html#FORMAT_DEFAULT"><code>FORMAT_DEFAULT</code></a>. <code>ResourceBundle.Control</code> instances returned by this method are singletons and thread-safe.<p>Specifying <a href="../../java/util/ResourceBundle.Control.html#FORMAT_DEFAULT"><code>FORMAT_DEFAULT</code></a> is equivalent to instantiating the <code>ResourceBundle.Control</code> class, except that this method returns a singleton.               </p>                                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>formats</code> - the formats to be returned by the <code>ResourceBundle.Control.getFormats</code> method           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>ResourceBundle.Control</code> supporting the specified <code>formats</code>     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>formats</code> is <code>null</code>      </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>formats</code> is unknown      </dd>   </dl></li></ul> <a end_ctx_id="method:getControl-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getNoFallbackControl-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getNoFallbackControl-java.util.List-"/><a name="getNoFallbackControl-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>getNoFallbackControl</h4><pre>public static final <a href="../../java/util/ResourceBundle.Control.html" title="class in java.util">ResourceBundle.Control</a> getNoFallbackControl(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; formats)</pre><div class="block">Returns a <code>ResourceBundle.Control</code> in which the <a href="../../java/util/ResourceBundle.Control.html#getFormats-java.lang.String-"><code>getFormats</code></a> method returns the specified <code>formats</code> and the <a href="../../java/util/ResourceBundle.Control.html#getFallbackLocale-java.lang.String-java.util.Locale-"><code>getFallbackLocale</code></a> method returns <code>null</code>. The <code>formats</code> must be equal to one of <a href="../../java/util/ResourceBundle.Control.html#FORMAT_PROPERTIES"><code>FORMAT_PROPERTIES</code></a>, <a href="../../java/util/ResourceBundle.Control.html#FORMAT_CLASS"><code>FORMAT_CLASS</code></a> or <a href="../../java/util/ResourceBundle.Control.html#FORMAT_DEFAULT"><code>FORMAT_DEFAULT</code></a>. <code>ResourceBundle.Control</code> instances returned by this method are singletons and thread-safe.                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>formats</code> - the formats to be returned by the <code>ResourceBundle.Control.getFormats</code> method           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>ResourceBundle.Control</code> supporting the specified <code>formats</code> with no fallback <code>Locale</code> support          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>formats</code> is <code>null</code>      </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>formats</code> is unknown      </dd>   </dl></li></ul> <a end_ctx_id="method:getNoFallbackControl-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFormats-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFormats-java.lang.String-"/><a name="getFormats-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getFormats</h4><pre>public <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; getFormats(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName)</pre><div class="block">Returns a <code>List</code> of <code>String</code>s containing formats to be used to load resource bundles for the given <code>baseName</code>. The <code>ResourceBundle.getBundle</code> factory method tries to load resource bundles with formats in the order specified by the list. The list returned by this method must have at least one <code>String</code>. The predefined formats are <code>"java.class"</code> for class-based resource bundles and <code>"java.properties"</code> for <a href="../../java/util/PropertyResourceBundle.html" title="class in java.util">properties-based</a> ones. Strings starting with <code>"java."</code> are reserved for future extensions and must not be used by application-defined formats.<p>It is not a requirement to return an immutable (unmodifiable) <code>List</code>. However, the returned <code>List</code> must not be mutated after it has been returned by <code>getFormats</code>.                         </p><p>The default implementation returns <a href="../../java/util/ResourceBundle.Control.html#FORMAT_DEFAULT"><code>FORMAT_DEFAULT</code></a> so that the <code>ResourceBundle.getBundle</code> factory method looks up first class-based resource bundles, then properties-based ones.                   </p>                                                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base name of the resource bundle, a fully qualified class name              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>List</code> of <code>String</code>s containing formats for loading resource bundles.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>baseName</code> is null      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/ResourceBundle.Control.html#FORMAT_DEFAULT"><code>FORMAT_DEFAULT</code></a>, <a href="../../java/util/ResourceBundle.Control.html#FORMAT_CLASS"><code>FORMAT_CLASS</code></a>, <a href="../../java/util/ResourceBundle.Control.html#FORMAT_PROPERTIES"><code>FORMAT_PROPERTIES</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:getFormats-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getCandidateLocales-java.lang.String-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getCandidateLocales-java.lang.String-java.util.Locale-"/><a name="getCandidateLocales-java.lang.String-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getCandidateLocales</h4><pre>public <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>&gt; getCandidateLocales(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName,
                                        <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale)</pre><div class="block">Returns a <code>List</code> of <code>Locale</code>s as candidate locales for <code>baseName</code> and <code>locale</code>. This method is called by the <code>ResourceBundle.getBundle</code> factory method each time the factory method tries finding a resource bundle for a target <code>Locale</code>.<p>The sequence of the candidate locales also corresponds to the runtime resource lookup path (also known as the <i>parent chain </i>), if the corresponding resource bundles for the candidate locales exist and their parents are not defined by loaded resource bundles themselves. The last element of the list must be a <a href="../../java/util/Locale.html#ROOT">root locale </a> if it is desired to have the base bundle as the terminal of the parent chain.                                                                 </p><p>If the given locale is equal to <code>Locale.ROOT</code> (the root locale), a <code>List</code> containing only the root <code>Locale</code> must be returned. In this case, the <code>ResourceBundle.getBundle</code> factory method loads only the base bundle as the resulting resource bundle.                                     </p><p>It is not a requirement to return an immutable (unmodifiable) <code>List</code>. However, the returned <code>List</code> must not be mutated after it has been returned by <code>getCandidateLocales</code>.                         </p><p>The default implementation returns a <code>List</code> containing <code>Locale</code>s using the rules described below. In the description below, <em>L</em>, <em>S</em>, <em>C</em> and <em>V</em> respectively represent non-empty language, script, country, and variant. For example, [<em>L</em>, <em>C</em>] represents a <code>Locale</code> that has non-empty values only for language and country. The form <em>L</em>("xx") represents the (non-empty) language value is "xx". For all cases, <code>Locale</code>s whose final component values are empty strings are omitted.<ol><li>For an input <code>Locale</code> with an empty script value, append candidate <code>Locale</code>s by omitting the final component one by one as below:<ul><li> [<em>L</em>, <em>C</em>, <em>V</em>]   </li><li> [<em>L</em>, <em>C</em>]  </li><li> [<em>L</em>] </li><li> <code>Locale.ROOT</code> </li></ul>                     </li><li>For an input <code>Locale</code> with a non-empty script value, append candidate <code>Locale</code>s by omitting the final component up to language, then append candidates generated from the <code>Locale</code> with country and variant restored:<ul><li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V</em>]    </li><li> [<em>L</em>, <em>S</em>, <em>C</em>]   </li><li> [<em>L</em>, <em>S</em>]  </li><li> [<em>L</em>, <em>C</em>, <em>V</em>]   </li><li> [<em>L</em>, <em>C</em>]  </li><li> [<em>L</em>] </li><li> <code>Locale.ROOT</code> </li></ul>                               </li><li>For an input <code>Locale</code> with a variant value consisting of multiple subtags separated by underscore, generate candidate <code>Locale</code>s by omitting the variant subtags one by one, then insert them after every occurrence of <code> Locale </code>s with the full variant value in the original list. For example, if the the variant consists of two subtags <em>V1</em> and <em>V2</em>:<ul><li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V1</em>, <em>V2</em>]     </li><li> [<em>L</em>, <em>S</em>, <em>C</em>, <em>V1</em>]    </li><li> [<em>L</em>, <em>S</em>, <em>C</em>]   </li><li> [<em>L</em>, <em>S</em>]  </li><li> [<em>L</em>, <em>C</em>, <em>V1</em>, <em>V2</em>]    </li><li> [<em>L</em>, <em>C</em>, <em>V1</em>]   </li><li> [<em>L</em>, <em>C</em>]  </li><li> [<em>L</em>] </li><li> <code>Locale.ROOT</code> </li></ul>                                                       </li><li>Special cases for Chinese. When an input <code>Locale</code> has the language "zh" (Chinese) and an empty script value, either "Hans" (Simplified) or "Hant" (Traditional) might be supplied, depending on the country. When the country is "CN" (China) or "SG" (Singapore), "Hans" is supplied. When the country is "HK" (Hong Kong SAR China), "MO" (Macau SAR China), or "TW" (Taiwan), "Hant" is supplied. For all other countries or when the country is empty, no script is supplied. For example, for <code>Locale("zh", "CN")   </code>, the candidate list will be:<ul><li> [<em>L</em>("zh"), <em>S</em>("Hans"), <em>C</em>("CN")]   </li><li> [<em>L</em>("zh"), <em>S</em>("Hans")]  </li><li> [<em>L</em>("zh"), <em>C</em>("CN")]  </li><li> [<em>L</em>("zh")] </li><li> <code>Locale.ROOT</code> </li></ul> For <code>Locale("zh", "TW") </code>, the candidate list will be:<ul><li> [<em>L</em>("zh"), <em>S</em>("Hant"), <em>C</em>("TW")]   </li><li> [<em>L</em>("zh"), <em>S</em>("Hant")]  </li><li> [<em>L</em>("zh"), <em>C</em>("TW")]  </li><li> [<em>L</em>("zh")] </li><li> <code>Locale.ROOT</code> </li></ul>                                                                                           </li><li>Special cases for Norwegian. Both <code>Locale("no", "NO", "NY")  </code> and <code>Locale("nn", "NO") </code> represent Norwegian Nynorsk. When a locale's language is "nn", the standard candidate list is generated up to [<em>L</em>("nn")], and then the following candidates are added:<ul><li> [<em>L</em>("no"), <em>C</em>("NO"), <em>V</em>("NY")]   </li><li> [<em>L</em>("no"), <em>C</em>("NO")]  </li><li> [<em>L</em>("no")] </li><li> <code>Locale.ROOT</code> </li></ul> If the locale is exactly <code>Locale("no", "NO", "NY")  </code>, it is first converted to <code>Locale("nn", "NO") </code> and then the above procedure is followed.<p>Also, Java treats the language "no" as a synonym of Norwegian Bokmål "nb". Except for the single case <code>Locale("no", "NO", "NY")  </code> (handled above), when an input <code>Locale</code> has language "no" or "nb", candidate <code>Locale</code>s with language code "no" and "nb" are interleaved, first using the requested language, then using its synonym. For example, <code>Locale("nb", "NO", "POSIX")  </code> generates the following candidate list:<ul><li> [<em>L</em>("nb"), <em>C</em>("NO"), <em>V</em>("POSIX")]   </li><li> [<em>L</em>("no"), <em>C</em>("NO"), <em>V</em>("POSIX")]   </li><li> [<em>L</em>("nb"), <em>C</em>("NO")]  </li><li> [<em>L</em>("no"), <em>C</em>("NO")]  </li><li> [<em>L</em>("nb")] </li><li> [<em>L</em>("no")] </li><li> <code>Locale.ROOT</code> </li></ul> <code>Locale("no", "NO", "POSIX")  </code> would generate the same list except that locales with "no" would appear before the corresponding locales with "nb".                                                                           </p>                                                   </li></ol>                                                                    </p><p>The default implementation uses an <a href="../../java/util/ArrayList.html" title="class in java.util"><code>ArrayList</code></a> that overriding implementations may modify before returning it to the caller. However, a subclass must not modify it after it has been returned by <code>getCandidateLocales</code>.                              </p><p>For example, if the given <code>baseName</code> is "Messages" and the given <code>locale</code> is <code>Locale("ja", "", "XX")</code>, then a <code>List</code> of <code>Locale</code>s:<pre>
     Locale("ja", "", "XX")
     Locale("ja")
     Locale.ROOT
 </pre> is returned. And if the resource bundles for the "ja" and "" <code>Locale</code>s are found, then the runtime resource lookup path (parent chain) is:<pre><code>
     Messages_ja -&gt; Messages
 </code></pre>                                          </p>                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base name of the resource bundle, a fully qualified class name              </dd><dd> <code>locale</code> - the locale for which a resource bundle is desired           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>List</code> of candidate <code>Locale</code>s for the given <code>locale</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>baseName</code> or <code>locale</code> is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:getCandidateLocales-java.lang.String-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getFallbackLocale-java.lang.String-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getFallbackLocale-java.lang.String-java.util.Locale-"/><a name="getFallbackLocale-java.lang.String-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getFallbackLocale</h4><pre>public <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> getFallbackLocale(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName,
                                <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale)</pre><div class="block">Returns a <code>Locale</code> to be used as a fallback locale for further resource bundle searches by the <code>ResourceBundle.getBundle</code> factory method. This method is called from the factory method every time when no resulting resource bundle has been found for <code>baseName</code> and <code>locale</code>, where locale is either the parameter for <code>ResourceBundle.getBundle</code> or the previous fallback locale returned by this method.<p>The method returns <code>null</code> if no further fallback search is desired.          </p><p>The default implementation returns the <a href="../../java/util/Locale.html#getDefault--">default <code>Locale</code> </a> if the given <code>locale</code> isn't the default one. Otherwise, <code>null</code> is returned.                 </p>                                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base name of the resource bundle, a fully qualified class name for which <code>ResourceBundle.getBundle</code> has been unable to find any resource bundles (except for the base bundle)                              </dd><dd> <code>locale</code> - the <code>Locale</code> for which <code>ResourceBundle.getBundle</code> has been unable to find any resource bundles (except for the base bundle)                    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Locale</code> for the fallback search, or <code>null</code> if no further fallback search is desired.              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>baseName</code> or <code>locale</code> is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:getFallbackLocale-java.lang.String-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-"/><a name="newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-"/><ul class="blockList"><li class="blockList"><h4>newBundle</h4><pre>public <a href="../../java/util/ResourceBundle.html" title="class in java.util">ResourceBundle</a> newBundle(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName,
                                <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale,
                                <a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                                <a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> loader,
                                boolean reload)
                         throws <a href="../../java/lang/IllegalAccessException.html" title="class in java.lang">IllegalAccessException</a>,
                                <a href="../../java/lang/InstantiationException.html" title="class in java.lang">InstantiationException</a>,
                                <a href="../../java/io/IOException.html" title="class in java.io">IOException</a></pre><div class="block">Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary. This method returns <code>null</code> if there is no resource bundle available for the given parameters. If a resource bundle can't be instantiated due to an unexpected error, the error must be reported by throwing an <code>Error</code> or <code>Exception</code> rather than simply returning <code>null</code>.<p>If the <code>reload</code> flag is <code>true</code>, it indicates that this method is being called because the previously loaded resource bundle has expired.                     </p><p>The default implementation instantiates a <code>ResourceBundle</code> as follows.<ul><li>The bundle name is obtained by calling <a href="../../java/util/ResourceBundle.Control.html#toBundleName-java.lang.String-java.util.Locale-"><code>toBundleName(baseName, locale) </code></a>.       </li><li>If <code>format</code> is <code>"java.class"</code>, the <a href="../../java/lang/Class.html" title="class in java.lang"><code>Class</code></a> specified by the bundle name is loaded by calling <a href="../../java/lang/ClassLoader.html#loadClass-java.lang.String-"><code>ClassLoader.loadClass(String)</code></a>. Then, a <code>ResourceBundle</code> is instantiated by calling <a href="../../java/lang/Class.html#newInstance--"><code>Class.newInstance()</code></a>. Note that the <code>reload</code> flag is ignored for loading class-based resource bundles in this default implementation.                                       </li><li>If <code>format</code> is <code>"java.properties"</code>, <a href="../../java/util/ResourceBundle.Control.html#toResourceName-java.lang.String-java.lang.String-"><code>toResourceName(bundlename, "properties") </code></a> is called to get the resource name. If <code>reload</code> is <code>true</code>, <a href="../../java/lang/ClassLoader.html#getResource-java.lang.String-"><code>load.getResource</code></a> is called to get a <a href="../../java/net/URL.html" title="class in java.net"><code>URL</code></a> for creating a <a href="../../java/net/URLConnection.html" title="class in java.net"><code>URLConnection</code></a>. This <code>URLConnection</code> is used to <a href="../../java/net/URLConnection.html#setUseCaches-boolean-">disable the caches  </a> of the underlying resource loading layers, and to <a href="../../java/net/URLConnection.html#getInputStream--">get an <code>InputStream</code>  </a>. Otherwise, <a href="../../java/lang/ClassLoader.html#getResourceAsStream-java.lang.String-"><code>loader.getResourceAsStream</code></a> is called to get an <a href="../../java/io/InputStream.html" title="class in java.io"><code>InputStream</code></a>. Then, a <a href="../../java/util/PropertyResourceBundle.html" title="class in java.util"><code>PropertyResourceBundle</code></a> is constructed with the <code>InputStream</code>.                                                         </li><li>If <code>format</code> is neither <code>"java.class"</code> nor <code>"java.properties"</code>, an <code>IllegalArgumentException</code> is thrown.          </li></ul>       </p>                                                                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base bundle name of the resource bundle, a fully qualified class name               </dd><dd> <code>locale</code> - the locale for which the resource bundle should be instantiated            </dd><dd> <code>format</code> - the resource bundle format to be loaded         </dd><dd> <code>loader</code> - the <code>ClassLoader</code> to use to load the bundle          </dd><dd> <code>reload</code> - the flag to indicate bundle reloading; <code>true</code> if reloading an expired resource bundle, <code>false</code> otherwise                 </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the resource bundle instance, or <code>null</code> if none could be found.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>bundleName</code>, <code>locale</code>, <code>format</code>, or <code>loader</code> is <code>null</code>, or if <code>null</code> is returned by <a href="../../java/util/ResourceBundle.Control.html#toBundleName-java.lang.String-java.util.Locale-"><code>toBundleName</code></a>                 </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>format</code> is unknown, or if the resource found for the given parameters contains malformed data.                  </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the loaded class cannot be cast to <code>ResourceBundle</code>           </dd><dd> <code><a href="../../java/lang/IllegalAccessException.html" title="class in java.lang">IllegalAccessException</a></code> - if the class or its nullary constructor is not accessible.            </dd><dd> <code><a href="../../java/lang/InstantiationException.html" title="class in java.lang">InstantiationException</a></code> - if the instantiation of a class fails for some other reason.             </dd><dd> <code><a href="../../java/lang/ExceptionInInitializerError.html" title="class in java.lang">ExceptionInInitializerError</a></code> - if the initialization provoked by this method fails.          </dd><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - If a security manager is present and creation of new instances is denied. See <a href="../../java/lang/Class.html#newInstance--"><code>Class.newInstance()</code></a> for details.                   </dd><dd> <code><a href="../../java/io/IOException.html" title="class in java.io">IOException</a></code> - if an error occurred when reading resources using any I/O operations             </dd>   </dl></li></ul> <a end_ctx_id="method:newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getTimeToLive-java.lang.String-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getTimeToLive-java.lang.String-java.util.Locale-"/><a name="getTimeToLive-java.lang.String-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getTimeToLive</h4><pre>public long getTimeToLive(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName,
                          <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale)</pre><div class="block">Returns the time-to-live (TTL) value for resource bundles that are loaded under this <code>ResourceBundle.Control</code>. Positive time-to-live values specify the number of milliseconds a bundle can remain in the cache without being validated against the source data from which it was constructed. The value 0 indicates that a bundle must be validated each time it is retrieved from the cache. <a href="../../java/util/ResourceBundle.Control.html#TTL_DONT_CACHE"><code>TTL_DONT_CACHE</code></a> specifies that loaded resource bundles are not put in the cache. <a href="../../java/util/ResourceBundle.Control.html#TTL_NO_EXPIRATION_CONTROL"><code>TTL_NO_EXPIRATION_CONTROL</code></a> specifies that loaded resource bundles are put in the cache with no expiration control.<p>The expiration affects only the bundle loading process by the <code>ResourceBundle.getBundle</code> factory method. That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the <a href="../../java/util/ResourceBundle.Control.html#needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-"><code>needsReload</code></a> method to determine whether the resource bundle needs to be reloaded. If <code>needsReload</code> returns <code>true</code>, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method.                                                                            </p><p>All cached resource bundles are subject to removal from the cache due to memory constraints of the runtime environment. Returning a large positive value doesn't mean to lock loaded resource bundles in the cache.                                 </p><p>The default implementation returns <a href="../../java/util/ResourceBundle.Control.html#TTL_NO_EXPIRATION_CONTROL"><code>TTL_NO_EXPIRATION_CONTROL</code></a>.    </p>                                                                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base name of the resource bundle for which the expiration value is specified.                </dd><dd> <code>locale</code> - the locale of the resource bundle for which the expiration value is specified.               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the time (0 or a positive millisecond offset from the cached time) to get loaded bundles expired in the cache, <a href="../../java/util/ResourceBundle.Control.html#TTL_NO_EXPIRATION_CONTROL"><code>TTL_NO_EXPIRATION_CONTROL</code></a> to disable the expiration control, or <a href="../../java/util/ResourceBundle.Control.html#TTL_DONT_CACHE"><code>TTL_DONT_CACHE</code></a> to disable caching.                              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>baseName</code> or <code>locale</code> is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:getTimeToLive-java.lang.String-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-"/><a name="needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-"/><ul class="blockList"><li class="blockList"><h4>needsReload</h4><pre>public boolean needsReload(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName,
                           <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale,
                           <a href="../../java/lang/String.html" title="class in java.lang">String</a> format,
                           <a href="../../java/lang/ClassLoader.html" title="class in java.lang">ClassLoader</a> loader,
                           <a href="../../java/util/ResourceBundle.html" title="class in java.util">ResourceBundle</a> bundle,
                           long loadTime)</pre><div class="block">Determines if the expired <code>bundle</code> in the cache needs to be reloaded based on the loading time given by <code>loadTime</code> or some other criteria. The method returns <code>true</code> if reloading is required; <code>false</code> otherwise. <code>loadTime</code> is a millisecond offset since the <a href="Calendar.html#Epoch"><code>Calendar</code> Epoch </a>. The calling <code>ResourceBundle.getBundle</code> factory method calls this method on the <code>ResourceBundle.Control</code> instance used for its current invocation, not on the instance used in the invocation that originally loaded the resource bundle.<p>The default implementation compares <code>loadTime</code> and the last modified time of the source data of the resource bundle. If it's determined that the source data has been modified since <code>loadTime</code>, <code>true</code> is returned. Otherwise, <code>false</code> is returned. This implementation assumes that the given <code>format</code> is the same string as its file suffix if it's not one of the default formats, <code>"java.class"</code> or <code>"java.properties"</code>.                                                              </p>                                                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base bundle name of the resource bundle, a fully qualified class name               </dd><dd> <code>locale</code> - the locale for which the resource bundle should be instantiated            </dd><dd> <code>format</code> - the resource bundle format to be loaded         </dd><dd> <code>loader</code> - the <code>ClassLoader</code> to use to load the bundle          </dd><dd> <code>bundle</code> - the resource bundle instance that has been expired in the cache             </dd><dd> <code>loadTime</code> - the time when <code>bundle</code> was loaded and put in the cache             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the expired bundle needs to be reloaded; <code>false</code> otherwise.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>baseName</code>, <code>locale</code>, <code>format</code>, <code>loader</code>, or <code>bundle</code> is <code>null</code>           </dd>   </dl></li></ul> <a end_ctx_id="method:needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toBundleName-java.lang.String-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toBundleName-java.lang.String-java.util.Locale-"/><a name="toBundleName-java.lang.String-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>toBundleName</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toBundleName(<a href="../../java/lang/String.html" title="class in java.lang">String</a> baseName,
                           <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> locale)</pre><div class="block">Converts the given <code>baseName</code> and <code>locale</code> to the bundle name. This method is called from the default implementation of the <a href="../../java/util/ResourceBundle.Control.html#newBundle-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-boolean-"><code>newBundle</code></a> and <a href="../../java/util/ResourceBundle.Control.html#needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-"><code>needsReload</code></a> methods.<p>This implementation returns the following value:<pre>
     baseName + "_" + language + "_" + script + "_" + country + "_" + variant
 </pre> where <code>language</code>, <code>script</code>, <code>country</code>, and <code>variant</code> are the language, script, country, and variant values of <code>locale</code>, respectively. Final component values that are empty Strings are omitted along with the preceding '_'. When the script is empty, the script value is omitted along with the preceding '_'. If all of the values are empty strings, then <code>baseName</code> is returned.                                                               </p><p>For example, if <code>baseName</code> is <code>"baseName"</code> and <code>locale</code> is <code>Locale("ja", "", "XX")</code>, then <code>"baseName_ja_ _XX"</code> is returned. If the given locale is <code>Locale("en")</code>, then <code>"baseName_en"</code> is returned.                       </p><p>Overriding this method allows applications to use different conventions in the organization and packaging of localized resources.                </p>                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>baseName</code> - the base name of the resource bundle, a fully qualified class name              </dd><dd> <code>locale</code> - the locale for which a resource bundle should be loaded            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the bundle name for the resource bundle      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>baseName</code> or <code>locale</code> is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:toBundleName-java.lang.String-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toResourceName-java.lang.String-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toResourceName-java.lang.String-java.lang.String-"/><a name="toResourceName-java.lang.String-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>toResourceName</h4><pre>public final <a href="../../java/lang/String.html" title="class in java.lang">String</a> toResourceName(<a href="../../java/lang/String.html" title="class in java.lang">String</a> bundleName,
                                   <a href="../../java/lang/String.html" title="class in java.lang">String</a> suffix)</pre><div class="block">Converts the given <code>bundleName</code> to the form required by the <a href="../../java/lang/ClassLoader.html#getResource-java.lang.String-"><code>ClassLoader.getResource</code></a> method by replacing all occurrences of <code>'.'</code> in <code>bundleName</code> with <code>'/'</code> and appending a <code>'.'</code> and the given file <code>suffix</code>. For example, if <code>bundleName</code> is <code>"foo.bar.MyResources_ja_JP"</code> and <code>suffix</code> is <code>"properties"</code>, then <code>"foo/bar/MyResources_ja_JP.properties"</code> is returned.                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>bundleName</code> - the bundle name     </dd><dd> <code>suffix</code> - the file type suffix      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the converted resource name   </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>bundleName</code> or <code>suffix</code> is <code>null</code>        </dd>   </dl></li></ul> <a end_ctx_id="method:toResourceName-java.lang.String-java.lang.String-"/>  </td></tr></table></td></tr></table></diff></diffreport>