<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Spliterator.OfPrimitive [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Spliterator.OfPrimitive"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of elements returned by this Spliterator. The type must be a wrapper type for a primitive type, such as <code>Integer</code> for the primitive <code>int</code> type.                             </dd><dd> <code>T_CONS</code> - the type of primitive consumer. The type must be a primitive specialization of <a href="../../java/util/function/Consumer.html" title="interface in java.util.function"><code>Consumer</code></a> for <code>T</code>, such as <a href="../../java/util/function/IntConsumer.html" title="interface in java.util.function"><code>IntConsumer</code></a> for <code>Integer</code>.                       </dd><dd> <code>T_SPLITR</code> - the type of primitive Spliterator. The type must be a primitive specialization of Spliterator for <code>T</code>, such as <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util"><code>Spliterator.OfInt</code></a> for <code>Integer</code>.                       </dd> </dl><dl> <dt>All Superinterfaces: </dt><dd> <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt; </dd> </dl><dl> <dt>All Known Subinterfaces:  </dt><dd> <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util">Spliterator.OfDouble</a>, <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util">Spliterator.OfInt</a>, <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util">Spliterator.OfLong</a>   </dd> </dl><dl> <dt>All Known Implementing Classes:   </dt><dd> <a href="../../java/util/Spliterators.AbstractDoubleSpliterator.html" title="class in java.util">Spliterators.AbstractDoubleSpliterator</a>, <a href="../../java/util/Spliterators.AbstractIntSpliterator.html" title="class in java.util">Spliterators.AbstractIntSpliterator</a>, <a href="../../java/util/Spliterators.AbstractLongSpliterator.html" title="class in java.util">Spliterators.AbstractLongSpliterator</a>   </dd> </dl><dl> <dt>Enclosing interface: </dt><dd> <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;<a href="../../java/util/Spliterator.html" title="type parameter in Spliterator">T</a>&gt; </dd> </dl> <hr/> <br/><pre>public static interface <span class="typeNameLabel">Spliterator.OfPrimitive&lt;T,T_CONS,T_SPLITR extends Spliterator.OfPrimitive&lt;T,T_CONS,T_SPLITR&gt;&gt;</span>
extends <a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;T&gt;</pre><div class="block">A Spliterator specialized for primitive values.     </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Spliterator.OfInt.html" title="interface in java.util"><code>Spliterator.OfInt</code></a>, <a href="../../java/util/Spliterator.OfLong.html" title="interface in java.util"><code>Spliterator.OfLong</code></a>, <a href="../../java/util/Spliterator.OfDouble.html" title="interface in java.util"><code>Spliterator.OfDouble</code></a>   </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Spliterator.OfPrimitive"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:trySplit-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:trySplit--"/><a name="trySplit--"/><ul class="blockList"><li class="blockList"><h4>trySplit</h4><pre><a href="../../java/util/Spliterator.OfPrimitive.html" title="type parameter in Spliterator.OfPrimitive">T_SPLITR</a> trySplit()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/Spliterator.html#trySplit--">Spliterator</a></code>   </span> </div><div class="block">If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator.<p>If this Spliterator is <a href="../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a>, the returned Spliterator must cover a strict prefix of the elements.               </p><p>Unless this Spliterator covers an infinite number of elements, repeated calls to <code>trySplit()</code> must eventually return <code>null</code>. Upon non-null return:<ul><li>the value reported for <code>estimateSize()</code> before splitting, must, after splitting, be greater than or equal to <code>estimateSize()</code> for this and the returned Spliterator; and                       </li><li>if this Spliterator is <code>SUBSIZED</code>, then <code>estimateSize()</code> for this spliterator before splitting must be equal to the sum of <code>estimateSize()</code> for this and the returned Spliterator after splitting.                           </li></ul>                   </p><p>This method may return <code>null</code> for any reason, including emptiness, inability to split after traversal has commenced, data structure constraints, and efficiency considerations.                      </p>                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Spliterator.html#trySplit--">trySplit</a></code> in interface <code><a href="../../java/util/Spliterator.html" title="interface in java.util">Spliterator</a>&lt;<a href="../../java/util/Spliterator.OfPrimitive.html" title="type parameter in Spliterator.OfPrimitive">T</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a <code>Spliterator</code> covering some portion of the elements, or <code>null</code> if this spliterator cannot be split               </dd>  </dl></li></ul> <a name="tryAdvance-java.lang.Object-"/><a end_ctx_id="method:trySplit--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tryAdvance-T_CONS- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tryAdvance-T_CONS-"/><a name="tryAdvance-T_CONS-"/><ul class="blockList"><li class="blockList"><h4>tryAdvance</h4><pre>boolean tryAdvance(<a href="../../java/util/Spliterator.OfPrimitive.html" title="type parameter in Spliterator.OfPrimitive">T_CONS</a> action)</pre><div class="block">If a remaining element exists, performs the given action on it, returning <code>true</code>; else returns <code>false</code>. If this Spliterator is <a href="../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a> the action is performed on the next element in encounter order. Exceptions thrown by the action are relayed to the caller.                                         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>action</code> - The action    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>false</code> if no remaining elements existed upon entry to this method, else <code>true</code>.             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified action is null        </dd>   </dl></li></ul> <a name="forEachRemaining-java.lang.Object-"/><a end_ctx_id="method:tryAdvance-T_CONS-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forEachRemaining-T_CONS- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forEachRemaining-T_CONS-"/><a name="forEachRemaining-T_CONS-"/><ul class="blockListLast"><li class="blockList"><h4>forEachRemaining</h4><pre>default void forEachRemaining(<a href="../../java/util/Spliterator.OfPrimitive.html" title="type parameter in Spliterator.OfPrimitive">T_CONS</a> action)</pre><div class="block">Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception. If this Spliterator is <a href="../../java/util/Spliterator.html#ORDERED"><code>Spliterator.ORDERED</code></a>, actions are performed in encounter order. Exceptions thrown by the action are relayed to the caller.                                             </div><dl> <dt> <span class="simpleTagLabel">Implementation Requirements: </span>   </dt><dd>The default implementation repeatedly invokes <a href="../../java/util/Spliterator.OfPrimitive.html#tryAdvance-T_CONS-"><code>tryAdvance(T_CONS)</code></a> until it returns <code>false</code>. It should be overridden whenever possible.               </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>action</code> - The action    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified action is null        </dd>   </dl></li></ul> <a end_ctx_id="method:forEachRemaining-T_CONS-"/>  </td></tr></table></td></tr></table></diff></diffreport>