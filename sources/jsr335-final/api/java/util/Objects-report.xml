<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Objects [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Objects"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public final class <span class="typeNameLabel">Objects</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class consists of <code>static</code> utility methods for operating on objects. These utilities include <code>null</code>-safe or <code>null</code>-tolerant methods for computing the hash code of an object, returning a string for an object, and comparing two objects.                                   </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> </dl>  </li></ul> </div> <a end_ctx_id="class:Objects"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-java.lang.Object-"/><a name="equals-java.lang.Object-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>public static boolean equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> a,
                             <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> b)</pre><div class="block">Returns <code>true</code> if the arguments are equal to each other and <code>false</code> otherwise. Consequently, if both arguments are <code>null</code>, <code>true</code> is returned and if exactly one argument is <code>null</code>, <code>false</code> is returned. Otherwise, equality is determined by using the <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>equals</code></a> method of the first argument.                                            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an object    </dd><dd> <code>b</code> - an object to be compared with <code>a</code> for equality           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the arguments are equal to each other and <code>false</code> otherwise            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(Object)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:deepEquals-java.lang.Object-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:deepEquals-java.lang.Object-java.lang.Object-"/><a name="deepEquals-java.lang.Object-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>deepEquals</h4><pre>public static boolean deepEquals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> a,
                                 <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> b)</pre><div class="block">Returns <code>true</code> if the arguments are deeply equal to each other and <code>false</code> otherwise. Two <code>null</code> values are deeply equal. If both arguments are arrays, the algorithm in <a href="../../java/util/Arrays.html#deepEquals-java.lang.Object:A-java.lang.Object:A-"><code>Arrays.deepEquals</code></a> is used to determine equality. Otherwise, equality is determined by using the <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>equals</code></a> method of the first argument.                                              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an object    </dd><dd> <code>b</code> - an object to be compared with <code>a</code> for deep equality            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the arguments are deeply equal to each other and <code>false</code> otherwise             </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#deepEquals-java.lang.Object:A-java.lang.Object:A-"><code>Arrays.deepEquals(Object[], Object[]) </code></a>, <a href="../../java/util/Objects.html#equals-java.lang.Object-java.lang.Object-"><code>equals(Object, Object) </code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:deepEquals-java.lang.Object-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode-java.lang.Object-"/><a name="hashCode-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>public static int hashCode(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns the hash code of a non-<code>null</code> argument and 0 for a <code>null</code> argument.             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - an object    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the hash code of a non-<code>null</code> argument and 0 for a <code>null</code> argument            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hash-java.lang.Object...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hash-java.lang.Object...-"/><a name="hash-java.lang.Object...-"/><ul class="blockList"><li class="blockList"><h4>hash</h4><pre>public static int hash(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>... values)</pre><div class="block">Generates a hash code for a sequence of input values. The hash code is generated as if all the input values were placed into an array, and that array were hashed by calling <a href="../../java/util/Arrays.html#hashCode-java.lang.Object:A-"><code>Arrays.hashCode(Object[])</code></a>.<p>This method is useful for implementing <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a> on objects containing multiple fields. For example, if an object that has three fields, <code>x</code>, <code>y</code>, and <code>z</code>, one could write:                           </p><blockquote><pre>
 @Override public int hashCode() {
     return Objects.hash(x, y, z);
 }
 </pre></blockquote> <b>Warning: When a single object reference is supplied, the returned value does not equal the hash code of that object reference.                    </b> This value can be computed by calling <a href="../../java/util/Objects.html#hashCode-java.lang.Object-"><code>hashCode(Object)</code></a>.                                          </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>values</code> - the values to be hashed       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash value of the sequence of input values        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Arrays.html#hashCode-java.lang.Object:A-"><code>Arrays.hashCode(Object[])</code></a>, <a href="../../java/util/List.html#hashCode--"><code>List.hashCode()</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hash-java.lang.Object...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString-java.lang.Object-"/><a name="toString-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns the result of calling <code>toString</code> for a non-<code>null</code> argument and <code>"null"</code> for a <code>null</code> argument.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - an object    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of calling <code>toString</code> for a non-<code>null</code> argument and <code>"null"</code> for a <code>null</code> argument              </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#toString--"><code>Object.toString()</code></a>, <a href="../../java/lang/String.html#valueOf-java.lang.Object-"><code>String.valueOf(Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:toString-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-java.lang.Object-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString-java.lang.Object-java.lang.String-"/><a name="toString-java.lang.Object-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public static <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o,
                              <a href="../../java/lang/String.html" title="class in java.lang">String</a> nullDefault)</pre><div class="block">Returns the result of calling <code>toString</code> on the first argument if the first argument is not <code>null</code> and returns the second argument otherwise.                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - an object    </dd><dd> <code>nullDefault</code> - string to return if the first argument is <code>null</code>           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the result of calling <code>toString</code> on the first argument if it is not <code>null</code> and the second argument otherwise.                  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Objects.html#toString-java.lang.Object-"><code>toString(Object)</code></a> </dd>   </dl></li></ul> <a name="compare-java.lang.Object-java.lang.Object-java.util.Comparator-"/><a end_ctx_id="method:toString-java.lang.Object-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:compare-T-T-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:compare-T-T-java.util.Comparator-"/><a name="compare-T-T-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>compare</h4><pre>public static &lt;T&gt; int compare(T a,
                              T b,
                              <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super T&gt; c)</pre><div class="block">Returns 0 if the arguments are identical and <code>c.compare(a, b) </code> otherwise. Consequently, if both arguments are <code>null</code> 0 is returned.<p>Note that if one of the arguments is <code>null</code>, a <code>NullPointerException</code> may or may not be thrown depending on what ordering policy, if any, the <a href="../../java/util/Comparator.html" title="interface in java.util"><code>Comparator</code></a> chooses to have for <code>null</code> values.                               </p>                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the objects being compared         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - an object    </dd><dd> <code>b</code> - an object to be compared with <code>a</code>         </dd><dd> <code>c</code> - the <code>Comparator</code> to compare the first two arguments          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>0 if the arguments are identical and <code>c.compare(a, b) </code> otherwise.        </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, <a href="../../java/util/Comparator.html" title="interface in java.util"><code>Comparator</code></a>  </dd>    </dl></li></ul> <a name="requireNonNull-java.lang.Object-"/><a end_ctx_id="method:compare-T-T-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:requireNonNull-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:requireNonNull-T-"/><a name="requireNonNull-T-"/><ul class="blockList"><li class="blockList"><h4>requireNonNull</h4><pre>public static &lt;T&gt; T requireNonNull(T obj)</pre><div class="block">Checks that the specified object reference is not <code>null</code>. This method is designed primarily for doing parameter validation in methods and constructors, as demonstrated below:<blockquote><pre>
 public Foo(Bar bar) {
     this.bar = Objects.requireNonNull(bar);
 }
 </pre></blockquote>                        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the reference       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object reference to check for nullity         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>obj</code> if not <code>null</code>    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>obj</code> is <code>null</code>      </dd>    </dl></li></ul> <a name="requireNonNull-java.lang.Object-java.lang.String-"/><a end_ctx_id="method:requireNonNull-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:requireNonNull-T-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:requireNonNull-T-java.lang.String-"/><a name="requireNonNull-T-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>requireNonNull</h4><pre>public static &lt;T&gt; T requireNonNull(T obj,
                                   <a href="../../java/lang/String.html" title="class in java.lang">String</a> message)</pre><div class="block">Checks that the specified object reference is not <code>null</code> and throws a customized <a href="../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> if it is. This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters, as demonstrated below:<blockquote><pre>
 public Foo(Bar bar, Baz baz) {
     this.bar = Objects.requireNonNull(bar, "bar must not be null");
     this.baz = Objects.requireNonNull(baz, "baz must not be null");
 }
 </pre></blockquote>                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the reference       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object reference to check for nullity         </dd><dd> <code>message</code> - detail message to be used in the event that a <code>NullPointerException</code> is thrown               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>obj</code> if not <code>null</code>    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>obj</code> is <code>null</code>      </dd>    </dl></li></ul> <a end_ctx_id="method:requireNonNull-T-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isNull-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isNull-java.lang.Object-"/><a name="isNull-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>isNull</h4><pre>public static boolean isNull(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Returns <code>true</code> if the provided reference is <code>null</code> otherwise returns <code>false</code>.          </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>This method exists to be used as a <a href="../../java/util/function/Predicate.html" title="interface in java.util.function"><code>Predicate</code></a>, <code>filter(Objects::isNull)</code>         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - a reference to be checked against <code>null</code>         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the provided reference is <code>null</code> otherwise <code>false</code>         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/function/Predicate.html" title="interface in java.util.function"><code>Predicate</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:isNull-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nonNull-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nonNull-java.lang.Object-"/><a name="nonNull-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>nonNull</h4><pre>public static boolean nonNull(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> obj)</pre><div class="block">Returns <code>true</code> if the provided reference is non-<code>null</code> otherwise returns <code>false</code>.          </div><dl> <dt> <span class="simpleTagLabel">API Note: </span>   </dt><dd>This method exists to be used as a <a href="../../java/util/function/Predicate.html" title="interface in java.util.function"><code>Predicate</code></a>, <code>filter(Objects::nonNull)</code>         </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - a reference to be checked against <code>null</code>         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the provided reference is non-<code>null</code> otherwise <code>false</code>         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/function/Predicate.html" title="interface in java.util.function"><code>Predicate</code></a> </dd>     </dl></li></ul> <a name="requireNonNull-java.lang.Object-java.util.function.Supplier-"/><a end_ctx_id="method:nonNull-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:requireNonNull-T-java.util.function.Supplier- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:requireNonNull-T-java.util.function.Supplier-"/><a name="requireNonNull-T-java.util.function.Supplier-"/><ul class="blockListLast"><li class="blockList"><h4>requireNonNull</h4><pre>public static &lt;T&gt; T requireNonNull(T obj,
                                   <a href="../../java/util/function/Supplier.html" title="interface in java.util.function">Supplier</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt; messageSupplier)</pre><div class="block">Checks that the specified object reference is not <code>null</code> and throws a customized <a href="../../java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> if it is.<p>Unlike the method <a href="../../java/util/Objects.html#requireNonNull-T-java.lang.String-"><code>requireNonNull(Object, String) </code></a>, this method allows creation of the message to be deferred until after the null check is made. While this may confer a performance advantage in the non-null case, when deciding to call this method care should be taken that the costs of creating the message supplier are less than the cost of just creating the string message directly.                                                             </p>                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the type of the reference       </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the object reference to check for nullity         </dd><dd> <code>messageSupplier</code> - supplier of the detail message to be used in the event that a <code>NullPointerException</code> is thrown                  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>obj</code> if not <code>null</code>    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>obj</code> is <code>null</code>      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>     </dl></li></ul> <a end_ctx_id="method:requireNonNull-T-java.util.function.Supplier-"/>  </td></tr></table></td></tr></table></diff></diffreport>