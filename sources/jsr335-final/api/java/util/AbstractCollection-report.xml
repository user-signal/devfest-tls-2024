<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:AbstractCollection [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:AbstractCollection"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;  </dd> </dl><dl> <dt>Direct Known Subclasses:  </dt><dd> <a href="../../java/util/AbstractList.html" title="class in java.util">AbstractList</a>, <a href="../../java/util/AbstractQueue.html" title="class in java.util">AbstractQueue</a>, <a href="../../java/util/AbstractSet.html" title="class in java.util">AbstractSet</a>, <a href="../../java/util/ArrayDeque.html" title="class in java.util">ArrayDeque</a>, <a href="../../java/util/concurrent/ConcurrentLinkedDeque.html" title="class in java.util.concurrent">ConcurrentLinkedDeque</a>     </dd> </dl> <hr/> <br/><pre>public abstract class <span class="typeNameLabel">AbstractCollection&lt;E&gt;</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;</pre><div class="block">This class provides a skeletal implementation of the <tt>Collection</tt> interface, to minimize the effort required to implement this interface.<p> To implement an unmodifiable collection, the programmer needs only to extend this class and provide implementations for the <tt>iterator</tt> and <tt>size</tt> methods. (The iterator returned by the <tt>iterator</tt> method must implement <tt>hasNext</tt> and <tt>next</tt>.)                                  </p><p> To implement a modifiable collection, the programmer must additionally override this class's <tt>add</tt> method (which otherwise throws an <tt>UnsupportedOperationException</tt>), and the iterator returned by the <tt>iterator</tt> method must additionally implement its <tt>remove</tt> method.                                 </p><p> The programmer should generally provide a void (no argument) and <tt>Collection</tt> constructor, as per the recommendation in the <tt>Collection</tt> interface specification.                     </p><p> The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation.                               </p><p> This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.        </p>                  </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:AbstractCollection"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:AbstractCollection-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:AbstractCollection--"/><a name="AbstractCollection--"/><ul class="blockListLast"><li class="blockList"><h4>AbstractCollection</h4><pre>protected AbstractCollection()</pre><div class="block">Sole constructor. (For invocation by subclass constructors, typically implicit.)        </div></li></ul> <a end_ctx_id="constructor:AbstractCollection--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public abstract <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt; iterator()</pre><div class="block">Returns an iterator over the elements contained in this collection.         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements contained in this collection        </dd>   </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>public abstract int size()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/Collection.html#size--">Collection</a></code>   </span> </div><div class="block">Returns the number of elements in this collection. If this collection contains more than <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.                 </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#size--">size</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements in this collection      </dd>  </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isEmpty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isEmpty--"/><a name="isEmpty--"/><ul class="blockList"><li class="blockList"><h4>isEmpty</h4><pre>public boolean isEmpty()</pre><div class="block">Returns <tt>true</tt> if this collection contains no elements.<p>This implementation returns <tt>size() == 0  </tt>.   </p>       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#isEmpty--">isEmpty</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection contains no elements       </dd>  </dl></li></ul> <a end_ctx_id="method:isEmpty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:contains-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:contains-java.lang.Object-"/><a name="contains-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>contains</h4><pre>public boolean contains(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns <tt>true</tt> if this collection contains the specified element. More formally, returns <tt>true</tt> if and only if this collection contains at least one element <tt>e</tt> such that <tt>(o==null ? e==null : o.equals(e))</tt>.<p>This implementation iterates over the elements in the collection, checking each element in turn for equality with the specified element.                   </p>                           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element whose presence in this collection is to be tested            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection contains the specified element        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the type of the specified element is incompatible with this collection (<a href="#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this collection does not permit null elements (<a href="#optional-restrictions">optional</a>)                 </dd>    </dl></li></ul> <a end_ctx_id="method:contains-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toArray-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toArray--"/><a name="toArray--"/><ul class="blockList"><li class="blockList"><h4>toArray</h4><pre>public <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>[] toArray()</pre><div class="block">Returns an array containing all of the elements in this collection. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.<p>The returned array will be "safe" in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array.                                             </p><p>This method acts as bridge between array-based and collection-based APIs.         </p><p>This implementation returns an array containing all the elements returned by this collection's iterator, in the same order, stored in consecutive elements of the array, starting with index <code>0</code>. The length of the returned array is equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The <code>size</code> method is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements.                                                                                           </p><p>This method is equivalent to:<pre> 
<code>
 List&lt;E&gt; list = new ArrayList&lt;E&gt;(size());
 for (E e : this)
     list.add(e);
 return list.toArray();
 </code></pre>    </p>                                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#toArray--">toArray</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an array containing all of the elements in this collection         </dd>  </dl></li></ul> <a name="toArray-java.lang.Object:A-"/><a end_ctx_id="method:toArray--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toArray-T:A- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toArray-T:A-"/><a name="toArray-T:A-"/><ul class="blockList"><li class="blockList"><h4>toArray</h4><pre>public &lt;T&gt; T[] toArray(T[] a)</pre><div class="block">Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection.<p>If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to <tt>null</tt>. (This is useful in determining the length of this collection <i>only</i> if the caller knows that this collection does not contain any <tt>null</tt> elements.)                                                            </p><p>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.                          </p><p>Like the <a href="../../java/util/Collection.html#toArray--"><code>Collection.toArray()</code></a> method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs.                                      </p><p>Suppose <tt>x</tt> is a collection known to contain only strings. The following code can be used to dump the collection into a newly allocated array of <tt>String</tt>:<pre>
     String[] y = x.toArray(new String[0]);</pre> Note that <tt>toArray(new Object[0]) </tt> is identical in function to <tt>toArray()</tt>.                                   </p><p>This implementation returns an array containing all the elements returned by this collection's iterator in the same order, stored in consecutive elements of the array, starting with index <code>0</code>. If the number of elements returned by the iterator is too large to fit into the specified array, then the elements are returned in a newly allocated array with length equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The <code>size</code> method is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements.                                                                                                                  </p><p>This method is equivalent to:<pre> 
<code>
 List&lt;E&gt; list = new ArrayList&lt;E&gt;(size());
 for (E e : this)
     list.add(e);
 return list.toArray(a);
 </code></pre>    </p>                                                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#toArray-T:A-">toArray</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the runtime type of the array to contain the collection            </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>a</code> - the array into which the elements of this collection are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose.                                  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an array containing all of the elements in this collection         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ArrayStoreException.html" title="class in java.lang">ArrayStoreException</a></code> - if the runtime type of the specified array is not a supertype of the runtime type of every element in this collection                        </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified array is null        </dd>     </dl></li></ul> <a name="add-java.lang.Object-"/><a end_ctx_id="method:toArray-T:A-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>public boolean add(<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a> e)</pre><div class="block">Ensures that this collection contains the specified element (optional operation). Returns <tt>true</tt> if this collection changed as a result of the call. (Returns <tt>false</tt> if this collection does not permit duplicates and already contains the specified element.)<p> Collections that support this operation may place limitations on what elements may be added to this collection. In particular, some collections will refuse to add <tt>null</tt> elements, and others will impose restrictions on the type of elements that may be added. Collection classes should clearly specify in their documentation any restrictions on what elements may be added.                                                         </p><p> If a collection refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an exception (rather than returning <tt>false</tt>). This preserves the invariant that a collection always contains the specified element after this call returns.                                             </p><p>This implementation always throws an <tt>UnsupportedOperationException</tt>.     </p>                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - element whose presence in this collection is to be ensured            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>add</tt> operation is not supported by this collection            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of the specified element prevents it from being added to this collection                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this collection does not permit null elements                </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of the element prevents it from being added to this collection                </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the element cannot be added at this time due to insertion restrictions               </dd>    </dl></li></ul> <a end_ctx_id="method:add-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public boolean remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element <tt>e</tt> such that <tt>(o==null ? e==null : o.equals(e))</tt>, if this collection contains one or more such elements. Returns <tt>true</tt> if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).<p>This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator's remove method.                           </p><p>Note that this implementation throws an <tt>UnsupportedOperationException</tt> if the iterator returned by this collection's iterator method does not implement the <tt>remove</tt> method and this collection contains the specified object.                            </p>                                                       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - element to be removed from this collection, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if an element was removed as a result of this call            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>remove</tt> operation is not supported by this collection            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the type of the specified element is incompatible with this collection (<a href="#optional-restrictions">optional</a>)               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this collection does not permit null elements (<a href="#optional-restrictions">optional</a>)                 </dd>    </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:containsAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:containsAll-java.util.Collection-"/><a name="containsAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>containsAll</h4><pre>public boolean containsAll(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;?&gt; c)</pre><div class="block">Returns <tt>true</tt> if this collection contains all of the elements in the specified collection.<p>This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection. If all elements are so contained <tt>true</tt> is returned, otherwise <tt>false</tt>.                                  </p>             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#containsAll-java.util.Collection-">containsAll</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - collection to be checked for containment in this collection           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection contains all of the elements in the specified collection             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the types of one or more elements in the specified collection are incompatible with this collection (<a href="#optional-restrictions">optional</a>)                    </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection contains one or more null elements and this collection does not permit null elements (<a href="#optional-restrictions">optional</a>), or if the specified collection is null.                            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/AbstractCollection.html#contains-java.lang.Object-"><code>contains(Object)</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:containsAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addAll-java.util.Collection-"/><a name="addAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>addAll</h4><pre>public boolean addAll(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt; c)</pre><div class="block">Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.)<p>This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn.                   </p><p>Note that this implementation will throw an <tt>UnsupportedOperationException</tt> unless <tt>add</tt> is overridden (assuming the specified collection is non-empty).                 </p>                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#addAll-java.util.Collection-">addAll</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - collection containing elements to be added to this collection           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>addAll</tt> operation is not supported by this collection            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the class of an element of the specified collection prevents it from being added to this collection                    </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection contains a null element and this collection does not permit null elements, or if the specified collection is null                         </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of an element of the specified collection prevents it from being added to this collection                    </dd><dd> <code><a href="../../java/lang/IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if not all the elements can be added at this time due to insertion restrictions                 </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/AbstractCollection.html#add-E-"><code>add(Object)</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:addAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:removeAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:removeAll-java.util.Collection-"/><a name="removeAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>removeAll</h4><pre>public boolean removeAll(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;?&gt; c)</pre><div class="block">Removes all of this collection's elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection.<p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection. If it's so contained, it's removed from this collection with the iterator's <tt>remove</tt> method.                                     </p><p>Note that this implementation will throw an <tt>UnsupportedOperationException</tt> if the iterator returned by the <tt>iterator</tt> method does not implement the <tt>remove</tt> method and this collection contains one or more elements in common with the specified collection.                                   </p>                               </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#removeAll-java.util.Collection-">removeAll</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - collection containing elements to be removed from this collection           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>removeAll</tt> method is not supported by this collection            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the types of one or more elements in this collection are incompatible with the specified collection (<a href="#optional-restrictions">optional</a>)                    </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if this collection contains one or more null elements and the specified collection does not support null elements (<a href="#optional-restrictions">optional</a>), or if the specified collection is null                            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/AbstractCollection.html#remove-java.lang.Object-"><code>remove(Object)</code></a>, <a href="../../java/util/AbstractCollection.html#contains-java.lang.Object-"><code>contains(Object)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:removeAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:retainAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:retainAll-java.util.Collection-"/><a name="retainAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>retainAll</h4><pre>public boolean retainAll(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;?&gt; c)</pre><div class="block">Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection.<p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection. If it's not so contained, it's removed from this collection with the iterator's <tt>remove</tt> method.                                      </p><p>Note that this implementation will throw an <tt>UnsupportedOperationException</tt> if the iterator returned by the <tt>iterator</tt> method does not implement the <tt>remove</tt> method and this collection contains one or more elements not present in the specified collection.                                   </p>                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#retainAll-java.util.Collection-">retainAll</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - collection containing elements to be retained in this collection           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if this collection changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>retainAll</tt> operation is not supported by this collection            </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the types of one or more elements in this collection are incompatible with the specified collection (<a href="#optional-restrictions">optional</a>)                    </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if this collection contains one or more null elements and the specified collection does not permit null elements (<a href="#optional-restrictions">optional</a>), or if the specified collection is null                            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/AbstractCollection.html#remove-java.lang.Object-"><code>remove(Object)</code></a>, <a href="../../java/util/AbstractCollection.html#contains-java.lang.Object-"><code>contains(Object)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:retainAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Removes all of the elements from this collection (optional operation). The collection will be empty after this method returns.<p>This implementation iterates over this collection, removing each element using the <tt>Iterator.remove</tt> operation. Most implementations will probably choose to override this method for efficiency.                       </p><p>Note that this implementation will throw an <tt>UnsupportedOperationException</tt> if the iterator returned by this collection's <tt>iterator</tt> method does not implement the <tt>remove</tt> method and this collection is non-empty.                           </p>                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#clear--">clear</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/AbstractCollection.html" title="type parameter in AbstractCollection">E</a>&gt;</code>  </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the <tt>clear</tt> operation is not supported by this collection            </dd>  </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockListLast"><li class="blockList"><h4>toString</h4><pre>public <a href="../../java/lang/String.html" title="class in java.lang">String</a> toString()</pre><div class="block">Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (<tt>"[]"</tt>). Adjacent elements are separated by the characters <tt>", " </tt> (comma and space). Elements are converted to strings as by <a href="../../java/lang/String.html#valueOf-java.lang.Object-"><code>String.valueOf(Object)</code></a>.                                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a string representation of this collection     </dd>  </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table></diff></diffreport>