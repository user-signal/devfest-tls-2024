<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Locale [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Locale"/><ul class="blockList"><li class="blockList"><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>  </dd> </dl> <hr/> <br/><pre>public final class <span class="typeNameLabel">Locale</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>
implements <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">A <code>Locale</code> object represents a specific geographical, political, or cultural region. An operation that requires a <code>Locale</code> to perform its task is called <em>locale-sensitive</em> and uses the <code>Locale</code> to tailor information for the user. For example, displaying a number is a locale-sensitive operationâ€” the number should be formatted according to the customs and conventions of the user's native country, region, or culture.<p> The <code>Locale</code> class implements IETF BCP 47 which is composed of <a href="http://tools.ietf.org/html/rfc4647">RFC 4647 "Matching of Language Tags"     </a> and <a href="http://tools.ietf.org/html/rfc5646">RFC 5646 "Tags for Identifying Languages"     </a> with support for the LDML (UTS#35, "Unicode Locale Data Markup Language") BCP 47-compatible extensions for locale data exchange.                                </p><p> A <code>Locale</code> object logically consists of the fields described below.<dl> <dt> <a name="def_language"><b>language</b></a>   </dt><dd>ISO 639 alpha-2 or alpha-3 language code, or registered language subtags up to 8 alpha letters (for future enhancements). When a language has both an alpha-2 code and an alpha-3 code, the alpha-2 code must be used. You can find a full list of valid language codes in the IANA Language Subtag Registry (search for "Type: language"). The language field is case insensitive, but <code>Locale</code> always canonicalizes to lower case.                                                                     </dd><dd>Well-formed language values have the form <code>[a-zA-Z]{2,8}</code>. Note that this is not the the full BCP47 language production, since it excludes extlang. They are not needed since modern three-letter language codes replace them.                                </dd><dd>Example: "en" (English), "ja" (Japanese), "kok" (Konkani)      </dd> <dt> <a name="def_script"><b>script</b></a>   </dt><dd>ISO 15924 alpha-4 script code. You can find a full list of valid script codes in the IANA Language Subtag Registry (search for "Type: script"). The script field is case insensitive, but <code>Locale</code> always canonicalizes to title case (the first letter is upper case and the rest of the letters are lower case).                                                    </dd><dd>Well-formed script values have the form <code>[a-zA-Z]{4}</code>      </dd><dd>Example: "Latn" (Latin), "Cyrl" (Cyrillic)    </dd> <dt> <a name="def_region"><b>country (region) </b></a>   </dt><dd>ISO 3166 alpha-2 country code or UN M.49 numeric-3 area code. You can find a full list of valid country and region codes in the IANA Language Subtag Registry (search for "Type: region"). The country (region) field is case insensitive, but <code>Locale</code> always canonicalizes to upper case.                                              </dd><dd>Well-formed country/region values have the form <code>[a-zA-Z]{2} | [0-9]{3}  </code>      </dd><dd>Example: "US" (United States), "FR" (France), "029" (Caribbean)       </dd> <dt> <a name="def_variant"><b>variant</b></a>   </dt><dd>Any arbitrary value used to indicate a variation of a <code>Locale</code>. Where there are two or more variant values each indicating its own semantics, these values should be ordered by importance, with most important first, separated by underscore('_'). The variant field is case sensitive.                                           </dd><dd>Note: IETF BCP 47 places syntactic restrictions on variant subtags. Also BCP 47 subtags are strictly used to indicate additional variations that define a language or its dialects that are not covered by any combinations of language, script and region subtags. You can find a full list of valid variant codes in the IANA Language Subtag Registry (search for "Type: variant").                                                            </dd>    </dl>          </p><p>However, the variant field in <code>Locale</code> has historically been used for any kind of variation, not just language variations. For example, some supported variants available in Java SE Runtime Environments indicate alternative cultural behaviors such as calendar type or number script. In BCP 47 this kind of information, which does not identify the language, is supported by extension subtags or private use subtags.<dl><dd>Well-formed variant values have the form <code>SUBTAG (('_'|'-') SUBTAG)*  </code> where <code>SUBTAG = [0-9][0-9a-zA-Z]{3} | [0-9a-zA-Z]{5,8}    </code>. (Note: BCP 47 only uses hyphen ('-') as a delimiter, this is more lenient).                      </dd><dd>Example: "polyton" (Polytonic Greek), "POSIX"    </dd> <dt> <a name="def_extensions"><b>extensions</b></a>   </dt><dd>A map from single character keys to string values, indicating extensions apart from language identification. The extensions in <code>Locale</code> implement the semantics and syntax of BCP 47 extension subtags and private use subtags. The extensions are case insensitive, but <code>Locale</code> canonicalizes all extension keys and values to lower case. Note that extensions cannot have empty values.                                                       </dd><dd>Well-formed keys are single characters from the set <code>[0-9a-zA-Z]</code>. Well-formed values have the form <code>SUBTAG ('-' SUBTAG)*  </code> where for the key 'x' <code>SUBTAG = [0-9a-zA-Z]{1,8}  </code> and for other keys <code>SUBTAG = [0-9a-zA-Z]{2,8}  </code> (that is, 'x' allows single-character subtags).                               </dd><dd>Example: key="u"/value="ca-japanese" (Japanese Calendar), key="x"/value="java-1-7"    </dd> </dl> <b>Note:</b> Although BCP 47 requires field values to be registered in the IANA Language Subtag Registry, the <code>Locale</code> class does not provide any validation features. The <code>Builder</code> only checks if an individual field satisfies the syntactic requirement (is well-formed), but does not validate the value itself. See <a href="../../java/util/Locale.Builder.html" title="class in java.util"><code>Locale.Builder</code></a> for details.                                                                                                                </p><h3> <a name="def_locale_extension">Unicode locale/language extension  </a> </h3><p>UTS#35, "Unicode Locale Data Markup Language" defines optional attributes and keywords to override or refine the default behavior associated with a locale. A keyword is represented by a pair of key and type. For example, "nu-thai" indicates that Thai local digits (value:"thai") should be used for formatting numbers (key:"nu").                                                </p><p>The keywords are mapped to a BCP 47 extension value using the extension key 'u' (<a href="../../java/util/Locale.html#UNICODE_LOCALE_EXTENSION"><code>UNICODE_LOCALE_EXTENSION</code></a>). The above example, "nu-thai", becomes the extension "u-nu-thai".code                       </p><p>Thus, when a <code>Locale</code> object contains Unicode locale attributes and keywords, <code>getExtension(UNICODE_LOCALE_EXTENSION)</code> will return a String representing this information, for example, "nu-thai". The <code>Locale</code> class also provides <a href="../../java/util/Locale.html#getUnicodeLocaleAttributes--"><code>getUnicodeLocaleAttributes()</code></a>, <a href="../../java/util/Locale.html#getUnicodeLocaleKeys--"><code>getUnicodeLocaleKeys()</code></a>, and <a href="../../java/util/Locale.html#getUnicodeLocaleType-java.lang.String-"><code>getUnicodeLocaleType(java.lang.String)</code></a> which allow you to access Unicode locale attributes and key/type pairs directly. When represented as a string, the Unicode Locale Extension lists attributes alphabetically, followed by key/type sequences with keys listed alphabetically (the order of subtags comprising a key's type is fixed when the type is defined)                                                                             </p><p>A well-formed locale key has the form <code>[0-9a-zA-Z]{2}</code>. A well-formed locale type has the form <code>"" | [0-9a-zA-Z]{3,8} ('-' [0-9a-zA-Z]{3,8})*    </code> (it can be empty, or a series of subtags 3-8 alphanums in length). A well-formed locale attribute has the form <code>[0-9a-zA-Z]{3,8}</code> (it is a single subtag with the same form as a locale type subtag).                                                  </p><p>The Unicode locale extension specifies optional behavior in locale-sensitive services. Although the LDML specification defines various keys and values, actual locale-sensitive service implementations in a Java Runtime Environment might not support any particular Unicode locale attributes or key/type pairs.                                      </p><h4>Creating a Locale  </h4><p>There are several different ways to create a <code>Locale</code> object.         </p><h5>Builder</h5><p>Using <a href="../../java/util/Locale.Builder.html" title="class in java.util"><code>Locale.Builder</code></a> you can construct a <code>Locale</code> object that conforms to BCP 47 syntax.             </p><h5>Constructors</h5><p>The <code>Locale</code> class provides three constructors:     </p><blockquote><pre>
     
<a href="../../java/util/Locale.html#Locale-java.lang.String-"><code>Locale(String language)</code></a>
     <a href="../../java/util/Locale.html#Locale-java.lang.String-java.lang.String-"><code>Locale(String language, String country)</code></a>
     <a href="../../java/util/Locale.html#Locale-java.lang.String-java.lang.String-java.lang.String-"><code>Locale(String language, String country, String variant)</code></a>
 
</pre></blockquote> These constructors allow you to create a <code>Locale</code> object with language, country and variant, but you cannot specify script or extensions.<h5>Factory Methods </h5><p>The method <a href="../../java/util/Locale.html#forLanguageTag-java.lang.String-"><code>forLanguageTag(java.lang.String)</code></a> creates a <code>Locale</code> object for a well-formed BCP 47 language tag.             </p><h5>Locale Constants </h5><p>The <code>Locale</code> class provides a number of convenient constants that you can use to create <code>Locale</code> objects for commonly used locales. For example, the following creates a <code>Locale</code> object for the United States:                                </p><blockquote><pre>
     Locale.US
 </pre></blockquote><h4> <a name="LocaleMatching">Locale Matching </a> </h4><p>If an application or a system is internationalized and provides localized resources for multiple locales, it sometimes needs to find one or more locales (or language tags) which meet each user's specific preferences. Note that a term "language tag" is used interchangeably with "locale" in this locale matching documentation.                                                </p><p>In order to do matching a user's preferred locales to a set of language tags, <a href="http://tools.ietf.org/html/rfc4647">RFC 4647 Matching of Language Tags     </a> defines two mechanisms: filtering and lookup. <em>Filtering</em> is used to get all matching locales, whereas <em>lookup</em> is to choose the best matching locale. Matching is done case-insensitively. These matching mechanisms are described in the following sections.                                                   </p><p>A user's preference is called a <em>Language Priority List  </em> and is expressed as a list of language ranges. There are syntactically two types of language ranges: basic and extended. See <a href="../../java/util/Locale.LanguageRange.html" title="class in java.util"><code>Locale.LanguageRange</code></a> for details.                              </p><h5>Filtering</h5><p>The filtering operation returns all matching language tags. It is defined in RFC 4647 as follows: "In filtering, each language range represents the least specific language tag (that is, the language tag with fewest number of subtags) that is an acceptable match. All of the language tags in the matching set of tags will have an equal or greater number of subtags than the language range. Every non-wildcard subtag in the language range will appear in every one of the matching language tags."                                                                                  </p><p>There are two types of filtering: filtering for basic language ranges (called "basic filtering") and filtering for extended language ranges (called "extended filtering"). They may return different results by what kind of language ranges are included in the given Language Priority List. <a href="../../java/util/Locale.FilteringMode.html" title="enum in java.util"><code>Locale.FilteringMode</code></a> is a parameter to specify how filtering should be done.                                                    </p><h5>Lookup</h5><p>The lookup operation returns the best matching language tags. It is defined in RFC 4647 as follows: "By contrast with filtering, each language range represents the most specific tag that is an acceptable match. The first matching tag found, according to the user's priority, is considered the closest match and is the item returned."                                                     </p><p>For example, if a Language Priority List consists of two language ranges, <code>"zh-Hant-TW"</code> and <code>"en-US"</code>, in prioritized order, lookup method progressively searches the language tags below in order to find the best matching language tag.                                  </p><blockquote><pre>
    1. zh-Hant-TW
    2. zh-Hant
    3. zh
    4. en-US
    5. en
 </pre></blockquote> If there is a language tag which matches completely to a language range above, the language tag is returned.<p> <code>"*"</code> is the special language range, and it is ignored in lookup.            </p><p>If multiple language tags match as a result of the subtag <code>'*'</code> included in a language range, the first matching language tag returned by an <a href="../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a> over a <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a> of language tags is treated as the best matching one.                                      </p><h4>Use of Locale  </h4><p>Once you've created a <code>Locale</code> you can query it for information about itself. Use <code>getCountry</code> to get the country (or region) code and <code>getLanguage</code> to get the language code. You can use <code>getDisplayCountry</code> to get the name of the country suitable for displaying to the user. Similarly, you can use <code>getDisplayLanguage</code> to get the name of the language suitable for displaying to the user. Interestingly, the <code>getDisplayXXX</code> methods are themselves locale-sensitive and have two versions: one that uses the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale and one that uses the locale specified as an argument.                                                                                           </p><p>The Java Platform provides a number of classes that perform locale-sensitive operations. For example, the <code>NumberFormat</code> class formats numbers, currency, and percentages in a locale-sensitive manner. Classes such as <code>NumberFormat</code> have several convenience methods for creating a default object of that type. For example, the <code>NumberFormat</code> class provides these three convenience methods for creating a default <code>NumberFormat</code> object:                                                         </p><blockquote><pre>
     NumberFormat.getInstance()
     NumberFormat.getCurrencyInstance()
     NumberFormat.getPercentInstance()
 </pre></blockquote> Each of these methods has two variants; one with an explicit locale and one without; the latter uses the default <a href="../../java/util/Locale.Category.html#FORMAT"><code>FORMAT</code></a> locale:<blockquote><pre>
     NumberFormat.getInstance(myLocale)
     NumberFormat.getCurrencyInstance(myLocale)
     NumberFormat.getPercentInstance(myLocale)
 </pre></blockquote> A <code>Locale</code> is the mechanism for identifying the kind of object (<code>NumberFormat</code>) that you would like to get. The locale is <strong>just</strong> a mechanism for identifying objects, <strong>not</strong> a container for the objects themselves.<h4>Compatibility</h4><p>In order to maintain compatibility with existing usage, Locale's constructors retain their behavior prior to the Java Runtime Environment version 1.7. The same is largely true for the <code>toString</code> method. Thus Locale objects can continue to be used as they were. In particular, clients who parse the output of toString into language, country, and variant fields can continue to do so (although this is strongly discouraged), although the variant field will have additional information in it if script or extensions are present.                                                                                 </p><p>In addition, BCP 47 imposes syntax restrictions that are not imposed by Locale's constructors. This means that conversions between some Locales and BCP 47 language tags cannot be made without losing information. Thus <code>toLanguageTag</code> cannot represent the state of locales whose language, country, or variant do not conform to BCP 47.                                                  </p><p>Because of these issues, it is recommended that clients migrate away from constructing non-conforming locales and use the <code>forLanguageTag</code> and <code>Locale.Builder</code> APIs instead. Clients desiring a string representation of the complete locale can then always rely on <code>toLanguageTag</code> for this purpose.                                        </p><h5> <a name="special_cases_constructor">Special cases </a> </h5><p>For compatibility reasons, two non-conforming locales are treated as special cases. These are <b><tt>ja_JP_JP</tt></b> and <b><tt>th_TH_TH</tt></b>. These are ill-formed in BCP 47 since the variants are too short. To ease migration to BCP 47, these are treated specially during construction. These two cases (and only these) cause a constructor to generate an extension, all other values behave exactly as they did prior to Java 7.                                                                </p><p>Java has used <tt>ja_JP_JP</tt> to represent Japanese as used in Japan together with the Japanese Imperial calendar. This is now representable using a Unicode locale extension, by specifying the Unicode locale key <tt>ca</tt> (for "calendar") and type <tt>japanese</tt>. When the Locale constructor is called with the arguments "ja", "JP", "JP", the extension "u-ca-japanese" is automatically added.                                                       </p><p>Java has used <tt>th_TH_TH</tt> to represent Thai as used in Thailand together with Thai digits. This is also now representable using a Unicode locale extension, by specifying the Unicode locale key <tt>nu</tt> (for "number") and value <tt>thai</tt>. When the Locale constructor is called with the arguments "th", "TH", "TH", the extension "u-nu-thai" is automatically added.                                                      </p><h5>Serialization</h5><p>During serialization, writeObject writes all fields to the output stream, including extensions.           </p><p>During deserialization, readResolve adds extensions as described in <a href="#special_cases_constructor">Special Cases </a>, only for the two cases th_TH_TH and ja_JP_JP.                </p><h5>Legacy language codes  </h5><p>Locale's constructor has always converted three language codes to their earlier, obsoleted forms: <tt>he</tt> maps to <tt>iw</tt>, <tt>yi</tt> maps to <tt>ji</tt>, and <tt>id</tt> maps to <tt>in</tt>. This continues to be the case, in order to not break backwards compatibility.                                      </p><p>The APIs added in 1.7 map between the old and new language codes, maintaining the old codes internal to Locale (so that <code>getLanguage</code> and <code>toString</code> reflect the old code), but using the new codes in the BCP 47 language tag APIs (so that <code>toLanguageTag</code> reflects the new one). This preserves the equivalence between Locales no matter which code or API is used to construct them. Java's default resource bundle lookup mechanism also implements this mapping, so that resources can be named using either convention, see <a href="../../java/util/ResourceBundle.Control.html" title="class in java.util"><code>ResourceBundle.Control</code></a>.                                                                                     </p><h5>Three-letter language/country(region) codes  </h5><p>The Locale constructors have always specified that the language and the country param be two characters in length, although in practice they have accepted any length. The specification has now been relaxed to allow language codes of two to eight characters and country (region) codes of two to three characters, and in particular, three-letter language codes and three-digit region codes as specified in the IANA Language Subtag Registry. For compatibility, the implementation still does not impose a length constraint.                                                                              </p>                                                                                                                                                             </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.1</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.Builder.html" title="class in java.util"><code>Locale.Builder</code></a>, <a href="../../java/util/ResourceBundle.html" title="class in java.util"><code>ResourceBundle</code></a>, <a href="../../java/text/Format.html" title="class in java.text"><code>Format</code></a>, <a href="../../java/text/NumberFormat.html" title="class in java.text"><code>NumberFormat</code></a>, <a href="../../java/text/Collator.html" title="class in java.text"><code>Collator</code></a>, <a href="../../serialized-form.html#java.util.Locale">Serialized Form </a>      </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Locale"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:ENGLISH [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:ENGLISH"/><a name="ENGLISH"/><ul class="blockList"><li class="blockList"><h4>ENGLISH</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> ENGLISH</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:ENGLISH"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FRENCH [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FRENCH"/><a name="FRENCH"/><ul class="blockList"><li class="blockList"><h4>FRENCH</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> FRENCH</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:FRENCH"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:GERMAN [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:GERMAN"/><a name="GERMAN"/><ul class="blockList"><li class="blockList"><h4>GERMAN</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> GERMAN</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:GERMAN"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:ITALIAN [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:ITALIAN"/><a name="ITALIAN"/><ul class="blockList"><li class="blockList"><h4>ITALIAN</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> ITALIAN</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:ITALIAN"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:JAPANESE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:JAPANESE"/><a name="JAPANESE"/><ul class="blockList"><li class="blockList"><h4>JAPANESE</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> JAPANESE</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:JAPANESE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:KOREAN [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:KOREAN"/><a name="KOREAN"/><ul class="blockList"><li class="blockList"><h4>KOREAN</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> KOREAN</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:KOREAN"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CHINESE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CHINESE"/><a name="CHINESE"/><ul class="blockList"><li class="blockList"><h4>CHINESE</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> CHINESE</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:CHINESE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:SIMPLIFIED_CHINESE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:SIMPLIFIED_CHINESE"/><a name="SIMPLIFIED_CHINESE"/><ul class="blockList"><li class="blockList"><h4>SIMPLIFIED_CHINESE</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> SIMPLIFIED_CHINESE</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:SIMPLIFIED_CHINESE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TRADITIONAL_CHINESE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TRADITIONAL_CHINESE"/><a name="TRADITIONAL_CHINESE"/><ul class="blockList"><li class="blockList"><h4>TRADITIONAL_CHINESE</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> TRADITIONAL_CHINESE</pre><div class="block">Useful constant for language.   </div></li></ul> <a end_ctx_id="field:TRADITIONAL_CHINESE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:FRANCE [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:FRANCE"/><a name="FRANCE"/><ul class="blockList"><li class="blockList"><h4>FRANCE</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> FRANCE</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:FRANCE"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:GERMANY [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:GERMANY"/><a name="GERMANY"/><ul class="blockList"><li class="blockList"><h4>GERMANY</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> GERMANY</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:GERMANY"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:ITALY [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:ITALY"/><a name="ITALY"/><ul class="blockList"><li class="blockList"><h4>ITALY</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> ITALY</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:ITALY"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:JAPAN [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:JAPAN"/><a name="JAPAN"/><ul class="blockList"><li class="blockList"><h4>JAPAN</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> JAPAN</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:JAPAN"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:KOREA [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:KOREA"/><a name="KOREA"/><ul class="blockList"><li class="blockList"><h4>KOREA</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> KOREA</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:KOREA"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CHINA [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CHINA"/><a name="CHINA"/><ul class="blockList"><li class="blockList"><h4>CHINA</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> CHINA</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:CHINA"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:PRC [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:PRC"/><a name="PRC"/><ul class="blockList"><li class="blockList"><h4>PRC</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> PRC</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:PRC"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:TAIWAN [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:TAIWAN"/><a name="TAIWAN"/><ul class="blockList"><li class="blockList"><h4>TAIWAN</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> TAIWAN</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:TAIWAN"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:UK [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:UK"/><a name="UK"/><ul class="blockList"><li class="blockList"><h4>UK</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> UK</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:UK"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:US [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:US"/><a name="US"/><ul class="blockList"><li class="blockList"><h4>US</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> US</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:US"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CANADA [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CANADA"/><a name="CANADA"/><ul class="blockList"><li class="blockList"><h4>CANADA</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> CANADA</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:CANADA"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:CANADA_FRENCH [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:CANADA_FRENCH"/><a name="CANADA_FRENCH"/><ul class="blockList"><li class="blockList"><h4>CANADA_FRENCH</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> CANADA_FRENCH</pre><div class="block">Useful constant for country.   </div></li></ul> <a end_ctx_id="field:CANADA_FRENCH"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:ROOT [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:ROOT"/><a name="ROOT"/><ul class="blockList"><li class="blockList"><h4>ROOT</h4><pre>public static finalÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a> ROOT</pre><div class="block">Useful constant for the root locale. The root locale is the locale whose language, country, and variant are empty ("") strings. This is regarded as the base locale of all locales, and is used as the language/country neutral locale for the locale sensitive operations.                                           </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd> </dl></li></ul> <a end_ctx_id="field:ROOT"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:PRIVATE_USE_EXTENSION [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:PRIVATE_USE_EXTENSION"/><a name="PRIVATE_USE_EXTENSION"/><ul class="blockList"><li class="blockList"><h4>PRIVATE_USE_EXTENSION</h4><pre>public static finalÂ char PRIVATE_USE_EXTENSION</pre><div class="block">The key for the private use extension ('x').       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getExtension-char-"><code>getExtension(char)</code></a>, <a href="../../java/util/Locale.Builder.html#setExtension-char-java.lang.String-"><code>Locale.Builder.setExtension(char, String) </code></a>, <a href="../../constant-values.html#java.util.Locale.PRIVATE_USE_EXTENSION">Constant Field Values  </a>   </dd>  </dl></li></ul> <a end_ctx_id="field:PRIVATE_USE_EXTENSION"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:UNICODE_LOCALE_EXTENSION [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:UNICODE_LOCALE_EXTENSION"/><a name="UNICODE_LOCALE_EXTENSION"/><ul class="blockListLast"><li class="blockList"><h4>UNICODE_LOCALE_EXTENSION</h4><pre>public static finalÂ char UNICODE_LOCALE_EXTENSION</pre><div class="block">The key for Unicode locale extension ('u').      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getExtension-char-"><code>getExtension(char)</code></a>, <a href="../../java/util/Locale.Builder.html#setExtension-char-java.lang.String-"><code>Locale.Builder.setExtension(char, String) </code></a>, <a href="../../constant-values.html#java.util.Locale.UNICODE_LOCALE_EXTENSION">Constant Field Values  </a>   </dd>  </dl></li></ul> <a end_ctx_id="field:UNICODE_LOCALE_EXTENSION"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Locale-java.lang.String-java.lang.String-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Locale-java.lang.String-java.lang.String-java.lang.String-"/><a name="Locale-java.lang.String-java.lang.String-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Locale</h4><pre>publicÂ Locale(<a href="../../java/lang/String.html" title="class in java.lang">String</a>Â language,
              <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â country,
              <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â variant)</pre><div class="block">Construct a locale from language, country and variant. This constructor normalizes the language value to lowercase and the country value to uppercase.<p> <b>Note:</b><ul><li>ISO 639 is not a stable standard; some of the language codes it defines (specifically "iw", "ji", and "in") have changed. This constructor accepts both the old codes ("iw", "ji", and "in") and the new codes ("he", "yi", and "id"), but all other API on Locale will return only the OLD codes.                                                   </li><li>For backward compatibility reasons, this constructor does not make any syntactic checks on the input.              </li><li>The two cases ("ja", "JP", "JP") and ("th", "TH", "TH") are handled specially, see <a href="#special_cases_constructor">Special Cases </a> for more information.                 </li></ul> </p>                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>language</code> - An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the <code>Locale</code> class description about valid language values.                             </dd><dd> <code>country</code> - An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the <code>Locale</code> class description about valid country values.                        </dd><dd> <code>variant</code> - Any arbitrary value used to indicate a variation of a <code>Locale</code>. See the <code>Locale</code> class description for the details.                     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - thrown if any argument is null.        </dd>  </dl></li></ul> <a end_ctx_id="constructor:Locale-java.lang.String-java.lang.String-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Locale-java.lang.String-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Locale-java.lang.String-java.lang.String-"/><a name="Locale-java.lang.String-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>Locale</h4><pre>publicÂ Locale(<a href="../../java/lang/String.html" title="class in java.lang">String</a>Â language,
              <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â country)</pre><div class="block">Construct a locale from language and country. This constructor normalizes the language value to lowercase and the country value to uppercase.<p> <b>Note:</b><ul><li>ISO 639 is not a stable standard; some of the language codes it defines (specifically "iw", "ji", and "in") have changed. This constructor accepts both the old codes ("iw", "ji", and "in") and the new codes ("he", "yi", and "id"), but all other API on Locale will return only the OLD codes.                                                   </li><li>For backward compatibility reasons, this constructor does not make any syntactic checks on the input.              </li></ul> </p>                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>language</code> - An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the <code>Locale</code> class description about valid language values.                             </dd><dd> <code>country</code> - An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the <code>Locale</code> class description about valid country values.                        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - thrown if either argument is null.        </dd>  </dl></li></ul> <a end_ctx_id="constructor:Locale-java.lang.String-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:Locale-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:Locale-java.lang.String-"/><a name="Locale-java.lang.String-"/><ul class="blockListLast"><li class="blockList"><h4>Locale</h4><pre>publicÂ Locale(<a href="../../java/lang/String.html" title="class in java.lang">String</a>Â language)</pre><div class="block">Construct a locale from a language code. This constructor normalizes the language value to lowercase.<p> <b>Note:</b><ul><li>ISO 639 is not a stable standard; some of the language codes it defines (specifically "iw", "ji", and "in") have changed. This constructor accepts both the old codes ("iw", "ji", and "in") and the new codes ("he", "yi", and "id"), but all other API on Locale will return only the OLD codes.                                                   </li><li>For backward compatibility reasons, this constructor does not make any syntactic checks on the input.              </li></ul> </p>              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>language</code> - An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the <code>Locale</code> class description about valid language values.                             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - thrown if argument is null.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="constructor:Locale-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDefault-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDefault--"/><a name="getDefault--"/><ul class="blockList"><li class="blockList"><h4>getDefault</h4><pre>public staticÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â getDefault()</pre><div class="block">Gets the current value of the default locale for this instance of the Java Virtual Machine.<p> The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the <a href="../../java/util/Locale.html#setDefault-java.util.Locale-"><code>setDefault</code></a> method.                                    </p>               </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the default locale for this instance of the Java Virtual Machine          </dd> </dl></li></ul> <a end_ctx_id="method:getDefault--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDefault-java.util.Locale.Category- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDefault-java.util.Locale.Category-"/><a name="getDefault-java.util.Locale.Category-"/><ul class="blockList"><li class="blockList"><h4>getDefault</h4><pre>public staticÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â getDefault(<a href="../../java/util/Locale.Category.html" title="enum in java.util">Locale.Category</a>Â category)</pre><div class="block">Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine.<p> The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault(Locale.Category, Locale) method.                                     </p>                   </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>category</code> - - the specified category to get the default locale           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the default locale for the specified Category for this instance of the Java Virtual Machine              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - - if category is null       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#setDefault-java.util.Locale.Category-java.util.Locale-"><code>setDefault(Locale.Category, Locale) </code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:getDefault-java.util.Locale.Category-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setDefault-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setDefault-java.util.Locale-"/><a name="setDefault-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>setDefault</h4><pre>public staticÂ voidÂ setDefault(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â newLocale)</pre><div class="block">Sets the default locale for this instance of the Java Virtual Machine. This does not affect the host locale.<p> If there is a security manager, its <code>checkPermission</code> method is called with a <code>PropertyPermission("user.language", "write") </code> permission before the default locale is changed.                     </p><p> The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified.                            </p><p> Since changing the default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine.                                  </p><p> By setting the default locale with this method, all of the default locales for each Category are also set to the specified default locale.                        </p>                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>newLocale</code> - the new default locale      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - if a security manager exists and its <code>checkPermission</code> method doesn't allow the operation.               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>newLocale</code> is null      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>SecurityManager.checkPermission(java.security.Permission)</code></a>, <a href="../../java/util/PropertyPermission.html" title="class in java.util"><code>PropertyPermission</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:setDefault-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:setDefault-java.util.Locale.Category-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:setDefault-java.util.Locale.Category-java.util.Locale-"/><a name="setDefault-java.util.Locale.Category-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>setDefault</h4><pre>public staticÂ voidÂ setDefault(<a href="../../java/util/Locale.Category.html" title="enum in java.util">Locale.Category</a>Â category,
                              <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â newLocale)</pre><div class="block">Sets the default locale for the specified Category for this instance of the Java Virtual Machine. This does not affect the host locale.<p> If there is a security manager, its checkPermission method is called with a PropertyPermission("user.language", "write") permission before the default locale is changed.                      </p><p> The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified.                            </p><p> Since changing the default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine.                                  </p><p/>                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>category</code> - - the specified category to set the default locale           </dd><dd> <code>newLocale</code> - - the new default locale       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/SecurityException.html" title="class in java.lang">SecurityException</a></code> - - if a security manager exists and its checkPermission method doesn't allow the operation.                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - - if category and/or newLocale is null         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/SecurityManager.html#checkPermission-java.security.Permission-"><code>SecurityManager.checkPermission(java.security.Permission)</code></a>, <a href="../../java/util/PropertyPermission.html" title="class in java.util"><code>PropertyPermission</code></a>, <a href="../../java/util/Locale.html#getDefault-java.util.Locale.Category-"><code>getDefault(Locale.Category)</code></a>   </dd>    </dl></li></ul> <a end_ctx_id="method:setDefault-java.util.Locale.Category-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getAvailableLocales-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getAvailableLocales--"/><a name="getAvailableLocales--"/><ul class="blockList"><li class="blockList"><h4>getAvailableLocales</h4><pre>public staticÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>[]Â getAvailableLocales()</pre><div class="block">Returns an array of all installed locales. The returned array represents the union of locales supported by the Java runtime environment and by installed <a href="../../java/util/spi/LocaleServiceProvider.html" title="class in java.util.spi"><code>LocaleServiceProvider</code></a> implementations. It must contain at least a <code>Locale</code> instance equal to <a href="../../java/util/Locale.html#US"><code>Locale.US</code></a>.                                    </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An array of installed locales.    </dd> </dl></li></ul> <a end_ctx_id="method:getAvailableLocales--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getISOCountries-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getISOCountries--"/><a name="getISOCountries--"/><ul class="blockList"><li class="blockList"><h4>getISOCountries</h4><pre>public staticÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>[]Â getISOCountries()</pre><div class="block">Returns a list of all 2-letter country codes defined in ISO 3166. Can be used to create Locales.<p> <b>Note:</b> The <code>Locale</code> class also supports other codes for country (region), such as 3-letter numeric UN M.49 area codes. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.                                       </p>                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>An array of ISO 3166 two-letter country codes.       </dd> </dl></li></ul> <a end_ctx_id="method:getISOCountries--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getISOLanguages-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getISOLanguages--"/><a name="getISOLanguages--"/><ul class="blockList"><li class="blockList"><h4>getISOLanguages</h4><pre>public staticÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>[]Â getISOLanguages()</pre><div class="block">Returns a list of all 2-letter language codes defined in ISO 639. Can be used to create Locales.<p> <b>Note:</b><ul><li>ISO 639 is not a stable standardâ€” some languages' codes have changed. The list this function returns includes both the new and the old codes for the languages whose codes have changed.                               </li><li>The <code>Locale</code> class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.                                </li></ul> </p>                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>Am array of ISO 639 two-letter language codes.       </dd> </dl></li></ul> <a end_ctx_id="method:getISOLanguages--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getLanguage-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getLanguage--"/><a name="getLanguage--"/><ul class="blockList"><li class="blockList"><h4>getLanguage</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getLanguage()</pre><div class="block">Returns the language code of this Locale.<p> <b>Note:</b> ISO 639 is not a stable standardâ€” some languages' codes have changed. Locale's constructor recognizes both the new and the old codes for the languages whose codes have changed, but this function always returns the old code. If you want to check for a specific language whose code has changed, don't do<pre>
 if (locale.getLanguage().equals("he")) // BAD!
    ...
 </pre> Instead, do<pre>
 if (locale.getLanguage().equals(new Locale("he").getLanguage()))
    ...
 </pre>                                                       </p>      </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The language code, or the empty string if none is defined.          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getDisplayLanguage--"><code>getDisplayLanguage()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getLanguage--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getScript-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getScript--"/><a name="getScript--"/><ul class="blockList"><li class="blockList"><h4>getScript</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getScript()</pre><div class="block">Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code. The first letter is uppercase and the rest are lowercase, for example, 'Latn', 'Cyrl'.                                 </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The script code, or the empty string if none is defined.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getDisplayScript--"><code>getDisplayScript()</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:getScript--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getCountry-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getCountry--"/><a name="getCountry--"/><ul class="blockList"><li class="blockList"><h4>getCountry</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getCountry()</pre><div class="block">Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The country/region code, or the empty string if none is defined.          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getDisplayCountry--"><code>getDisplayCountry()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getCountry--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getVariant-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getVariant--"/><a name="getVariant--"/><ul class="blockList"><li class="blockList"><h4>getVariant</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getVariant()</pre><div class="block">Returns the variant code for this locale.      </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The variant code, or the empty string if none is defined.          </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getDisplayVariant--"><code>getDisplayVariant()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="method:getVariant--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hasExtensions-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hasExtensions--"/><a name="hasExtensions--"/><ul class="blockList"><li class="blockList"><h4>hasExtensions</h4><pre>publicÂ booleanÂ hasExtensions()</pre><div class="block">Returns <code>true</code> if this <code>Locale</code> has any <a href="#def_extensions"> extensions </a>.       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this <code>Locale</code> has any extensions       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:hasExtensions--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:stripExtensions-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:stripExtensions--"/><a name="stripExtensions--"/><ul class="blockList"><li class="blockList"><h4>stripExtensions</h4><pre>publicÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â stripExtensions()</pre><div class="block">Returns a copy of this <code>Locale</code> with no <a href="#def_extensions"> extensions </a>. If this <code>Locale</code> has no extensions, this <code>Locale</code> is returned.                  </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a copy of this <code>Locale</code> with no extensions, or <code>this</code> if <code>this</code> has no extensions              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>  </dl></li></ul> <a end_ctx_id="method:stripExtensions--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getExtension-char- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getExtension-char-"/><a name="getExtension-char-"/><ul class="blockList"><li class="blockList"><h4>getExtension</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getExtension(charÂ key)</pre><div class="block">Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key. To be well-formed, the key must be one of <code>[0-9A-Za-z]</code>. Keys are case-insensitive, so for example 'z' and 'Z' represent the same extension.                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the extension key     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The extension, or null if this locale defines no extension for the specified key.             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if key is not well-formed       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#PRIVATE_USE_EXTENSION"><code>PRIVATE_USE_EXTENSION</code></a>, <a href="../../java/util/Locale.html#UNICODE_LOCALE_EXTENSION"><code>UNICODE_LOCALE_EXTENSION</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:getExtension-char-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getExtensionKeys-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getExtensionKeys--"/><a name="getExtensionKeys--"/><ul class="blockList"><li class="blockList"><h4>getExtensionKeys</h4><pre>publicÂ <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/lang/Character.html" title="class in java.lang">Character</a>&gt;Â getExtensionKeys()</pre><div class="block">Returns the set of extension keys associated with this locale, or the empty set if it has no extensions. The returned set is unmodifiable. The keys will all be lower-case.                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The set of extension keys, or the empty set if this locale has no extensions.              </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:getExtensionKeys--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getUnicodeLocaleAttributes-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getUnicodeLocaleAttributes--"/><a name="getUnicodeLocaleAttributes--"/><ul class="blockList"><li class="blockList"><h4>getUnicodeLocaleAttributes</h4><pre>publicÂ <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â getUnicodeLocaleAttributes()</pre><div class="block">Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes. The returned set is unmodifiable.                        </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The set of attributes.   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:getUnicodeLocaleAttributes--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getUnicodeLocaleType-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getUnicodeLocaleType-java.lang.String-"/><a name="getUnicodeLocaleType-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>getUnicodeLocaleType</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getUnicodeLocaleType(<a href="../../java/lang/String.html" title="class in java.lang">String</a>Â key)</pre><div class="block">Returns the Unicode locale type associated with the specified Unicode locale key for this locale. Returns the empty string for keys that are defined with no type. Returns null if the key is not defined. Keys are case-insensitive. The key must be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is thrown.                                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the Unicode locale key      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The Unicode locale type associated with the key, or null if the locale does not define the key.                 </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the key is not well-formed        </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>key</code> is null      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>    </dl></li></ul> <a end_ctx_id="method:getUnicodeLocaleType-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getUnicodeLocaleKeys-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getUnicodeLocaleKeys--"/><a name="getUnicodeLocaleKeys--"/><ul class="blockList"><li class="blockList"><h4>getUnicodeLocaleKeys</h4><pre>publicÂ <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â getUnicodeLocaleKeys()</pre><div class="block">Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none. The returned set is immutable. Keys are all lower case.                             </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The set of Unicode locale keys, or the empty set if this locale has no Unicode locale keywords.                 </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:getUnicodeLocaleKeys--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toString-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toString--"/><a name="toString--"/><ul class="blockList"><li class="blockList"><h4>toString</h4><pre>public finalÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â toString()</pre><div class="block">Returns a string representation of this <code>Locale</code> object, consisting of language, country, variant, script, and extensions as below:<blockquote> language + "_" + country + "_" + (variant + "_#" | "#") + script + "-" + extensions                   </blockquote> Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case. Extensions and private use subtags will be in canonical order as explained in <a href="../../java/util/Locale.html#toLanguageTag--"><code>toLanguageTag()</code></a>.<p>When the locale has neither script nor extensions, the result is the same as in Java 6 and prior.                  </p><p>If both the language and country fields are missing, this function will return the empty string, even if the variant, script, or extensions field is present (you can't have a locale with just a variant, the variant must accompany a well-formed language or country code).                                            </p><p>If script or extensions are present and variant is missing, no underscore is added before the "#".                </p><p>This behavior is designed to support debugging and to be compatible with previous uses of <code>toString</code> that expected language, country, and variant fields only. To represent a Locale as a String for interchange purposes, use <a href="../../java/util/Locale.html#toLanguageTag--"><code>toLanguageTag()</code></a>.                                   </p><p>Examples:<ul><li> <tt>en</tt> </li><li> <tt>de_DE</tt> </li><li> <tt>_GB</tt> </li><li> <tt>en_US_WIN</tt> </li><li> <tt>de__POSIX</tt> </li><li> <tt>zh_CN_#Hans</tt> </li><li> <tt>zh_TW_#Hant-x-java</tt> </li><li> <tt>th_TH_TH_#u-nu-thai</tt> </li></ul></p>                                                    </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#toString--">toString</a></code>Â in classÂ <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A string representation of the Locale, for debugging.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#getDisplayName--"><code>getDisplayName()</code></a>, <a href="../../java/util/Locale.html#toLanguageTag--"><code>toLanguageTag()</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:toString--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:toLanguageTag-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:toLanguageTag--"/><a name="toLanguageTag--"/><ul class="blockList"><li class="blockList"><h4>toLanguageTag</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â toLanguageTag()</pre><div class="block">Returns a well-formed IETF BCP 47 language tag representing this locale.<p>If this <code>Locale</code> has a language, country, or variant that does not satisfy the IETF BCP 47 language tag syntax requirements, this method handles these fields as described below:                            </p><p> <b>Language:</b> If language is empty, or not <a href="#def_language">well-formed</a> (for example "a" or "e2"), it will be emitted as "und" (Undetermined).                    </p><p> <b>Country:</b> If country is not <a href="#def_region">well-formed</a> (for example "12" or "USA"), it will be omitted.               </p><p> <b>Variant:</b> If variant <b>is</b><a href="#def_variant">well-formed</a>, each sub-segment (delimited by '-' or '_') is emitted as a subtag. Otherwise:<ul><li>if all sub-segments match <code>[0-9a-zA-Z]{1,8}</code> (for example "WIN" or "Oracle_JDK_Standard_Edition"), the first ill-formed sub-segment and all following will be appended to the private use subtag. The first appended subtag will be "lvariant", followed by the sub-segments in order, separated by hyphen. For example, "x-lvariant-WIN", "Oracle-x-lvariant-JDK-Standard-Edition".                                            </li><li>if any sub-segment does not match <code>[0-9a-zA-Z]{1,8}</code>, the variant will be truncated and the problematic sub-segment and all following sub-segments will be omitted. If the remainder is non-empty, it will be emitted as a private use subtag as above (even if the remainder turns out to be well-formed). For example, "Solaris_isjustthecoolestthing" is emitted as "x-lvariant-Solaris", not as "solaris".                                                         </li></ul>                 </p><p> <b>Special Conversions: </b> Java supports some old locale representations, including deprecated ISO language codes, for compatibility. This method performs the following conversions:<ul><li>Deprecated ISO language codes "iw", "ji", and "in" are converted to "he", "yi", and "id", respectively.               </li><li>A locale with language "no", country "NO", and variant "NY", representing Norwegian Nynorsk (Norway), is converted to a language tag "nn-NO".                    </li></ul>                    </p><p> <b>Note:</b> Although the language tag created by this method is well-formed (satisfies the syntax requirements defined by the IETF BCP 47 specification), it is not necessarily a valid BCP 47 language tag. For example,<pre>
   new Locale("xx", "YY").toLanguageTag();</pre> will return "xx-YY", but the language subtag "xx" and the region subtag "YY" are invalid because they are not registered in the IANA Language Subtag Registry.                                                            </p>          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a BCP47 language tag representing the locale      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#forLanguageTag-java.lang.String-"><code>forLanguageTag(String)</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:toLanguageTag--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:forLanguageTag-java.lang.String- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:forLanguageTag-java.lang.String-"/><a name="forLanguageTag-java.lang.String-"/><ul class="blockList"><li class="blockList"><h4>forLanguageTag</h4><pre>public staticÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â forLanguageTag(<a href="../../java/lang/String.html" title="class in java.lang">String</a>Â languageTag)</pre><div class="block">Returns a locale for the specified IETF BCP 47 language tag string.<p>If the specified language tag contains any ill-formed subtags, the first such subtag and all following subtags are ignored. Compare to <a href="../../java/util/Locale.Builder.html#setLanguageTag-java.lang.String-"><code>Locale.Builder.setLanguageTag(java.lang.String)</code></a> which throws an exception in this case.                            </p><p>The following <b>conversions</b> are performed:<ul><li>The language code "und" is mapped to language "".        </li><li>The language codes "he", "yi", and "id" are mapped to "iw", "ji", and "in" respectively. (This is the same canonicalization that's done in Locale's constructors.)                        </li><li>The portion of a private use subtag prefixed by "lvariant", if any, is removed and appended to the variant field in the result locale (without case normalization). If it is then empty, the private use subtag is discarded:<pre>
     Locale loc;
     loc = Locale.forLanguageTag("en-US-x-lvariant-POSIX");
     loc.getVariant(); // returns "POSIX"
     loc.getExtension('x'); // returns null

     loc = Locale.forLanguageTag("de-POSIX-x-URP-lvariant-Abc-Def");
     loc.getVariant(); // returns "POSIX_Abc_Def"
     loc.getExtension('x'); // returns "urp"
 </pre>                                     </li><li>When the languageTag argument contains an extlang subtag, the first such subtag is used as the language, and the primary language subtag and other extlang subtags are ignored:<pre>
     Locale.forLanguageTag("ar-aao").getLanguage(); // returns "aao"
     Locale.forLanguageTag("en-abc-def-us").toString(); // returns "abc_US"
 </pre>                           </li><li>Case is normalized except for variant tags, which are left unchanged. Language is normalized to lower case, script to title case, country to upper case, and extensions to lower case.                             </li><li>If, after processing, the locale would exactly match either ja_JP_JP or th_TH_TH with no extensions, the appropriate extensions are added as though the constructor had been called:<pre>
    Locale.forLanguageTag("ja-JP-x-lvariant-JP").toLanguageTag();
    // returns "ja-JP-u-ca-japanese-x-lvariant-JP"
    Locale.forLanguageTag("th-TH-x-lvariant-TH").toLanguageTag();
    // returns "th-TH-u-nu-thai-x-lvariant-TH"
 </pre>                          </li></ul>    </p><p>This implements the 'Language-Tag' production of BCP47, and so supports grandfathered (regular and irregular) as well as private use language tags. Stand alone private use tags are represented as empty language and extension 'x-whatever', and grandfathered tags are converted to their canonical replacements where they exist.                                             </p><p>Grandfathered tags with canonical replacements are as follows:<table summary="Grandfathered tags with canonical replacements"><tbody align="center"><tr><th>grandfathered tag </th><th>Â </th><th>modern replacement </th></tr><tr><td>art-lojban</td><td>Â </td><td>jbo</td></tr><tr><td>i-ami</td><td>Â </td><td>ami</td></tr><tr><td>i-bnn</td><td>Â </td><td>bnn</td></tr><tr><td>i-hak</td><td>Â </td><td>hak</td></tr><tr><td>i-klingon</td><td>Â </td><td>tlh</td></tr><tr><td>i-lux</td><td>Â </td><td>lb</td></tr><tr><td>i-navajo</td><td>Â </td><td>nv</td></tr><tr><td>i-pwn</td><td>Â </td><td>pwn</td></tr><tr><td>i-tao</td><td>Â </td><td>tao</td></tr><tr><td>i-tay</td><td>Â </td><td>tay</td></tr><tr><td>i-tsu</td><td>Â </td><td>tsu</td></tr><tr><td>no-bok</td><td>Â </td><td>nb</td></tr><tr><td>no-nyn</td><td>Â </td><td>nn</td></tr><tr><td>sgn-BE-FR</td><td>Â </td><td>sfb</td></tr><tr><td>sgn-BE-NL</td><td>Â </td><td>vgt</td></tr><tr><td>sgn-CH-DE</td><td>Â </td><td>sgg</td></tr><tr><td>zh-guoyu</td><td>Â </td><td>cmn</td></tr><tr><td>zh-hakka</td><td>Â </td><td>hak</td></tr><tr><td>zh-min-nan</td><td>Â </td><td>nan</td></tr><tr><td>zh-xiang</td><td>Â </td><td>hsn</td></tr></tbody></table>       </p><p>Grandfathered tags with no modern replacement will be converted as follows:<table summary="Grandfathered tags with no modern replacement"><tbody align="center"><tr><th>grandfathered tag </th><th>Â </th><th>converts to </th></tr><tr><td>cel-gaulish</td><td>Â </td><td>xtg-x-cel-gaulish</td></tr><tr><td>en-GB-oed</td><td>Â </td><td>en-GB-x-oed</td></tr><tr><td>i-default</td><td>Â </td><td>en-x-i-default</td></tr><tr><td>i-enochian</td><td>Â </td><td>und-x-i-enochian</td></tr><tr><td>i-mingo</td><td>Â </td><td>see-x-i-mingo</td></tr><tr><td>zh-min</td><td>Â </td><td>nan-x-zh-min</td></tr></tbody></table>          </p><p>For a list of all grandfathered tags, see the IANA Language Subtag Registry (search for "Type: grandfathered").                </p><p> <b>Note</b>: there is no guarantee that <code>toLanguageTag</code> and <code>forLanguageTag</code> will round-trip.           </p>           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>languageTag</code> - the language tag     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The locale that best represents the language tag.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>languageTag</code> is <code>null</code>      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Locale.html#toLanguageTag--"><code>toLanguageTag()</code></a>, <a href="../../java/util/Locale.Builder.html#setLanguageTag-java.lang.String-"><code>Locale.Builder.setLanguageTag(String)</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:forLanguageTag-java.lang.String-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getISO3Language-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getISO3Language--"/><a name="getISO3Language--"/><ul class="blockList"><li class="blockList"><h4>getISO3Language</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getISO3Language()
                       throws <a href="../../java/util/MissingResourceException.html" title="class in java.util">MissingResourceException</a></pre><div class="block">Returns a three-letter abbreviation of this locale's language. If the language matches an ISO 639-1 two-letter code, the corresponding ISO 639-2/T three-letter lowercase code is returned. The ISO 639-2 language codes can be found on-line, see "Codes for the Representation of Names of Languages Part 2: Alpha-3 Code". If the locale specifies a three-letter language, the language is returned as is. If the locale does not specify a language the empty string is returned.                                                                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A three-letter abbreviation of this locale's language.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/MissingResourceException.html" title="class in java.util">MissingResourceException</a></code> - Throws MissingResourceException if three-letter language abbreviation is not available for this locale.              </dd>  </dl></li></ul> <a end_ctx_id="method:getISO3Language--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getISO3Country-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getISO3Country--"/><a name="getISO3Country--"/><ul class="blockList"><li class="blockList"><h4>getISO3Country</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getISO3Country()
                      throws <a href="../../java/util/MissingResourceException.html" title="class in java.util">MissingResourceException</a></pre><div class="block">Returns a three-letter abbreviation for this locale's country. If the country matches an ISO 3166-1 alpha-2 code, the corresponding ISO 3166-1 alpha-3 uppercase code is returned. If the locale doesn't specify a country, this will be the empty string.<p>The ISO 3166-1 codes can be found on-line.       </p>                                      </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A three-letter abbreviation of this locale's country.      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/MissingResourceException.html" title="class in java.util">MissingResourceException</a></code> - Throws MissingResourceException if the three-letter country abbreviation is not available for this locale.               </dd>  </dl></li></ul> <a end_ctx_id="method:getISO3Country--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayLanguage-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayLanguage--"/><a name="getDisplayLanguage--"/><ul class="blockList"><li class="blockList"><h4>getDisplayLanguage</h4><pre>public finalÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayLanguage()</pre><div class="block">Returns a name for the locale's language that is appropriate for display to the user. If possible, the name returned will be localized for the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale. For example, if the locale is fr_FR and the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale is en_US, getDisplayLanguage() will return "French"; if the locale is en_US and the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale is fr_FR, getDisplayLanguage() will return "anglais". If the name returned cannot be localized for the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale, (say, we don't have a Japanese name for Croatian), this function falls back on the English name, and uses the ISO code as a last-resort value. If the locale doesn't specify a language, this function returns the empty string.                                                                                                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the display language.     </dd> </dl></li></ul> <a end_ctx_id="method:getDisplayLanguage--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayLanguage-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayLanguage-java.util.Locale-"/><a name="getDisplayLanguage-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getDisplayLanguage</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayLanguage(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â inLocale)</pre><div class="block">Returns a name for the locale's language that is appropriate for display to the user. If possible, the name returned will be localized according to inLocale. For example, if the locale is fr_FR and inLocale is en_US, getDisplayLanguage() will return "French"; if the locale is en_US and inLocale is fr_FR, getDisplayLanguage() will return "anglais". If the name returned cannot be localized according to inLocale, (say, we don't have a Japanese name for Croatian), this function falls back on the English name, and finally on the ISO code as a last-resort value. If the locale doesn't specify a language, this function returns the empty string.                                                                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>inLocale</code> - The locale for which to retrieve the display language.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the display language appropriate to the given locale.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>inLocale</code> is <code>null</code>      </dd>   </dl></li></ul> <a end_ctx_id="method:getDisplayLanguage-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayScript-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayScript--"/><a name="getDisplayScript--"/><ul class="blockList"><li class="blockList"><h4>getDisplayScript</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayScript()</pre><div class="block">Returns a name for the the locale's script that is appropriate for display to the user. If possible, the name will be localized for the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale. Returns the empty string if this locale doesn't specify a script code.                                       </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the display name of the script code for the current default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>  </dl></li></ul> <a end_ctx_id="method:getDisplayScript--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayScript-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayScript-java.util.Locale-"/><a name="getDisplayScript-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getDisplayScript</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayScript(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â inLocale)</pre><div class="block">Returns a name for the locale's script that is appropriate for display to the user. If possible, the name will be localized for the given locale. Returns the empty string if this locale doesn't specify a script code.                                     </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>inLocale</code> - The locale for which to retrieve the display script.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the display name of the script code for the current default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>inLocale</code> is <code>null</code>      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>    </dl></li></ul> <a end_ctx_id="method:getDisplayScript-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayCountry-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayCountry--"/><a name="getDisplayCountry--"/><ul class="blockList"><li class="blockList"><h4>getDisplayCountry</h4><pre>public finalÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayCountry()</pre><div class="block">Returns a name for the locale's country that is appropriate for display to the user. If possible, the name returned will be localized for the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale. For example, if the locale is fr_FR and the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale is en_US, getDisplayCountry() will return "France"; if the locale is en_US and the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale is fr_FR, getDisplayCountry() will return "Etats-Unis". If the name returned cannot be localized for the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale, (say, we don't have a Japanese name for Croatia), this function falls back on the English name, and uses the ISO code as a last-resort value. If the locale doesn't specify a country, this function returns the empty string.                                                                                                                </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the country appropriate to the locale.        </dd> </dl></li></ul> <a end_ctx_id="method:getDisplayCountry--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayCountry-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayCountry-java.util.Locale-"/><a name="getDisplayCountry-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getDisplayCountry</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayCountry(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â inLocale)</pre><div class="block">Returns a name for the locale's country that is appropriate for display to the user. If possible, the name returned will be localized according to inLocale. For example, if the locale is fr_FR and inLocale is en_US, getDisplayCountry() will return "France"; if the locale is en_US and inLocale is fr_FR, getDisplayCountry() will return "Etats-Unis". If the name returned cannot be localized according to inLocale. (say, we don't have a Japanese name for Croatia), this function falls back on the English name, and finally on the ISO code as a last-resort value. If the locale doesn't specify a country, this function returns the empty string.                                                                                                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>inLocale</code> - The locale for which to retrieve the display country.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the country appropriate to the given locale.         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>inLocale</code> is <code>null</code>      </dd>   </dl></li></ul> <a end_ctx_id="method:getDisplayCountry-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayVariant-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayVariant--"/><a name="getDisplayVariant--"/><ul class="blockList"><li class="blockList"><h4>getDisplayVariant</h4><pre>public finalÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayVariant()</pre><div class="block">Returns a name for the locale's variant code that is appropriate for display to the user. If possible, the name will be localized for the default <a href="../../java/util/Locale.Category.html#DISPLAY"><code>DISPLAY</code></a> locale. If the locale doesn't specify a variant code, this function returns the empty string.                                         </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the display variant code appropriate to the locale.          </dd> </dl></li></ul> <a end_ctx_id="method:getDisplayVariant--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayVariant-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayVariant-java.util.Locale-"/><a name="getDisplayVariant-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getDisplayVariant</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayVariant(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â inLocale)</pre><div class="block">Returns a name for the locale's variant code that is appropriate for display to the user. If possible, the name will be localized for inLocale. If the locale doesn't specify a variant code, this function returns the empty string.                                      </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>inLocale</code> - The locale for which to retrieve the display variant code.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the display variant code appropriate to the given locale.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>inLocale</code> is <code>null</code>      </dd>   </dl></li></ul> <a end_ctx_id="method:getDisplayVariant-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayName-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayName--"/><a name="getDisplayName--"/><ul class="blockList"><li class="blockList"><h4>getDisplayName</h4><pre>public finalÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayName()</pre><div class="block">Returns a name for the locale that is appropriate for display to the user. This will be the values returned by getDisplayLanguage(), getDisplayScript(), getDisplayCountry(), and getDisplayVariant() assembled into a single string. The the non-empty values are used in order, with the second and subsequent names in parentheses. For example:<blockquote> language (script, country, variant)<br/> language (country)<br/> language (variant)<br/> script (country)<br/> country<br/>           </blockquote> depending on which fields are specified in the locale. If the language, script, country, and variant fields are all empty, this function returns the empty string.                                                                          </div><dl> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the locale appropriate to display.       </dd> </dl></li></ul> <a end_ctx_id="method:getDisplayName--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:getDisplayName-java.util.Locale- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:getDisplayName-java.util.Locale-"/><a name="getDisplayName-java.util.Locale-"/><ul class="blockList"><li class="blockList"><h4>getDisplayName</h4><pre>publicÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â getDisplayName(<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â inLocale)</pre><div class="block">Returns a name for the locale that is appropriate for display to the user. This will be the values returned by getDisplayLanguage(), getDisplayScript(),getDisplayCountry(), and getDisplayVariant() assembled into a single string. The non-empty values are used in order, with the second and subsequent names in parentheses. For example:<blockquote> language (script, country, variant)<br/> language (country)<br/> language (variant)<br/> script (country)<br/> country<br/>           </blockquote> depending on which fields are specified in the locale. If the language, script, country, and variant fields are all empty, this function returns the empty string.                                                                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>inLocale</code> - The locale for which to retrieve the display name.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>The name of the locale appropriate to display.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>inLocale</code> is <code>null</code>      </dd>   </dl></li></ul> <a end_ctx_id="method:getDisplayName-java.util.Locale-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clone--"/><a name="clone--"/><ul class="blockList"><li class="blockList"><h4>clone</h4><pre>publicÂ <a href="../../java/lang/Object.html" title="class in java.lang">Object</a>Â clone()</pre><div class="block">Overrides Cloneable. </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#clone--">clone</a></code>Â in classÂ <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a clone of this instance.    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:clone--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:hashCode-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:hashCode--"/><a name="hashCode--"/><ul class="blockList"><li class="blockList"><h4>hashCode</h4><pre>publicÂ intÂ hashCode()</pre><div class="block">Override hashCode. Since Locales are often used in hashtables, caches the value for speed.             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#hashCode--">hashCode</a></code>Â in classÂ <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a hash code value for this object.      </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, <a href="../../java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a>  </dd>   </dl></li></ul> <a end_ctx_id="method:hashCode--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:equals-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:equals-java.lang.Object-"/><a name="equals-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>equals</h4><pre>publicÂ booleanÂ equals(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a>Â obj)</pre><div class="block">Returns true if this Locale is equal to another object. A Locale is deemed equal to another Locale with identical language, script, country, variant and extensions, and unequal to all other objects.                               </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#equals-java.lang.Object-">equals</a></code>Â in classÂ <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>obj</code> - the reference object with which to compare.         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>true if this Locale is equal to the specified object.         </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Object.html#hashCode--"><code>Object.hashCode()</code></a>, <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a>  </dd>    </dl></li></ul> <a end_ctx_id="method:equals-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:filter-java.util.List-java.util.Collection-java.util.Locale.FilteringMode- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:filter-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"/><a name="filter-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"/><ul class="blockList"><li class="blockList"><h4>filter</h4><pre>public staticÂ <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>&gt;Â filter(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.LanguageRange.html" title="class in java.util">Locale.LanguageRange</a>&gt;Â priorityList,
                                  <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>&gt;Â locales,
                                  <a href="../../java/util/Locale.FilteringMode.html" title="enum in java.util">Locale.FilteringMode</a>Â mode)</pre><div class="block">Returns a list of matching <code>Locale</code> instances using the filtering mechanism defined in RFC 4647.              </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>priorityList</code> - user's Language Priority List in which each language tag is sorted in descending order based on priority or weight                     </dd><dd> <code>locales</code> - <code>Locale</code> instances used for matching       </dd><dd> <code>mode</code> - filtering mode    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of <code>Locale</code> instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable.                            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>priorityList</code> or <code>locales</code> is <code>null</code>        </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if one or more extended language ranges are included in the given list when <a href="../../java/util/Locale.FilteringMode.html#REJECT_EXTENDED_RANGES"><code>Locale.FilteringMode.REJECT_EXTENDED_RANGES</code></a> is specified                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:filter-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:filter-java.util.List-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:filter-java.util.List-java.util.Collection-"/><a name="filter-java.util.List-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>filter</h4><pre>public staticÂ <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>&gt;Â filter(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.LanguageRange.html" title="class in java.util">Locale.LanguageRange</a>&gt;Â priorityList,
                                  <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>&gt;Â locales)</pre><div class="block">Returns a list of matching <code>Locale</code> instances using the filtering mechanism defined in RFC 4647. This is equivalent to <a href="../../java/util/Locale.html#filter-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"><code>filter(List, Collection, FilteringMode)  </code></a> when <code>mode</code> is <a href="../../java/util/Locale.FilteringMode.html#AUTOSELECT_FILTERING"><code>Locale.FilteringMode.AUTOSELECT_FILTERING</code></a>.                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>priorityList</code> - user's Language Priority List in which each language tag is sorted in descending order based on priority or weight                     </dd><dd> <code>locales</code> - <code>Locale</code> instances used for matching       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of <code>Locale</code> instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable.                            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>priorityList</code> or <code>locales</code> is <code>null</code>        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:filter-java.util.List-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:filterTags-java.util.List-java.util.Collection-java.util.Locale.FilteringMode- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:filterTags-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"/><a name="filterTags-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"/><ul class="blockList"><li class="blockList"><h4>filterTags</h4><pre>public staticÂ <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â filterTags(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.LanguageRange.html" title="class in java.util">Locale.LanguageRange</a>&gt;Â priorityList,
                                      <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â tags,
                                      <a href="../../java/util/Locale.FilteringMode.html" title="enum in java.util">Locale.FilteringMode</a>Â mode)</pre><div class="block">Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647.               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>priorityList</code> - user's Language Priority List in which each language tag is sorted in descending order based on priority or weight                     </dd><dd> <code>tags</code> - language tags    </dd><dd> <code>mode</code> - filtering mode    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>priorityList</code> or <code>tags</code> is <code>null</code>        </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if one or more extended language ranges are included in the given list when <a href="../../java/util/Locale.FilteringMode.html#REJECT_EXTENDED_RANGES"><code>Locale.FilteringMode.REJECT_EXTENDED_RANGES</code></a> is specified                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:filterTags-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:filterTags-java.util.List-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:filterTags-java.util.List-java.util.Collection-"/><a name="filterTags-java.util.List-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>filterTags</h4><pre>public staticÂ <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â filterTags(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.LanguageRange.html" title="class in java.util">Locale.LanguageRange</a>&gt;Â priorityList,
                                      <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â tags)</pre><div class="block">Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647. This is equivalent to <a href="../../java/util/Locale.html#filterTags-java.util.List-java.util.Collection-java.util.Locale.FilteringMode-"><code>filterTags(List, Collection, FilteringMode)  </code></a> when <code>mode</code> is <a href="../../java/util/Locale.FilteringMode.html#AUTOSELECT_FILTERING"><code>Locale.FilteringMode.AUTOSELECT_FILTERING</code></a>.                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>priorityList</code> - user's Language Priority List in which each language tag is sorted in descending order based on priority or weight                     </dd><dd> <code>tags</code> - language tags    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable.                         </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>priorityList</code> or <code>tags</code> is <code>null</code>        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:filterTags-java.util.List-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lookup-java.util.List-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lookup-java.util.List-java.util.Collection-"/><a name="lookup-java.util.List-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>lookup</h4><pre>public staticÂ <a href="../../java/util/Locale.html" title="class in java.util">Locale</a>Â lookup(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.LanguageRange.html" title="class in java.util">Locale.LanguageRange</a>&gt;Â priorityList,
                            <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/Locale.html" title="class in java.util">Locale</a>&gt;Â locales)</pre><div class="block">Returns a <code>Locale</code> instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.                </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>priorityList</code> - user's Language Priority List in which each language tag is sorted in descending order based on priority or weight                     </dd><dd> <code>locales</code> - <code>Locale</code> instances used for matching       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the best matching <code>Locale</code> instance chosen based on priority or weight, or <code>null</code> if nothing matches.               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>priorityList</code> or <code>tags</code> is <code>null</code>        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:lookup-java.util.List-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lookupTag-java.util.List-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lookupTag-java.util.List-java.util.Collection-"/><a name="lookupTag-java.util.List-java.util.Collection-"/><ul class="blockListLast"><li class="blockList"><h4>lookupTag</h4><pre>public staticÂ <a href="../../java/lang/String.html" title="class in java.lang">String</a>Â lookupTag(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;<a href="../../java/util/Locale.LanguageRange.html" title="class in java.util">Locale.LanguageRange</a>&gt;Â priorityList,
                               <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/lang/String.html" title="class in java.lang">String</a>&gt;Â tags)</pre><div class="block">Returns the best-matching language tag using the lookup mechanism defined in RFC 4647.            </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>priorityList</code> - user's Language Priority List in which each language tag is sorted in descending order based on priority or weight                     </dd><dd> <code>tags</code> - language tangs used for matching       </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the best matching language tag chosen based on priority or weight, or <code>null</code> if nothing matches.               </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>priorityList</code> or <code>tags</code> is <code>null</code>        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:lookupTag-java.util.List-java.util.Collection-"/>  </td></tr></table></td></tr></table></diff></diffreport>