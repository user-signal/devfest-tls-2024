<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Collections [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:Collections"/><ul class="blockList"><li class="blockList"> <hr/> <br/><pre>public class <span class="typeNameLabel">Collections</span>
extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a></pre><div class="block">This class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, "wrappers", which return a new collection backed by a specified collection, and a few other odds and ends.<p>The methods of this class all throw a <tt>NullPointerException</tt> if the collections or class objects provided to them are null.                   </p><p>The documentation for the polymorphic algorithms contained in this class generally includes a brief description of the <i>implementation</i>. Such descriptions should be regarded as <i>implementation notes </i>, rather than parts of the <i>specification</i>. Implementors should feel free to substitute other algorithms, so long as the specification itself is adhered to. (For example, the algorithm used by <tt>sort</tt> does not have to be a mergesort, but it does have to be <i>stable</i>.)                                                                    </p><p>The "destructive" algorithms contained in this class, that is, the algorithms that modify the collection on which they operate, are specified to throw <tt>UnsupportedOperationException</tt> if the collection does not support the appropriate mutation primitive(s), such as the <tt>set</tt> method. These algorithms may, but are not required to, throw this exception if an invocation would have no effect on the collection. For example, invoking the <tt>sort</tt> method on an unmodifiable list that is already sorted may or may not throw <tt>UnsupportedOperationException</tt>.                                                                               </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                                      </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a>, <a href="../../java/util/List.html" title="interface in java.util"><code>List</code></a>, <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a>    </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:Collections"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:EMPTY_SET [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:EMPTY_SET"/><a name="EMPTY_SET"/><ul class="blockList"><li class="blockList"><h4>EMPTY_SET</h4><pre>public static final <a href="../../java/util/Set.html" title="interface in java.util">Set</a> EMPTY_SET</pre><div class="block">The empty set (immutable). This set is serializable.       </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collections.html#emptySet--"><code>emptySet()</code></a> </dd> </dl></li></ul> <a end_ctx_id="field:EMPTY_SET"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:EMPTY_LIST [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:EMPTY_LIST"/><a name="EMPTY_LIST"/><ul class="blockList"><li class="blockList"><h4>EMPTY_LIST</h4><pre>public static final <a href="../../java/util/List.html" title="interface in java.util">List</a> EMPTY_LIST</pre><div class="block">The empty list (immutable). This list is serializable.       </div><dl> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collections.html#emptyList--"><code>emptyList()</code></a> </dd> </dl></li></ul> <a end_ctx_id="field:EMPTY_LIST"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">field:EMPTY_MAP [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="field:EMPTY_MAP"/><a name="EMPTY_MAP"/><ul class="blockListLast"><li class="blockList"><h4>EMPTY_MAP</h4><pre>public static final <a href="../../java/util/Map.html" title="interface in java.util">Map</a> EMPTY_MAP</pre><div class="block">The empty map (immutable). This map is serializable.       </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collections.html#emptyMap--"><code>emptyMap()</code></a> </dd>  </dl></li></ul> <a end_ctx_id="field:EMPTY_MAP"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sort-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sort-java.util.List-"/><a name="sort-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>sort</h4><pre>public static &lt;T extends <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;? super T&gt;&gt; void sort(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; list)</pre><div class="block">Sorts the specified list into ascending order, according to the <a href="../../java/lang/Comparable.html" title="interface in java.lang">natural ordering </a> of its elements. All elements in the list must implement the <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> interface. Furthermore, all elements in the list must be <i>mutually comparable </i> (that is, <code>e1.compareTo(e2)</code> must not throw a <code>ClassCastException</code> for any elements <code>e1</code> and <code>e2</code> in the list).<p>This sort is guaranteed to be <i>stable</i>: equal elements will not be reordered as a result of the sort.                  </p><p>The specified list must be modifiable, but need not be resizable.          </p><p>Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays.                                                                          </p><p>The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array.                                                 </p><p>The implementation was adapted from Tim Peters's list sort for Python (<a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt"> TimSort </a>). It uses techniques from Peter McIlroy's "Optimistic Sorting and Information Theoretic Complexity", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.                                      </p><p>This implementation dumps the specified list into an array, sorts the array, and iterates over the list resetting each element from the corresponding position in the array. This avoids the n<sup>2</sup> log(n) performance that would result from attempting to sort a linked list in place.                                            </p>                                                 </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be sorted.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the list contains elements that are not <i>mutually comparable </i> (for example, strings and integers).                </dd><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list's list-iterator does not support the <code>set</code> operation.             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - (optional) if the implementation detects that the natural ordering of the list elements is found to violate the <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> contract                      </dd>   </dl></li></ul> <a end_ctx_id="method:sort-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:sort-java.util.List-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:sort-java.util.List-java.util.Comparator-"/><a name="sort-java.util.List-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>sort</h4><pre>public static &lt;T&gt; void sort(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; list,
                            <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super T&gt; c)</pre><div class="block">Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be <i>mutually comparable </i> using the specified comparator (that is, <code>c.compare(e1, e2) </code> must not throw a <code>ClassCastException</code> for any elements <code>e1</code> and <code>e2</code> in the list).<p>This sort is guaranteed to be <i>stable</i>: equal elements will not be reordered as a result of the sort.                  </p><p>The specified list must be modifiable, but need not be resizable.          </p><p>Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays.                                                                          </p><p>The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array.                                                 </p><p>The implementation was adapted from Tim Peters's list sort for Python (<a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt"> TimSort </a>). It uses techniques from Peter McIlroy's "Optimistic Sorting and Information Theoretic Complexity", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.                                      </p><p>This implementation dumps the specified list into an array, sorts the array, and iterates over the list resetting each element from the corresponding position in the array. This avoids the n<sup>2</sup> log(n) performance that would result from attempting to sort a linked list in place.                                            </p>                                         </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be sorted.       </dd><dd> <code>c</code> - the comparator to determine the order of the list. A <code>null</code> value indicates that the elements' <i>natural ordering </i> should be used.                      </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the list contains elements that are not <i>mutually comparable </i> using the specified comparator.               </dd><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list's list-iterator does not support the <code>set</code> operation.             </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - (optional) if the comparator is found to violate the <a href="../../java/util/Comparator.html" title="interface in java.util"><code>Comparator</code></a> contract             </dd>   </dl></li></ul> <a name="binarySearch-java.util.List-java.lang.Object-"/><a end_ctx_id="method:sort-java.util.List-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:binarySearch-java.util.List-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:binarySearch-java.util.List-T-"/><a name="binarySearch-java.util.List-T-"/><ul class="blockList"><li class="blockList"><h4>binarySearch</h4><pre>public static &lt;T&gt; int binarySearch(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;? extends <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;? super T&gt;&gt; list,
                                   T key)</pre><div class="block">Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the <a href="../../java/lang/Comparable.html" title="interface in java.lang">natural ordering </a> of its elements (as by the <a href="../../java/util/Collections.html#sort-java.util.List-"><code>sort(List)</code></a> method) prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found.<p>This method runs in log(n) time for a "random access" list (which provides near-constant-time positional access). If the specified list does not implement the <a href="../../java/util/RandomAccess.html" title="interface in java.util"><code>RandomAccess</code></a> interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.                                              </p>                                                                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be searched.       </dd><dd> <code>key</code> - the key to be searched for.        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the search key, if it is contained in the list; otherwise, <tt>(-(<i>insertion point </i>) - 1)  </tt>. The <i>insertion point </i> is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or <tt>list.size()</tt> if all elements in the list are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found.                                                                           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the list contains elements that are not <i>mutually comparable </i> (for example, strings and integers), or the search key is not mutually comparable with the elements of the list.                              </dd>    </dl></li></ul> <a name="binarySearch-java.util.List-java.lang.Object-java.util.Comparator-"/><a end_ctx_id="method:binarySearch-java.util.List-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:binarySearch-java.util.List-T-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:binarySearch-java.util.List-T-java.util.Comparator-"/><a name="binarySearch-java.util.List-T-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>binarySearch</h4><pre>public static &lt;T&gt; int binarySearch(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;? extends T&gt; list,
                                   T key,
                                   <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super T&gt; c)</pre><div class="block">Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the <a href="../../java/util/Collections.html#sort-java.util.List-java.util.Comparator-"><code>sort(List, Comparator) </code></a> method), prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found.<p>This method runs in log(n) time for a "random access" list (which provides near-constant-time positional access). If the specified list does not implement the <a href="../../java/util/RandomAccess.html" title="interface in java.util"><code>RandomAccess</code></a> interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.                                              </p>                                                                </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be searched.       </dd><dd> <code>key</code> - the key to be searched for.        </dd><dd> <code>c</code> - the comparator by which the list is ordered. A <tt>null</tt> value indicates that the elements' <a href="../../java/lang/Comparable.html" title="interface in java.lang">natural ordering </a> should be used.                     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the index of the search key, if it is contained in the list; otherwise, <tt>(-(<i>insertion point </i>) - 1)  </tt>. The <i>insertion point </i> is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or <tt>list.size()</tt> if all elements in the list are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found.                                                                           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the list contains elements that are not <i>mutually comparable </i> using the specified comparator, or the search key is not mutually comparable with the elements of the list using this comparator.                                </dd>    </dl></li></ul> <a end_ctx_id="method:binarySearch-java.util.List-T-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reverse-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reverse-java.util.List-"/><a name="reverse-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>reverse</h4><pre>public static void reverse(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; list)</pre><div class="block">Reverses the order of the elements in the specified list.<p> This method runs in linear time.      </p>         </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list whose elements are to be reversed.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list or its list-iterator does not support the <tt>set</tt> operation.               </dd>  </dl></li></ul> <a end_ctx_id="method:reverse-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shuffle-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shuffle-java.util.List-"/><a name="shuffle-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>shuffle</h4><pre>public static void shuffle(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; list)</pre><div class="block">Randomly permutes the specified list using a default source of randomness. All permutations occur with approximately equal likelihood.<p>The hedge "approximately" is used in the foregoing description because default source of randomness is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity.                                          </p><p>This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the "current position". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive.                                            </p><p>This method runs in linear time. If the specified list does not implement the <a href="../../java/util/RandomAccess.html" title="interface in java.util"><code>RandomAccess</code></a> interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a "sequential access" list in place.                                                       </p>                 </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be shuffled.       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list or its list-iterator does not support the <tt>set</tt> operation.               </dd>  </dl></li></ul> <a end_ctx_id="method:shuffle-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:shuffle-java.util.List-java.util.Random- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:shuffle-java.util.List-java.util.Random-"/><a name="shuffle-java.util.List-java.util.Random-"/><ul class="blockList"><li class="blockList"><h4>shuffle</h4><pre>public static void shuffle(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; list,
                           <a href="../../java/util/Random.html" title="class in java.util">Random</a> rnd)</pre><div class="block">Randomly permute the specified list using the specified source of randomness. All permutations occur with equal likelihood assuming that the source of randomness is fair.<p> This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the "current position". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive.                                             </p><p> This method runs in linear time. If the specified list does not implement the <a href="../../java/util/RandomAccess.html" title="interface in java.util"><code>RandomAccess</code></a> interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a "sequential access" list in place.                                                        </p>                        </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be shuffled.       </dd><dd> <code>rnd</code> - the source of randomness to use to shuffle the list.            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list or its list-iterator does not support the <tt>set</tt> operation.               </dd>  </dl></li></ul> <a end_ctx_id="method:shuffle-java.util.List-java.util.Random-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:swap-java.util.List-int-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:swap-java.util.List-int-int-"/><a name="swap-java.util.List-int-int-"/><ul class="blockList"><li class="blockList"><h4>swap</h4><pre>public static void swap(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; list,
                        int i,
                        int j)</pre><div class="block">Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)                       </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - The list in which to swap elements.         </dd><dd> <code>i</code> - the index of one element to be swapped.          </dd><dd> <code>j</code> - the index of the other element to be swapped.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if either <tt>i</tt> or <tt>j</tt> is out of range (i &lt; 0 || i &gt;= list.size() || j &lt; 0 || j &gt;= list.size()).                          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a name="fill-java.util.List-java.lang.Object-"/><a end_ctx_id="method:swap-java.util.List-int-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:fill-java.util.List-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:fill-java.util.List-T-"/><a name="fill-java.util.List-T-"/><ul class="blockList"><li class="blockList"><h4>fill</h4><pre>public static &lt;T&gt; void fill(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;? super T&gt; list,
                            T obj)</pre><div class="block">Replaces all of the elements of the specified list with the specified element.<p> This method runs in linear time.      </p>            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be filled with the specified element.           </dd><dd> <code>obj</code> - The element with which to fill the specified list.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list or its list-iterator does not support the <tt>set</tt> operation.               </dd>   </dl></li></ul> <a end_ctx_id="method:fill-java.util.List-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:copy-java.util.List-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:copy-java.util.List-java.util.List-"/><a name="copy-java.util.List-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>copy</h4><pre>public static &lt;T&gt; void copy(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;? super T&gt; dest,
                            <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;? extends T&gt; src)</pre><div class="block">Copies all of the elements from one list into another. After the operation, the index of each copied element in the destination list will be identical to its index in the source list. The destination list must be at least as long as the source list. If it is longer, the remaining elements in the destination list are unaffected.<p> This method runs in linear time.      </p>                                                          </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the lists          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>dest</code> - The destination list.     </dd><dd> <code>src</code> - The source list.     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the destination list is too small to contain the entire source List.               </dd><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the destination list's list-iterator does not support the <tt>set</tt> operation.             </dd>   </dl></li></ul> <a end_ctx_id="method:copy-java.util.List-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-java.util.Collection-"/><a name="min-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>min</h4><pre>public static &lt;T extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> &amp; <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;? super T&gt;&gt; T min(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends T&gt; coll)</pre><div class="block">Returns the minimum element of the given collection, according to the <i>natural ordering </i> of its elements. All elements in the collection must implement the <tt>Comparable</tt> interface. Furthermore, all elements in the collection must be <i>mutually comparable </i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the collection).<p> This method iterates over the entire collection, hence it requires time proportional to the size of the collection.                  </p>                                                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>coll</code> - the collection whose minimum element is to be determined.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the minimum element of the given collection, according to the <i>natural ordering </i> of its elements.             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the collection contains elements that are not <i>mutually comparable </i> (for example, strings and integers).                </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the collection is empty.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:min-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:min-java.util.Collection-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:min-java.util.Collection-java.util.Comparator-"/><a name="min-java.util.Collection-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>min</h4><pre>public static &lt;T&gt; T min(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends T&gt; coll,
                        <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super T&gt; comp)</pre><div class="block">Returns the minimum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be <i>mutually comparable </i> by the specified comparator (that is, <tt>comp.compare(e1, e2) </tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the collection).<p> This method iterates over the entire collection, hence it requires time proportional to the size of the collection.                  </p>                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>coll</code> - the collection whose minimum element is to be determined.           </dd><dd> <code>comp</code> - the comparator with which to determine the minimum element. A <tt>null</tt> value indicates that the elements' <i>natural ordering </i> should be used.                      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the minimum element of the given collection, according to the specified comparator.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the collection contains elements that are not <i>mutually comparable </i> using the specified comparator.               </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the collection is empty.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:min-java.util.Collection-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-java.util.Collection-"/><a name="max-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>max</h4><pre>public static &lt;T extends <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> &amp; <a href="../../java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;? super T&gt;&gt; T max(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends T&gt; coll)</pre><div class="block">Returns the maximum element of the given collection, according to the <i>natural ordering </i> of its elements. All elements in the collection must implement the <tt>Comparable</tt> interface. Furthermore, all elements in the collection must be <i>mutually comparable </i> (that is, <tt>e1.compareTo(e2)</tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the collection).<p> This method iterates over the entire collection, hence it requires time proportional to the size of the collection.                  </p>                                                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>coll</code> - the collection whose maximum element is to be determined.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the maximum element of the given collection, according to the <i>natural ordering </i> of its elements.             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the collection contains elements that are not <i>mutually comparable </i> (for example, strings and integers).                </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the collection is empty.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:max-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:max-java.util.Collection-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:max-java.util.Collection-java.util.Comparator-"/><a name="max-java.util.Collection-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>max</h4><pre>public static &lt;T&gt; T max(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends T&gt; coll,
                        <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super T&gt; comp)</pre><div class="block">Returns the maximum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be <i>mutually comparable </i> by the specified comparator (that is, <tt>comp.compare(e1, e2) </tt> must not throw a <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in the collection).<p> This method iterates over the entire collection, hence it requires time proportional to the size of the collection.                  </p>                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>coll</code> - the collection whose maximum element is to be determined.           </dd><dd> <code>comp</code> - the comparator with which to determine the maximum element. A <tt>null</tt> value indicates that the elements' <i>natural ordering </i> should be used.                      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the maximum element of the given collection, according to the specified comparator.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the collection contains elements that are not <i>mutually comparable </i> using the specified comparator.               </dd><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if the collection is empty.       </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:max-java.util.Collection-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:rotate-java.util.List-int- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:rotate-java.util.List-int-"/><a name="rotate-java.util.List-int-"/><ul class="blockList"><li class="blockList"><h4>rotate</h4><pre>public static void rotate(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; list,
                          int distance)</pre><div class="block">Rotates the elements in the specified list by the specified distance. After calling this method, the element at index <tt>i</tt> will be the element previously at index <tt>(i - distance)  </tt> mod <tt>list.size()</tt>, for all values of <tt>i</tt> between <tt>0</tt> and <tt>list.size()-1</tt>, inclusive. (This method has no effect on the size of the list.)<p>For example, suppose <tt>list</tt> comprises<tt> [t, a, n, k, s]     </tt>. After invoking <tt>Collections.rotate(list, 1) </tt> (or <tt>Collections.rotate(list, -4) </tt>), <tt>list</tt> will comprise <tt>[s, t, a, n, k]    </tt>.             </p><p>Note that this method can usefully be applied to sublists to move one or more elements within a list while preserving the order of the remaining elements. For example, the following idiom moves the element at index <tt>j</tt> forward to position <tt>k</tt> (which must be greater than or equal to <tt>j</tt>):<pre>
     Collections.rotate(list.subList(j, k+1), -1);
 </pre> To make this concrete, suppose <tt>list</tt> comprises <tt>[a, b, c, d, e]    </tt>. To move the element at index <tt>1</tt> (<tt>b</tt>) forward two positions, perform the following invocation:<pre>
     Collections.rotate(l.subList(1, 4), -1);
 </pre> The resulting list is <tt>[a, c, d, b, e]    </tt>.                                                                              </p><p>To move more than one element forward, increase the absolute value of the rotation distance. To move elements backward, use a positive shift distance.                       </p><p>If the specified list is small or implements the <a href="../../java/util/RandomAccess.html" title="interface in java.util"><code>RandomAccess</code></a> interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn't implement the <tt>RandomAccess</tt> interface, this implementation breaks the list into two sublist views around index <tt>-distance mod size  </tt>. Then the <a href="../../java/util/Collections.html#reverse-java.util.List-"><code>reverse(List)</code></a> method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2.3 of Jon Bentley's <i>Programming Pearls </i> (Addison-Wesley, 1986).                                                                                                                          </p>                                                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be rotated.       </dd><dd> <code>distance</code> - the distance to rotate the list. There are no constraints on this value; it may be zero, negative, or greater than <tt>list.size()</tt>.                        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list or its list-iterator does not support the <tt>set</tt> operation.               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a name="replaceAll-java.util.List-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:rotate-java.util.List-int-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:replaceAll-java.util.List-T-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:replaceAll-java.util.List-T-T-"/><a name="replaceAll-java.util.List-T-T-"/><ul class="blockList"><li class="blockList"><h4>replaceAll</h4><pre>public static &lt;T&gt; boolean replaceAll(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; list,
                                     T oldVal,
                                     T newVal)</pre><div class="block">Replaces all occurrences of one specified value in a list with another. More formally, replaces with <tt>newVal</tt> each element <tt>e</tt> in <tt>list</tt> such that <tt>(oldVal==null ? e==null : oldVal.equals(e))    </tt>. (This method has no effect on the size of the list.)                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list in which replacement is to occur.          </dd><dd> <code>oldVal</code> - the old value to be replaced.        </dd><dd> <code>newVal</code> - the new value with which <tt>oldVal</tt> is to be replaced.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if <tt>list</tt> contained one or more elements <tt>e</tt> such that <tt>(oldVal==null ? e==null : oldVal.equals(e))    </tt>.            </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the specified list or its list-iterator does not support the <tt>set</tt> operation.               </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>     </dl></li></ul> <a end_ctx_id="method:replaceAll-java.util.List-T-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:indexOfSubList-java.util.List-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:indexOfSubList-java.util.List-java.util.List-"/><a name="indexOfSubList-java.util.List-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>indexOfSubList</h4><pre>public static int indexOfSubList(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; source,
                                 <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; target)</pre><div class="block">Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the lowest index <tt>i</tt> such that <code>source.subList(i, i+target.size()).equals(target) </code>, or -1 if there is no such index. (Returns -1 if <code>target.size() &gt; source.size()  </code>)<p>This implementation uses the "brute force" technique of scanning over the source list, looking for a match with the target at each location in turn.                        </p>                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - the list in which to search for the first occurrence of <tt>target</tt>.              </dd><dd> <code>target</code> - the list to search for as a subList of <tt>source</tt>.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.                        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:indexOfSubList-java.util.List-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lastIndexOfSubList-java.util.List-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lastIndexOfSubList-java.util.List-java.util.List-"/><a name="lastIndexOfSubList-java.util.List-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>lastIndexOfSubList</h4><pre>public static int lastIndexOfSubList(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; source,
                                     <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;?&gt; target)</pre><div class="block">Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the highest index <tt>i</tt> such that <code>source.subList(i, i+target.size()).equals(target) </code>, or -1 if there is no such index. (Returns -1 if <code>target.size() &gt; source.size()  </code>)<p>This implementation uses the "brute force" technique of iterating over the source list, looking for a match with the target at each location in turn.                        </p>                                               </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>source</code> - the list in which to search for the last occurrence of <tt>target</tt>.              </dd><dd> <code>target</code> - the list to search for as a subList of <tt>source</tt>.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.                        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd>   </dl></li></ul> <a end_ctx_id="method:lastIndexOfSubList-java.util.List-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableCollection-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableCollection-java.util.Collection-"/><a name="unmodifiableCollection-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableCollection</h4><pre>public static &lt;T&gt; <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;T&gt; unmodifiableCollection(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends T&gt; c)</pre><div class="block">Returns an unmodifiable view of the specified collection. This method allows modules to provide users with "read-only" access to internal collections. Query operations on the returned collection "read through" to the specified collection, and attempts to modify the returned collection, whether direct or via its iterator, result in an <tt>UnsupportedOperationException</tt>.<p> The returned collection does <i>not</i> pass the hashCode and equals operations through to the backing collection, but relies on <tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list.                                               </p><p> The returned collection will be serializable if the specified collection is serializable.            </p>                                                 </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection for which an unmodifiable view is to be returned.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified collection.      </dd>   </dl></li></ul> <a end_ctx_id="method:unmodifiableCollection-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableSet-java.util.Set- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableSet-java.util.Set-"/><a name="unmodifiableSet-java.util.Set-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableSet</h4><pre>public static &lt;T&gt; <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;T&gt; unmodifiableSet(<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;? extends T&gt; s)</pre><div class="block">Returns an unmodifiable view of the specified set. This method allows modules to provide users with "read-only" access to internal sets. Query operations on the returned set "read through" to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an <tt>UnsupportedOperationException</tt>.<p> The returned set will be serializable if the specified set is serializable.            </p>                                                 </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the set for which an unmodifiable view is to be returned.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified set.      </dd>   </dl></li></ul> <a end_ctx_id="method:unmodifiableSet-java.util.Set-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableSortedSet-java.util.SortedSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableSortedSet-java.util.SortedSet-"/><a name="unmodifiableSortedSet-java.util.SortedSet-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableSortedSet</h4><pre>public static &lt;T&gt; <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;T&gt; unmodifiableSortedSet(<a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;T&gt; s)</pre><div class="block">Returns an unmodifiable view of the specified sorted set. This method allows modules to provide users with "read-only" access to internal sorted sets. Query operations on the returned sorted set "read through" to the specified sorted set. Attempts to modify the returned sorted set, whether direct, via its iterator, or via its <tt>subSet</tt>, <tt>headSet</tt>, or <tt>tailSet</tt> views, result in an <tt>UnsupportedOperationException</tt>.<p> The returned sorted set will be serializable if the specified sorted set is serializable.              </p>                                                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the sorted set for which an unmodifiable view is to be returned.              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified sorted set.       </dd>   </dl></li></ul> <a end_ctx_id="method:unmodifiableSortedSet-java.util.SortedSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableNavigableSet-java.util.NavigableSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableNavigableSet-java.util.NavigableSet-"/><a name="unmodifiableNavigableSet-java.util.NavigableSet-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableNavigableSet</h4><pre>public static &lt;T&gt; <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;T&gt; unmodifiableNavigableSet(<a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;T&gt; s)</pre><div class="block">Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with "read-only" access to internal navigable sets. Query operations on the returned navigable set "read through" to the specified navigable set. Attempts to modify the returned navigable set, whether direct, via its iterator, or via its <code>subSet</code>, <code>headSet</code>, or <code>tailSet</code> views, result in an <code>UnsupportedOperationException</code>.<p> The returned navigable set will be serializable if the specified navigable set is serializable.              </p>                                                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the navigable set for which an unmodifiable view is to be returned              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified navigable set       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:unmodifiableNavigableSet-java.util.NavigableSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableList-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableList-java.util.List-"/><a name="unmodifiableList-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableList</h4><pre>public static &lt;T&gt; <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; unmodifiableList(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;? extends T&gt; list)</pre><div class="block">Returns an unmodifiable view of the specified list. This method allows modules to provide users with "read-only" access to internal lists. Query operations on the returned list "read through" to the specified list, and attempts to modify the returned list, whether direct or via its iterator, result in an <tt>UnsupportedOperationException</tt>.<p> The returned list will be serializable if the specified list is serializable. Similarly, the returned list will implement <a href="../../java/util/RandomAccess.html" title="interface in java.util"><code>RandomAccess</code></a> if the specified list does.                        </p>                                                 </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list for which an unmodifiable view is to be returned.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified list.      </dd>   </dl></li></ul> <a end_ctx_id="method:unmodifiableList-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableMap-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableMap-java.util.Map-"/><a name="unmodifiableMap-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; unmodifiableMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;? extends K,? extends V&gt; m)</pre><div class="block">Returns an unmodifiable view of the specified map. This method allows modules to provide users with "read-only" access to internal maps. Query operations on the returned map "read through" to the specified map, and attempts to modify the returned map, whether direct or via its collection views, result in an <tt>UnsupportedOperationException</tt>.<p> The returned map will be serializable if the specified map is serializable.            </p>                                                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map for which an unmodifiable view is to be returned.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified map.      </dd>   </dl></li></ul> <a end_ctx_id="method:unmodifiableMap-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableSortedMap-java.util.SortedMap- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableSortedMap-java.util.SortedMap-"/><a name="unmodifiableSortedMap-java.util.SortedMap-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableSortedMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,V&gt; unmodifiableSortedMap(<a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,? extends V&gt; m)</pre><div class="block">Returns an unmodifiable view of the specified sorted map. This method allows modules to provide users with "read-only" access to internal sorted maps. Query operations on the returned sorted map "read through" to the specified sorted map. Attempts to modify the returned sorted map, whether direct, via its collection views, or via its <tt>subMap</tt>, <tt>headMap</tt>, or <tt>tailMap</tt> views, result in an <tt>UnsupportedOperationException</tt>.<p> The returned sorted map will be serializable if the specified sorted map is serializable.              </p>                                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the sorted map for which an unmodifiable view is to be returned.              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified sorted map.       </dd>   </dl></li></ul> <a end_ctx_id="method:unmodifiableSortedMap-java.util.SortedMap-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:unmodifiableNavigableMap-java.util.NavigableMap- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:unmodifiableNavigableMap-java.util.NavigableMap-"/><a name="unmodifiableNavigableMap-java.util.NavigableMap-"/><ul class="blockList"><li class="blockList"><h4>unmodifiableNavigableMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,V&gt; unmodifiableNavigableMap(<a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,? extends V&gt; m)</pre><div class="block">Returns an unmodifiable view of the specified navigable map. This method allows modules to provide users with "read-only" access to internal navigable maps. Query operations on the returned navigable map "read through" to the specified navigable map. Attempts to modify the returned navigable map, whether direct, via its collection views, or via its <code>subMap</code>, <code>headMap</code>, or <code>tailMap</code> views, result in an <code>UnsupportedOperationException</code>.<p> The returned navigable map will be serializable if the specified navigable map is serializable.              </p>                                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the navigable map for which an unmodifiable view is to be returned              </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an unmodifiable view of the specified navigable map       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:unmodifiableNavigableMap-java.util.NavigableMap-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedCollection-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedCollection-java.util.Collection-"/><a name="synchronizedCollection-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>synchronizedCollection</h4><pre>public static &lt;T&gt; <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;T&gt; synchronizedCollection(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;T&gt; c)</pre><div class="block">Returns a synchronized (thread-safe) collection backed by the specified collection. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing collection is accomplished through the returned collection.<p> It is imperative that the user manually synchronize on the returned collection when traversing it via <a href="../../java/util/Iterator.html" title="interface in java.util"><code>Iterator</code></a>, <a href="../../java/util/Spliterator.html" title="interface in java.util"><code>Spliterator</code></a> or <a href="../../java/util/stream/Stream.html" title="interface in java.util.stream"><code>Stream</code></a>:<pre>
  Collection c = Collections.synchronizedCollection(myCollection);
     ...
  synchronized (c) {
      Iterator i = c.iterator(); // Must be in the synchronized block
      while (i.hasNext())
         foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                              </p><p>The returned collection does <i>not</i> pass the <code>hashCode</code> and <code>equals</code> operations through to the backing collection, but relies on <code>Object</code>'s equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list.                                              </p><p> The returned collection will be serializable if the specified collection is serializable.            </p>                               </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection to be "wrapped" in a synchronized collection.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified collection.      </dd>   </dl></li></ul> <a end_ctx_id="method:synchronizedCollection-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedSet-java.util.Set- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedSet-java.util.Set-"/><a name="synchronizedSet-java.util.Set-"/><ul class="blockList"><li class="blockList"><h4>synchronizedSet</h4><pre>public static &lt;T&gt; <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;T&gt; synchronizedSet(<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;T&gt; s)</pre><div class="block">Returns a synchronized (thread-safe) set backed by the specified set. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing set is accomplished through the returned set.<p> It is imperative that the user manually synchronize on the returned set when iterating over it:<pre>
  Set s = Collections.synchronizedSet(new HashSet());
      ...
  synchronized (s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                          </p><p>The returned set will be serializable if the specified set is serializable.           </p>                               </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the set to be "wrapped" in a synchronized set.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified set.      </dd>   </dl></li></ul> <a end_ctx_id="method:synchronizedSet-java.util.Set-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedSortedSet-java.util.SortedSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedSortedSet-java.util.SortedSet-"/><a name="synchronizedSortedSet-java.util.SortedSet-"/><ul class="blockList"><li class="blockList"><h4>synchronizedSortedSet</h4><pre>public static &lt;T&gt; <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;T&gt; synchronizedSortedSet(<a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;T&gt; s)</pre><div class="block">Returns a synchronized (thread-safe) sorted set backed by the specified sorted set. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing sorted set is accomplished through the returned sorted set (or its views).<p> It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its <tt>subSet</tt>, <tt>headSet</tt>, or <tt>tailSet</tt> views.<pre>
  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
      ...
  synchronized (s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> or:<pre>
  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
  SortedSet s2 = s.headSet(foo);
      ...
  synchronized (s) {  // Note: s, not s2!!!
      Iterator i = s2.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                                     </p><p>The returned sorted set will be serializable if the specified sorted set is serializable.             </p>                                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the sorted set to be "wrapped" in a synchronized sorted set.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified sorted set.       </dd>   </dl></li></ul> <a end_ctx_id="method:synchronizedSortedSet-java.util.SortedSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedNavigableSet-java.util.NavigableSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedNavigableSet-java.util.NavigableSet-"/><a name="synchronizedNavigableSet-java.util.NavigableSet-"/><ul class="blockList"><li class="blockList"><h4>synchronizedNavigableSet</h4><pre>public static &lt;T&gt; <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;T&gt; synchronizedNavigableSet(<a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;T&gt; s)</pre><div class="block">Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing navigable set is accomplished through the returned navigable set (or its views).<p> It is imperative that the user manually synchronize on the returned navigable set when iterating over it or any of its <code>subSet</code>, <code>headSet</code>, or <code>tailSet</code> views.<pre>
  NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());
      ...
  synchronized (s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> or:<pre>
  NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());
  NavigableSet s2 = s.headSet(foo, true);
      ...
  synchronized (s) {  // Note: s, not s2!!!
      Iterator i = s2.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                                     </p><p>The returned navigable set will be serializable if the specified navigable set is serializable.             </p>                                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the navigable set to be "wrapped" in a synchronized navigable set             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified navigable set       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:synchronizedNavigableSet-java.util.NavigableSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedList-java.util.List- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedList-java.util.List-"/><a name="synchronizedList-java.util.List-"/><ul class="blockList"><li class="blockList"><h4>synchronizedList</h4><pre>public static &lt;T&gt; <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; synchronizedList(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; list)</pre><div class="block">Returns a synchronized (thread-safe) list backed by the specified list. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing list is accomplished through the returned list.<p> It is imperative that the user manually synchronize on the returned list when iterating over it:<pre>
  List list = Collections.synchronizedList(new ArrayList());
      ...
  synchronized (list) {
      Iterator i = list.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                          </p><p>The returned list will be serializable if the specified list is serializable.           </p>                               </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list to be "wrapped" in a synchronized list.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified list.      </dd>   </dl></li></ul> <a end_ctx_id="method:synchronizedList-java.util.List-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedMap-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedMap-java.util.Map-"/><a name="synchronizedMap-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>synchronizedMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; synchronizedMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; m)</pre><div class="block">Returns a synchronized (thread-safe) map backed by the specified map. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing map is accomplished through the returned map.<p> It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views:<pre>
  Map m = Collections.synchronizedMap(new HashMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                              </p><p>The returned map will be serializable if the specified map is serializable.           </p>                               </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map to be "wrapped" in a synchronized map.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified map.      </dd>   </dl></li></ul> <a end_ctx_id="method:synchronizedMap-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedSortedMap-java.util.SortedMap- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedSortedMap-java.util.SortedMap-"/><a name="synchronizedSortedMap-java.util.SortedMap-"/><ul class="blockList"><li class="blockList"><h4>synchronizedSortedMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,V&gt; synchronizedSortedMap(<a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,V&gt; m)</pre><div class="block">Returns a synchronized (thread-safe) sorted map backed by the specified sorted map. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing sorted map is accomplished through the returned sorted map (or its views).<p> It is imperative that the user manually synchronize on the returned sorted map when iterating over any of its collection views, or the collections views of any of its <tt>subMap</tt>, <tt>headMap</tt> or <tt>tailMap</tt> views.<pre>
  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> or:<pre>
  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
  SortedMap m2 = m.subMap(foo, bar);
      ...
  Set s2 = m2.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not m2 or s2!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                                             </p><p>The returned sorted map will be serializable if the specified sorted map is serializable.             </p>                                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the sorted map to be "wrapped" in a synchronized sorted map.             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified sorted map.       </dd>   </dl></li></ul> <a end_ctx_id="method:synchronizedSortedMap-java.util.SortedMap-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:synchronizedNavigableMap-java.util.NavigableMap- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:synchronizedNavigableMap-java.util.NavigableMap-"/><a name="synchronizedNavigableMap-java.util.NavigableMap-"/><ul class="blockList"><li class="blockList"><h4>synchronizedNavigableMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,V&gt; synchronizedNavigableMap(<a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,V&gt; m)</pre><div class="block">Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that <strong>all</strong> access to the backing navigable map is accomplished through the returned navigable map (or its views).<p> It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its <code>subMap</code>, <code>headMap</code> or <code>tailMap</code> views.<pre>
  NavigableMap m = Collections.synchronizedNavigableMap(new TreeMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> or:<pre>
  NavigableMap m = Collections.synchronizedNavigableMap(new TreeMap());
  NavigableMap m2 = m.subMap(foo, true, bar, false);
      ...
  Set s2 = m2.keySet();  // Needn't be in synchronized block
      ...
  synchronized (m) {  // Synchronizing on m, not m2 or s2!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
 </pre> Failure to follow this advice may result in non-deterministic behavior.                                             </p><p>The returned navigable map will be serializable if the specified navigable map is serializable.             </p>                                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the navigable map to be "wrapped" in a synchronized navigable map             </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a synchronized view of the specified navigable map.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:synchronizedNavigableMap-java.util.NavigableMap-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedCollection-java.util.Collection-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedCollection-java.util.Collection-java.lang.Class-"/><a name="checkedCollection-java.util.Collection-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedCollection</h4><pre>public static &lt;E&gt; <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt; checkedCollection(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt; c,
                                                  <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;E&gt; type)</pre><div class="block">Returns a dynamically typesafe view of the specified collection. Any attempt to insert an element of the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Assuming a collection contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the collection takes place through the view, it is <i>guaranteed</i> that the collection cannot contain an incorrectly typed element.<p>The generics mechanism in the language provides compile-time (static) type checking, but it is possible to defeat this mechanism with unchecked casts. Usually this is not a problem, as the compiler issues warnings on all such unchecked operations. There are, however, times when static type checking alone is not sufficient. For example, suppose a collection is passed to a third-party library and it is imperative that the library code not corrupt the collection by inserting an element of the wrong type.                                                                                </p><p>Another use of dynamically typesafe views is debugging. Suppose a program fails with a <code>ClassCastException</code>, indicating that an incorrectly typed element was put into a parameterized collection. Unfortunately, the exception can occur at any time after the erroneous element is inserted, so it typically provides little or no information as to the real source of the problem. If the problem is reproducible, one can quickly determine its source by temporarily modifying the program to wrap the collection with a dynamically typesafe view. For example, this declaration:<pre> 
<code>
     Collection&lt;String&gt; c = new HashSet&lt;&gt;();
 </code></pre> may be replaced temporarily by this one:<pre> 
<code>
     Collection&lt;String&gt; c = Collections.checkedCollection(
         new HashSet&lt;&gt;(), String.class);
 </code></pre> Running the program again will cause it to fail at the point where an incorrectly typed element is inserted into the collection, clearly identifying the source of the problem. Once the problem is fixed, the modified declaration may be reverted back to the original.                                                                                                                                        </p><p>The returned collection does <i>not</i> pass the hashCode and equals operations through to the backing collection, but relies on <code>Object</code>'s <code>equals</code> and <code>hashCode</code> methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list.                                              </p><p>The returned collection will be serializable if the specified collection is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned collection permits insertion of null elements whenever the backing collection does.                        </p>                                                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection for which a dynamically typesafe view is to be returned              </dd><dd> <code>type</code> - the type of element that <code>c</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified collection       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:checkedCollection-java.util.Collection-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedQueue-java.util.Queue-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedQueue-java.util.Queue-java.lang.Class-"/><a name="checkedQueue-java.util.Queue-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedQueue</h4><pre>public static &lt;E&gt; <a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt; checkedQueue(<a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;E&gt; queue,
                                        <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;E&gt; type)</pre><div class="block">Returns a dynamically typesafe view of the specified queue. Any attempt to insert an element of the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Assuming a queue contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the queue takes place through the view, it is <i>guaranteed</i> that the queue cannot contain an incorrectly typed element.<p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned queue will be serializable if the specified queue is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned queue permits insertion of <code>null</code> elements whenever the backing queue does.                        </p>                                                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the objects in the queue          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>queue</code> - the queue for which a dynamically typesafe view is to be returned              </dd><dd> <code>type</code> - the type of element that <code>queue</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified queue       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:checkedQueue-java.util.Queue-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedSet-java.util.Set-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedSet-java.util.Set-java.lang.Class-"/><a name="checkedSet-java.util.Set-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedSet</h4><pre>public static &lt;E&gt; <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;E&gt; checkedSet(<a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;E&gt; s,
                                    <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;E&gt; type)</pre><div class="block">Returns a dynamically typesafe view of the specified set. Any attempt to insert an element of the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Assuming a set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the set takes place through the view, it is <i>guaranteed</i> that the set cannot contain an incorrectly typed element.<p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned set will be serializable if the specified set is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned set permits insertion of null elements whenever the backing set does.                        </p>                                                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the set for which a dynamically typesafe view is to be returned              </dd><dd> <code>type</code> - the type of element that <code>s</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified set       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:checkedSet-java.util.Set-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedSortedSet-java.util.SortedSet-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedSortedSet-java.util.SortedSet-java.lang.Class-"/><a name="checkedSortedSet-java.util.SortedSet-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedSortedSet</h4><pre>public static &lt;E&gt; <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;E&gt; checkedSortedSet(<a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;E&gt; s,
                                                <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;E&gt; type)</pre><div class="block">Returns a dynamically typesafe view of the specified sorted set. Any attempt to insert an element of the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Assuming a sorted set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the sorted set takes place through the view, it is <i>guaranteed</i> that the sorted set cannot contain an incorrectly typed element.<p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned sorted set will be serializable if the specified sorted set is serializable.             </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned sorted set permits insertion of null elements whenever the backing sorted set does.                          </p>                                                                       </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the sorted set for which a dynamically typesafe view is to be returned               </dd><dd> <code>type</code> - the type of element that <code>s</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified sorted set        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:checkedSortedSet-java.util.SortedSet-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedNavigableSet-java.util.NavigableSet-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedNavigableSet-java.util.NavigableSet-java.lang.Class-"/><a name="checkedNavigableSet-java.util.NavigableSet-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedNavigableSet</h4><pre>public static &lt;E&gt; <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;E&gt; checkedNavigableSet(<a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;E&gt; s,
                                                      <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;E&gt; type)</pre><div class="block">Returns a dynamically typesafe view of the specified navigable set. Any attempt to insert an element of the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Assuming a navigable set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the navigable set takes place through the view, it is <em>guaranteed</em> that the navigable set cannot contain an incorrectly typed element.<p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned navigable set will be serializable if the specified navigable set is serializable.             </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned navigable set permits insertion of null elements whenever the backing sorted set does.                          </p>                                                                       </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - the navigable set for which a dynamically typesafe view is to be returned               </dd><dd> <code>type</code> - the type of element that <code>s</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified navigable set        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:checkedNavigableSet-java.util.NavigableSet-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedList-java.util.List-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedList-java.util.List-java.lang.Class-"/><a name="checkedList-java.util.List-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedList</h4><pre>public static &lt;E&gt; <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;E&gt; checkedList(<a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;E&gt; list,
                                      <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;E&gt; type)</pre><div class="block">Returns a dynamically typesafe view of the specified list. Any attempt to insert an element of the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Assuming a list contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the list takes place through the view, it is <i>guaranteed</i> that the list cannot contain an incorrectly typed element.<p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned list will be serializable if the specified list is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned list permits insertion of null elements whenever the backing list does.                        </p>                                                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>list</code> - the list for which a dynamically typesafe view is to be returned              </dd><dd> <code>type</code> - the type of element that <code>list</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified list       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:checkedList-java.util.List-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedMap-java.util.Map-java.lang.Class-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedMap-java.util.Map-java.lang.Class-java.lang.Class-"/><a name="checkedMap-java.util.Map-java.lang.Class-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; checkedMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; m,
                                        <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;K&gt; keyType,
                                        <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;V&gt; valueType)</pre><div class="block">Returns a dynamically typesafe view of the specified map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Similarly, any attempt to modify the value currently associated with a key will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>, whether the modification is attempted directly through the map itself, or through a <a href="../../java/util/Map.Entry.html" title="interface in java.util"><code>Map.Entry</code></a> instance obtained from the map's <a href="../../java/util/Map.html#entrySet--"><code>entry set </code></a> view.<p>Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is <i>guaranteed</i> that the map cannot contain an incorrectly typed key or value.                                                    </p><p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned map will be serializable if the specified map is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.                          </p>                                                                   </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map for which a dynamically typesafe view is to be returned              </dd><dd> <code>keyType</code> - the type of key that <code>m</code> is permitted to hold            </dd><dd> <code>valueType</code> - the type of value that <code>m</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified map       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:checkedMap-java.util.Map-java.lang.Class-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedSortedMap-java.util.SortedMap-java.lang.Class-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedSortedMap-java.util.SortedMap-java.lang.Class-java.lang.Class-"/><a name="checkedSortedMap-java.util.SortedMap-java.lang.Class-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedSortedMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,V&gt; checkedSortedMap(<a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,V&gt; m,
                                                    <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;K&gt; keyType,
                                                    <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;V&gt; valueType)</pre><div class="block">Returns a dynamically typesafe view of the specified sorted map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Similarly, any attempt to modify the value currently associated with a key will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>, whether the modification is attempted directly through the map itself, or through a <a href="../../java/util/Map.Entry.html" title="interface in java.util"><code>Map.Entry</code></a> instance obtained from the map's <a href="../../java/util/Map.html#entrySet--"><code>entry set </code></a> view.<p>Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is <i>guaranteed</i> that the map cannot contain an incorrectly typed key or value.                                                    </p><p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned map will be serializable if the specified map is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.                          </p>                                                                    </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map for which a dynamically typesafe view is to be returned              </dd><dd> <code>keyType</code> - the type of key that <code>m</code> is permitted to hold            </dd><dd> <code>valueType</code> - the type of value that <code>m</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified map       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:checkedSortedMap-java.util.SortedMap-java.lang.Class-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:checkedNavigableMap-java.util.NavigableMap-java.lang.Class-java.lang.Class- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:checkedNavigableMap-java.util.NavigableMap-java.lang.Class-java.lang.Class-"/><a name="checkedNavigableMap-java.util.NavigableMap-java.lang.Class-java.lang.Class-"/><ul class="blockList"><li class="blockList"><h4>checkedNavigableMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,V&gt; checkedNavigableMap(<a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,V&gt; m,
                                                          <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;K&gt; keyType,
                                                          <a href="../../java/lang/Class.html" title="class in java.lang">Class</a>&lt;V&gt; valueType)</pre><div class="block">Returns a dynamically typesafe view of the specified navigable map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>. Similarly, any attempt to modify the value currently associated with a key will result in an immediate <a href="../../java/lang/ClassCastException.html" title="class in java.lang"><code>ClassCastException</code></a>, whether the modification is attempted directly through the map itself, or through a <a href="../../java/util/Map.Entry.html" title="interface in java.util"><code>Map.Entry</code></a> instance obtained from the map's <a href="../../java/util/Map.html#entrySet--"><code>entry set </code></a> view.<p>Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is <em>guaranteed</em> that the map cannot contain an incorrectly typed key or value.                                                    </p><p>A discussion of the use of dynamically typesafe views may be found in the documentation for the <a href="../../java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"><code>checkedCollection</code></a> method.                  </p><p>The returned map will be serializable if the specified map is serializable.           </p><p>Since <code>null</code> is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.                          </p>                                                                    </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - type of map keys      </dd><dd> <code>V</code> - type of map values      </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>m</code> - the map for which a dynamically typesafe view is to be returned              </dd><dd> <code>keyType</code> - the type of key that <code>m</code> is permitted to hold            </dd><dd> <code>valueType</code> - the type of value that <code>m</code> is permitted to hold            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a dynamically typesafe view of the specified map       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:checkedNavigableMap-java.util.NavigableMap-java.lang.Class-java.lang.Class-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyIterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyIterator--"/><a name="emptyIterator--"/><ul class="blockList"><li class="blockList"><h4>emptyIterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;T&gt; emptyIterator()</pre><div class="block">Returns an iterator that has no elements. More precisely,<ul><li> <a href="../../java/util/Iterator.html#hasNext--"><code>hasNext</code></a> always returns <code>false</code>.    </li><li> <a href="../../java/util/Iterator.html#next--"><code>next</code></a> always throws <a href="../../java/util/NoSuchElementException.html" title="class in java.util"><code>NoSuchElementException</code></a>.    </li><li> <a href="../../java/util/Iterator.html#remove--"><code>remove</code></a> always throws <a href="../../java/lang/IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>.    </li></ul><p>Implementations of this method are permitted, but not required, to return the same object from multiple invocations.                </p>        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - type of elements, if there were any, in the iterator            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty iterator  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:emptyIterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyListIterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyListIterator--"/><a name="emptyListIterator--"/><ul class="blockList"><li class="blockList"><h4>emptyListIterator</h4><pre>public static &lt;T&gt; <a href="../../java/util/ListIterator.html" title="interface in java.util">ListIterator</a>&lt;T&gt; emptyListIterator()</pre><div class="block">Returns a list iterator that has no elements. More precisely,<ul><li> <a href="../../java/util/Iterator.html#hasNext--"><code>hasNext</code></a> and <a href="../../java/util/ListIterator.html#hasPrevious--"><code>hasPrevious</code></a> always return <code>false</code>.      </li><li> <a href="../../java/util/Iterator.html#next--"><code>next</code></a> and <a href="../../java/util/ListIterator.html#previous--"><code>previous</code></a> always throw <a href="../../java/util/NoSuchElementException.html" title="class in java.util"><code>NoSuchElementException</code></a>.      </li><li> <a href="../../java/util/Iterator.html#remove--"><code>remove</code></a> and <a href="../../java/util/ListIterator.html#set-E-"><code>set</code></a> always throw <a href="../../java/lang/IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>.      </li><li> <a href="../../java/util/ListIterator.html#add-E-"><code>add</code></a> always throws <a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang"><code>UnsupportedOperationException</code></a>.    </li><li> <a href="../../java/util/ListIterator.html#nextIndex--"><code>nextIndex</code></a> always returns <code>0</code>.    </li><li> <a href="../../java/util/ListIterator.html#previousIndex--"><code>previousIndex</code></a> always returns <code>-1</code>.    </li></ul><p>Implementations of this method are permitted, but not required, to return the same object from multiple invocations.                </p>         </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - type of elements, if there were any, in the iterator            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty list iterator   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:emptyListIterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyEnumeration-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyEnumeration--"/><a name="emptyEnumeration--"/><ul class="blockList"><li class="blockList"><h4>emptyEnumeration</h4><pre>public static &lt;T&gt; <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;T&gt; emptyEnumeration()</pre><div class="block">Returns an enumeration that has no elements. More precisely,<ul><li> <a href="../../java/util/Enumeration.html#hasMoreElements--"><code>hasMoreElements</code></a> always returns <code>false</code>.    </li><li> <a href="../../java/util/Enumeration.html#nextElement--"><code>nextElement</code></a> always throws <a href="../../java/util/NoSuchElementException.html" title="class in java.util"><code>NoSuchElementException</code></a>.    </li></ul><p>Implementations of this method are permitted, but not required, to return the same object from multiple invocations.                </p>        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the enumeration          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty enumeration  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.7</dd>   </dl></li></ul> <a end_ctx_id="method:emptyEnumeration--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptySet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptySet--"/><a name="emptySet--"/><ul class="blockList"><li class="blockList"><h4>emptySet</h4><pre>public static final &lt;T&gt; <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;T&gt; emptySet()</pre><div class="block">Returns an empty set (immutable). This set is serializable. Unlike the like-named field, this method is parameterized.<p>This example illustrates the type-safe way to obtain an empty set:<pre>
     Set&lt;String&gt; s = Collections.emptySet();
 </pre>          </p>                </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>Implementations of this method need not create a separate <code>Set</code> object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)                                     </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the empty set  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collections.html#EMPTY_SET"><code>EMPTY_SET</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:emptySet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptySortedSet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptySortedSet--"/><a name="emptySortedSet--"/><ul class="blockList"><li class="blockList"><h4>emptySortedSet</h4><pre>public static &lt;E&gt; <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;E&gt; emptySortedSet()</pre><div class="block">Returns an empty sorted set (immutable). This set is serializable.<p>This example illustrates the type-safe way to obtain an empty sorted set:<pre> 
<code>
     SortedSet&lt;String&gt; s = Collections.emptySortedSet();
 </code></pre>           </p>         </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>Implementations of this method need not create a separate <code>SortedSet</code> object for each call.             </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - type of elements, if there were any, in the set            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the empty sorted set   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:emptySortedSet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyNavigableSet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyNavigableSet--"/><a name="emptyNavigableSet--"/><ul class="blockList"><li class="blockList"><h4>emptyNavigableSet</h4><pre>public static &lt;E&gt; <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;E&gt; emptyNavigableSet()</pre><div class="block">Returns an empty navigable set (immutable). This set is serializable.<p>This example illustrates the type-safe way to obtain an empty navigable set:<pre> 
<code>
     NavigableSet&lt;String&gt; s = Collections.emptyNavigableSet();
 </code></pre>           </p>         </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>Implementations of this method need not create a separate <code>NavigableSet</code> object for each call.             </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - type of elements, if there were any, in the set            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the empty navigable set   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:emptyNavigableSet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyList-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyList--"/><a name="emptyList--"/><ul class="blockList"><li class="blockList"><h4>emptyList</h4><pre>public static final &lt;T&gt; <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; emptyList()</pre><div class="block">Returns an empty list (immutable). This list is serializable.<p>This example illustrates the type-safe way to obtain an empty list:<pre>
     List&lt;String&gt; s = Collections.emptyList();
 </pre> Implementation note: Implementations of this method need not create a separate <tt>List</tt> object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)                                                  </p>        </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - type of elements, if there were any, in the list            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty immutable list   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collections.html#EMPTY_LIST"><code>EMPTY_LIST</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:emptyList--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyMap-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyMap--"/><a name="emptyMap--"/><ul class="blockList"><li class="blockList"><h4>emptyMap</h4><pre>public static final &lt;K,V&gt; <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; emptyMap()</pre><div class="block">Returns an empty map (immutable). This map is serializable.<p>This example illustrates the type-safe way to obtain an empty map:<pre>
     Map&lt;String, Date&gt; s = Collections.emptyMap();
 </pre>          </p>        </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>Implementations of this method need not create a separate <code>Map</code> object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)                                     </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty map  </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collections.html#EMPTY_MAP"><code>EMPTY_MAP</code></a> </dd>     </dl></li></ul> <a end_ctx_id="method:emptyMap--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptySortedMap-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptySortedMap--"/><a name="emptySortedMap--"/><ul class="blockList"><li class="blockList"><h4>emptySortedMap</h4><pre>public static final &lt;K,V&gt; <a href="../../java/util/SortedMap.html" title="interface in java.util">SortedMap</a>&lt;K,V&gt; emptySortedMap()</pre><div class="block">Returns an empty sorted map (immutable). This map is serializable.<p>This example illustrates the type-safe way to obtain an empty map:<pre> 
<code>
     SortedMap&lt;String, Date&gt; s = Collections.emptySortedMap();
 </code></pre>          </p>         </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>Implementations of this method need not create a separate <code>SortedMap</code> object for each call.             </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty sorted map   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a end_ctx_id="method:emptySortedMap--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:emptyNavigableMap-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:emptyNavigableMap--"/><a name="emptyNavigableMap--"/><ul class="blockList"><li class="blockList"><h4>emptyNavigableMap</h4><pre>public static final &lt;K,V&gt; <a href="../../java/util/NavigableMap.html" title="interface in java.util">NavigableMap</a>&lt;K,V&gt; emptyNavigableMap()</pre><div class="block">Returns an empty navigable map (immutable). This map is serializable.<p>This example illustrates the type-safe way to obtain an empty map:<pre> 
<code>
     NavigableMap&lt;String, Date&gt; s = Collections.emptyNavigableMap();
 </code></pre>          </p>         </div><dl> <dt> <span class="simpleTagLabel">Implementation Note: </span>   </dt><dd>Implementations of this method need not create a separate <code>NavigableMap</code> object for each call.             </dd> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an empty navigable map   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.8</dd>    </dl></li></ul> <a name="singleton-java.lang.Object-"/><a end_ctx_id="method:emptyNavigableMap--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:singleton-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:singleton-T-"/><a name="singleton-T-"/><ul class="blockList"><li class="blockList"><h4>singleton</h4><pre>public static &lt;T&gt; <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;T&gt; singleton(T o)</pre><div class="block">Returns an immutable set containing only the specified object. The returned set is serializable.             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the set          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - the sole object to be stored in the returned set.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an immutable set containing only the specified object.       </dd>   </dl></li></ul> <a name="singletonList-java.lang.Object-"/><a end_ctx_id="method:singleton-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:singletonList-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:singletonList-T-"/><a name="singletonList-T-"/><ul class="blockList"><li class="blockList"><h4>singletonList</h4><pre>public static &lt;T&gt; <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; singletonList(T o)</pre><div class="block">Returns an immutable list containing only the specified object. The returned list is serializable.             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the list          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - the sole object to be stored in the returned list.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an immutable list containing only the specified object.       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd>    </dl></li></ul> <a name="singletonMap-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:singletonList-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:singletonMap-K-V- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:singletonMap-K-V-"/><a name="singletonMap-K-V-"/><ul class="blockList"><li class="blockList"><h4>singletonMap</h4><pre>public static &lt;K,V&gt; <a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;K,V&gt; singletonMap(K key,
                                          V value)</pre><div class="block">Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable.                 </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>K</code> - the class of the map keys        </dd><dd> <code>V</code> - the class of the map values        </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>key</code> - the sole key to be stored in the returned map.            </dd><dd> <code>value</code> - the value to which the returned map maps <tt>key</tt>.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an immutable map containing only the specified key-value mapping.        </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.3</dd>    </dl></li></ul> <a name="nCopies-int-java.lang.Object-"/><a end_ctx_id="method:singletonMap-K-V-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nCopies-int-T- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:nCopies-int-T-"/><a name="nCopies-int-T-"/><ul class="blockList"><li class="blockList"><h4>nCopies</h4><pre>public static &lt;T&gt; <a href="../../java/util/List.html" title="interface in java.util">List</a>&lt;T&gt; nCopies(int n,
                                  T o)</pre><div class="block">Returns an immutable list consisting of <tt>n</tt> copies of the specified object. The newly allocated data object is tiny (it contains a single reference to the data object). This method is useful in combination with the <tt>List.addAll</tt> method to grow lists. The returned list is serializable.                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the object to copy and of the objects in the returned list.                 </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>n</code> - the number of elements in the returned list.          </dd><dd> <code>o</code> - the element to appear repeatedly in the returned list.           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an immutable list consisting of <tt>n</tt> copies of the specified object.          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>n &lt; 0  </code>    </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/List.html#addAll-java.util.Collection-"><code>List.addAll(Collection)</code></a>, <a href="../../java/util/List.html#addAll-int-java.util.Collection-"><code>List.addAll(int, Collection) </code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:nCopies-int-T-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reverseOrder-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reverseOrder--"/><a name="reverseOrder--"/><ul class="blockList"><li class="blockList"><h4>reverseOrder</h4><pre>public static &lt;T&gt; <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;T&gt; reverseOrder()</pre><div class="block">Returns a comparator that imposes the reverse of the <em>natural ordering </em> on a collection of objects that implement the <code>Comparable</code> interface. (The natural ordering is the ordering imposed by the objects' own <code>compareTo</code> method.) This enables a simple idiom for sorting (or maintaining) collections (or arrays) of objects that implement the <code>Comparable</code> interface in reverse-natural-order. For example, suppose <code>a</code> is an array of strings. Then:<pre>
          Arrays.sort(a, Collections.reverseOrder());
 </pre> sorts the array in reverse-lexicographic (alphabetical) order.<p> The returned comparator is serializable.     </p>                                                                      </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects compared by the comparator           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A comparator that imposes the reverse of the <i>natural ordering </i> on a collection of objects that implement the <tt>Comparable</tt> interface.                  </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:reverseOrder--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:reverseOrder-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:reverseOrder-java.util.Comparator-"/><a name="reverseOrder-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>reverseOrder</h4><pre>public static &lt;T&gt; <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;T&gt; reverseOrder(<a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;T&gt; cmp)</pre><div class="block">Returns a comparator that imposes the reverse ordering of the specified comparator. If the specified comparator is <code>null</code>, this method is equivalent to <a href="../../java/util/Collections.html#reverseOrder--"><code>reverseOrder()</code></a> (in other words, it returns a comparator that imposes the reverse of the <em>natural ordering </em> on a collection of objects that implement the Comparable interface).<p>The returned comparator is serializable (assuming the specified comparator is also serializable or <code>null</code>).             </p>                                               </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects compared by the comparator           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>cmp</code> - a comparator who's ordering is to be reversed by the returned comparator or <code>null</code>                </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>A comparator that imposes the reverse ordering of the specified comparator.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:reverseOrder-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:enumeration-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:enumeration-java.util.Collection-"/><a name="enumeration-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>enumeration</h4><pre>public static &lt;T&gt; <a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;T&gt; enumeration(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;T&gt; c)</pre><div class="block">Returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input.                  </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the collection          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection for which an enumeration is to be returned.            </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an enumeration over the specified collection.     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a> </dd>    </dl></li></ul> <a end_ctx_id="method:enumeration-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:list-java.util.Enumeration- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:list-java.util.Enumeration-"/><a name="list-java.util.Enumeration-"/><ul class="blockList"><li class="blockList"><h4>list</h4><pre>public static &lt;T&gt; <a href="../../java/util/ArrayList.html" title="class in java.util">ArrayList</a>&lt;T&gt; list(<a href="../../java/util/Enumeration.html" title="interface in java.util">Enumeration</a>&lt;T&gt; e)</pre><div class="block">Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration. This method provides interoperability between legacy APIs that return enumerations and new APIs that require collections.                                    </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects returned by the enumeration           </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - enumeration providing elements for the returned array list          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an array list containing the elements returned by the specified enumeration.          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.4</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Enumeration.html" title="interface in java.util"><code>Enumeration</code></a>, <a href="../../java/util/ArrayList.html" title="class in java.util"><code>ArrayList</code></a>  </dd>     </dl></li></ul> <a end_ctx_id="method:list-java.util.Enumeration-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:frequency-java.util.Collection-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:frequency-java.util.Collection-java.lang.Object-"/><a name="frequency-java.util.Collection-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>frequency</h4><pre>public static int frequency(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;?&gt; c,
                            <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns the number of elements in the specified collection equal to the specified object. More formally, returns the number of elements <tt>e</tt> in the collection such that <tt>(o == null ? e == null : o.equals(e))        </tt>.                           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection in which to determine the frequency of <tt>o</tt>            </dd><dd> <code>o</code> - the object whose frequency is to be determined          </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements in <code>c</code> equal to <code>o</code>        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <tt>c</tt> is null      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a end_ctx_id="method:frequency-java.util.Collection-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:disjoint-java.util.Collection-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:disjoint-java.util.Collection-java.util.Collection-"/><a name="disjoint-java.util.Collection-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>disjoint</h4><pre>public static boolean disjoint(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;?&gt; c1,
                               <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;?&gt; c2)</pre><div class="block">Returns <code>true</code> if the two specified collections have no elements in common.<p>Care must be exercised if this method is used on collections that do not comply with the general contract for <code>Collection</code>. Implementations may elect to iterate over either collection and test for containment in the other collection (or to perform any equivalent computation). If either collection uses a nonstandard equality test (as does a <a href="../../java/util/SortedSet.html" title="interface in java.util"><code>SortedSet</code></a> whose ordering is not <em>compatible with equals  </em>, or the key set of an <a href="../../java/util/IdentityHashMap.html" title="class in java.util"><code>IdentityHashMap</code></a>), both collections must use the same nonstandard equality test, or the result of this method is undefined.                                                                                   </p><p>Care must also be exercised when using collections that have restrictions on the elements that they may contain. Collection implementations are allowed to throw exceptions for any operation involving elements they deem ineligible. For absolute safety the specified collections should contain only elements which are eligible elements for both collections.                                                 </p><p>Note that it is permissible to pass the same collection in both parameters, in which case the method will return <code>true</code> if and only if the collection is empty.                            </p>           </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c1</code> - a collection    </dd><dd> <code>c2</code> - a collection    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if the two specified collections have no elements in common.           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if either collection is <code>null</code>.       </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if one collection contains a <code>null</code> element and <code>null</code> is not an eligible element for the other collection. (<a href="Collection.html#optional-restrictions">optional</a>)                     </dd><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if one collection contains an element that is of a type which is ineligible for the other collection. (<a href="Collection.html#optional-restrictions">optional</a>)                     </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd>    </dl></li></ul> <a name="addAll-java.util.Collection-java.lang.Object:A-"/><a end_ctx_id="method:disjoint-java.util.Collection-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addAll-java.util.Collection-T...- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addAll-java.util.Collection-T...-"/><a name="addAll-java.util.Collection-T...-"/><ul class="blockList"><li class="blockList"><h4>addAll</h4><pre><a href="../../java/lang/SafeVarargs.html" title="annotation in java.lang">@SafeVarargs</a>
public static &lt;T&gt; boolean addAll(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? super T&gt; c,
                                              T... elements)</pre><div class="block">Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of <tt>c.addAll(Arrays.asList(elements))</tt>, but this method is likely to run significantly faster under most implementations.<p>When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection:<pre>
     Collections.addAll(flavors, "Peaches 'n Plutonium", "Rocky Racoon");
 </pre>                   </p>                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the elements to add and of the collection             </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - the collection into which <tt>elements</tt> are to be inserted           </dd><dd> <code>elements</code> - the elements to insert into <tt>c</tt>        </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <tt>true</tt> if the collection changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if <tt>c</tt> does not support the <tt>add</tt> operation          </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <tt>elements</tt> contains one or more null values and <tt>c</tt> does not permit null elements, or if <tt>c</tt> or <tt>elements</tt> are <tt>null</tt>                        </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if some property of a value in <tt>elements</tt> prevents it from being added to <tt>c</tt>                 </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.5</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html#addAll-java.util.Collection-"><code>Collection.addAll(Collection)</code></a> </dd>      </dl></li></ul> <a end_ctx_id="method:addAll-java.util.Collection-T...-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:newSetFromMap-java.util.Map- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:newSetFromMap-java.util.Map-"/><a name="newSetFromMap-java.util.Map-"/><ul class="blockList"><li class="blockList"><h4>newSetFromMap</h4><pre>public static &lt;E&gt; <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;E&gt; newSetFromMap(<a href="../../java/util/Map.html" title="interface in java.util">Map</a>&lt;E,<a href="../../java/lang/Boolean.html" title="class in java.lang">Boolean</a>&gt; map)</pre><div class="block">Returns a set backed by the specified map. The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map. In essence, this factory method provides a <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> implementation corresponding to any <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a> implementation. There is no need to use this method on a <a href="../../java/util/Map.html" title="interface in java.util"><code>Map</code></a> implementation that already has a corresponding <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a> implementation (such as <a href="../../java/util/HashMap.html" title="class in java.util"><code>HashMap</code></a> or <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>).<p>Each method invocation on the set returned by this method results in exactly one method invocation on the backing map or its <tt>keySet</tt> view, with one exception. The <tt>addAll</tt> method is implemented as a sequence of <tt>put</tt> invocations on the backing map.                                         </p><p>The specified map must be empty at the time this method is invoked, and should not be accessed directly after this method returns. These conditions are ensured if the map is created empty, passed directly to this method, and no reference to the map is retained, as illustrated in the following code fragment:<pre>
    Set&lt;Object&gt; weakHashSet = Collections.newSetFromMap(
        new WeakHashMap&lt;Object, Boolean&gt;());
 </pre>                                                    </p>                                                            </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the class of the map keys and of the objects in the returned set                </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>map</code> - the backing map     </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the set backed by the map     </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <tt>map</tt> is not empty       </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a end_ctx_id="method:newSetFromMap-java.util.Map-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:asLifoQueue-java.util.Deque- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:asLifoQueue-java.util.Deque-"/><a name="asLifoQueue-java.util.Deque-"/><ul class="blockListLast"><li class="blockList"><h4>asLifoQueue</h4><pre>public static &lt;T&gt; <a href="../../java/util/Queue.html" title="interface in java.util">Queue</a>&lt;T&gt; asLifoQueue(<a href="../../java/util/Deque.html" title="interface in java.util">Deque</a>&lt;T&gt; deque)</pre><div class="block">Returns a view of a <a href="../../java/util/Deque.html" title="interface in java.util"><code>Deque</code></a> as a Last-in-first-out (Lifo) <a href="../../java/util/Queue.html" title="interface in java.util"><code>Queue</code></a>. Method <tt>add</tt> is mapped to <tt>push</tt>, <tt>remove</tt> is mapped to <tt>pop</tt> and so on. This view can be useful when you would like to use a method requiring a <tt>Queue</tt> but you need Lifo ordering.<p>Each method invocation on the queue returned by this method results in exactly one method invocation on the backing deque, with one exception. The <a href="../../java/util/Collection.html#addAll-java.util.Collection-"><code>addAll</code></a> method is implemented as a sequence of <a href="../../java/util/Deque.html#addFirst-E-"><code>addFirst</code></a> invocations on the backing deque.                                     </p>                                             </div><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>T</code> - the class of the objects in the deque          </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>deque</code> - the deque    </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the queue </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>    </dl></li></ul> <a end_ctx_id="method:asLifoQueue-java.util.Deque-"/>  </td></tr></table></td></tr></table></diff></diffreport>