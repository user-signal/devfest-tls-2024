<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:TreeSet [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><div class="description"> <a start_ctx_id="class:TreeSet"/><ul class="blockList"><li class="blockList"><dl> <dt> <span class="paramLabel">Type Parameters: </span>   </dt><dd> <code>E</code> - the type of elements maintained by this set          </dd> </dl><dl> <dt>All Implemented Interfaces:  </dt><dd> <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a>, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;E&gt;, <a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;E&gt;, <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;E&gt;, <a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;E&gt;, <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;E&gt;       </dd> </dl> <hr/> <br/><pre>public class <span class="typeNameLabel">TreeSet&lt;E&gt;</span>
extends <a href="../../java/util/AbstractSet.html" title="class in java.util">AbstractSet</a>&lt;E&gt;
implements <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;E&gt;, <a href="../../java/lang/Cloneable.html" title="interface in java.lang">Cloneable</a>, <a href="../../java/io/Serializable.html" title="interface in java.io">Serializable</a></pre><div class="block">A <a href="../../java/util/NavigableSet.html" title="interface in java.util"><code>NavigableSet</code></a> implementation based on a <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>. The elements are ordered using their <a href="../../java/lang/Comparable.html" title="interface in java.lang">natural ordering </a>, or by a <a href="../../java/util/Comparator.html" title="interface in java.util"><code>Comparator</code></a> provided at set creation time, depending on which constructor is used.<p>This implementation provides guaranteed log(n) time cost for the basic operations (<code>add</code>, <code>remove</code> and <code>contains</code>).              </p><p>Note that the ordering maintained by a set (whether or not an explicit comparator is provided) must be <i>consistent with equals  </i> if it is to correctly implement the <code>Set</code> interface. (See <code>Comparable</code> or <code>Comparator</code> for a precise definition of <i>consistent with equals  </i>.) This is so because the <code>Set</code> interface is defined in terms of the <code>equals</code> operation, but a <code>TreeSet</code> instance performs all element comparisons using its <code>compareTo</code> (or <code>compare</code>) method, so two elements that are deemed equal by this method are, from the standpoint of the set, equal. The behavior of a set <i>is</i> well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the <code>Set</code> interface.                                                                                                               </p><p> <strong>Note that this implementation is not synchronized.      </strong> If multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it <i>must</i> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be "wrapped" using the <a href="../../java/util/Collections.html#synchronizedSortedSet-java.util.SortedSet-"><code>Collections.synchronizedSortedSet</code></a> method. This is best done at creation time, to prevent accidental unsynchronized access to the set:<pre>
   SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));</pre>                                                                   </p><p>The iterators returned by this class's <code>iterator</code> method are <i>fail-fast</i>: if the set is modified at any time after the iterator is created, in any way except through the iterator's own <code>remove</code> method, the iterator will throw a <a href="../../java/util/ConcurrentModificationException.html" title="class in java.util"><code>ConcurrentModificationException</code></a>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.                                                                </p><p>Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <code>ConcurrentModificationException</code> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i>the fail-fast behavior of iterators should be used only to detect bugs.           </i>                                                      </p><p>This class is a member of the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/collections/index.html"> Java Collections Framework   </a>.       </p>                            </div><dl> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.2</dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/Collection.html" title="interface in java.util"><code>Collection</code></a>, <a href="../../java/util/Set.html" title="interface in java.util"><code>Set</code></a>, <a href="../../java/util/HashSet.html" title="class in java.util"><code>HashSet</code></a>, <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, <a href="../../java/util/Comparator.html" title="interface in java.util"><code>Comparator</code></a>, <a href="../../java/util/TreeMap.html" title="class in java.util"><code>TreeMap</code></a>, <a href="../../serialized-form.html#java.util.TreeSet">Serialized Form </a>       </dd>  </dl>  </li></ul> </div> <a end_ctx_id="class:TreeSet"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:TreeSet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:TreeSet--"/><a name="TreeSet--"/><ul class="blockList"><li class="blockList"><h4>TreeSet</h4><pre>public TreeSet()</pre><div class="block">Constructs a new, empty tree set, sorted according to the natural ordering of its elements. All elements inserted into the set must implement the <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> interface. Furthermore, all such elements must be <i>mutually comparable </i>: <code>e1.compareTo(e2)</code> must not throw a <code>ClassCastException</code> for any elements <code>e1</code> and <code>e2</code> in the set. If the user attempts to add an element to the set that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the <code>add</code> call will throw a <code>ClassCastException</code>.                                                                                      </div></li></ul> <a end_ctx_id="constructor:TreeSet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:TreeSet-java.util.Comparator- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:TreeSet-java.util.Comparator-"/><a name="TreeSet-java.util.Comparator-"/><ul class="blockList"><li class="blockList"><h4>TreeSet</h4><pre>public TreeSet(<a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; comparator)</pre><div class="block">Constructs a new, empty tree set, sorted according to the specified comparator. All elements inserted into the set must be <i>mutually comparable </i> by the specified comparator: <code>comparator.compare(e1, e2) </code> must not throw a <code>ClassCastException</code> for any elements <code>e1</code> and <code>e2</code> in the set. If the user attempts to add an element to the set that violates this constraint, the <code>add</code> call will throw a <code>ClassCastException</code>.                                                             </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>comparator</code> - the comparator that will be used to order this set. If <code>null</code>, the <a href="../../java/lang/Comparable.html" title="interface in java.lang">natural ordering </a> of the elements will be used.                      </dd> </dl></li></ul> <a end_ctx_id="constructor:TreeSet-java.util.Comparator-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:TreeSet-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:TreeSet-java.util.Collection-"/><a name="TreeSet-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>TreeSet</h4><pre>public TreeSet(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; c)</pre><div class="block">Constructs a new tree set containing the elements in the specified collection, sorted according to the <i>natural ordering </i> of its elements. All elements inserted into the set must implement the <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a> interface. Furthermore, all such elements must be <i>mutually comparable </i>: <code>e1.compareTo(e2)</code> must not throw a <code>ClassCastException</code> for any elements <code>e1</code> and <code>e2</code> in the set.                                                    </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - collection whose elements will comprise the new set          </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the elements in <code>c</code> are not <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>, or are not mutually comparable               </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection is null        </dd>  </dl></li></ul> <a end_ctx_id="constructor:TreeSet-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">constructor:TreeSet-java.util.SortedSet- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="constructor:TreeSet-java.util.SortedSet-"/><a name="TreeSet-java.util.SortedSet-"/><ul class="blockListLast"><li class="blockList"><h4>TreeSet</h4><pre>public TreeSet(<a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; s)</pre><div class="block">Constructs a new tree set containing the same elements and using the same ordering as the specified sorted set.                  </div><dl> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>s</code> - sorted set whose elements will comprise the new set           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified sorted set is null         </dd>  </dl></li></ul> <a end_ctx_id="constructor:TreeSet-java.util.SortedSet-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:iterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:iterator--"/><a name="iterator--"/><ul class="blockList"><li class="blockList"><h4>iterator</h4><pre>public <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; iterator()</pre><div class="block">Returns an iterator over the elements in this set in ascending order.           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/lang/Iterable.html#iterator--">iterator</a></code> in interface <code><a href="../../java/lang/Iterable.html" title="interface in java.lang">Iterable</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#iterator--">iterator</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#iterator--">iterator</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements in this set in ascending order          </dd>      </dl></li></ul> <a end_ctx_id="method:iterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:descendingIterator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:descendingIterator--"/><a name="descendingIterator--"/><ul class="blockList"><li class="blockList"><h4>descendingIterator</h4><pre>public <a href="../../java/util/Iterator.html" title="interface in java.util">Iterator</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; descendingIterator()</pre><div class="block">Returns an iterator over the elements in this set in descending order.           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#descendingIterator--">descendingIterator</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>an iterator over the elements in this set in descending order          </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:descendingIterator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:descendingSet-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:descendingSet--"/><a name="descendingSet--"/><ul class="blockList"><li class="blockList"><h4>descendingSet</h4><pre>public <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; descendingSet()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#descendingSet--">NavigableSet</a></code>   </span> </div><div class="block">Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. If either set is modified while an iteration over either set is in progress (except through the iterator's own <code>remove</code> operation), the results of the iteration are undefined.<p>The returned set has an ordering equivalent to <tt><a href="../../java/util/Collections.html#reverseOrder-java.util.Comparator-"><code>Collections.reverseOrder</code></a>(comparator())</tt>. The expression <code>s.descendingSet().descendingSet()</code> returns a view of <code>s</code> essentially equivalent to <code>s</code>.                    </p>                                                            </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#descendingSet--">descendingSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a reverse order view of this set      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:descendingSet--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:size-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:size--"/><a name="size--"/><ul class="blockList"><li class="blockList"><h4>size</h4><pre>public int size()</pre><div class="block">Returns the number of elements in this set (its cardinality).         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#size--">size</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#size--">size</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#size--">size</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the number of elements in this set (its cardinality)        </dd>    </dl></li></ul> <a end_ctx_id="method:size--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isEmpty-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isEmpty--"/><a name="isEmpty--"/><ul class="blockList"><li class="blockList"><h4>isEmpty</h4><pre>public boolean isEmpty()</pre><div class="block">Returns <code>true</code> if this set contains no elements.       </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#isEmpty--">isEmpty</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#isEmpty--">isEmpty</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#isEmpty--">isEmpty</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this set contains no elements       </dd>    </dl></li></ul> <a end_ctx_id="method:isEmpty--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:contains-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:contains-java.lang.Object-"/><a name="contains-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>contains</h4><pre>public boolean contains(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Returns <code>true</code> if this set contains the specified element. More formally, returns <code>true</code> if and only if this set contains an element <code>e</code> such that <tt>(o==null ? e==null : o.equals(e))</tt>.                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#contains-java.lang.Object-">contains</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#contains-java.lang.Object-">contains</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - object to be checked for containment in this set           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this set contains the specified element        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified object cannot be compared with the elements currently in the set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd>      </dl></li></ul> <a name="add-java.lang.Object-"/><a end_ctx_id="method:contains-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:add-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:add-E-"/><a name="add-E-"/><ul class="blockList"><li class="blockList"><h4>add</h4><pre>public boolean add(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> e)</pre><div class="block">Adds the specified element to this set if it is not already present. More formally, adds the specified element <code>e</code> to this set if the set contains no element <code>e2</code> such that <tt>(e==null ? e2==null : e.equals(e2))</tt>. If this set already contains the element, the call leaves the set unchanged and returns <code>false</code>.                                                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#add-E-">add</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#add-E-">add</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - element to be added to this set         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this set did not already contain the specified element           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified object cannot be compared with the elements currently in this set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd>      </dl></li></ul> <a end_ctx_id="method:add-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:remove-java.lang.Object- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:remove-java.lang.Object-"/><a name="remove-java.lang.Object-"/><ul class="blockList"><li class="blockList"><h4>remove</h4><pre>public boolean remove(<a href="../../java/lang/Object.html" title="class in java.lang">Object</a> o)</pre><div class="block">Removes the specified element from this set if it is present. More formally, removes an element <code>e</code> such that <tt>(o==null ? e==null : o.equals(e))</tt>, if this set contains such an element. Returns <code>true</code> if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)                                                         </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#remove-java.lang.Object-">remove</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#remove-java.lang.Object-">remove</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>o</code> - object to be removed from this set, if present           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this set contained the specified element        </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified object cannot be compared with the elements currently in this set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd>      </dl></li></ul> <a end_ctx_id="method:remove-java.lang.Object-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clear-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clear--"/><a name="clear--"/><ul class="blockList"><li class="blockList"><h4>clear</h4><pre>public void clear()</pre><div class="block">Removes all of the elements from this set. The set will be empty after this call returns.                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#clear--">clear</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#clear--">clear</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#clear--">clear</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd>   </dl></li></ul> <a end_ctx_id="method:clear--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:addAll-java.util.Collection- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:addAll-java.util.Collection-"/><a name="addAll-java.util.Collection-"/><ul class="blockList"><li class="blockList"><h4>addAll</h4><pre>public boolean addAll(<a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;? extends <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; c)</pre><div class="block">Adds all of the elements in the specified collection to this set.           </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Collection.html#addAll-java.util.Collection-">addAll</a></code> in interface <code><a href="../../java/util/Collection.html" title="interface in java.util">Collection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/Set.html#addAll-java.util.Collection-">addAll</a></code> in interface <code><a href="../../java/util/Set.html" title="interface in java.util">Set</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/util/AbstractCollection.html#addAll-java.util.Collection-">addAll</a></code> in class <code><a href="../../java/util/AbstractCollection.html" title="class in java.util">AbstractCollection</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>c</code> - collection containing elements to be added to this set           </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd> <code>true</code> if this set changed as a result of the call           </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the elements provided cannot be compared with the elements currently in the set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified collection is null or if any element is null and this set uses natural ordering, or its comparator does not permit null elements                            </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/util/AbstractCollection.html#add-E-"><code>AbstractCollection.add(Object)</code></a> </dd>       </dl></li></ul> <a name="subSet-java.lang.Object-boolean-java.lang.Object-boolean-"/><a end_ctx_id="method:addAll-java.util.Collection-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:subSet-E-boolean-E-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:subSet-E-boolean-E-boolean-"/><a name="subSet-E-boolean-E-boolean-"/><ul class="blockList"><li class="blockList"><h4>subSet</h4><pre>public <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; subSet(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> fromElement,
                              boolean fromInclusive,
                              <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> toElement,
                              boolean toInclusive)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#subSet-E-boolean-E-boolean-">NavigableSet</a></code>   </span> </div><div class="block">Returns a view of the portion of this set whose elements range from <code>fromElement</code> to <code>toElement</code>. If <code>fromElement</code> and <code>toElement</code> are equal, the returned set is empty unless <code>fromInclusive</code> and <code>toInclusive</code> are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports.<p>The returned set will throw an <code>IllegalArgumentException</code> on an attempt to insert an element outside its range.                </p>                                                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#subSet-E-boolean-E-boolean-">subSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromElement</code> - low endpoint of the returned set        </dd><dd> <code>fromInclusive</code> - <code>true</code> if the low endpoint is to be included in the returned view               </dd><dd> <code>toElement</code> - high endpoint of the returned set        </dd><dd> <code>toInclusive</code> - <code>true</code> if the high endpoint is to be included in the returned view               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the portion of this set whose elements range from <code>fromElement</code>, inclusive, to <code>toElement</code>, exclusive                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if <code>fromElement</code> and <code>toElement</code> cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if <code>fromElement</code> or <code>toElement</code> cannot be compared to elements currently in the set.                                                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>fromElement</code> or <code>toElement</code> is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>fromElement</code> is greater than <code>toElement</code>; or if this set itself has a restricted range, and <code>fromElement</code> or <code>toElement</code> lies outside the bounds of the range.                            </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a name="headSet-java.lang.Object-boolean-"/><a end_ctx_id="method:subSet-E-boolean-E-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:headSet-E-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:headSet-E-boolean-"/><a name="headSet-E-boolean-"/><ul class="blockList"><li class="blockList"><h4>headSet</h4><pre>public <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; headSet(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> toElement,
                               boolean inclusive)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#headSet-E-boolean-">NavigableSet</a></code>   </span> </div><div class="block">Returns a view of the portion of this set whose elements are less than (or equal to, if <code>inclusive</code> is true) <code>toElement</code>. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports.<p>The returned set will throw an <code>IllegalArgumentException</code> on an attempt to insert an element outside its range.                </p>                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#headSet-E-boolean-">headSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>toElement</code> - high endpoint of the returned set        </dd><dd> <code>inclusive</code> - <code>true</code> if the high endpoint is to be included in the returned view               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the portion of this set whose elements are less than (or equal to, if <code>inclusive</code> is true) <code>toElement</code>                    </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if <code>toElement</code> is not compatible with this set's comparator (or, if the set has no comparator, if <code>toElement</code> does not implement <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>). Implementations may, but are not required to, throw this exception if <code>toElement</code> cannot be compared to elements currently in the set.                                             </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>toElement</code> is null and this set uses natural ordering, or its comparator does not permit null elements                    </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if this set itself has a restricted range, and <code>toElement</code> lies outside the bounds of the range                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a name="tailSet-java.lang.Object-boolean-"/><a end_ctx_id="method:headSet-E-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tailSet-E-boolean- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tailSet-E-boolean-"/><a name="tailSet-E-boolean-"/><ul class="blockList"><li class="blockList"><h4>tailSet</h4><pre>public <a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; tailSet(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> fromElement,
                               boolean inclusive)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#tailSet-E-boolean-">NavigableSet</a></code>   </span> </div><div class="block">Returns a view of the portion of this set whose elements are greater than (or equal to, if <code>inclusive</code> is true) <code>fromElement</code>. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports.<p>The returned set will throw an <code>IllegalArgumentException</code> on an attempt to insert an element outside its range.                </p>                                                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#tailSet-E-boolean-">tailSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromElement</code> - low endpoint of the returned set        </dd><dd> <code>inclusive</code> - <code>true</code> if the low endpoint is to be included in the returned view               </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the portion of this set whose elements are greater than or equal to <code>fromElement</code>                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if <code>fromElement</code> is not compatible with this set's comparator (or, if the set has no comparator, if <code>fromElement</code> does not implement <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>). Implementations may, but are not required to, throw this exception if <code>fromElement</code> cannot be compared to elements currently in the set.                                             </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>fromElement</code> is null and this set uses natural ordering, or its comparator does not permit null elements                    </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if this set itself has a restricted range, and <code>fromElement</code> lies outside the bounds of the range                   </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a name="subSet-java.lang.Object-java.lang.Object-"/><a end_ctx_id="method:tailSet-E-boolean-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:subSet-E-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:subSet-E-E-"/><a name="subSet-E-E-"/><ul class="blockList"><li class="blockList"><h4>subSet</h4><pre>public <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; subSet(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> fromElement,
                           <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> toElement)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#subSet-E-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns a view of the portion of this set whose elements range from <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>, exclusive. (If <tt>fromElement</tt> and <tt>toElement</tt> are equal, the returned set is empty.) The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports.<p>The returned set will throw an <tt>IllegalArgumentException</tt> on an attempt to insert an element outside its range.                </p><p>Equivalent to <code>subSet(fromElement, true, toElement, false)   </code>.  </p>                                                             </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#subSet-E-E-">subSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#subSet-E-E-">subSet</a></code> in interface <code><a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromElement</code> - low endpoint (inclusive) of the returned set         </dd><dd> <code>toElement</code> - high endpoint (exclusive) of the returned set         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the portion of this set whose elements range from <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>, exclusive                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if <tt>fromElement</tt> and <tt>toElement</tt> cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if <tt>fromElement</tt> or <tt>toElement</tt> cannot be compared to elements currently in the set.                                                 </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>fromElement</code> or <code>toElement</code> is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <tt>fromElement</tt> is greater than <tt>toElement</tt>; or if this set itself has a restricted range, and <tt>fromElement</tt> or <tt>toElement</tt> lies outside the bounds of the range                            </dd>     </dl></li></ul> <a name="headSet-java.lang.Object-"/><a end_ctx_id="method:subSet-E-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:headSet-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:headSet-E-"/><a name="headSet-E-"/><ul class="blockList"><li class="blockList"><h4>headSet</h4><pre>public <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; headSet(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> toElement)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#headSet-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns a view of the portion of this set whose elements are strictly less than <tt>toElement</tt>. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports.<p>The returned set will throw an <tt>IllegalArgumentException</tt> on an attempt to insert an element outside its range.                </p><p>Equivalent to <code>headSet(toElement, false) </code>.  </p>                                                </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#headSet-E-">headSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#headSet-E-">headSet</a></code> in interface <code><a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>toElement</code> - high endpoint (exclusive) of the returned set         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the portion of this set whose elements are strictly less than <tt>toElement</tt>              </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if <tt>toElement</tt> is not compatible with this set's comparator (or, if the set has no comparator, if <tt>toElement</tt> does not implement <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>). Implementations may, but are not required to, throw this exception if <tt>toElement</tt> cannot be compared to elements currently in the set.                                             </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>toElement</code> is null and this set uses natural ordering, or its comparator does not permit null elements                    </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if this set itself has a restricted range, and <tt>toElement</tt> lies outside the bounds of the range                   </dd>     </dl></li></ul> <a name="tailSet-java.lang.Object-"/><a end_ctx_id="method:headSet-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:tailSet-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:tailSet-E-"/><a name="tailSet-E-"/><ul class="blockList"><li class="blockList"><h4>tailSet</h4><pre>public <a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; tailSet(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> fromElement)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#tailSet-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns a view of the portion of this set whose elements are greater than or equal to <tt>fromElement</tt>. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports.<p>The returned set will throw an <tt>IllegalArgumentException</tt> on an attempt to insert an element outside its range.                </p><p>Equivalent to <code>tailSet(fromElement, true) </code>.  </p>                                                  </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#tailSet-E-">tailSet</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#tailSet-E-">tailSet</a></code> in interface <code><a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>fromElement</code> - low endpoint (inclusive) of the returned set         </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a view of the portion of this set whose elements are greater than or equal to <tt>fromElement</tt>                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if <tt>fromElement</tt> is not compatible with this set's comparator (or, if the set has no comparator, if <tt>fromElement</tt> does not implement <a href="../../java/lang/Comparable.html" title="interface in java.lang"><code>Comparable</code></a>). Implementations may, but are not required to, throw this exception if <tt>fromElement</tt> cannot be compared to elements currently in the set.                                             </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if <code>fromElement</code> is null and this set uses natural ordering, or its comparator does not permit null elements                    </dd><dd> <code><a href="../../java/lang/IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if this set itself has a restricted range, and <tt>fromElement</tt> lies outside the bounds of the range                   </dd>     </dl></li></ul> <a end_ctx_id="method:tailSet-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:comparator-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:comparator--"/><a name="comparator--"/><ul class="blockList"><li class="blockList"><h4>comparator</h4><pre>public <a href="../../java/util/Comparator.html" title="interface in java.util">Comparator</a>&lt;? super <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt; comparator()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/SortedSet.html#comparator--">SortedSet</a></code>   </span> </div><div class="block">Returns the comparator used to order the elements in this set, or <tt>null</tt> if this set uses the <a href="../../java/lang/Comparable.html" title="interface in java.lang">natural ordering </a> of its elements.                     </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#comparator--">comparator</a></code> in interface <code><a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the comparator used to order the elements in this set, or <tt>null</tt> if this set uses the natural ordering of its elements                     </dd>  </dl></li></ul> <a end_ctx_id="method:comparator--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:first-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:first--"/><a name="first--"/><ul class="blockList"><li class="blockList"><h4>first</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> first()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/SortedSet.html#first--">SortedSet</a></code>   </span> </div><div class="block">Returns the first (lowest) element currently in this set.        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#first--">first</a></code> in interface <code><a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the first (lowest) element currently in this set       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this set is empty       </dd>   </dl></li></ul> <a end_ctx_id="method:first--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:last-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:last--"/><a name="last--"/><ul class="blockList"><li class="blockList"><h4>last</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> last()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/SortedSet.html#last--">SortedSet</a></code>   </span> </div><div class="block">Returns the last (highest) element currently in this set.        </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#last--">last</a></code> in interface <code><a href="../../java/util/SortedSet.html" title="interface in java.util">SortedSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the last (highest) element currently in this set       </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/util/NoSuchElementException.html" title="class in java.util">NoSuchElementException</a></code> - if this set is empty       </dd>   </dl></li></ul> <a name="lower-java.lang.Object-"/><a end_ctx_id="method:last--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:lower-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:lower-E-"/><a name="lower-E-"/><ul class="blockList"><li class="blockList"><h4>lower</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> lower(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> e)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#lower-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns the greatest element in this set strictly less than the given element, or <code>null</code> if there is no such element.                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#lower-E-">lower</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the value to match      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the greatest element less than <code>e</code>, or <code>null</code> if there is no such element             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified element cannot be compared with the elements currently in the set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a name="floor-java.lang.Object-"/><a end_ctx_id="method:lower-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:floor-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:floor-E-"/><a name="floor-E-"/><ul class="blockList"><li class="blockList"><h4>floor</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> floor(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> e)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#floor-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns the greatest element in this set less than or equal to the given element, or <code>null</code> if there is no such element.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#floor-E-">floor</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the value to match      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the greatest element less than or equal to <code>e</code>, or <code>null</code> if there is no such element                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified element cannot be compared with the elements currently in the set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a name="ceiling-java.lang.Object-"/><a end_ctx_id="method:floor-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ceiling-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ceiling-E-"/><a name="ceiling-E-"/><ul class="blockList"><li class="blockList"><h4>ceiling</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> ceiling(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> e)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#ceiling-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns the least element in this set greater than or equal to the given element, or <code>null</code> if there is no such element.                      </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#ceiling-E-">ceiling</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the value to match      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the least element greater than or equal to <code>e</code>, or <code>null</code> if there is no such element                </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified element cannot be compared with the elements currently in the set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a name="higher-java.lang.Object-"/><a end_ctx_id="method:ceiling-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:higher-E- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:higher-E-"/><a name="higher-E-"/><ul class="blockList"><li class="blockList"><h4>higher</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> higher(<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> e)</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#higher-E-">NavigableSet</a></code>   </span> </div><div class="block">Returns the least element in this set strictly greater than the given element, or <code>null</code> if there is no such element.                    </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#higher-E-">higher</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="paramLabel">Parameters:</span>   </dt><dd> <code>e</code> - the value to match      </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the least element greater than <code>e</code>, or <code>null</code> if there is no such element             </dd> <dt> <span class="throwsLabel">Throws:</span>   </dt><dd> <code><a href="../../java/lang/ClassCastException.html" title="class in java.lang">ClassCastException</a></code> - if the specified element cannot be compared with the elements currently in the set                </dd><dd> <code><a href="../../java/lang/NullPointerException.html" title="class in java.lang">NullPointerException</a></code> - if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements                      </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>     </dl></li></ul> <a end_ctx_id="method:higher-E-"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollFirst-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollFirst--"/><a name="pollFirst--"/><ul class="blockList"><li class="blockList"><h4>pollFirst</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> pollFirst()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#pollFirst--">NavigableSet</a></code>   </span> </div><div class="block">Retrieves and removes the first (lowest) element, or returns <code>null</code> if this set is empty.              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#pollFirst--">pollFirst</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the first element, or <code>null</code> if this set is empty         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:pollFirst--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:pollLast-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:pollLast--"/><a name="pollLast--"/><ul class="blockList"><li class="blockList"><h4>pollLast</h4><pre>public <a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a> pollLast()</pre><div class="block"> <span class="descfrmTypeLabel">Description copied from interface: <code><a href="../../java/util/NavigableSet.html#pollLast--">NavigableSet</a></code>   </span> </div><div class="block">Retrieves and removes the last (highest) element, or returns <code>null</code> if this set is empty.              </div><dl> <dt> <span class="overrideSpecifyLabel">Specified by: </span>   </dt><dd> <code><a href="../../java/util/NavigableSet.html#pollLast--">pollLast</a></code> in interface <code><a href="../../java/util/NavigableSet.html" title="interface in java.util">NavigableSet</a>&lt;<a href="../../java/util/TreeSet.html" title="type parameter in TreeSet">E</a>&gt;</code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>the last element, or <code>null</code> if this set is empty         </dd> <dt> <span class="simpleTagLabel">Since:</span>   </dt><dd>1.6</dd>   </dl></li></ul> <a end_ctx_id="method:pollLast--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:clone-- [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:clone--"/><a name="clone--"/><ul class="blockList"><li class="blockList"><h4>clone</h4><pre>public <a href="../../java/lang/Object.html" title="class in java.lang">Object</a> clone()</pre><div class="block">Returns a shallow copy of this <code>TreeSet</code> instance. (The elements themselves are not cloned.)             </div><dl> <dt> <span class="overrideSpecifyLabel">Overrides:</span>   </dt><dd> <code><a href="../../java/lang/Object.html#clone--">clone</a></code> in class <code><a href="../../java/lang/Object.html" title="class in java.lang">Object</a></code>  </dd> <dt> <span class="returnLabel">Returns:</span>   </dt><dd>a shallow copy of this set     </dd> <dt> <span class="seeLabel">See Also: </span>   </dt><dd> <a href="../../java/lang/Cloneable.html" title="interface in java.lang"><code>Cloneable</code></a> </dd>   </dl></li></ul> <a end_ctx_id="method:clone--"/>  </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:spliterator-- [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:spliterator--"><span class="diff-html-added"/></a><a name="spliterator--"/><ul class="blockListLast"><li class="blockList"><h4><span class="diff-html-added">spliterator</span></h4><pre><span class="diff-html-added">public </span><a href="../../java/util/Spliterator.html" title="interface in java.util"><span class="diff-html-added">Spliterator</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/TreeSet.html" title="type parameter in TreeSet"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt; spliterator()</span></pre><div class="block"><span class="diff-html-added">Creates</span> <span class="diff-html-added">a</span> <em><a href="Spliterator.html#binding"><span class="diff-html-added">late-binding</span></a></em> <span class="diff-html-added">and</span> <em><span class="diff-html-added">fail-fast</span></em><a href="../../java/util/Spliterator.html" title="interface in java.util"><code><span class="diff-html-added">Spliterator</span></code></a> <span class="diff-html-added">over</span> <span class="diff-html-added">the</span> <span class="diff-html-added">elements</span> <span class="diff-html-added">in</span> <span class="diff-html-added">this</span> <span class="diff-html-added">set.</span><p><span class="diff-html-added">The</span> <code><span class="diff-html-added">Spliterator</span></code> <span class="diff-html-added">reports</span> <a href="../../java/util/Spliterator.html#SIZED"><code><span class="diff-html-added">Spliterator.SIZED</span></code></a><span class="diff-html-added">,</span> <a href="../../java/util/Spliterator.html#DISTINCT"><code><span class="diff-html-added">Spliterator.DISTINCT</span></code></a><span class="diff-html-added">,</span> <a href="../../java/util/Spliterator.html#SORTED"><code><span class="diff-html-added">Spliterator.SORTED</span></code></a><span class="diff-html-added">,</span> <span class="diff-html-added">and</span> <a href="../../java/util/Spliterator.html#ORDERED"><code><span class="diff-html-added">Spliterator.ORDERED</span></code></a><span class="diff-html-added">.</span> <span class="diff-html-added">Overriding</span> <span class="diff-html-added">implementations</span> <span class="diff-html-added">should</span> <span class="diff-html-added">document</span> <span class="diff-html-added">the</span> <span class="diff-html-added">reporting</span> <span class="diff-html-added">of</span> <span class="diff-html-added">additional</span> <span class="diff-html-added">characteristic</span> <span class="diff-html-added">values.</span>                 </p><p><span class="diff-html-added">The</span> <span class="diff-html-added">spliterator's</span> <span class="diff-html-added">comparator</span> <span class="diff-html-added">(see</span> <a href="../../java/util/Spliterator.html#getComparator--"><code><span class="diff-html-added">Spliterator.getComparator()</span></code></a><span class="diff-html-added">)</span> <span class="diff-html-added">is</span> <code><span class="diff-html-added">null</span></code> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">tree</span> <span class="diff-html-added">set's</span> <span class="diff-html-added">comparator</span> <span class="diff-html-added">(see</span> <a href="../../java/util/TreeSet.html#comparator--"><code><span class="diff-html-added">comparator()</span></code></a><span class="diff-html-added">)</span> <span class="diff-html-added">is</span> <code><span class="diff-html-added">null</span></code><span class="diff-html-added">.</span> <span class="diff-html-added">Otherwise,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">spliterator's</span> <span class="diff-html-added">comparator</span> <span class="diff-html-added">is</span> <span class="diff-html-added">the</span> <span class="diff-html-added">same</span> <span class="diff-html-added">as</span> <span class="diff-html-added">or</span> <span class="diff-html-added">imposes</span> <span class="diff-html-added">the</span> <span class="diff-html-added">same</span> <span class="diff-html-added">total</span> <span class="diff-html-added">ordering</span> <span class="diff-html-added">as</span> <span class="diff-html-added">the</span> <span class="diff-html-added">tree</span> <span class="diff-html-added">set's</span> <span class="diff-html-added">comparator.</span>                                  </p>          </div><dl> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/lang/Iterable.html#spliterator--"><span class="diff-html-added">spliterator</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/lang/Iterable.html" title="interface in java.lang"><span class="diff-html-added">Iterable</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/TreeSet.html" title="type parameter in TreeSet"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/util/Collection.html#spliterator--"><span class="diff-html-added">spliterator</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/util/Collection.html" title="interface in java.util"><span class="diff-html-added">Collection</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/TreeSet.html" title="type parameter in TreeSet"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/util/Set.html#spliterator--"><span class="diff-html-added">spliterator</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/util/Set.html" title="interface in java.util"><span class="diff-html-added">Set</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/TreeSet.html" title="type parameter in TreeSet"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="overrideSpecifyLabel"><span class="diff-html-added">Specified</span> <span class="diff-html-added">by:</span> </span>   </dt><dd> <code><a href="../../java/util/SortedSet.html#spliterator--"><span class="diff-html-added">spliterator</span></a></code><span class="diff-html-added"> in</span> <span class="diff-html-added">interface </span><code><a href="../../java/util/SortedSet.html" title="interface in java.util"><span class="diff-html-added">SortedSet</span></a><span class="diff-html-added">&lt;</span><a href="../../java/util/TreeSet.html" title="type parameter in TreeSet"><span class="diff-html-added">E</span></a><span class="diff-html-added">&gt;</span></code>  </dd> <dt> <span class="returnLabel"><span class="diff-html-added">Returns:</span></span>   </dt><dd><span class="diff-html-added">a</span> <code><span class="diff-html-added">Spliterator</span></code> <span class="diff-html-added">over</span> <span class="diff-html-added">the</span> <span class="diff-html-added">elements</span> <span class="diff-html-added">in</span> <span class="diff-html-added">this</span> <span class="diff-html-added">set</span>       </dd> <dt> <span class="simpleTagLabel"><span class="diff-html-added">Since:</span></span>   </dt><dd><span class="diff-html-added">1.8</span></dd>      </dl></li></ul> <a end_ctx_id="method:spliterator--"><span class="diff-html-added"/></a>  </td></tr></table></td></tr></table></diff></diffreport>